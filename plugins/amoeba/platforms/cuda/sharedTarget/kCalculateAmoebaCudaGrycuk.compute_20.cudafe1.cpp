# 1 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//kCalculateAmoebaCudaGrycuk.cu"
# 61 "/usr/local/cuda-5.0/include/device_types.h"
#if 0
# 61
enum cudaRoundMode { 
# 63
cudaRoundNearest, 
# 64
cudaRoundZero, 
# 65
cudaRoundPosInf, 
# 66
cudaRoundMinInf
# 67
}; 
#endif
# 149 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h" 3
typedef long ptrdiff_t; 
# 211 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h" 3
typedef unsigned long size_t; 
#include "crt/host_runtime.h"
# 123 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
# 123
enum cudaError { 
# 130
cudaSuccess, 
# 136
cudaErrorMissingConfiguration, 
# 142
cudaErrorMemoryAllocation, 
# 148
cudaErrorInitializationError, 
# 158 "/usr/local/cuda-5.0/include/driver_types.h"
cudaErrorLaunchFailure, 
# 167 "/usr/local/cuda-5.0/include/driver_types.h"
cudaErrorPriorLaunchFailure, 
# 177 "/usr/local/cuda-5.0/include/driver_types.h"
cudaErrorLaunchTimeout, 
# 186 "/usr/local/cuda-5.0/include/driver_types.h"
cudaErrorLaunchOutOfResources, 
# 192
cudaErrorInvalidDeviceFunction, 
# 201 "/usr/local/cuda-5.0/include/driver_types.h"
cudaErrorInvalidConfiguration, 
# 207
cudaErrorInvalidDevice, 
# 213
cudaErrorInvalidValue, 
# 219
cudaErrorInvalidPitchValue, 
# 225
cudaErrorInvalidSymbol, 
# 230
cudaErrorMapBufferObjectFailed, 
# 235
cudaErrorUnmapBufferObjectFailed, 
# 241
cudaErrorInvalidHostPointer, 
# 247
cudaErrorInvalidDevicePointer, 
# 253
cudaErrorInvalidTexture, 
# 259
cudaErrorInvalidTextureBinding, 
# 266
cudaErrorInvalidChannelDescriptor, 
# 272
cudaErrorInvalidMemcpyDirection, 
# 282 "/usr/local/cuda-5.0/include/driver_types.h"
cudaErrorAddressOfConstant, 
# 291 "/usr/local/cuda-5.0/include/driver_types.h"
cudaErrorTextureFetchFailed, 
# 300 "/usr/local/cuda-5.0/include/driver_types.h"
cudaErrorTextureNotBound, 
# 309 "/usr/local/cuda-5.0/include/driver_types.h"
cudaErrorSynchronizationError, 
# 315
cudaErrorInvalidFilterSetting, 
# 321
cudaErrorInvalidNormSetting, 
# 329
cudaErrorMixedDeviceExecution, 
# 336
cudaErrorCudartUnloading, 
# 341
cudaErrorUnknown, 
# 349
cudaErrorNotYetImplemented, 
# 358 "/usr/local/cuda-5.0/include/driver_types.h"
cudaErrorMemoryValueTooLarge, 
# 365
cudaErrorInvalidResourceHandle, 
# 373
cudaErrorNotReady, 
# 380
cudaErrorInsufficientDriver, 
# 393 "/usr/local/cuda-5.0/include/driver_types.h"
cudaErrorSetOnActiveProcess, 
# 399
cudaErrorInvalidSurface, 
# 405
cudaErrorNoDevice, 
# 411
cudaErrorECCUncorrectable, 
# 416
cudaErrorSharedObjectSymbolNotFound, 
# 421
cudaErrorSharedObjectInitFailed, 
# 427
cudaErrorUnsupportedLimit, 
# 433
cudaErrorDuplicateVariableName, 
# 439
cudaErrorDuplicateTextureName, 
# 445
cudaErrorDuplicateSurfaceName, 
# 455 "/usr/local/cuda-5.0/include/driver_types.h"
cudaErrorDevicesUnavailable, 
# 460
cudaErrorInvalidKernelImage, 
# 468
cudaErrorNoKernelImageForDevice, 
# 481 "/usr/local/cuda-5.0/include/driver_types.h"
cudaErrorIncompatibleDriverContext, 
# 488
cudaErrorPeerAccessAlreadyEnabled, 
# 495
cudaErrorPeerAccessNotEnabled, 
# 501
cudaErrorDeviceAlreadyInUse = 54, 
# 508
cudaErrorProfilerDisabled, 
# 516
cudaErrorProfilerNotInitialized, 
# 523
cudaErrorProfilerAlreadyStarted, 
# 530
cudaErrorProfilerAlreadyStopped, 
# 538
cudaErrorAssert, 
# 545
cudaErrorTooManyPeers, 
# 551
cudaErrorHostMemoryAlreadyRegistered, 
# 557
cudaErrorHostMemoryNotRegistered, 
# 562
cudaErrorOperatingSystem, 
# 568
cudaErrorPeerAccessUnsupported, 
# 575
cudaErrorLaunchMaxDepthExceeded, 
# 583
cudaErrorLaunchFileScopedTex, 
# 591
cudaErrorLaunchFileScopedSurf, 
# 606 "/usr/local/cuda-5.0/include/driver_types.h"
cudaErrorSyncDepthExceeded, 
# 618 "/usr/local/cuda-5.0/include/driver_types.h"
cudaErrorLaunchPendingCountExceeded, 
# 623
cudaErrorNotPermitted, 
# 629
cudaErrorNotSupported, 
# 634
cudaErrorStartupFailure = 127, 
# 642
cudaErrorApiFailureBase = 10000
# 643
}; 
#endif
# 648 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
# 648
enum cudaChannelFormatKind { 
# 650
cudaChannelFormatKindSigned, 
# 651
cudaChannelFormatKindUnsigned, 
# 652
cudaChannelFormatKindFloat, 
# 653
cudaChannelFormatKindNone
# 654
}; 
#endif
# 659 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
# 659
struct cudaChannelFormatDesc { 
# 661
int x; 
# 662
int y; 
# 663
int z; 
# 664
int w; 
# 665
cudaChannelFormatKind f; 
# 666
}; 
#endif
# 671 "/usr/local/cuda-5.0/include/driver_types.h"
typedef struct cudaArray *cudaArray_t; 
# 676
typedef const cudaArray *cudaArray_const_t; 
# 678
struct cudaArray; 
# 683
typedef struct cudaMipmappedArray *cudaMipmappedArray_t; 
# 688
typedef const cudaMipmappedArray *cudaMipmappedArray_const_t; 
# 690
struct cudaMipmappedArray; 
# 695
#if 0
# 695
enum cudaMemoryType { 
# 697
cudaMemoryTypeHost = 1, 
# 698
cudaMemoryTypeDevice
# 699
}; 
#endif
# 704 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
# 704
enum cudaMemcpyKind { 
# 706
cudaMemcpyHostToHost, 
# 707
cudaMemcpyHostToDevice, 
# 708
cudaMemcpyDeviceToHost, 
# 709
cudaMemcpyDeviceToDevice, 
# 710
cudaMemcpyDefault
# 711
}; 
#endif
# 717 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
# 717
struct cudaPitchedPtr { 
# 719
void *ptr; 
# 720
size_t pitch; 
# 721
size_t xsize; 
# 722
size_t ysize; 
# 723
}; 
#endif
# 729 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
# 729
struct cudaExtent { 
# 731
size_t width; 
# 732
size_t height; 
# 733
size_t depth; 
# 734
}; 
#endif
# 740 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
# 740
struct cudaPos { 
# 742
size_t x; 
# 743
size_t y; 
# 744
size_t z; 
# 745
}; 
#endif
# 750 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
# 750
struct cudaMemcpy3DParms { 
# 752
cudaArray_t srcArray; 
# 753
cudaPos srcPos; 
# 754
cudaPitchedPtr srcPtr; 
# 756
cudaArray_t dstArray; 
# 757
cudaPos dstPos; 
# 758
cudaPitchedPtr dstPtr; 
# 760
cudaExtent extent; 
# 761
cudaMemcpyKind kind; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 762
}; 
#endif
# 767 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
# 767
struct cudaMemcpy3DPeerParms { 
# 769
cudaArray_t srcArray; 
# 770
cudaPos srcPos; 
# 771
cudaPitchedPtr srcPtr; 
# 772
int srcDevice; 
# 774
cudaArray_t dstArray; 
# 775
cudaPos dstPos; 
# 776
cudaPitchedPtr dstPtr; 
# 777
int dstDevice; 
# 779
cudaExtent extent; 
# 780
}; 
#endif
# 785 "/usr/local/cuda-5.0/include/driver_types.h"
struct cudaGraphicsResource; 
# 790
#if 0
# 790
enum cudaGraphicsRegisterFlags { 
# 792
cudaGraphicsRegisterFlagsNone, 
# 793
cudaGraphicsRegisterFlagsReadOnly, 
# 794
cudaGraphicsRegisterFlagsWriteDiscard, 
# 795
cudaGraphicsRegisterFlagsSurfaceLoadStore = 4, 
# 796
cudaGraphicsRegisterFlagsTextureGather = 8
# 797
}; 
#endif
# 802 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
# 802
enum cudaGraphicsMapFlags { 
# 804
cudaGraphicsMapFlagsNone, 
# 805
cudaGraphicsMapFlagsReadOnly, 
# 806
cudaGraphicsMapFlagsWriteDiscard
# 807
}; 
#endif
# 812 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
# 812
enum cudaGraphicsCubeFace { 
# 814
cudaGraphicsCubeFacePositiveX, 
# 815
cudaGraphicsCubeFaceNegativeX, 
# 816
cudaGraphicsCubeFacePositiveY, 
# 817
cudaGraphicsCubeFaceNegativeY, 
# 818
cudaGraphicsCubeFacePositiveZ, 
# 819
cudaGraphicsCubeFaceNegativeZ
# 820
}; 
#endif
# 825 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
# 825
enum cudaResourceType { 
# 827
cudaResourceTypeArray, 
# 828
cudaResourceTypeMipmappedArray, 
# 829
cudaResourceTypeLinear, 
# 830
cudaResourceTypePitch2D
# 831
}; 
#endif
# 836 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
# 836
enum cudaResourceViewFormat { 
# 838
cudaResViewFormatNone, 
# 839
cudaResViewFormatUnsignedChar1, 
# 840
cudaResViewFormatUnsignedChar2, 
# 841
cudaResViewFormatUnsignedChar4, 
# 842
cudaResViewFormatSignedChar1, 
# 843
cudaResViewFormatSignedChar2, 
# 844
cudaResViewFormatSignedChar4, 
# 845
cudaResViewFormatUnsignedShort1, 
# 846
cudaResViewFormatUnsignedShort2, 
# 847
cudaResViewFormatUnsignedShort4, 
# 848
cudaResViewFormatSignedShort1, 
# 849
cudaResViewFormatSignedShort2, 
# 850
cudaResViewFormatSignedShort4, 
# 851
cudaResViewFormatUnsignedInt1, 
# 852
cudaResViewFormatUnsignedInt2, 
# 853
cudaResViewFormatUnsignedInt4, 
# 854
cudaResViewFormatSignedInt1, 
# 855
cudaResViewFormatSignedInt2, 
# 856
cudaResViewFormatSignedInt4, 
# 857
cudaResViewFormatHalf1, 
# 858
cudaResViewFormatHalf2, 
# 859
cudaResViewFormatHalf4, 
# 860
cudaResViewFormatFloat1, 
# 861
cudaResViewFormatFloat2, 
# 862
cudaResViewFormatFloat4, 
# 863
cudaResViewFormatUnsignedBlockCompressed1, 
# 864
cudaResViewFormatUnsignedBlockCompressed2, 
# 865
cudaResViewFormatUnsignedBlockCompressed3, 
# 866
cudaResViewFormatUnsignedBlockCompressed4, 
# 867
cudaResViewFormatSignedBlockCompressed4, 
# 868
cudaResViewFormatUnsignedBlockCompressed5, 
# 869
cudaResViewFormatSignedBlockCompressed5, 
# 870
cudaResViewFormatUnsignedBlockCompressed6H, 
# 871
cudaResViewFormatSignedBlockCompressed6H, 
# 872
cudaResViewFormatUnsignedBlockCompressed7
# 873
}; 
#endif
# 878 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
# 878
struct cudaResourceDesc { 
# 879
cudaResourceType resType; 
# 881
union { 
# 882
struct { 
# 883
cudaArray_t array; 
# 884
} array; 
# 885
struct { 
# 886
cudaMipmappedArray_t mipmap; 
# 887
} mipmap; 
# 888
struct { 
# 889
void *devPtr; 
# 890
cudaChannelFormatDesc desc; 
# 891
size_t sizeInBytes; 
# 892
} linear; 
# 893
struct { 
# 894
void *devPtr; 
# 895
cudaChannelFormatDesc desc; 
# 896
size_t width; 
# 897
size_t height; 
# 898
size_t pitchInBytes; 
# 899
} pitch2D; 
# 900
} res; 
# 901
}; 
#endif
# 906 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
# 906
struct cudaResourceViewDesc { 
# 908
cudaResourceViewFormat format; 
# 909
size_t width; 
# 910
size_t height; 
# 911
size_t depth; 
# 912
unsigned firstMipmapLevel; 
# 913
unsigned lastMipmapLevel; 
# 914
unsigned firstLayer; 
# 915
unsigned lastLayer; 
# 916
}; 
#endif
# 921 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
# 921
struct cudaPointerAttributes { 
# 927
cudaMemoryType memoryType; 
# 938 "/usr/local/cuda-5.0/include/driver_types.h"
int device; 
# 944
void *devicePointer; 
# 950
void *hostPointer; 
# 951
}; 
#endif
# 956 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
# 956
struct cudaFuncAttributes { 
# 963
size_t sharedSizeBytes; 
# 969
size_t constSizeBytes; 
# 974
size_t localSizeBytes; 
# 981
int maxThreadsPerBlock; 
# 986
int numRegs; 
# 993
int ptxVersion; 
# 1000
int binaryVersion; 
# 1001
}; 
#endif
# 1006 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
# 1006
enum cudaFuncCache { 
# 1008
cudaFuncCachePreferNone, 
# 1009
cudaFuncCachePreferShared, 
# 1010
cudaFuncCachePreferL1, 
# 1011
cudaFuncCachePreferEqual
# 1012
}; 
#endif
# 1018 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
# 1018
enum cudaSharedMemConfig { 
# 1020
cudaSharedMemBankSizeDefault, 
# 1021
cudaSharedMemBankSizeFourByte, 
# 1022
cudaSharedMemBankSizeEightByte
# 1023
}; 
#endif
# 1028 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
# 1028
enum cudaComputeMode { 
# 1030
cudaComputeModeDefault, 
# 1031
cudaComputeModeExclusive, 
# 1032
cudaComputeModeProhibited, 
# 1033
cudaComputeModeExclusiveProcess
# 1034
}; 
#endif
# 1039 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
# 1039
enum cudaLimit { 
# 1041
cudaLimitStackSize, 
# 1042
cudaLimitPrintfFifoSize, 
# 1043
cudaLimitMallocHeapSize, 
# 1044
cudaLimitDevRuntimeSyncDepth, 
# 1045
cudaLimitDevRuntimePendingLaunchCount
# 1046
}; 
#endif
# 1051 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
# 1051
enum cudaOutputMode { 
# 1053
cudaKeyValuePair, 
# 1054
cudaCSV
# 1055
}; 
#endif
# 1060 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
# 1060
enum cudaDeviceAttr { 
# 1062
cudaDevAttrMaxThreadsPerBlock = 1, 
# 1063
cudaDevAttrMaxBlockDimX, 
# 1064
cudaDevAttrMaxBlockDimY, 
# 1065
cudaDevAttrMaxBlockDimZ, 
# 1066
cudaDevAttrMaxGridDimX, 
# 1067
cudaDevAttrMaxGridDimY, 
# 1068
cudaDevAttrMaxGridDimZ, 
# 1069
cudaDevAttrMaxSharedMemoryPerBlock, 
# 1070
cudaDevAttrTotalConstantMemory, 
# 1071
cudaDevAttrWarpSize, 
# 1072
cudaDevAttrMaxPitch, 
# 1073
cudaDevAttrMaxRegistersPerBlock, 
# 1074
cudaDevAttrClockRate, 
# 1075
cudaDevAttrTextureAlignment, 
# 1076
cudaDevAttrGpuOverlap, 
# 1077
cudaDevAttrMultiProcessorCount, 
# 1078
cudaDevAttrKernelExecTimeout, 
# 1079
cudaDevAttrIntegrated, 
# 1080
cudaDevAttrCanMapHostMemory, 
# 1081
cudaDevAttrComputeMode, 
# 1082
cudaDevAttrMaxTexture1DWidth, 
# 1083
cudaDevAttrMaxTexture2DWidth, 
# 1084
cudaDevAttrMaxTexture2DHeight, 
# 1085
cudaDevAttrMaxTexture3DWidth, 
# 1086
cudaDevAttrMaxTexture3DHeight, 
# 1087
cudaDevAttrMaxTexture3DDepth, 
# 1088
cudaDevAttrMaxTexture2DLayeredWidth, 
# 1089
cudaDevAttrMaxTexture2DLayeredHeight, 
# 1090
cudaDevAttrMaxTexture2DLayeredLayers, 
# 1091
cudaDevAttrSurfaceAlignment, 
# 1092
cudaDevAttrConcurrentKernels, 
# 1093
cudaDevAttrEccEnabled, 
# 1094
cudaDevAttrPciBusId, 
# 1095
cudaDevAttrPciDeviceId, 
# 1096
cudaDevAttrTccDriver, 
# 1097
cudaDevAttrMemoryClockRate, 
# 1098
cudaDevAttrGlobalMemoryBusWidth, 
# 1099
cudaDevAttrL2CacheSize, 
# 1100
cudaDevAttrMaxThreadsPerMultiProcessor, 
# 1101
cudaDevAttrAsyncEngineCount, 
# 1102
cudaDevAttrUnifiedAddressing, 
# 1103
cudaDevAttrMaxTexture1DLayeredWidth, 
# 1104
cudaDevAttrMaxTexture1DLayeredLayers, 
# 1105
cudaDevAttrMaxTexture2DGatherWidth = 45, 
# 1106
cudaDevAttrMaxTexture2DGatherHeight, 
# 1107
cudaDevAttrMaxTexture3DWidthAlt, 
# 1108
cudaDevAttrMaxTexture3DHeightAlt, 
# 1109
cudaDevAttrMaxTexture3DDepthAlt, 
# 1110
cudaDevAttrPciDomainId, 
# 1111
cudaDevAttrTexturePitchAlignment, 
# 1112
cudaDevAttrMaxTextureCubemapWidth, 
# 1113
cudaDevAttrMaxTextureCubemapLayeredWidth, 
# 1114
cudaDevAttrMaxTextureCubemapLayeredLayers, 
# 1115
cudaDevAttrMaxSurface1DWidth, 
# 1116
cudaDevAttrMaxSurface2DWidth, 
# 1117
cudaDevAttrMaxSurface2DHeight, 
# 1118
cudaDevAttrMaxSurface3DWidth, 
# 1119
cudaDevAttrMaxSurface3DHeight, 
# 1120
cudaDevAttrMaxSurface3DDepth, 
# 1121
cudaDevAttrMaxSurface1DLayeredWidth, 
# 1122
cudaDevAttrMaxSurface1DLayeredLayers, 
# 1123
cudaDevAttrMaxSurface2DLayeredWidth, 
# 1124
cudaDevAttrMaxSurface2DLayeredHeight, 
# 1125
cudaDevAttrMaxSurface2DLayeredLayers, 
# 1126
cudaDevAttrMaxSurfaceCubemapWidth, 
# 1127
cudaDevAttrMaxSurfaceCubemapLayeredWidth, 
# 1128
cudaDevAttrMaxSurfaceCubemapLayeredLayers, 
# 1129
cudaDevAttrMaxTexture1DLinearWidth, 
# 1130
cudaDevAttrMaxTexture2DLinearWidth, 
# 1131
cudaDevAttrMaxTexture2DLinearHeight, 
# 1132
cudaDevAttrMaxTexture2DLinearPitch, 
# 1133
cudaDevAttrMaxTexture2DMipmappedWidth, 
# 1134
cudaDevAttrMaxTexture2DMipmappedHeight, 
# 1135
cudaDevAttrComputeCapabilityMajor, 
# 1136
cudaDevAttrComputeCapabilityMinor, 
# 1137
cudaDevAttrMaxTexture1DMipmappedWidth
# 1138
}; 
#endif
# 1143 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
# 1143
struct cudaDeviceProp { 
# 1145
char name[256]; 
# 1146
size_t totalGlobalMem; 
# 1147
size_t sharedMemPerBlock; 
# 1148
int regsPerBlock; 
# 1149
int warpSize; 
# 1150
size_t memPitch; 
# 1151
int maxThreadsPerBlock; 
# 1152
int maxThreadsDim[3]; 
# 1153
int maxGridSize[3]; 
# 1154
int clockRate; 
# 1155
size_t totalConstMem; 
# 1156
int major; 
# 1157
int minor; 
# 1158
size_t textureAlignment; 
# 1159
size_t texturePitchAlignment; 
# 1160
int deviceOverlap; 
# 1161
int multiProcessorCount; 
# 1162
int kernelExecTimeoutEnabled; 
# 1163
int integrated; 
# 1164
int canMapHostMemory; 
# 1165
int computeMode; 
# 1166
int maxTexture1D; 
# 1167
int maxTexture1DMipmap; 
# 1168
int maxTexture1DLinear; 
# 1169
int maxTexture2D[2]; 
# 1170
int maxTexture2DMipmap[2]; 
# 1171
int maxTexture2DLinear[3]; 
# 1172
int maxTexture2DGather[2]; 
# 1173
int maxTexture3D[3]; 
# 1174
int maxTextureCubemap; 
# 1175
int maxTexture1DLayered[2]; 
# 1176
int maxTexture2DLayered[3]; 
# 1177
int maxTextureCubemapLayered[2]; 
# 1178
int maxSurface1D; 
# 1179
int maxSurface2D[2]; 
# 1180
int maxSurface3D[3]; 
# 1181
int maxSurface1DLayered[2]; 
# 1182
int maxSurface2DLayered[3]; 
# 1183
int maxSurfaceCubemap; 
# 1184
int maxSurfaceCubemapLayered[2]; 
# 1185
size_t surfaceAlignment; 
# 1186
int concurrentKernels; 
# 1187
int ECCEnabled; 
# 1188
int pciBusID; 
# 1189
int pciDeviceID; 
# 1190
int pciDomainID; 
# 1191
int tccDriver; 
# 1192
int asyncEngineCount; 
# 1193
int unifiedAddressing; 
# 1194
int memoryClockRate; 
# 1195
int memoryBusWidth; 
# 1196
int l2CacheSize; 
# 1197
int maxThreadsPerMultiProcessor; 
# 1198
}; 
#endif
# 1268 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
typedef 
# 1265
struct cudaIpcEventHandle_st { 
# 1267
char reserved[64]; 
# 1268
} cudaIpcEventHandle_t; 
#endif
# 1276 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
typedef 
# 1273
struct cudaIpcMemHandle_st { 
# 1275
char reserved[64]; 
# 1276
} cudaIpcMemHandle_t; 
#endif
# 1287 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
typedef cudaError 
# 1287
cudaError_t; 
#endif
# 1292 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
typedef struct CUstream_st *
# 1292
cudaStream_t; 
#endif
# 1297 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
typedef struct CUevent_st *
# 1297
cudaEvent_t; 
#endif
# 1302 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
typedef cudaGraphicsResource *
# 1302
cudaGraphicsResource_t; 
#endif
# 1307 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
typedef struct CUuuid_st 
# 1307
cudaUUID_t; 
#endif
# 1312 "/usr/local/cuda-5.0/include/driver_types.h"
#if 0
typedef cudaOutputMode 
# 1312
cudaOutputMode_t; 
#endif
# 84 "/usr/local/cuda-5.0/include/surface_types.h"
#if 0
# 84
enum cudaSurfaceBoundaryMode { 
# 86
cudaBoundaryModeZero, 
# 87
cudaBoundaryModeClamp, 
# 88
cudaBoundaryModeTrap
# 89
}; 
#endif
# 94 "/usr/local/cuda-5.0/include/surface_types.h"
#if 0
# 94
enum cudaSurfaceFormatMode { 
# 96
cudaFormatModeForced, 
# 97
cudaFormatModeAuto
# 98
}; 
#endif
# 103 "/usr/local/cuda-5.0/include/surface_types.h"
#if 0
# 103
struct surfaceReference { 
# 108
cudaChannelFormatDesc channelDesc; 
# 109
}; 
#endif
# 114 "/usr/local/cuda-5.0/include/surface_types.h"
#if 0
typedef unsigned long long 
# 114
cudaSurfaceObject_t; 
#endif
# 84 "/usr/local/cuda-5.0/include/texture_types.h"
#if 0
# 84
enum cudaTextureAddressMode { 
# 86
cudaAddressModeWrap, 
# 87
cudaAddressModeClamp, 
# 88
cudaAddressModeMirror, 
# 89
cudaAddressModeBorder
# 90
}; 
#endif
# 95 "/usr/local/cuda-5.0/include/texture_types.h"
#if 0
# 95
enum cudaTextureFilterMode { 
# 97
cudaFilterModePoint, 
# 98
cudaFilterModeLinear
# 99
}; 
#endif
# 104 "/usr/local/cuda-5.0/include/texture_types.h"
#if 0
# 104
enum cudaTextureReadMode { 
# 106
cudaReadModeElementType, 
# 107
cudaReadModeNormalizedFloat
# 108
}; 
#endif
# 113 "/usr/local/cuda-5.0/include/texture_types.h"
#if 0
# 113
struct textureReference { 
# 118
int normalized; 
# 122
cudaTextureFilterMode filterMode; 
# 126
cudaTextureAddressMode addressMode[3]; 
# 130
cudaChannelFormatDesc channelDesc; 
# 134
int sRGB; 
# 138
unsigned maxAnisotropy; 
# 142
cudaTextureFilterMode mipmapFilterMode; 
# 146
float mipmapLevelBias; 
# 150
float minMipmapLevelClamp; 
# 154
float maxMipmapLevelClamp; 
# 155
int __cudaReserved[15]; 
# 156
}; 
#endif
# 161 "/usr/local/cuda-5.0/include/texture_types.h"
#if 0
# 161
struct cudaTextureDesc { 
# 166
cudaTextureAddressMode addressMode[3]; 
# 170
cudaTextureFilterMode filterMode; 
# 174
cudaTextureReadMode readMode; 
# 178
int sRGB; 
# 182
int normalizedCoords; 
# 186
unsigned maxAnisotropy; 
# 190
cudaTextureFilterMode mipmapFilterMode; 
# 194
float mipmapLevelBias; 
# 198
float minMipmapLevelClamp; 
# 202
float maxMipmapLevelClamp; 
# 203
}; 
#endif
# 208 "/usr/local/cuda-5.0/include/texture_types.h"
#if 0
typedef unsigned long long 
# 208
cudaTextureObject_t; 
#endif
# 94 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 94
struct char1 { 
# 96
signed char x; 
# 97
}; 
#endif
# 99 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 99
struct uchar1 { 
# 101
unsigned char x; 
# 102
}; 
#endif
# 105 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 105
struct __attribute((aligned(2))) char2 { 
# 107
signed char x, y; 
# 108
}; 
#endif
# 110 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 110
struct __attribute((aligned(2))) uchar2 { 
# 112
unsigned char x, y; 
# 113
}; 
#endif
# 115 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 115
struct char3 { 
# 117
signed char x, y, z; 
# 118
}; 
#endif
# 120 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 120
struct uchar3 { 
# 122
unsigned char x, y, z; 
# 123
}; 
#endif
# 125 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 125
struct __attribute((aligned(4))) char4 { 
# 127
signed char x, y, z, w; 
# 128
}; 
#endif
# 130 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 130
struct __attribute((aligned(4))) uchar4 { 
# 132
unsigned char x, y, z, w; 
# 133
}; 
#endif
# 135 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 135
struct short1 { 
# 137
short x; 
# 138
}; 
#endif
# 140 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 140
struct ushort1 { 
# 142
unsigned short x; 
# 143
}; 
#endif
# 145 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 145
struct __attribute((aligned(4))) short2 { 
# 147
short x, y; 
# 148
}; 
#endif
# 150 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 150
struct __attribute((aligned(4))) ushort2 { 
# 152
unsigned short x, y; 
# 153
}; 
#endif
# 155 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 155
struct short3 { 
# 157
short x, y, z; 
# 158
}; 
#endif
# 160 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 160
struct ushort3 { 
# 162
unsigned short x, y, z; 
# 163
}; 
#endif
# 165 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 165
struct __attribute((aligned(8))) short4 { short x; short y; short z; short w; }; 
#endif
# 166 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 166
struct __attribute((aligned(8))) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; }; 
#endif
# 168 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 168
struct int1 { 
# 170
int x; 
# 171
}; 
#endif
# 173 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 173
struct uint1 { 
# 175
unsigned x; 
# 176
}; 
#endif
# 178 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 178
struct __attribute((aligned(8))) int2 { int x; int y; }; 
#endif
# 179 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 179
struct __attribute((aligned(8))) uint2 { unsigned x; unsigned y; }; 
#endif
# 181 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 181
struct int3 { 
# 183
int x, y, z; 
# 184
}; 
#endif
# 186 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 186
struct uint3 { 
# 188
unsigned x, y, z; 
# 189
}; 
#endif
# 191 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 191
struct __attribute((aligned(16))) int4 { 
# 193
int x, y, z, w; 
# 194
}; 
#endif
# 196 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 196
struct __attribute((aligned(16))) uint4 { 
# 198
unsigned x, y, z, w; 
# 199
}; 
#endif
# 201 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 201
struct long1 { 
# 203
long x; 
# 204
}; 
#endif
# 206 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 206
struct ulong1 { 
# 208
unsigned long x; 
# 209
}; 
#endif
# 216 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 216
struct __attribute((aligned((2) * sizeof(long)))) long2 { 
# 218
long x, y; 
# 219
}; 
#endif
# 221 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 221
struct __attribute((aligned((2) * sizeof(unsigned long)))) ulong2 { 
# 223
unsigned long x, y; 
# 224
}; 
#endif
# 228 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 228
struct long3 { 
# 230
long x, y, z; 
# 231
}; 
#endif
# 233 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 233
struct ulong3 { 
# 235
unsigned long x, y, z; 
# 236
}; 
#endif
# 238 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 238
struct __attribute((aligned(16))) long4 { 
# 240
long x, y, z, w; 
# 241
}; 
#endif
# 243 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 243
struct __attribute((aligned(16))) ulong4 { 
# 245
unsigned long x, y, z, w; 
# 246
}; 
#endif
# 248 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 248
struct float1 { 
# 250
float x; 
# 251
}; 
#endif
# 253 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 253
struct __attribute((aligned(8))) float2 { float x; float y; }; 
#endif
# 255 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 255
struct float3 { 
# 257
float x, y, z; 
# 258
}; 
#endif
# 260 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 260
struct __attribute((aligned(16))) float4 { 
# 262
float x, y, z, w; 
# 263
}; 
#endif
# 265 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 265
struct longlong1 { 
# 267
long long x; 
# 268
}; 
#endif
# 270 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 270
struct ulonglong1 { 
# 272
unsigned long long x; 
# 273
}; 
#endif
# 275 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 275
struct __attribute((aligned(16))) longlong2 { 
# 277
long long x, y; 
# 278
}; 
#endif
# 280 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 280
struct __attribute((aligned(16))) ulonglong2 { 
# 282
unsigned long long x, y; 
# 283
}; 
#endif
# 285 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 285
struct longlong3 { 
# 287
long long x, y, z; 
# 288
}; 
#endif
# 290 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 290
struct ulonglong3 { 
# 292
unsigned long long x, y, z; 
# 293
}; 
#endif
# 295 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 295
struct __attribute((aligned(16))) longlong4 { 
# 297
long long x, y, z, w; 
# 298
}; 
#endif
# 300 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 300
struct __attribute((aligned(16))) ulonglong4 { 
# 302
unsigned long long x, y, z, w; 
# 303
}; 
#endif
# 305 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 305
struct double1 { 
# 307
double x; 
# 308
}; 
#endif
# 310 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 310
struct __attribute((aligned(16))) double2 { 
# 312
double x, y; 
# 313
}; 
#endif
# 315 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 315
struct double3 { 
# 317
double x, y, z; 
# 318
}; 
#endif
# 320 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 320
struct __attribute((aligned(16))) double4 { 
# 322
double x, y, z, w; 
# 323
}; 
#endif
# 338 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef char1 
# 338
char1; 
#endif
# 339 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef uchar1 
# 339
uchar1; 
#endif
# 340 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef char2 
# 340
char2; 
#endif
# 341 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef uchar2 
# 341
uchar2; 
#endif
# 342 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef char3 
# 342
char3; 
#endif
# 343 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef uchar3 
# 343
uchar3; 
#endif
# 344 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef char4 
# 344
char4; 
#endif
# 345 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef uchar4 
# 345
uchar4; 
#endif
# 346 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef short1 
# 346
short1; 
#endif
# 347 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef ushort1 
# 347
ushort1; 
#endif
# 348 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef short2 
# 348
short2; 
#endif
# 349 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef ushort2 
# 349
ushort2; 
#endif
# 350 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef short3 
# 350
short3; 
#endif
# 351 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef ushort3 
# 351
ushort3; 
#endif
# 352 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef short4 
# 352
short4; 
#endif
# 353 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef ushort4 
# 353
ushort4; 
#endif
# 354 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef int1 
# 354
int1; 
#endif
# 355 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef uint1 
# 355
uint1; 
#endif
# 356 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef int2 
# 356
int2; 
#endif
# 357 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef uint2 
# 357
uint2; 
#endif
# 358 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef int3 
# 358
int3; 
#endif
# 359 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef uint3 
# 359
uint3; 
#endif
# 360 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef int4 
# 360
int4; 
#endif
# 361 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef uint4 
# 361
uint4; 
#endif
# 362 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef long1 
# 362
long1; 
#endif
# 363 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef ulong1 
# 363
ulong1; 
#endif
# 364 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef long2 
# 364
long2; 
#endif
# 365 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef ulong2 
# 365
ulong2; 
#endif
# 366 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef long3 
# 366
long3; 
#endif
# 367 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef ulong3 
# 367
ulong3; 
#endif
# 368 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef long4 
# 368
long4; 
#endif
# 369 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef ulong4 
# 369
ulong4; 
#endif
# 370 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef float1 
# 370
float1; 
#endif
# 371 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef float2 
# 371
float2; 
#endif
# 372 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef float3 
# 372
float3; 
#endif
# 373 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef float4 
# 373
float4; 
#endif
# 374 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef longlong1 
# 374
longlong1; 
#endif
# 375 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef ulonglong1 
# 375
ulonglong1; 
#endif
# 376 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef longlong2 
# 376
longlong2; 
#endif
# 377 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef ulonglong2 
# 377
ulonglong2; 
#endif
# 378 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef longlong3 
# 378
longlong3; 
#endif
# 379 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef ulonglong3 
# 379
ulonglong3; 
#endif
# 380 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef longlong4 
# 380
longlong4; 
#endif
# 381 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef ulonglong4 
# 381
ulonglong4; 
#endif
# 382 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef double1 
# 382
double1; 
#endif
# 383 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef double2 
# 383
double2; 
#endif
# 384 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef double3 
# 384
double3; 
#endif
# 385 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef double4 
# 385
double4; 
#endif
# 393 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
# 393
struct dim3 { 
# 395
unsigned x, y, z; 
# 401
}; 
#endif
# 403 "/usr/local/cuda-5.0/include/vector_types.h"
#if 0
typedef dim3 
# 403
dim3; 
#endif
# 89 "/usr/local/cuda-5.0/include/cuda_device_runtime_api.h"
extern "C" cudaError_t cudaDeviceGetAttribute(int * , cudaDeviceAttr , int ); 
# 90
extern "C" cudaError_t cudaDeviceGetLimit(size_t * , cudaLimit ); 
# 91
extern "C" cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache * ); 
# 92
extern "C" cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * ); 
# 93
extern "C" cudaError_t cudaDeviceSynchronize(); 
# 94
extern "C" cudaError_t cudaGetLastError(); 
# 95
extern "C" cudaError_t cudaPeekAtLastError(); 
# 96
extern "C" const char *cudaGetErrorString(cudaError_t ); 
# 97
extern "C" cudaError_t cudaGetDeviceCount(int * ); 
# 98
extern "C" cudaError_t cudaGetDevice(int * ); 
# 99
extern "C" cudaError_t cudaStreamCreateWithFlags(cudaStream_t * , unsigned ); 
# 100
extern "C" cudaError_t cudaStreamDestroy(cudaStream_t ); 
# 101
extern "C" cudaError_t cudaStreamWaitEvent(cudaStream_t , cudaEvent_t , unsigned ); 
# 102
extern "C" cudaError_t cudaEventCreateWithFlags(cudaEvent_t * , unsigned ); 
# 103
extern "C" cudaError_t cudaEventRecord(cudaEvent_t , cudaStream_t ); 
# 104
extern "C" cudaError_t cudaEventDestroy(cudaEvent_t ); 
# 105
extern "C" cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * , const void * ); 
# 106
extern "C" cudaError_t cudaFree(void * ); 
# 107
extern "C" cudaError_t cudaMalloc(void ** , size_t ); 
# 108
extern "C" cudaError_t cudaMemcpyAsync(void * , const void * , size_t , cudaMemcpyKind , cudaStream_t ); 
# 109
extern "C" cudaError_t cudaMemcpy2DAsync(void * , size_t , const void * , size_t , size_t , size_t , cudaMemcpyKind , cudaStream_t ); 
# 110
extern "C" cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms * , cudaStream_t ); 
# 111
extern "C" cudaError_t cudaMemsetAsync(void * , int , size_t , cudaStream_t ); 
# 112
extern "C" cudaError_t cudaMemset2DAsync(void * , size_t , int , size_t , size_t , cudaStream_t ); 
# 113
extern "C" cudaError_t cudaMemset3DAsync(cudaPitchedPtr , int , cudaExtent , cudaStream_t ); 
# 114
extern "C" cudaError_t cudaRuntimeGetVersion(int * ); 
# 116
extern "C" { __attribute__((unused)) extern void *cudaGetParameterBuffer(size_t , size_t ); } 
# 117
extern "C" { __attribute__((unused)) extern cudaError_t cudaLaunchDevice(void * , void * , dim3 , dim3 , unsigned , cudaStream_t ); } 
# 119
template< class T> inline cudaError_t cudaMalloc(T ** , size_t ); 
# 120
template< class T> inline cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * , T * ); 
# 193 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceReset(); 
# 210 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceSynchronize(); 
# 295 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceSetLimit(cudaLimit , size_t ); 
# 324 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceGetLimit(size_t * , cudaLimit ); 
# 354 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache * ); 
# 395 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceSetCacheConfig(cudaFuncCache ); 
# 424 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * ); 
# 466 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceSetSharedMemConfig(cudaSharedMemConfig ); 
# 489 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceGetByPCIBusId(int * , char * ); 
# 516 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceGetPCIBusId(char * , int , int ); 
# 558 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t * , cudaEvent_t ); 
# 593 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaIpcOpenEventHandle(cudaEvent_t * , cudaIpcEventHandle_t ); 
# 631 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t * , void * ); 
# 678 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaIpcOpenMemHandle(void ** , cudaIpcMemHandle_t , unsigned ); 
# 708 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaIpcCloseMemHandle(void * ); 
# 744 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadExit(); 
# 768 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadSynchronize(); 
# 827 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadSetLimit(cudaLimit , size_t ); 
# 858 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadGetLimit(size_t * , cudaLimit ); 
# 893 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadGetCacheConfig(cudaFuncCache * ); 
# 939 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadSetCacheConfig(cudaFuncCache ); 
# 989 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetLastError(); 
# 1030 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaPeekAtLastError(); 
# 1044 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" const char *cudaGetErrorString(cudaError_t ); 
# 1074 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetDeviceCount(int * ); 
# 1283 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetDeviceProperties(cudaDeviceProp * , int ); 
# 1428 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceGetAttribute(int * , cudaDeviceAttr , int ); 
# 1447 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaChooseDevice(int * , const cudaDeviceProp * ); 
# 1480 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetDevice(int ); 
# 1497 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetDevice(int * ); 
# 1526 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetValidDevices(int * , int ); 
# 1586 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetDeviceFlags(unsigned ); 
# 1612 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamCreate(cudaStream_t * ); 
# 1634 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamCreateWithFlags(cudaStream_t * , unsigned ); 
# 1655 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamDestroy(cudaStream_t ); 
# 1691 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamWaitEvent(cudaStream_t , cudaEvent_t , unsigned ); 
# 1705 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" { typedef void (*cudaStreamCallback_t)(cudaStream_t , cudaError_t , void * ); }
# 1743 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamAddCallback(cudaStream_t , cudaStreamCallback_t , void * , unsigned ); 
# 1763 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamSynchronize(cudaStream_t ); 
# 1781 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamQuery(cudaStream_t ); 
# 1813 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventCreate(cudaEvent_t * ); 
# 1847 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventCreateWithFlags(cudaEvent_t * , unsigned ); 
# 1880 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventRecord(cudaEvent_t , cudaStream_t  = 0); 
# 1909 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventQuery(cudaEvent_t ); 
# 1941 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventSynchronize(cudaEvent_t ); 
# 1966 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventDestroy(cudaEvent_t ); 
# 2007 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventElapsedTime(float * , cudaEvent_t , cudaEvent_t ); 
# 2049 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaConfigureCall(dim3 , dim3 , size_t  = (0), cudaStream_t  = 0); 
# 2076 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetupArgument(const void * , size_t , size_t ); 
# 2122 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFuncSetCacheConfig(const void * , cudaFuncCache ); 
# 2173 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFuncSetSharedMemConfig(const void * , cudaSharedMemConfig ); 
# 2208 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaLaunch(const void * ); 
# 2241 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * , const void * ); 
# 2263 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetDoubleForDevice(double * ); 
# 2285 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetDoubleForHost(double * ); 
# 2320 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMalloc(void ** , size_t ); 
# 2349 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMallocHost(void ** , size_t ); 
# 2388 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMallocPitch(void ** , size_t * , size_t , size_t ); 
# 2430 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMallocArray(cudaArray_t * , const cudaChannelFormatDesc * , size_t , size_t  = (0), unsigned  = (0)); 
# 2454 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFree(void * ); 
# 2474 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFreeHost(void * ); 
# 2496 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFreeArray(cudaArray_t ); 
# 2518 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t ); 
# 2577 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaHostAlloc(void ** , size_t , unsigned ); 
# 2630 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaHostRegister(void * , size_t , unsigned ); 
# 2649 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaHostUnregister(void * ); 
# 2676 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaHostGetDevicePointer(void ** , void * , unsigned ); 
# 2695 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaHostGetFlags(unsigned * , void * ); 
# 2730 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMalloc3D(cudaPitchedPtr * , cudaExtent ); 
# 2830 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMalloc3DArray(cudaArray_t * , const cudaChannelFormatDesc * , cudaExtent , unsigned  = (0)); 
# 2922 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t * , const cudaChannelFormatDesc * , cudaExtent , unsigned , unsigned  = (0)); 
# 2948 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t * , cudaMipmappedArray_const_t , unsigned ); 
# 3045 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy3D(const cudaMemcpy3DParms * ); 
# 3073 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms * ); 
# 3177 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms * , cudaStream_t  = 0); 
# 3199 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms * , cudaStream_t  = 0); 
# 3218 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemGetInfo(size_t * , size_t * ); 
# 3239 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaArrayGetInfo(cudaChannelFormatDesc * , cudaExtent * , unsigned * , cudaArray_t ); 
# 3274 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy(void * , const void * , size_t , cudaMemcpyKind ); 
# 3306 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyPeer(void * , int , const void * , int , size_t ); 
# 3340 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyToArray(cudaArray_t , size_t , size_t , const void * , size_t , cudaMemcpyKind ); 
# 3374 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyFromArray(void * , cudaArray_const_t , size_t , size_t , size_t , cudaMemcpyKind ); 
# 3409 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyArrayToArray(cudaArray_t , size_t , size_t , cudaArray_const_t , size_t , size_t , size_t , cudaMemcpyKind  = (cudaMemcpyDeviceToDevice)); 
# 3451 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2D(void * , size_t , const void * , size_t , size_t , size_t , cudaMemcpyKind ); 
# 3493 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DToArray(cudaArray_t , size_t , size_t , const void * , size_t , size_t , size_t , cudaMemcpyKind ); 
# 3535 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DFromArray(void * , size_t , cudaArray_const_t , size_t , size_t , size_t , size_t , cudaMemcpyKind ); 
# 3575 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t , size_t , size_t , cudaArray_const_t , size_t , size_t , size_t , size_t , cudaMemcpyKind  = (cudaMemcpyDeviceToDevice)); 
# 3610 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyToSymbol(const void * , const void * , size_t , size_t  = (0), cudaMemcpyKind  = (cudaMemcpyHostToDevice)); 
# 3645 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyFromSymbol(void * , const void * , size_t , size_t  = (0), cudaMemcpyKind  = (cudaMemcpyDeviceToHost)); 
# 3687 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyAsync(void * , const void * , size_t , cudaMemcpyKind , cudaStream_t  = 0); 
# 3718 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyPeerAsync(void * , int , const void * , int , size_t , cudaStream_t  = 0); 
# 3759 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyToArrayAsync(cudaArray_t , size_t , size_t , const void * , size_t , cudaMemcpyKind , cudaStream_t  = 0); 
# 3800 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyFromArrayAsync(void * , cudaArray_const_t , size_t , size_t , size_t , cudaMemcpyKind , cudaStream_t  = 0); 
# 3851 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DAsync(void * , size_t , const void * , size_t , size_t , size_t , cudaMemcpyKind , cudaStream_t  = 0); 
# 3901 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t , size_t , size_t , const void * , size_t , size_t , size_t , cudaMemcpyKind , cudaStream_t  = 0); 
# 3950 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DFromArrayAsync(void * , size_t , cudaArray_const_t , size_t , size_t , size_t , size_t , cudaMemcpyKind , cudaStream_t  = 0); 
# 3992 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyToSymbolAsync(const void * , const void * , size_t , size_t , cudaMemcpyKind , cudaStream_t  = 0); 
# 4034 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyFromSymbolAsync(void * , const void * , size_t , size_t , cudaMemcpyKind , cudaStream_t  = 0); 
# 4060 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset(void * , int , size_t ); 
# 4090 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset2D(void * , size_t , int , size_t , size_t ); 
# 4133 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset3D(cudaPitchedPtr , int , cudaExtent ); 
# 4161 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemsetAsync(void * , int , size_t , cudaStream_t  = 0); 
# 4194 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset2DAsync(void * , size_t , int , size_t , size_t , cudaStream_t  = 0); 
# 4240 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset3DAsync(cudaPitchedPtr , int , cudaExtent , cudaStream_t  = 0); 
# 4263 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetSymbolAddress(void ** , const void * ); 
# 4285 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetSymbolSize(size_t * , const void * ); 
# 4429 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaPointerGetAttributes(cudaPointerAttributes * , const void * ); 
# 4463 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceCanAccessPeer(int * , int , int ); 
# 4500 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceEnablePeerAccess(int , unsigned ); 
# 4519 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDeviceDisablePeerAccess(int ); 
# 4573 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t ); 
# 4605 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t , unsigned ); 
# 4640 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsMapResources(int , cudaGraphicsResource_t * , cudaStream_t  = 0); 
# 4671 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsUnmapResources(int , cudaGraphicsResource_t * , cudaStream_t  = 0); 
# 4700 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsResourceGetMappedPointer(void ** , size_t * , cudaGraphicsResource_t ); 
# 4734 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t * , cudaGraphicsResource_t , unsigned , unsigned ); 
# 4759 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t * , cudaGraphicsResource_t ); 
# 4795 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetChannelDesc(cudaChannelFormatDesc * , cudaArray_const_t ); 
# 4830 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaChannelFormatDesc cudaCreateChannelDesc(int , int , int , int , cudaChannelFormatKind ); 
# 4877 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaBindTexture(size_t * , const textureReference * , const void * , const cudaChannelFormatDesc * , size_t  = (((2147483647) * 2U) + 1U)); 
# 4928 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaBindTexture2D(size_t * , const textureReference * , const void * , const cudaChannelFormatDesc * , size_t , size_t , size_t ); 
# 4956 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaBindTextureToArray(const textureReference * , cudaArray_const_t , const cudaChannelFormatDesc * ); 
# 4984 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaBindTextureToMipmappedArray(const textureReference * , cudaMipmappedArray_const_t , const cudaChannelFormatDesc * ); 
# 5005 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaUnbindTexture(const textureReference * ); 
# 5030 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetTextureAlignmentOffset(size_t * , const textureReference * ); 
# 5055 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetTextureReference(const textureReference ** , const void * ); 
# 5091 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaBindSurfaceToArray(const surfaceReference * , cudaArray_const_t , const cudaChannelFormatDesc * ); 
# 5110 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetSurfaceReference(const surfaceReference ** , const void * ); 
# 5321 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaCreateTextureObject(cudaTextureObject_t * , const cudaResourceDesc * , const cudaTextureDesc * , const cudaResourceViewDesc * ); 
# 5336 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDestroyTextureObject(cudaTextureObject_t ); 
# 5352 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetTextureObjectResourceDesc(cudaResourceDesc * , cudaTextureObject_t ); 
# 5368 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetTextureObjectTextureDesc(cudaTextureDesc * , cudaTextureObject_t ); 
# 5385 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc * , cudaTextureObject_t ); 
# 5418 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t * , const cudaResourceDesc * ); 
# 5433 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t ); 
# 5448 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetSurfaceObjectResourceDesc(cudaResourceDesc * , cudaSurfaceObject_t ); 
# 5475 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDriverGetVersion(int * ); 
# 5492 "/usr/local/cuda-5.0/include/cuda_runtime_api.h"
extern "C" cudaError_t cudaRuntimeGetVersion(int * ); 
# 5497
extern "C" cudaError_t cudaGetExportTable(const void ** , const cudaUUID_t * ); 
# 107 "/usr/local/cuda-5.0/include/channel_descriptor.h"
template< class T> inline cudaChannelFormatDesc cudaCreateChannelDesc() 
# 108
{ 
# 109
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
# 110
} 
# 112
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf() 
# 113
{ 
# 114
int e = (((int)sizeof(unsigned short)) * 8); 
# 116
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 117
} 
# 119
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf1() 
# 120
{ 
# 121
int e = (((int)sizeof(unsigned short)) * 8); 
# 123
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 124
} 
# 126
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf2() 
# 127
{ 
# 128
int e = (((int)sizeof(unsigned short)) * 8); 
# 130
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
# 131
} 
# 133
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf4() 
# 134
{ 
# 135
int e = (((int)sizeof(unsigned short)) * 8); 
# 137
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
# 138
} 
# 140
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char> () 
# 141
{ 
# 142
int e = (((int)sizeof(char)) * 8); 
# 147
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 149
} 
# 151
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< signed char> () 
# 152
{ 
# 153
int e = (((int)sizeof(signed char)) * 8); 
# 155
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 156
} 
# 158
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned char> () 
# 159
{ 
# 160
int e = (((int)sizeof(unsigned char)) * 8); 
# 162
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 163
} 
# 165
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char1> () 
# 166
{ 
# 167
int e = (((int)sizeof(signed char)) * 8); 
# 169
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 170
} 
# 172
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar1> () 
# 173
{ 
# 174
int e = (((int)sizeof(unsigned char)) * 8); 
# 176
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 177
} 
# 179
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char2> () 
# 180
{ 
# 181
int e = (((int)sizeof(signed char)) * 8); 
# 183
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 184
} 
# 186
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar2> () 
# 187
{ 
# 188
int e = (((int)sizeof(unsigned char)) * 8); 
# 190
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 191
} 
# 193
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char4> () 
# 194
{ 
# 195
int e = (((int)sizeof(signed char)) * 8); 
# 197
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 198
} 
# 200
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar4> () 
# 201
{ 
# 202
int e = (((int)sizeof(unsigned char)) * 8); 
# 204
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 205
} 
# 207
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short> () 
# 208
{ 
# 209
int e = (((int)sizeof(short)) * 8); 
# 211
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 212
} 
# 214
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned short> () 
# 215
{ 
# 216
int e = (((int)sizeof(unsigned short)) * 8); 
# 218
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 219
} 
# 221
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short1> () 
# 222
{ 
# 223
int e = (((int)sizeof(short)) * 8); 
# 225
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 226
} 
# 228
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort1> () 
# 229
{ 
# 230
int e = (((int)sizeof(unsigned short)) * 8); 
# 232
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 233
} 
# 235
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short2> () 
# 236
{ 
# 237
int e = (((int)sizeof(short)) * 8); 
# 239
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 240
} 
# 242
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort2> () 
# 243
{ 
# 244
int e = (((int)sizeof(unsigned short)) * 8); 
# 246
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 247
} 
# 249
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short4> () 
# 250
{ 
# 251
int e = (((int)sizeof(short)) * 8); 
# 253
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 254
} 
# 256
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort4> () 
# 257
{ 
# 258
int e = (((int)sizeof(unsigned short)) * 8); 
# 260
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 261
} 
# 263
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int> () 
# 264
{ 
# 265
int e = (((int)sizeof(int)) * 8); 
# 267
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 268
} 
# 270
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned> () 
# 271
{ 
# 272
int e = (((int)sizeof(unsigned)) * 8); 
# 274
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 275
} 
# 277
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int1> () 
# 278
{ 
# 279
int e = (((int)sizeof(int)) * 8); 
# 281
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 282
} 
# 284
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint1> () 
# 285
{ 
# 286
int e = (((int)sizeof(unsigned)) * 8); 
# 288
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 289
} 
# 291
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int2> () 
# 292
{ 
# 293
int e = (((int)sizeof(int)) * 8); 
# 295
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 296
} 
# 298
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint2> () 
# 299
{ 
# 300
int e = (((int)sizeof(unsigned)) * 8); 
# 302
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 303
} 
# 305
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int4> () 
# 306
{ 
# 307
int e = (((int)sizeof(int)) * 8); 
# 309
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 310
} 
# 312
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint4> () 
# 313
{ 
# 314
int e = (((int)sizeof(unsigned)) * 8); 
# 316
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 317
} 
# 379 "/usr/local/cuda-5.0/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float> () 
# 380
{ 
# 381
int e = (((int)sizeof(float)) * 8); 
# 383
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 384
} 
# 386
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float1> () 
# 387
{ 
# 388
int e = (((int)sizeof(float)) * 8); 
# 390
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 391
} 
# 393
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float2> () 
# 394
{ 
# 395
int e = (((int)sizeof(float)) * 8); 
# 397
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
# 398
} 
# 400
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float4> () 
# 401
{ 
# 402
int e = (((int)sizeof(float)) * 8); 
# 404
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
# 405
} 
# 79 "/usr/local/cuda-5.0/include/driver_functions.h"
static inline cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) 
# 80
{ 
# 81
cudaPitchedPtr s; 
# 83
(s.ptr) = d; 
# 84
(s.pitch) = p; 
# 85
(s.xsize) = xsz; 
# 86
(s.ysize) = ysz; 
# 88
return s; 
# 89
} 
# 106 "/usr/local/cuda-5.0/include/driver_functions.h"
static inline cudaPos make_cudaPos(size_t x, size_t y, size_t z) 
# 107
{ 
# 108
cudaPos p; 
# 110
(p.x) = x; 
# 111
(p.y) = y; 
# 112
(p.z) = z; 
# 114
return p; 
# 115
} 
# 132 "/usr/local/cuda-5.0/include/driver_functions.h"
static inline cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) 
# 133
{ 
# 134
cudaExtent e; 
# 136
(e.width) = w; 
# 137
(e.height) = h; 
# 138
(e.depth) = d; 
# 140
return e; 
# 141
} 
# 69 "/usr/local/cuda-5.0/include/vector_functions.h"
static inline char1 make_char1(signed char x) 
# 70
{ 
# 71
char1 t; (t.x) = x; return t; 
# 72
} 
# 74
static inline uchar1 make_uchar1(unsigned char x) 
# 75
{ 
# 76
uchar1 t; (t.x) = x; return t; 
# 77
} 
# 79
static inline char2 make_char2(signed char x, signed char y) 
# 80
{ 
# 81
char2 t; (t.x) = x; (t.y) = y; return t; 
# 82
} 
# 84
static inline uchar2 make_uchar2(unsigned char x, unsigned char y) 
# 85
{ 
# 86
uchar2 t; (t.x) = x; (t.y) = y; return t; 
# 87
} 
# 89
static inline char3 make_char3(signed char x, signed char y, signed char z) 
# 90
{ 
# 91
char3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 92
} 
# 94
static inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z) 
# 95
{ 
# 96
uchar3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 97
} 
# 99
static inline char4 make_char4(signed char x, signed char y, signed char z, signed char w) 
# 100
{ 
# 101
char4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 102
} 
# 104
static inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w) 
# 105
{ 
# 106
uchar4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 107
} 
# 109
static inline short1 make_short1(short x) 
# 110
{ 
# 111
short1 t; (t.x) = x; return t; 
# 112
} 
# 114
static inline ushort1 make_ushort1(unsigned short x) 
# 115
{ 
# 116
ushort1 t; (t.x) = x; return t; 
# 117
} 
# 119
static inline short2 make_short2(short x, short y) 
# 120
{ 
# 121
short2 t; (t.x) = x; (t.y) = y; return t; 
# 122
} 
# 124
static inline ushort2 make_ushort2(unsigned short x, unsigned short y) 
# 125
{ 
# 126
ushort2 t; (t.x) = x; (t.y) = y; return t; 
# 127
} 
# 129
static inline short3 make_short3(short x, short y, short z) 
# 130
{ 
# 131
short3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 132
} 
# 134
static inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z) 
# 135
{ 
# 136
ushort3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 137
} 
# 139
static inline short4 make_short4(short x, short y, short z, short w) 
# 140
{ 
# 141
short4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 142
} 
# 144
static inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w) 
# 145
{ 
# 146
ushort4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 147
} 
# 149
static inline int1 make_int1(int x) 
# 150
{ 
# 151
int1 t; (t.x) = x; return t; 
# 152
} 
# 154
static inline uint1 make_uint1(unsigned x) 
# 155
{ 
# 156
uint1 t; (t.x) = x; return t; 
# 157
} 
# 159
static inline int2 make_int2(int x, int y) 
# 160
{ 
# 161
int2 t; (t.x) = x; (t.y) = y; return t; 
# 162
} 
# 164
static inline uint2 make_uint2(unsigned x, unsigned y) 
# 165
{ 
# 166
uint2 t; (t.x) = x; (t.y) = y; return t; 
# 167
} 
# 169
static inline int3 make_int3(int x, int y, int z) 
# 170
{ 
# 171
int3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 172
} 
# 174
static inline uint3 make_uint3(unsigned x, unsigned y, unsigned z) 
# 175
{ 
# 176
uint3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 177
} 
# 179
static inline int4 make_int4(int x, int y, int z, int w) 
# 180
{ 
# 181
int4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 182
} 
# 184
static inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w) 
# 185
{ 
# 186
uint4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 187
} 
# 189
static inline long1 make_long1(long x) 
# 190
{ 
# 191
long1 t; (t.x) = x; return t; 
# 192
} 
# 194
static inline ulong1 make_ulong1(unsigned long x) 
# 195
{ 
# 196
ulong1 t; (t.x) = x; return t; 
# 197
} 
# 199
static inline long2 make_long2(long x, long y) 
# 200
{ 
# 201
long2 t; (t.x) = x; (t.y) = y; return t; 
# 202
} 
# 204
static inline ulong2 make_ulong2(unsigned long x, unsigned long y) 
# 205
{ 
# 206
ulong2 t; (t.x) = x; (t.y) = y; return t; 
# 207
} 
# 209
static inline long3 make_long3(long x, long y, long z) 
# 210
{ 
# 211
long3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 212
} 
# 214
static inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z) 
# 215
{ 
# 216
ulong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 217
} 
# 219
static inline long4 make_long4(long x, long y, long z, long w) 
# 220
{ 
# 221
long4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 222
} 
# 224
static inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w) 
# 225
{ 
# 226
ulong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 227
} 
# 229
static inline float1 make_float1(float x) 
# 230
{ 
# 231
float1 t; (t.x) = x; return t; 
# 232
} 
# 234
static inline float2 make_float2(float x, float y) 
# 235
{ 
# 236
float2 t; (t.x) = x; (t.y) = y; return t; 
# 237
} 
# 239
static inline float3 make_float3(float x, float y, float z) 
# 240
{ 
# 241
float3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 242
} 
# 244
static inline float4 make_float4(float x, float y, float z, float w) 
# 245
{ 
# 246
float4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 247
} 
# 249
static inline longlong1 make_longlong1(long long x) 
# 250
{ 
# 251
longlong1 t; (t.x) = x; return t; 
# 252
} 
# 254
static inline ulonglong1 make_ulonglong1(unsigned long long x) 
# 255
{ 
# 256
ulonglong1 t; (t.x) = x; return t; 
# 257
} 
# 259
static inline longlong2 make_longlong2(long long x, long long y) 
# 260
{ 
# 261
longlong2 t; (t.x) = x; (t.y) = y; return t; 
# 262
} 
# 264
static inline ulonglong2 make_ulonglong2(unsigned long long x, unsigned long long y) 
# 265
{ 
# 266
ulonglong2 t; (t.x) = x; (t.y) = y; return t; 
# 267
} 
# 269
static inline longlong3 make_longlong3(long long x, long long y, long long z) 
# 270
{ 
# 271
longlong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 272
} 
# 274
static inline ulonglong3 make_ulonglong3(unsigned long long x, unsigned long long y, unsigned long long z) 
# 275
{ 
# 276
ulonglong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 277
} 
# 279
static inline longlong4 make_longlong4(long long x, long long y, long long z, long long w) 
# 280
{ 
# 281
longlong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 282
} 
# 284
static inline ulonglong4 make_ulonglong4(unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w) 
# 285
{ 
# 286
ulonglong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 287
} 
# 289
static inline double1 make_double1(double x) 
# 290
{ 
# 291
double1 t; (t.x) = x; return t; 
# 292
} 
# 294
static inline double2 make_double2(double x, double y) 
# 295
{ 
# 296
double2 t; (t.x) = x; (t.y) = y; return t; 
# 297
} 
# 299
static inline double3 make_double3(double x, double y, double z) 
# 300
{ 
# 301
double3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 302
} 
# 304
static inline double4 make_double4(double x, double y, double z, double w) 
# 305
{ 
# 306
double4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 307
} 
# 44 "/usr/include/string.h" 3
extern "C" void *memcpy(void *__restrict__ , const void *__restrict__ , size_t ) throw()
# 46
 __attribute((__nonnull__(1, 2))); 
# 49
extern "C" void *memmove(void * , const void * , size_t ) throw()
# 50
 __attribute((__nonnull__(1, 2))); 
# 57
extern "C" void *memccpy(void *__restrict__ , const void *__restrict__ , int , size_t ) throw()
# 59
 __attribute((__nonnull__(1, 2))); 
# 65
extern "C" void *memset(void * , int , size_t ) throw() __attribute((__nonnull__(1))); 
# 68
extern "C" int memcmp(const void * , const void * , size_t ) throw()
# 69
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 75
extern void *memchr(void * , int , size_t ) throw() __asm__("memchr")
# 76
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 77
extern const void *memchr(const void * , int , size_t ) throw() __asm__("memchr")
# 78
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 104 "/usr/include/string.h" 3
void *rawmemchr(void * , int ) throw() __asm__("rawmemchr")
# 105
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 106
const void *rawmemchr(const void * , int ) throw() __asm__("rawmemchr")
# 107
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 115
void *memrchr(void * , int , size_t ) throw() __asm__("memrchr")
# 116
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 117
const void *memrchr(const void * , int , size_t ) throw() __asm__("memrchr")
# 118
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 128
extern "C" char *strcpy(char *__restrict__ , const char *__restrict__ ) throw()
# 129
 __attribute((__nonnull__(1, 2))); 
# 131
extern "C" char *strncpy(char *__restrict__ , const char *__restrict__ , size_t ) throw()
# 133
 __attribute((__nonnull__(1, 2))); 
# 136
extern "C" char *strcat(char *__restrict__ , const char *__restrict__ ) throw()
# 137
 __attribute((__nonnull__(1, 2))); 
# 139
extern "C" char *strncat(char *__restrict__ , const char *__restrict__ , size_t ) throw()
# 140
 __attribute((__nonnull__(1, 2))); 
# 143
extern "C" int strcmp(const char * , const char * ) throw()
# 144
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 146
extern "C" int strncmp(const char * , const char * , size_t ) throw()
# 147
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 150
extern "C" int strcoll(const char * , const char * ) throw()
# 151
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 153
extern "C" size_t strxfrm(char *__restrict__ , const char *__restrict__ , size_t ) throw()
# 155
 __attribute((__nonnull__(2))); 
# 40 "/usr/include/xlocale.h" 3
extern "C" { typedef 
# 28
struct __locale_struct { 
# 31
struct __locale_data *__locales[13]; 
# 34
const unsigned short *__ctype_b; 
# 35
const int *__ctype_tolower; 
# 36
const int *__ctype_toupper; 
# 39
const char *__names[13]; 
# 40
} *__locale_t; }
# 43
extern "C" { typedef __locale_t locale_t; }
# 165 "/usr/include/string.h" 3
extern "C" int strcoll_l(const char * , const char * , __locale_t ) throw()
# 166
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 3))); 
# 168
extern "C" size_t strxfrm_l(char * , const char * , size_t , __locale_t ) throw()
# 169
 __attribute((__nonnull__(2, 4))); 
# 175
extern "C" char *strdup(const char * ) throw()
# 176
 __attribute((__malloc__)) __attribute((__nonnull__(1))); 
# 183
extern "C" char *strndup(const char * , size_t ) throw()
# 184
 __attribute((__malloc__)) __attribute((__nonnull__(1))); 
# 215 "/usr/include/string.h" 3
extern char *strchr(char * , int ) throw() __asm__("strchr")
# 216
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 217
extern const char *strchr(const char * , int ) throw() __asm__("strchr")
# 218
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 242 "/usr/include/string.h" 3
extern char *strrchr(char * , int ) throw() __asm__("strrchr")
# 243
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 244
extern const char *strrchr(const char * , int ) throw() __asm__("strrchr")
# 245
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 271 "/usr/include/string.h" 3
char *strchrnul(char * , int ) throw() __asm__("strchrnul")
# 272
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 273
const char *strchrnul(const char * , int ) throw() __asm__("strchrnul")
# 274
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 284
extern "C" size_t strcspn(const char * , const char * ) throw()
# 285
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 288
extern "C" size_t strspn(const char * , const char * ) throw()
# 289
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 294
extern char *strpbrk(char * , const char * ) throw() __asm__("strpbrk")
# 295
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 296
extern const char *strpbrk(const char * , const char * ) throw() __asm__("strpbrk")
# 297
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 321 "/usr/include/string.h" 3
extern char *strstr(char * , const char * ) throw() __asm__("strstr")
# 322
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 323
extern const char *strstr(const char * , const char * ) throw() __asm__("strstr")
# 325
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 348 "/usr/include/string.h" 3
extern "C" char *strtok(char *__restrict__ , const char *__restrict__ ) throw()
# 349
 __attribute((__nonnull__(2))); 
# 354
extern "C" char *__strtok_r(char *__restrict__ , const char *__restrict__ , char **__restrict__ ) throw()
# 357
 __attribute((__nonnull__(2, 3))); 
# 359
extern "C" char *strtok_r(char *__restrict__ , const char *__restrict__ , char **__restrict__ ) throw()
# 361
 __attribute((__nonnull__(2, 3))); 
# 367
char *strcasestr(char * , const char * ) throw() __asm__("strcasestr")
# 368
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 369
const char *strcasestr(const char * , const char * ) throw() __asm__("strcasestr")
# 371
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 382 "/usr/include/string.h" 3
extern "C" void *memmem(const void * , size_t , const void * , size_t ) throw()
# 384
 __attribute((__pure__)) __attribute((__nonnull__(1, 3))); 
# 388
extern "C" void *__mempcpy(void *__restrict__ , const void *__restrict__ , size_t ) throw()
# 390
 __attribute((__nonnull__(1, 2))); 
# 391
extern "C" void *mempcpy(void *__restrict__ , const void *__restrict__ , size_t ) throw()
# 393
 __attribute((__nonnull__(1, 2))); 
# 399
extern "C" size_t strlen(const char * ) throw()
# 400
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 406
extern "C" size_t strnlen(const char * , size_t ) throw()
# 407
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 413
extern "C" char *strerror(int ) throw(); 
# 438 "/usr/include/string.h" 3
extern "C" char *strerror_r(int , char * , size_t ) throw()
# 439
 __attribute((__nonnull__(2))); 
# 445
extern "C" char *strerror_l(int , __locale_t ) throw(); 
# 451
extern "C" void __bzero(void * , size_t ) throw() __attribute((__nonnull__(1))); 
# 455
extern "C" void bcopy(const void * , void * , size_t ) throw()
# 456
 __attribute((__nonnull__(1, 2))); 
# 459
extern "C" void bzero(void * , size_t ) throw() __attribute((__nonnull__(1))); 
# 462
extern "C" int bcmp(const void * , const void * , size_t ) throw()
# 463
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 469
extern char *index(char * , int ) throw() __asm__("index")
# 470
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 471
extern const char *index(const char * , int ) throw() __asm__("index")
# 472
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 497 "/usr/include/string.h" 3
extern char *rindex(char * , int ) throw() __asm__("rindex")
# 498
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 499
extern const char *rindex(const char * , int ) throw() __asm__("rindex")
# 500
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 523 "/usr/include/string.h" 3
extern "C" int ffs(int ) throw() __attribute((const)); 
# 528
extern "C" int ffsl(long ) throw() __attribute((const)); 
# 530
__extension__ extern "C" int ffsll(long long ) throw()
# 531
 __attribute((const)); 
# 536
extern "C" int strcasecmp(const char * , const char * ) throw()
# 537
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 540
extern "C" int strncasecmp(const char * , const char * , size_t ) throw()
# 541
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 547
extern "C" int strcasecmp_l(const char * , const char * , __locale_t ) throw()
# 549
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 3))); 
# 551
extern "C" int strncasecmp_l(const char * , const char * , size_t , __locale_t ) throw()
# 553
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 4))); 
# 559
extern "C" char *strsep(char **__restrict__ , const char *__restrict__ ) throw()
# 561
 __attribute((__nonnull__(1, 2))); 
# 566
extern "C" char *strsignal(int ) throw(); 
# 569
extern "C" char *__stpcpy(char *__restrict__ , const char *__restrict__ ) throw()
# 570
 __attribute((__nonnull__(1, 2))); 
# 571
extern "C" char *stpcpy(char *__restrict__ , const char *__restrict__ ) throw()
# 572
 __attribute((__nonnull__(1, 2))); 
# 576
extern "C" char *__stpncpy(char *__restrict__ , const char *__restrict__ , size_t ) throw()
# 578
 __attribute((__nonnull__(1, 2))); 
# 579
extern "C" char *stpncpy(char *__restrict__ , const char *__restrict__ , size_t ) throw()
# 581
 __attribute((__nonnull__(1, 2))); 
# 586
extern "C" int strverscmp(const char * , const char * ) throw()
# 587
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 590
extern "C" char *strfry(char * ) throw() __attribute((__nonnull__(1))); 
# 593
extern "C" void *memfrob(void * , size_t ) throw() __attribute((__nonnull__(1))); 
# 601
char *basename(char * ) throw() __asm__("basename")
# 602
 __attribute((__nonnull__(1))); 
# 603
const char *basename(const char * ) throw() __asm__("basename")
# 604
 __attribute((__nonnull__(1))); 
# 31 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned char __u_char; }
# 32
extern "C" { typedef unsigned short __u_short; }
# 33
extern "C" { typedef unsigned __u_int; }
# 34
extern "C" { typedef unsigned long __u_long; }
# 37
extern "C" { typedef signed char __int8_t; }
# 38
extern "C" { typedef unsigned char __uint8_t; }
# 39
extern "C" { typedef signed short __int16_t; }
# 40
extern "C" { typedef unsigned short __uint16_t; }
# 41
extern "C" { typedef signed int __int32_t; }
# 42
extern "C" { typedef unsigned __uint32_t; }
# 44
extern "C" { typedef signed long __int64_t; }
# 45
extern "C" { typedef unsigned long __uint64_t; }
# 53
extern "C" { typedef long __quad_t; }
# 54
extern "C" { typedef unsigned long __u_quad_t; }
# 134 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned long __dev_t; }
# 135
extern "C" { typedef unsigned __uid_t; }
# 136
extern "C" { typedef unsigned __gid_t; }
# 137
extern "C" { typedef unsigned long __ino_t; }
# 138
extern "C" { typedef unsigned long __ino64_t; }
# 139
extern "C" { typedef unsigned __mode_t; }
# 140
extern "C" { typedef unsigned long __nlink_t; }
# 141
extern "C" { typedef long __off_t; }
# 142
extern "C" { typedef long __off64_t; }
# 143
extern "C" { typedef int __pid_t; }
# 144
extern "C" { typedef struct { int __val[2]; } __fsid_t; }
# 145
extern "C" { typedef long __clock_t; }
# 146
extern "C" { typedef unsigned long __rlim_t; }
# 147
extern "C" { typedef unsigned long __rlim64_t; }
# 148
extern "C" { typedef unsigned __id_t; }
# 149
extern "C" { typedef long __time_t; }
# 150
extern "C" { typedef unsigned __useconds_t; }
# 151
extern "C" { typedef long __suseconds_t; }
# 153
extern "C" { typedef int __daddr_t; }
# 154
extern "C" { typedef long __swblk_t; }
# 155
extern "C" { typedef int __key_t; }
# 158
extern "C" { typedef int __clockid_t; }
# 161
extern "C" { typedef void *__timer_t; }
# 164
extern "C" { typedef long __blksize_t; }
# 169
extern "C" { typedef long __blkcnt_t; }
# 170
extern "C" { typedef long __blkcnt64_t; }
# 173
extern "C" { typedef unsigned long __fsblkcnt_t; }
# 174
extern "C" { typedef unsigned long __fsblkcnt64_t; }
# 177
extern "C" { typedef unsigned long __fsfilcnt_t; }
# 178
extern "C" { typedef unsigned long __fsfilcnt64_t; }
# 180
extern "C" { typedef long __ssize_t; }
# 184
extern "C" { typedef __off64_t __loff_t; }
# 185
extern "C" { typedef __quad_t *__qaddr_t; }
# 186
extern "C" { typedef char *__caddr_t; }
# 189
extern "C" { typedef long __intptr_t; }
# 192
extern "C" { typedef unsigned __socklen_t; }
# 60 "/usr/include/time.h" 3
extern "C" { typedef __clock_t clock_t; }
# 76 "/usr/include/time.h" 3
extern "C" { typedef __time_t time_t; }
# 92 "/usr/include/time.h" 3
extern "C" { typedef __clockid_t clockid_t; }
# 104 "/usr/include/time.h" 3
extern "C" { typedef __timer_t timer_t; }
# 120 "/usr/include/time.h" 3
extern "C" { struct timespec { 
# 122
__time_t tv_sec; 
# 123
long tv_nsec; 
# 124
}; }
# 133
extern "C" { struct tm { 
# 135
int tm_sec; 
# 136
int tm_min; 
# 137
int tm_hour; 
# 138
int tm_mday; 
# 139
int tm_mon; 
# 140
int tm_year; 
# 141
int tm_wday; 
# 142
int tm_yday; 
# 143
int tm_isdst; 
# 146
long tm_gmtoff; 
# 147
const char *tm_zone; 
# 152
}; }
# 161
extern "C" { struct itimerspec { 
# 163
timespec it_interval; 
# 164
timespec it_value; 
# 165
}; }
# 168
struct sigevent; 
# 174
extern "C" { typedef __pid_t pid_t; }
# 183
extern "C" clock_t clock() throw(); 
# 186
extern "C" time_t time(time_t * ) throw(); 
# 189
extern "C" double difftime(time_t , time_t ) throw()
# 190
 __attribute((const)); 
# 193
extern "C" time_t mktime(tm * ) throw(); 
# 199
extern "C" size_t strftime(char *__restrict__ , size_t , const char *__restrict__ , const tm *__restrict__ ) throw(); 
# 207
extern "C" char *strptime(const char *__restrict__ , const char *__restrict__ , tm * ) throw(); 
# 217
extern "C" size_t strftime_l(char *__restrict__ , size_t , const char *__restrict__ , const tm *__restrict__ , __locale_t ) throw(); 
# 224
extern "C" char *strptime_l(const char *__restrict__ , const char *__restrict__ , tm * , __locale_t ) throw(); 
# 233
extern "C" tm *gmtime(const time_t * ) throw(); 
# 237
extern "C" tm *localtime(const time_t * ) throw(); 
# 243
extern "C" tm *gmtime_r(const time_t *__restrict__ , tm *__restrict__ ) throw(); 
# 248
extern "C" tm *localtime_r(const time_t *__restrict__ , tm *__restrict__ ) throw(); 
# 255
extern "C" char *asctime(const tm * ) throw(); 
# 258
extern "C" char *ctime(const time_t * ) throw(); 
# 266
extern "C" char *asctime_r(const tm *__restrict__ , char *__restrict__ ) throw(); 
# 270
extern "C" char *ctime_r(const time_t *__restrict__ , char *__restrict__ ) throw(); 
# 276
extern "C" { extern char *__tzname[2]; } 
# 277
extern "C" { extern int __daylight; } 
# 278
extern "C" { extern long __timezone; } 
# 283
extern "C" { extern char *tzname[2]; } 
# 287
extern "C" void tzset() throw(); 
# 291
extern "C" { extern int daylight; } 
# 292
extern "C" { extern long timezone; } 
# 298
extern "C" int stime(const time_t * ) throw(); 
# 313 "/usr/include/time.h" 3
extern "C" time_t timegm(tm * ) throw(); 
# 316
extern "C" time_t timelocal(tm * ) throw(); 
# 319
extern "C" int dysize(int ) throw() __attribute((const)); 
# 328 "/usr/include/time.h" 3
extern "C" int nanosleep(const timespec * , timespec * ); 
# 333
extern "C" int clock_getres(clockid_t , timespec * ) throw(); 
# 336
extern "C" int clock_gettime(clockid_t , timespec * ) throw(); 
# 339
extern "C" int clock_settime(clockid_t , const timespec * ) throw(); 
# 347
extern "C" int clock_nanosleep(clockid_t , int , const timespec * , timespec * ); 
# 352
extern "C" int clock_getcpuclockid(pid_t , clockid_t * ) throw(); 
# 357
extern "C" int timer_create(clockid_t , sigevent *__restrict__ , timer_t *__restrict__ ) throw(); 
# 362
extern "C" int timer_delete(timer_t ) throw(); 
# 365
extern "C" int timer_settime(timer_t , int , const itimerspec *__restrict__ , itimerspec *__restrict__ ) throw(); 
# 370
extern "C" int timer_gettime(timer_t , itimerspec * ) throw(); 
# 374
extern "C" int timer_getoverrun(timer_t ) throw(); 
# 390 "/usr/include/time.h" 3
extern "C" { extern int getdate_err; } 
# 399 "/usr/include/time.h" 3
extern "C" tm *getdate(const char * ); 
# 413 "/usr/include/time.h" 3
extern "C" int getdate_r(const char *__restrict__ , tm *__restrict__ ); 
# 69 "/usr/local/cuda-5.0/include/common_functions.h"
extern "C" clock_t clock() throw(); 
# 70
extern "C" void *memset(void *, int, size_t) throw(); 
# 71
extern "C" void *memcpy(void *, const void *, size_t) throw(); 
# 136 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" int abs(int) throw(); 
# 137
extern "C" long labs(long) throw(); 
# 138
extern "C" long long llabs(long long) throw(); 
# 180 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double fabs(double ) throw(); 
# 221 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float fabsf(float ) throw(); 
# 222
extern "C" int min(int, int); 
# 223
extern "C" unsigned umin(unsigned, unsigned); 
# 224
extern "C" long long llmin(long long, long long); 
# 225
extern "C" unsigned long long ullmin(unsigned long long, unsigned long long); 
# 241 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float fminf(float , float ) throw(); 
# 257 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double fmin(double , double ) throw(); 
# 258
extern "C" int max(int, int); 
# 259
extern "C" unsigned umax(unsigned, unsigned); 
# 260
extern "C" long long llmax(long long, long long); 
# 261
extern "C" unsigned long long ullmax(unsigned long long, unsigned long long); 
# 277 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float fmaxf(float , float ) throw(); 
# 293 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double fmax(double, double) throw(); 
# 334 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double sin(double ) throw(); 
# 367 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double cos(double ) throw(); 
# 382 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" void sincos(double , double * , double * ) throw(); 
# 398 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" void sincosf(float , float * , float * ) throw(); 
# 439 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double tan(double ) throw(); 
# 508 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double sqrt(double ) throw(); 
# 577 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double rsqrt(double ); 
# 646 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float rsqrtf(float ); 
# 697 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double log2(double ) throw(); 
# 718 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double exp2(double ) throw(); 
# 739 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float exp2f(float ) throw(); 
# 760 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double exp10(double ) throw(); 
# 782 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float exp10f(float ) throw(); 
# 823 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double expm1(double ) throw(); 
# 864 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float expm1f(float ) throw(); 
# 915 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float log2f(float ) throw(); 
# 966 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double log10(double ) throw(); 
# 1037 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double log(double ) throw(); 
# 1130 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double log1p(double ) throw(); 
# 1223 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float log1pf(float ) throw(); 
# 1295 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double floor(double ) throw(); 
# 1334 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double exp(double ) throw(); 
# 1365 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double cosh(double ) throw(); 
# 1395 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double sinh(double ) throw(); 
# 1425 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double tanh(double ) throw(); 
# 1459 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double acosh(double ) throw(); 
# 1493 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float acoshf(float ) throw(); 
# 1505 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double asinh(double ) throw(); 
# 1517 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float asinhf(float ) throw(); 
# 1567 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double atanh(double ) throw(); 
# 1617 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float atanhf(float ) throw(); 
# 1673 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double ldexp(double , int ) throw(); 
# 1729 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float ldexpf(float , int ) throw(); 
# 1780 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double logb(double ) throw(); 
# 1831 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float logbf(float ) throw(); 
# 1857 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" int ilogb(double ) throw(); 
# 1883 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" int ilogbf(float ) throw(); 
# 1955 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double scalbn(double , int ) throw(); 
# 2027 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float scalbnf(float , int ) throw(); 
# 2099 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double scalbln(double , long ) throw(); 
# 2171 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float scalblnf(float , long ) throw(); 
# 2246 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double frexp(double , int * ) throw(); 
# 2321 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float frexpf(float , int * ) throw(); 
# 2334 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double round(double ) throw(); 
# 2347 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float roundf(float ) throw(); 
# 2361 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" long lround(double ) throw(); 
# 2375 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" long lroundf(float ) throw(); 
# 2389 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" long long llround(double ) throw(); 
# 2403 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" long long llroundf(float ) throw(); 
# 2414 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double rint(double ) throw(); 
# 2425 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float rintf(float ) throw(); 
# 2437 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" long lrint(double ) throw(); 
# 2449 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" long lrintf(float ) throw(); 
# 2461 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" long long llrint(double ) throw(); 
# 2473 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" long long llrintf(float ) throw(); 
# 2522 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double nearbyint(double ) throw(); 
# 2571 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float nearbyintf(float ) throw(); 
# 2630 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double ceil(double ) throw(); 
# 2641 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double trunc(double ) throw(); 
# 2652 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float truncf(float ) throw(); 
# 2674 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double fdim(double , double ) throw(); 
# 2696 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float fdimf(float , float ) throw(); 
# 2729 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double atan2(double , double ) throw(); 
# 2760 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double atan(double ) throw(); 
# 2783 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double acos(double ) throw(); 
# 2815 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double asin(double ) throw(); 
# 2855 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double hypot(double , double ) throw(); 
# 2898 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float hypotf(float , float ) throw(); 
# 2983 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double cbrt(double ) throw(); 
# 3065 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float cbrtf(float ) throw(); 
# 3114 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double rcbrt(double ); 
# 3163 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float rcbrtf(float ); 
# 3223 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double sinpi(double ); 
# 3283 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float sinpif(float ); 
# 3335 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double cospi(double ); 
# 3387 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float cospif(float ); 
# 3417 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" void sincospi(double , double * , double * ); 
# 3447 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" void sincospif(float , float * , float * ); 
# 3755 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double pow(double , double ) throw(); 
# 3811 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double modf(double , double * ) throw(); 
# 3870 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double fmod(double , double ) throw(); 
# 3955 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double remainder(double , double ) throw(); 
# 4041 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float remainderf(float , float ) throw(); 
# 4091 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double remquo(double , double , int * ) throw(); 
# 4141 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float remquof(float , float , int * ) throw(); 
# 4179 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double j0(double ) throw(); 
# 4217 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float j0f(float ) throw(); 
# 4274 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double j1(double ) throw(); 
# 4331 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float j1f(float ) throw(); 
# 4370 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double jn(int , double ) throw(); 
# 4409 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float jnf(int , float ) throw(); 
# 4457 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double y0(double ) throw(); 
# 4505 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float y0f(float ) throw(); 
# 4553 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double y1(double ) throw(); 
# 4601 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float y1f(float ) throw(); 
# 4650 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double yn(int , double ) throw(); 
# 4699 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float ynf(int , float ) throw(); 
# 4777 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double erf(double ) throw(); 
# 4855 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float erff(float ) throw(); 
# 4912 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double erfinv(double ); 
# 4969 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float erfinvf(float ); 
# 5003 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double erfc(double ) throw(); 
# 5037 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float erfcf(float ) throw(); 
# 5161 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double lgamma(double ) throw(); 
# 5217 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double erfcinv(double ); 
# 5273 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float erfcinvf(float ); 
# 5331 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double normcdfinv(double ); 
# 5389 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float normcdfinvf(float ); 
# 5432 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double normcdf(double ); 
# 5475 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float normcdff(float ); 
# 5550 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double erfcx(double ); 
# 5625 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float erfcxf(float ); 
# 5754 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float lgammaf(float ) throw(); 
# 5859 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double tgamma(double ) throw(); 
# 5964 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float tgammaf(float ) throw(); 
# 5973 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double copysign(double , double ) throw(); 
# 5982 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float copysignf(float , float ) throw(); 
# 6015 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double nextafter(double , double ) throw(); 
# 6048 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float nextafterf(float , float ) throw(); 
# 6060 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double nan(const char * ) throw(); 
# 6072 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float nanf(const char * ) throw(); 
# 6073
extern "C" int __isinff(float) throw(); 
# 6074
extern "C" int __isnanf(float) throw(); 
# 6083 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" int __finite(double) throw(); 
# 6084
extern "C" int __finitef(float) throw(); 
# 6085
extern "C" int __signbit(double) throw(); 
# 6086
extern "C" int __isnan(double) throw(); 
# 6087
extern "C" int __isinf(double) throw(); 
# 6090
extern "C" int __signbitf(float) throw(); 
# 6244 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" double fma(double , double , double ) throw(); 
# 6398 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float fmaf(float , float , float ) throw(); 
# 6403
extern "C" int __signbitl(long double) throw(); 
# 6409
extern "C" int __finitel(long double) throw(); 
# 6410
extern "C" int __isinfl(long double) throw(); 
# 6411
extern "C" int __isnanl(long double) throw(); 
# 6458 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float acosf(float ) throw(); 
# 6498 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float asinf(float ) throw(); 
# 6538 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float atanf(float ) throw(); 
# 6571 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float atan2f(float , float ) throw(); 
# 6595 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float cosf(float ) throw(); 
# 6637 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float sinf(float ) throw(); 
# 6679 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float tanf(float ) throw(); 
# 6703 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float coshf(float ) throw(); 
# 6744 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float sinhf(float ) throw(); 
# 6774 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float tanhf(float ) throw(); 
# 6825 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float logf(float ) throw(); 
# 6875 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float expf(float ) throw(); 
# 6926 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float log10f(float ) throw(); 
# 6981 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float modff(float , float * ) throw(); 
# 7289 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float powf(float , float ) throw(); 
# 7358 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float sqrtf(float ) throw(); 
# 7417 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float ceilf(float ) throw(); 
# 7489 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float floorf(float ) throw(); 
# 7548 "/usr/local/cuda-5.0/include/math_functions.h"
extern "C" float fmodf(float , float ) throw(); 
# 31 "/usr/include/bits/mathdef.h" 3
extern "C" { typedef float float_t; }
# 32
extern "C" { typedef double double_t; }
# 55 "/usr/include/bits/mathcalls.h" 3
extern "C" double acos(double ) throw(); extern "C" double __acos(double ) throw(); 
# 57
extern "C" double asin(double ) throw(); extern "C" double __asin(double ) throw(); 
# 59
extern "C" double atan(double ) throw(); extern "C" double __atan(double ) throw(); 
# 61
extern "C" double atan2(double , double ) throw(); extern "C" double __atan2(double , double ) throw(); 
# 64
extern "C" double cos(double ) throw(); extern "C" double __cos(double ) throw(); 
# 66
extern "C" double sin(double ) throw(); extern "C" double __sin(double ) throw(); 
# 68
extern "C" double tan(double ) throw(); extern "C" double __tan(double ) throw(); 
# 73
extern "C" double cosh(double ) throw(); extern "C" double __cosh(double ) throw(); 
# 75
extern "C" double sinh(double ) throw(); extern "C" double __sinh(double ) throw(); 
# 77
extern "C" double tanh(double ) throw(); extern "C" double __tanh(double ) throw(); 
# 82
extern "C" void sincos(double , double * , double * ) throw(); extern "C" void __sincos(double , double * , double * ) throw(); 
# 89
extern "C" double acosh(double ) throw(); extern "C" double __acosh(double ) throw(); 
# 91
extern "C" double asinh(double ) throw(); extern "C" double __asinh(double ) throw(); 
# 93
extern "C" double atanh(double ) throw(); extern "C" double __atanh(double ) throw(); 
# 101
extern "C" double exp(double ) throw(); extern "C" double __exp(double ) throw(); 
# 104
extern "C" double frexp(double , int * ) throw(); extern "C" double __frexp(double , int * ) throw(); 
# 107
extern "C" double ldexp(double , int ) throw(); extern "C" double __ldexp(double , int ) throw(); 
# 110
extern "C" double log(double ) throw(); extern "C" double __log(double ) throw(); 
# 113
extern "C" double log10(double ) throw(); extern "C" double __log10(double ) throw(); 
# 116
extern "C" double modf(double , double * ) throw(); extern "C" double __modf(double , double * ) throw(); 
# 121
extern "C" double exp10(double ) throw(); extern "C" double __exp10(double ) throw(); 
# 123
extern "C" double pow10(double ) throw(); extern "C" double __pow10(double ) throw(); 
# 129
extern "C" double expm1(double ) throw(); extern "C" double __expm1(double ) throw(); 
# 132
extern "C" double log1p(double ) throw(); extern "C" double __log1p(double ) throw(); 
# 135
extern "C" double logb(double ) throw(); extern "C" double __logb(double ) throw(); 
# 142
extern "C" double exp2(double ) throw(); extern "C" double __exp2(double ) throw(); 
# 145
extern "C" double log2(double ) throw(); extern "C" double __log2(double ) throw(); 
# 154
extern "C" double pow(double , double ) throw(); extern "C" double __pow(double , double ) throw(); 
# 157
extern "C" double sqrt(double ) throw(); extern "C" double __sqrt(double ) throw(); 
# 163
extern "C" double hypot(double , double ) throw(); extern "C" double __hypot(double , double ) throw(); 
# 170
extern "C" double cbrt(double ) throw(); extern "C" double __cbrt(double ) throw(); 
# 179
extern "C" double ceil(double ) throw() __attribute((const)); extern "C" double __ceil(double ) throw() __attribute((const)); 
# 182
extern "C" double fabs(double ) throw() __attribute((const)); extern "C" double __fabs(double ) throw() __attribute((const)); 
# 185
extern "C" double floor(double ) throw() __attribute((const)); extern "C" double __floor(double ) throw() __attribute((const)); 
# 188
extern "C" double fmod(double , double ) throw(); extern "C" double __fmod(double , double ) throw(); 
# 193
extern "C" int __isinf(double ) throw() __attribute((const)); 
# 196
extern "C" int __finite(double ) throw() __attribute((const)); 
# 202
extern "C" int isinf(double ) throw() __attribute((const)); 
# 205
extern "C" int finite(double ) throw() __attribute((const)); 
# 208
extern "C" double drem(double , double ) throw(); extern "C" double __drem(double , double ) throw(); 
# 212
extern "C" double significand(double ) throw(); extern "C" double __significand(double ) throw(); 
# 218
extern "C" double copysign(double , double ) throw() __attribute((const)); extern "C" double __copysign(double , double ) throw() __attribute((const)); 
# 225
extern "C" double nan(const char * ) throw() __attribute((const)); extern "C" double __nan(const char * ) throw() __attribute((const)); 
# 231
extern "C" int __isnan(double ) throw() __attribute((const)); 
# 235
extern "C" int isnan(double ) throw() __attribute((const)); 
# 238
extern "C" double j0(double) throw(); extern "C" double __j0(double) throw(); 
# 239
extern "C" double j1(double) throw(); extern "C" double __j1(double) throw(); 
# 240
extern "C" double jn(int, double) throw(); extern "C" double __jn(int, double) throw(); 
# 241
extern "C" double y0(double) throw(); extern "C" double __y0(double) throw(); 
# 242
extern "C" double y1(double) throw(); extern "C" double __y1(double) throw(); 
# 243
extern "C" double yn(int, double) throw(); extern "C" double __yn(int, double) throw(); 
# 250
extern "C" double erf(double) throw(); extern "C" double __erf(double) throw(); 
# 251
extern "C" double erfc(double) throw(); extern "C" double __erfc(double) throw(); 
# 252
extern "C" double lgamma(double) throw(); extern "C" double __lgamma(double) throw(); 
# 259
extern "C" double tgamma(double) throw(); extern "C" double __tgamma(double) throw(); 
# 265
extern "C" double gamma(double) throw(); extern "C" double __gamma(double) throw(); 
# 272
extern "C" double lgamma_r(double, int * ) throw(); extern "C" double __lgamma_r(double, int * ) throw(); 
# 280
extern "C" double rint(double ) throw(); extern "C" double __rint(double ) throw(); 
# 283
extern "C" double nextafter(double , double ) throw() __attribute((const)); extern "C" double __nextafter(double , double ) throw() __attribute((const)); 
# 285
extern "C" double nexttoward(double , long double ) throw() __attribute((const)); extern "C" double __nexttoward(double , long double ) throw() __attribute((const)); 
# 289
extern "C" double remainder(double , double ) throw(); extern "C" double __remainder(double , double ) throw(); 
# 293
extern "C" double scalbn(double , int ) throw(); extern "C" double __scalbn(double , int ) throw(); 
# 297
extern "C" int ilogb(double ) throw(); extern "C" int __ilogb(double ) throw(); 
# 302
extern "C" double scalbln(double , long ) throw(); extern "C" double __scalbln(double , long ) throw(); 
# 306
extern "C" double nearbyint(double ) throw(); extern "C" double __nearbyint(double ) throw(); 
# 310
extern "C" double round(double ) throw() __attribute((const)); extern "C" double __round(double ) throw() __attribute((const)); 
# 314
extern "C" double trunc(double ) throw() __attribute((const)); extern "C" double __trunc(double ) throw() __attribute((const)); 
# 319
extern "C" double remquo(double , double , int * ) throw(); extern "C" double __remquo(double , double , int * ) throw(); 
# 326
extern "C" long lrint(double ) throw(); extern "C" long __lrint(double ) throw(); 
# 327
extern "C" long long llrint(double ) throw(); extern "C" long long __llrint(double ) throw(); 
# 331
extern "C" long lround(double ) throw(); extern "C" long __lround(double ) throw(); 
# 332
extern "C" long long llround(double ) throw(); extern "C" long long __llround(double ) throw(); 
# 336
extern "C" double fdim(double , double ) throw(); extern "C" double __fdim(double , double ) throw(); 
# 339
extern "C" double fmax(double , double ) throw(); extern "C" double __fmax(double , double ) throw(); 
# 342
extern "C" double fmin(double , double ) throw(); extern "C" double __fmin(double , double ) throw(); 
# 346
extern "C" int __fpclassify(double ) throw()
# 347
 __attribute((const)); 
# 350
extern "C" int __signbit(double ) throw()
# 351
 __attribute((const)); 
# 355
extern "C" double fma(double , double , double ) throw(); extern "C" double __fma(double , double , double ) throw(); 
# 364
extern "C" double scalb(double , double ) throw(); extern "C" double __scalb(double , double ) throw(); 
# 55 "/usr/include/bits/mathcalls.h" 3
extern "C" float acosf(float ) throw(); extern "C" float __acosf(float ) throw(); 
# 57
extern "C" float asinf(float ) throw(); extern "C" float __asinf(float ) throw(); 
# 59
extern "C" float atanf(float ) throw(); extern "C" float __atanf(float ) throw(); 
# 61
extern "C" float atan2f(float , float ) throw(); extern "C" float __atan2f(float , float ) throw(); 
# 64
extern "C" float cosf(float ) throw(); 
# 66
extern "C" float sinf(float ) throw(); 
# 68
extern "C" float tanf(float ) throw(); 
# 73
extern "C" float coshf(float ) throw(); extern "C" float __coshf(float ) throw(); 
# 75
extern "C" float sinhf(float ) throw(); extern "C" float __sinhf(float ) throw(); 
# 77
extern "C" float tanhf(float ) throw(); extern "C" float __tanhf(float ) throw(); 
# 83
extern "C" void sincosf(float , float * , float * ) throw(); 
# 89 "/usr/include/bits/mathcalls.h" 3
extern "C" float acoshf(float ) throw(); extern "C" float __acoshf(float ) throw(); 
# 91
extern "C" float asinhf(float ) throw(); extern "C" float __asinhf(float ) throw(); 
# 93
extern "C" float atanhf(float ) throw(); extern "C" float __atanhf(float ) throw(); 
# 101
extern "C" float expf(float ) throw(); 
# 104
extern "C" float frexpf(float , int * ) throw(); extern "C" float __frexpf(float , int * ) throw(); 
# 107
extern "C" float ldexpf(float , int ) throw(); extern "C" float __ldexpf(float , int ) throw(); 
# 110
extern "C" float logf(float ) throw(); 
# 113
extern "C" float log10f(float ) throw(); 
# 116
extern "C" float modff(float , float * ) throw(); extern "C" float __modff(float , float * ) throw(); 
# 121
extern "C" float exp10f(float ) throw(); 
# 123
extern "C" float pow10f(float ) throw(); extern "C" float __pow10f(float ) throw(); 
# 129
extern "C" float expm1f(float ) throw(); extern "C" float __expm1f(float ) throw(); 
# 132
extern "C" float log1pf(float ) throw(); extern "C" float __log1pf(float ) throw(); 
# 135
extern "C" float logbf(float ) throw(); extern "C" float __logbf(float ) throw(); 
# 142
extern "C" float exp2f(float ) throw(); extern "C" float __exp2f(float ) throw(); 
# 145
extern "C" float log2f(float ) throw(); 
# 154
extern "C" float powf(float , float ) throw(); 
# 157
extern "C" float sqrtf(float ) throw(); extern "C" float __sqrtf(float ) throw(); 
# 163
extern "C" float hypotf(float , float ) throw(); extern "C" float __hypotf(float , float ) throw(); 
# 170
extern "C" float cbrtf(float ) throw(); extern "C" float __cbrtf(float ) throw(); 
# 179
extern "C" float ceilf(float ) throw() __attribute((const)); extern "C" float __ceilf(float ) throw() __attribute((const)); 
# 182
extern "C" float fabsf(float ) throw() __attribute((const)); extern "C" float __fabsf(float ) throw() __attribute((const)); 
# 185
extern "C" float floorf(float ) throw() __attribute((const)); extern "C" float __floorf(float ) throw() __attribute((const)); 
# 188
extern "C" float fmodf(float , float ) throw(); extern "C" float __fmodf(float , float ) throw(); 
# 193
extern "C" int __isinff(float ) throw() __attribute((const)); 
# 196
extern "C" int __finitef(float ) throw() __attribute((const)); 
# 202
extern "C" int isinff(float ) throw() __attribute((const)); 
# 205
extern "C" int finitef(float ) throw() __attribute((const)); 
# 208
extern "C" float dremf(float , float ) throw(); extern "C" float __dremf(float , float ) throw(); 
# 212
extern "C" float significandf(float ) throw(); extern "C" float __significandf(float ) throw(); 
# 218
extern "C" float copysignf(float , float ) throw() __attribute((const)); extern "C" float __copysignf(float , float ) throw() __attribute((const)); 
# 225
extern "C" float nanf(const char * ) throw() __attribute((const)); extern "C" float __nanf(const char * ) throw() __attribute((const)); 
# 231
extern "C" int __isnanf(float ) throw() __attribute((const)); 
# 235
extern "C" int isnanf(float ) throw() __attribute((const)); 
# 238
extern "C" float j0f(float) throw(); extern "C" float __j0f(float) throw(); 
# 239
extern "C" float j1f(float) throw(); extern "C" float __j1f(float) throw(); 
# 240
extern "C" float jnf(int, float) throw(); extern "C" float __jnf(int, float) throw(); 
# 241
extern "C" float y0f(float) throw(); extern "C" float __y0f(float) throw(); 
# 242
extern "C" float y1f(float) throw(); extern "C" float __y1f(float) throw(); 
# 243
extern "C" float ynf(int, float) throw(); extern "C" float __ynf(int, float) throw(); 
# 250
extern "C" float erff(float) throw(); extern "C" float __erff(float) throw(); 
# 251
extern "C" float erfcf(float) throw(); extern "C" float __erfcf(float) throw(); 
# 252
extern "C" float lgammaf(float) throw(); extern "C" float __lgammaf(float) throw(); 
# 259
extern "C" float tgammaf(float) throw(); extern "C" float __tgammaf(float) throw(); 
# 265
extern "C" float gammaf(float) throw(); extern "C" float __gammaf(float) throw(); 
# 272
extern "C" float lgammaf_r(float, int * ) throw(); extern "C" float __lgammaf_r(float, int * ) throw(); 
# 280
extern "C" float rintf(float ) throw(); extern "C" float __rintf(float ) throw(); 
# 283
extern "C" float nextafterf(float , float ) throw() __attribute((const)); extern "C" float __nextafterf(float , float ) throw() __attribute((const)); 
# 285
extern "C" float nexttowardf(float , long double ) throw() __attribute((const)); extern "C" float __nexttowardf(float , long double ) throw() __attribute((const)); 
# 289
extern "C" float remainderf(float , float ) throw(); extern "C" float __remainderf(float , float ) throw(); 
# 293
extern "C" float scalbnf(float , int ) throw(); extern "C" float __scalbnf(float , int ) throw(); 
# 297
extern "C" int ilogbf(float ) throw(); extern "C" int __ilogbf(float ) throw(); 
# 302
extern "C" float scalblnf(float , long ) throw(); extern "C" float __scalblnf(float , long ) throw(); 
# 306
extern "C" float nearbyintf(float ) throw(); extern "C" float __nearbyintf(float ) throw(); 
# 310
extern "C" float roundf(float ) throw() __attribute((const)); extern "C" float __roundf(float ) throw() __attribute((const)); 
# 314
extern "C" float truncf(float ) throw() __attribute((const)); extern "C" float __truncf(float ) throw() __attribute((const)); 
# 319
extern "C" float remquof(float , float , int * ) throw(); extern "C" float __remquof(float , float , int * ) throw(); 
# 326
extern "C" long lrintf(float ) throw(); extern "C" long __lrintf(float ) throw(); 
# 327
extern "C" long long llrintf(float ) throw(); extern "C" long long __llrintf(float ) throw(); 
# 331
extern "C" long lroundf(float ) throw(); extern "C" long __lroundf(float ) throw(); 
# 332
extern "C" long long llroundf(float ) throw(); extern "C" long long __llroundf(float ) throw(); 
# 336
extern "C" float fdimf(float , float ) throw(); extern "C" float __fdimf(float , float ) throw(); 
# 339
extern "C" float fmaxf(float , float ) throw(); extern "C" float __fmaxf(float , float ) throw(); 
# 342
extern "C" float fminf(float , float ) throw(); extern "C" float __fminf(float , float ) throw(); 
# 346
extern "C" int __fpclassifyf(float ) throw()
# 347
 __attribute((const)); 
# 350
extern "C" int __signbitf(float ) throw()
# 351
 __attribute((const)); 
# 355
extern "C" float fmaf(float , float , float ) throw(); extern "C" float __fmaf(float , float , float ) throw(); 
# 364
extern "C" float scalbf(float , float ) throw(); extern "C" float __scalbf(float , float ) throw(); 
# 55 "/usr/include/bits/mathcalls.h" 3
extern "C" long double acosl(long double ) throw(); extern "C" long double __acosl(long double ) throw(); 
# 57
extern "C" long double asinl(long double ) throw(); extern "C" long double __asinl(long double ) throw(); 
# 59
extern "C" long double atanl(long double ) throw(); extern "C" long double __atanl(long double ) throw(); 
# 61
extern "C" long double atan2l(long double , long double ) throw(); extern "C" long double __atan2l(long double , long double ) throw(); 
# 64
extern "C" long double cosl(long double ) throw(); extern "C" long double __cosl(long double ) throw(); 
# 66
extern "C" long double sinl(long double ) throw(); extern "C" long double __sinl(long double ) throw(); 
# 68
extern "C" long double tanl(long double ) throw(); extern "C" long double __tanl(long double ) throw(); 
# 73
extern "C" long double coshl(long double ) throw(); extern "C" long double __coshl(long double ) throw(); 
# 75
extern "C" long double sinhl(long double ) throw(); extern "C" long double __sinhl(long double ) throw(); 
# 77
extern "C" long double tanhl(long double ) throw(); extern "C" long double __tanhl(long double ) throw(); 
# 83
extern "C" void sincosl(long double , long double * , long double * ) throw(); 
# 83 "/usr/include/bits/mathcalls.h" 3
extern "C" void __sincosl(long double , long double * , long double * ) throw(); 
# 89 "/usr/include/bits/mathcalls.h" 3
extern "C" long double acoshl(long double ) throw(); extern "C" long double __acoshl(long double ) throw(); 
# 91
extern "C" long double asinhl(long double ) throw(); extern "C" long double __asinhl(long double ) throw(); 
# 93
extern "C" long double atanhl(long double ) throw(); extern "C" long double __atanhl(long double ) throw(); 
# 101
extern "C" long double expl(long double ) throw(); extern "C" long double __expl(long double ) throw(); 
# 104
extern "C" long double frexpl(long double , int * ) throw(); extern "C" long double __frexpl(long double , int * ) throw(); 
# 107
extern "C" long double ldexpl(long double , int ) throw(); extern "C" long double __ldexpl(long double , int ) throw(); 
# 110
extern "C" long double logl(long double ) throw(); extern "C" long double __logl(long double ) throw(); 
# 113
extern "C" long double log10l(long double ) throw(); extern "C" long double __log10l(long double ) throw(); 
# 116
extern "C" long double modfl(long double , long double * ) throw(); extern "C" long double __modfl(long double , long double * ) throw(); 
# 121
extern "C" long double exp10l(long double ) throw(); extern "C" long double __exp10l(long double ) throw(); 
# 123
extern "C" long double pow10l(long double ) throw(); extern "C" long double __pow10l(long double ) throw(); 
# 129
extern "C" long double expm1l(long double ) throw(); extern "C" long double __expm1l(long double ) throw(); 
# 132
extern "C" long double log1pl(long double ) throw(); extern "C" long double __log1pl(long double ) throw(); 
# 135
extern "C" long double logbl(long double ) throw(); extern "C" long double __logbl(long double ) throw(); 
# 142
extern "C" long double exp2l(long double ) throw(); extern "C" long double __exp2l(long double ) throw(); 
# 145
extern "C" long double log2l(long double ) throw(); extern "C" long double __log2l(long double ) throw(); 
# 154
extern "C" long double powl(long double , long double ) throw(); extern "C" long double __powl(long double , long double ) throw(); 
# 157
extern "C" long double sqrtl(long double ) throw(); extern "C" long double __sqrtl(long double ) throw(); 
# 163
extern "C" long double hypotl(long double , long double ) throw(); extern "C" long double __hypotl(long double , long double ) throw(); 
# 170
extern "C" long double cbrtl(long double ) throw(); extern "C" long double __cbrtl(long double ) throw(); 
# 179
extern "C" long double ceill(long double ) throw() __attribute((const)); extern "C" long double __ceill(long double ) throw() __attribute((const)); 
# 182
extern "C" long double fabsl(long double ) throw() __attribute((const)); extern "C" long double __fabsl(long double ) throw() __attribute((const)); 
# 185
extern "C" long double floorl(long double ) throw() __attribute((const)); extern "C" long double __floorl(long double ) throw() __attribute((const)); 
# 188
extern "C" long double fmodl(long double , long double ) throw(); extern "C" long double __fmodl(long double , long double ) throw(); 
# 193
extern "C" int __isinfl(long double ) throw() __attribute((const)); 
# 196
extern "C" int __finitel(long double ) throw() __attribute((const)); 
# 202
extern "C" int isinfl(long double ) throw() __attribute((const)); 
# 205
extern "C" int finitel(long double ) throw() __attribute((const)); 
# 208
extern "C" long double dreml(long double , long double ) throw(); extern "C" long double __dreml(long double , long double ) throw(); 
# 212
extern "C" long double significandl(long double ) throw(); extern "C" long double __significandl(long double ) throw(); 
# 218
extern "C" long double copysignl(long double , long double ) throw() __attribute((const)); extern "C" long double __copysignl(long double , long double ) throw() __attribute((const)); 
# 225
extern "C" long double nanl(const char * ) throw() __attribute((const)); extern "C" long double __nanl(const char * ) throw() __attribute((const)); 
# 231
extern "C" int __isnanl(long double ) throw() __attribute((const)); 
# 235
extern "C" int isnanl(long double ) throw() __attribute((const)); 
# 238
extern "C" long double j0l(long double) throw(); extern "C" long double __j0l(long double) throw(); 
# 239
extern "C" long double j1l(long double) throw(); extern "C" long double __j1l(long double) throw(); 
# 240
extern "C" long double jnl(int, long double) throw(); extern "C" long double __jnl(int, long double) throw(); 
# 241
extern "C" long double y0l(long double) throw(); extern "C" long double __y0l(long double) throw(); 
# 242
extern "C" long double y1l(long double) throw(); extern "C" long double __y1l(long double) throw(); 
# 243
extern "C" long double ynl(int, long double) throw(); extern "C" long double __ynl(int, long double) throw(); 
# 250
extern "C" long double erfl(long double) throw(); extern "C" long double __erfl(long double) throw(); 
# 251
extern "C" long double erfcl(long double) throw(); extern "C" long double __erfcl(long double) throw(); 
# 252
extern "C" long double lgammal(long double) throw(); extern "C" long double __lgammal(long double) throw(); 
# 259
extern "C" long double tgammal(long double) throw(); extern "C" long double __tgammal(long double) throw(); 
# 265
extern "C" long double gammal(long double) throw(); extern "C" long double __gammal(long double) throw(); 
# 272
extern "C" long double lgammal_r(long double, int * ) throw(); extern "C" long double __lgammal_r(long double, int * ) throw(); 
# 280
extern "C" long double rintl(long double ) throw(); extern "C" long double __rintl(long double ) throw(); 
# 283
extern "C" long double nextafterl(long double , long double ) throw() __attribute((const)); extern "C" long double __nextafterl(long double , long double ) throw() __attribute((const)); 
# 285
extern "C" long double nexttowardl(long double , long double ) throw() __attribute((const)); extern "C" long double __nexttowardl(long double , long double ) throw() __attribute((const)); 
# 289
extern "C" long double remainderl(long double , long double ) throw(); extern "C" long double __remainderl(long double , long double ) throw(); 
# 293
extern "C" long double scalbnl(long double , int ) throw(); extern "C" long double __scalbnl(long double , int ) throw(); 
# 297
extern "C" int ilogbl(long double ) throw(); extern "C" int __ilogbl(long double ) throw(); 
# 302
extern "C" long double scalblnl(long double , long ) throw(); extern "C" long double __scalblnl(long double , long ) throw(); 
# 306
extern "C" long double nearbyintl(long double ) throw(); extern "C" long double __nearbyintl(long double ) throw(); 
# 310
extern "C" long double roundl(long double ) throw() __attribute((const)); extern "C" long double __roundl(long double ) throw() __attribute((const)); 
# 314
extern "C" long double truncl(long double ) throw() __attribute((const)); extern "C" long double __truncl(long double ) throw() __attribute((const)); 
# 319
extern "C" long double remquol(long double , long double , int * ) throw(); extern "C" long double __remquol(long double , long double , int * ) throw(); 
# 326
extern "C" long lrintl(long double ) throw(); extern "C" long __lrintl(long double ) throw(); 
# 327
extern "C" long long llrintl(long double ) throw(); extern "C" long long __llrintl(long double ) throw(); 
# 331
extern "C" long lroundl(long double ) throw(); extern "C" long __lroundl(long double ) throw(); 
# 332
extern "C" long long llroundl(long double ) throw(); extern "C" long long __llroundl(long double ) throw(); 
# 336
extern "C" long double fdiml(long double , long double ) throw(); extern "C" long double __fdiml(long double , long double ) throw(); 
# 339
extern "C" long double fmaxl(long double , long double ) throw(); extern "C" long double __fmaxl(long double , long double ) throw(); 
# 342
extern "C" long double fminl(long double , long double ) throw(); extern "C" long double __fminl(long double , long double ) throw(); 
# 346
extern "C" int __fpclassifyl(long double ) throw()
# 347
 __attribute((const)); 
# 350
extern "C" int __signbitl(long double ) throw()
# 351
 __attribute((const)); 
# 355
extern "C" long double fmal(long double , long double , long double ) throw(); extern "C" long double __fmal(long double , long double , long double ) throw(); 
# 364
extern "C" long double scalbl(long double , long double ) throw(); extern "C" long double __scalbl(long double , long double ) throw(); 
# 157 "/usr/include/math.h" 3
extern "C" { extern int signgam; } 
# 199 "/usr/include/math.h" 3
enum { 
# 200
FP_NAN, 
# 202
FP_INFINITE, 
# 204
FP_ZERO, 
# 206
FP_SUBNORMAL, 
# 208
FP_NORMAL
# 210
}; 
# 298 "/usr/include/math.h" 3
extern "C" { typedef 
# 292
enum { 
# 293
_IEEE_ = (-1), 
# 294
_SVID_ = 0, 
# 295
_XOPEN_, 
# 296
_POSIX_, 
# 297
_ISOC_
# 298
} _LIB_VERSION_TYPE; }
# 303
extern "C" { extern _LIB_VERSION_TYPE _LIB_VERSION; } 
# 314 "/usr/include/math.h" 3
extern "C" { struct __exception { 
# 319
int type; 
# 320
char *name; 
# 321
double arg1; 
# 322
double arg2; 
# 323
double retval; 
# 324
}; }
# 327
extern "C" int matherr(__exception * ) throw(); 
# 67 "/usr/include/bits/waitstatus.h" 3
extern "C" { union wait { 
# 69
int w_status; 
# 71
struct { 
# 73
unsigned __w_termsig:7; 
# 74
unsigned __w_coredump:1; 
# 75
unsigned __w_retcode:8; 
# 76
unsigned:16; 
# 84
} __wait_terminated; 
# 86
struct { 
# 88
unsigned __w_stopval:8; 
# 89
unsigned __w_stopsig:8; 
# 90
unsigned:16; 
# 97
} __wait_stopped; 
# 98
}; }
# 102 "/usr/include/stdlib.h" 3
extern "C" { typedef 
# 99
struct { 
# 100
int quot; 
# 101
int rem; 
# 102
} div_t; }
# 110
extern "C" { typedef 
# 107
struct { 
# 108
long quot; 
# 109
long rem; 
# 110
} ldiv_t; }
# 122
__extension__ extern "C" { typedef 
# 119
struct { 
# 120
long long quot; 
# 121
long long rem; 
# 122
} lldiv_t; }
# 140 "/usr/include/stdlib.h" 3
extern "C" size_t __ctype_get_mb_cur_max() throw(); 
# 145
extern "C" double atof(const char * ) throw()
# 146
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 148
extern "C" int atoi(const char * ) throw()
# 149
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 151
extern "C" long atol(const char * ) throw()
# 152
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 158
__extension__ extern "C" long long atoll(const char * ) throw()
# 159
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 165
extern "C" double strtod(const char *__restrict__ , char **__restrict__ ) throw()
# 167
 __attribute((__nonnull__(1))); 
# 173
extern "C" float strtof(const char *__restrict__ , char **__restrict__ ) throw()
# 174
 __attribute((__nonnull__(1))); 
# 176
extern "C" long double strtold(const char *__restrict__ , char **__restrict__ ) throw()
# 178
 __attribute((__nonnull__(1))); 
# 184
extern "C" long strtol(const char *__restrict__ , char **__restrict__ , int ) throw()
# 186
 __attribute((__nonnull__(1))); 
# 188
extern "C" unsigned long strtoul(const char *__restrict__ , char **__restrict__ , int ) throw()
# 190
 __attribute((__nonnull__(1))); 
# 196
__extension__ extern "C" long long strtoq(const char *__restrict__ , char **__restrict__ , int ) throw()
# 198
 __attribute((__nonnull__(1))); 
# 201
__extension__ extern "C" unsigned long long strtouq(const char *__restrict__ , char **__restrict__ , int ) throw()
# 203
 __attribute((__nonnull__(1))); 
# 210
__extension__ extern "C" long long strtoll(const char *__restrict__ , char **__restrict__ , int ) throw()
# 212
 __attribute((__nonnull__(1))); 
# 215
__extension__ extern "C" unsigned long long strtoull(const char *__restrict__ , char **__restrict__ , int ) throw()
# 217
 __attribute((__nonnull__(1))); 
# 240 "/usr/include/stdlib.h" 3
extern "C" long strtol_l(const char *__restrict__ , char **__restrict__ , int , __locale_t ) throw()
# 242
 __attribute((__nonnull__(1, 4))); 
# 244
extern "C" unsigned long strtoul_l(const char *__restrict__ , char **__restrict__ , int , __locale_t ) throw()
# 247
 __attribute((__nonnull__(1, 4))); 
# 250
__extension__ extern "C" long long strtoll_l(const char *__restrict__ , char **__restrict__ , int , __locale_t ) throw()
# 253
 __attribute((__nonnull__(1, 4))); 
# 256
__extension__ extern "C" unsigned long long strtoull_l(const char *__restrict__ , char **__restrict__ , int , __locale_t ) throw()
# 259
 __attribute((__nonnull__(1, 4))); 
# 261
extern "C" double strtod_l(const char *__restrict__ , char **__restrict__ , __locale_t ) throw()
# 263
 __attribute((__nonnull__(1, 3))); 
# 265
extern "C" float strtof_l(const char *__restrict__ , char **__restrict__ , __locale_t ) throw()
# 267
 __attribute((__nonnull__(1, 3))); 
# 269
extern "C" long double strtold_l(const char *__restrict__ , char **__restrict__ , __locale_t ) throw()
# 272
 __attribute((__nonnull__(1, 3))); 
# 311 "/usr/include/stdlib.h" 3
extern "C" char *l64a(long ) throw(); 
# 314
extern "C" long a64l(const char * ) throw()
# 315
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 34 "/usr/include/sys/types.h" 3
extern "C" { typedef __u_char u_char; }
# 35
extern "C" { typedef __u_short u_short; }
# 36
extern "C" { typedef __u_int u_int; }
# 37
extern "C" { typedef __u_long u_long; }
# 38
extern "C" { typedef __quad_t quad_t; }
# 39
extern "C" { typedef __u_quad_t u_quad_t; }
# 40
extern "C" { typedef __fsid_t fsid_t; }
# 45
extern "C" { typedef __loff_t loff_t; }
# 49
extern "C" { typedef __ino_t ino_t; }
# 56
extern "C" { typedef __ino64_t ino64_t; }
# 61
extern "C" { typedef __dev_t dev_t; }
# 66
extern "C" { typedef __gid_t gid_t; }
# 71
extern "C" { typedef __mode_t mode_t; }
# 76
extern "C" { typedef __nlink_t nlink_t; }
# 81
extern "C" { typedef __uid_t uid_t; }
# 87
extern "C" { typedef __off_t off_t; }
# 94
extern "C" { typedef __off64_t off64_t; }
# 105 "/usr/include/sys/types.h" 3
extern "C" { typedef __id_t id_t; }
# 110
extern "C" { typedef __ssize_t ssize_t; }
# 116
extern "C" { typedef __daddr_t daddr_t; }
# 117
extern "C" { typedef __caddr_t caddr_t; }
# 123
extern "C" { typedef __key_t key_t; }
# 137 "/usr/include/sys/types.h" 3
extern "C" { typedef __useconds_t useconds_t; }
# 141
extern "C" { typedef __suseconds_t suseconds_t; }
# 151 "/usr/include/sys/types.h" 3
extern "C" { typedef unsigned long ulong; }
# 152
extern "C" { typedef unsigned short ushort; }
# 153
extern "C" { typedef unsigned uint; }
# 195 "/usr/include/sys/types.h" 3
extern "C" { typedef signed char int8_t __attribute((__mode__(__QI__))); }
# 196
extern "C" { typedef short int16_t __attribute((__mode__(__HI__))); }
# 197
extern "C" { typedef int int32_t __attribute((__mode__(__SI__))); }
# 198
extern "C" { typedef long int64_t __attribute((__mode__(__DI__))); }
# 201
extern "C" { typedef unsigned char u_int8_t __attribute((__mode__(__QI__))); }
# 202
extern "C" { typedef unsigned short u_int16_t __attribute((__mode__(__HI__))); }
# 203
extern "C" { typedef unsigned u_int32_t __attribute((__mode__(__SI__))); }
# 204
extern "C" { typedef unsigned long u_int64_t __attribute((__mode__(__DI__))); }
# 206
extern "C" { typedef long register_t __attribute((__mode__(__word__))); }
# 24 "/usr/include/bits/sigset.h" 3
extern "C" { typedef int __sig_atomic_t; }
# 32
extern "C" { typedef 
# 30
struct { 
# 31
unsigned long __val[(1024) / ((8) * sizeof(unsigned long))]; 
# 32
} __sigset_t; }
# 38 "/usr/include/sys/select.h" 3
extern "C" { typedef __sigset_t sigset_t; }
# 75 "/usr/include/bits/time.h" 3
extern "C" { struct timeval { 
# 77
__time_t tv_sec; 
# 78
__suseconds_t tv_usec; 
# 79
}; }
# 55 "/usr/include/sys/select.h" 3
extern "C" { typedef long __fd_mask; }
# 78 "/usr/include/sys/select.h" 3
extern "C" { typedef 
# 68
struct { 
# 72
__fd_mask fds_bits[1024 / (8 * ((int)sizeof(__fd_mask)))]; 
# 78
} fd_set; }
# 85
extern "C" { typedef __fd_mask fd_mask; }
# 109 "/usr/include/sys/select.h" 3
extern "C" int select(int , fd_set *__restrict__ , fd_set *__restrict__ , fd_set *__restrict__ , timeval *__restrict__ ); 
# 121 "/usr/include/sys/select.h" 3
extern "C" int pselect(int , fd_set *__restrict__ , fd_set *__restrict__ , fd_set *__restrict__ , const timespec *__restrict__ , const __sigset_t *__restrict__ ); 
# 31 "/usr/include/sys/sysmacros.h" 3
__extension__ extern "C" unsigned gnu_dev_major(unsigned long long ) throw(); 
# 34
__extension__ extern "C" unsigned gnu_dev_minor(unsigned long long ) throw(); 
# 37
__extension__ extern "C" unsigned long long gnu_dev_makedev(unsigned , unsigned ) throw(); 
# 229 "/usr/include/sys/types.h" 3
extern "C" { typedef __blksize_t blksize_t; }
# 236
extern "C" { typedef __blkcnt_t blkcnt_t; }
# 240
extern "C" { typedef __fsblkcnt_t fsblkcnt_t; }
# 244
extern "C" { typedef __fsfilcnt_t fsfilcnt_t; }
# 263 "/usr/include/sys/types.h" 3
extern "C" { typedef __blkcnt64_t blkcnt64_t; }
# 264
extern "C" { typedef __fsblkcnt64_t fsblkcnt64_t; }
# 265
extern "C" { typedef __fsfilcnt64_t fsfilcnt64_t; }
# 50 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef unsigned long pthread_t; }
# 57
extern "C" { typedef 
# 54
union { 
# 55
char __size[56]; 
# 56
long __align; 
# 57
} pthread_attr_t; }
# 65
extern "C" { typedef 
# 61
struct __pthread_internal_list { 
# 63
__pthread_internal_list *__prev; 
# 64
__pthread_internal_list *__next; 
# 65
} __pthread_list_t; }
# 104 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef 
# 77 "/usr/include/bits/pthreadtypes.h" 3
union { 
# 78
struct __pthread_mutex_s { 
# 80
int __lock; 
# 81
unsigned __count; 
# 82
int __owner; 
# 84
unsigned __nusers; 
# 88
int __kind; 
# 90
int __spins; 
# 91
__pthread_list_t __list; 
# 101 "/usr/include/bits/pthreadtypes.h" 3
} __data; 
# 102
char __size[40]; 
# 103
long __align; 
# 104
} pthread_mutex_t; }
# 110
extern "C" { typedef 
# 107
union { 
# 108
char __size[4]; 
# 109
int __align; 
# 110
} pthread_mutexattr_t; }
# 130
extern "C" { typedef 
# 116
union { 
# 118
struct { 
# 119
int __lock; 
# 120
unsigned __futex; 
# 121
__extension__ unsigned long long __total_seq; 
# 122
__extension__ unsigned long long __wakeup_seq; 
# 123
__extension__ unsigned long long __woken_seq; 
# 124
void *__mutex; 
# 125
unsigned __nwaiters; 
# 126
unsigned __broadcast_seq; 
# 127
} __data; 
# 128
char __size[48]; 
# 129
__extension__ long long __align; 
# 130
} pthread_cond_t; }
# 136
extern "C" { typedef 
# 133
union { 
# 134
char __size[4]; 
# 135
int __align; 
# 136
} pthread_condattr_t; }
# 140
extern "C" { typedef unsigned pthread_key_t; }
# 144
extern "C" { typedef int pthread_once_t; }
# 189 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef 
# 151 "/usr/include/bits/pthreadtypes.h" 3
union { 
# 154
struct { 
# 155
int __lock; 
# 156
unsigned __nr_readers; 
# 157
unsigned __readers_wakeup; 
# 158
unsigned __writer_wakeup; 
# 159
unsigned __nr_readers_queued; 
# 160
unsigned __nr_writers_queued; 
# 161
int __writer; 
# 162
int __shared; 
# 163
unsigned long __pad1; 
# 164
unsigned long __pad2; 
# 167
unsigned __flags; 
# 168
} __data; 
# 187 "/usr/include/bits/pthreadtypes.h" 3
char __size[56]; 
# 188
long __align; 
# 189
} pthread_rwlock_t; }
# 195
extern "C" { typedef 
# 192
union { 
# 193
char __size[8]; 
# 194
long __align; 
# 195
} pthread_rwlockattr_t; }
# 201
extern "C" { typedef volatile int pthread_spinlock_t; }
# 210
extern "C" { typedef 
# 207
union { 
# 208
char __size[32]; 
# 209
long __align; 
# 210
} pthread_barrier_t; }
# 216
extern "C" { typedef 
# 213
union { 
# 214
char __size[4]; 
# 215
int __align; 
# 216
} pthread_barrierattr_t; }
# 327 "/usr/include/stdlib.h" 3
extern "C" long random() throw(); 
# 330
extern "C" void srandom(unsigned ) throw(); 
# 336
extern "C" char *initstate(unsigned , char * , size_t ) throw()
# 337
 __attribute((__nonnull__(2))); 
# 341
extern "C" char *setstate(char * ) throw() __attribute((__nonnull__(1))); 
# 349
extern "C" { struct random_data { 
# 351
int32_t *fptr; 
# 352
int32_t *rptr; 
# 353
int32_t *state; 
# 354
int rand_type; 
# 355
int rand_deg; 
# 356
int rand_sep; 
# 357
int32_t *end_ptr; 
# 358
}; }
# 360
extern "C" int random_r(random_data *__restrict__ , int32_t *__restrict__ ) throw()
# 361
 __attribute((__nonnull__(1, 2))); 
# 363
extern "C" int srandom_r(unsigned , random_data * ) throw()
# 364
 __attribute((__nonnull__(2))); 
# 366
extern "C" int initstate_r(unsigned , char *__restrict__ , size_t , random_data *__restrict__ ) throw()
# 369
 __attribute((__nonnull__(2, 4))); 
# 371
extern "C" int setstate_r(char *__restrict__ , random_data *__restrict__ ) throw()
# 373
 __attribute((__nonnull__(1, 2))); 
# 380
extern "C" int rand() throw(); 
# 382
extern "C" void srand(unsigned ) throw(); 
# 387
extern "C" int rand_r(unsigned * ) throw(); 
# 395
extern "C" double drand48() throw(); 
# 396
extern "C" double erand48(unsigned short  [3]) throw() __attribute((__nonnull__(1))); 
# 399
extern "C" long lrand48() throw(); 
# 400
extern "C" long nrand48(unsigned short  [3]) throw()
# 401
 __attribute((__nonnull__(1))); 
# 404
extern "C" long mrand48() throw(); 
# 405
extern "C" long jrand48(unsigned short  [3]) throw()
# 406
 __attribute((__nonnull__(1))); 
# 409
extern "C" void srand48(long ) throw(); 
# 410
extern "C" unsigned short *seed48(unsigned short  [3]) throw()
# 411
 __attribute((__nonnull__(1))); 
# 412
extern "C" void lcong48(unsigned short  [7]) throw() __attribute((__nonnull__(1))); 
# 418
extern "C" { struct drand48_data { 
# 420
unsigned short __x[3]; 
# 421
unsigned short __old_x[3]; 
# 422
unsigned short __c; 
# 423
unsigned short __init; 
# 424
unsigned long long __a; 
# 425
}; }
# 428
extern "C" int drand48_r(drand48_data *__restrict__ , double *__restrict__ ) throw()
# 429
 __attribute((__nonnull__(1, 2))); 
# 430
extern "C" int erand48_r(unsigned short  [3], drand48_data *__restrict__ , double *__restrict__ ) throw()
# 432
 __attribute((__nonnull__(1, 2))); 
# 435
extern "C" int lrand48_r(drand48_data *__restrict__ , long *__restrict__ ) throw()
# 437
 __attribute((__nonnull__(1, 2))); 
# 438
extern "C" int nrand48_r(unsigned short  [3], drand48_data *__restrict__ , long *__restrict__ ) throw()
# 441
 __attribute((__nonnull__(1, 2))); 
# 444
extern "C" int mrand48_r(drand48_data *__restrict__ , long *__restrict__ ) throw()
# 446
 __attribute((__nonnull__(1, 2))); 
# 447
extern "C" int jrand48_r(unsigned short  [3], drand48_data *__restrict__ , long *__restrict__ ) throw()
# 450
 __attribute((__nonnull__(1, 2))); 
# 453
extern "C" int srand48_r(long , drand48_data * ) throw()
# 454
 __attribute((__nonnull__(2))); 
# 456
extern "C" int seed48_r(unsigned short  [3], drand48_data * ) throw()
# 457
 __attribute((__nonnull__(1, 2))); 
# 459
extern "C" int lcong48_r(unsigned short  [7], drand48_data * ) throw()
# 461
 __attribute((__nonnull__(1, 2))); 
# 471
extern "C" void *malloc(size_t ) throw() __attribute((__malloc__)); 
# 473
extern "C" void *calloc(size_t , size_t ) throw()
# 474
 __attribute((__malloc__)); 
# 485
extern "C" void *realloc(void * , size_t ) throw()
# 486
 __attribute((__warn_unused_result__)); 
# 488
extern "C" void free(void * ) throw(); 
# 493
extern "C" void cfree(void * ) throw(); 
# 33 "/usr/include/alloca.h" 3
extern "C" void *alloca(size_t ) throw(); 
# 503 "/usr/include/stdlib.h" 3
extern "C" void *valloc(size_t ) throw() __attribute((__malloc__)); 
# 508
extern "C" int posix_memalign(void ** , size_t , size_t ) throw()
# 509
 __attribute((__nonnull__(1))); 
# 514
extern "C" void abort() throw() __attribute((__noreturn__)); 
# 518
extern "C" int atexit(void (* )(void)) throw() __attribute((__nonnull__(1))); 
# 525
int at_quick_exit(void (* )(void)) throw() __asm__("at_quick_exit")
# 526
 __attribute((__nonnull__(1))); 
# 536
extern "C" int on_exit(void (* )(int , void * ), void * ) throw()
# 537
 __attribute((__nonnull__(1))); 
# 544
extern "C" void exit(int ) throw() __attribute((__noreturn__)); 
# 552
extern "C" void quick_exit(int ) throw() __attribute((__noreturn__)); 
# 560
extern "C" void _Exit(int ) throw() __attribute((__noreturn__)); 
# 567
extern "C" char *getenv(const char * ) throw() __attribute((__nonnull__(1))); 
# 572
extern "C" char *__secure_getenv(const char * ) throw()
# 573
 __attribute((__nonnull__(1))); 
# 579
extern "C" int putenv(char * ) throw() __attribute((__nonnull__(1))); 
# 585
extern "C" int setenv(const char * , const char * , int ) throw()
# 586
 __attribute((__nonnull__(2))); 
# 589
extern "C" int unsetenv(const char * ) throw() __attribute((__nonnull__(1))); 
# 596
extern "C" int clearenv() throw(); 
# 606 "/usr/include/stdlib.h" 3
extern "C" char *mktemp(char * ) throw() __attribute((__nonnull__(1))); 
# 620 "/usr/include/stdlib.h" 3
extern "C" int mkstemp(char * ) __attribute((__nonnull__(1))); 
# 630 "/usr/include/stdlib.h" 3
extern "C" int mkstemp64(char * ) __attribute((__nonnull__(1))); 
# 642 "/usr/include/stdlib.h" 3
extern "C" int mkstemps(char * , int ) __attribute((__nonnull__(1))); 
# 652 "/usr/include/stdlib.h" 3
extern "C" int mkstemps64(char * , int )
# 653
 __attribute((__nonnull__(1))); 
# 663 "/usr/include/stdlib.h" 3
extern "C" char *mkdtemp(char * ) throw() __attribute((__nonnull__(1))); 
# 674 "/usr/include/stdlib.h" 3
extern "C" int mkostemp(char * , int ) __attribute((__nonnull__(1))); 
# 684 "/usr/include/stdlib.h" 3
extern "C" int mkostemp64(char * , int ) __attribute((__nonnull__(1))); 
# 694 "/usr/include/stdlib.h" 3
extern "C" int mkostemps(char * , int , int )
# 695
 __attribute((__nonnull__(1))); 
# 706 "/usr/include/stdlib.h" 3
extern "C" int mkostemps64(char * , int , int )
# 707
 __attribute((__nonnull__(1))); 
# 717
extern "C" int system(const char * ); 
# 724
extern "C" char *canonicalize_file_name(const char * ) throw()
# 725
 __attribute((__nonnull__(1))); 
# 734 "/usr/include/stdlib.h" 3
extern "C" char *realpath(const char *__restrict__ , char *__restrict__ ) throw(); 
# 742
extern "C" { typedef int (*__compar_fn_t)(const void *, const void *); }
# 745
extern "C" { typedef __compar_fn_t comparison_fn_t; }
# 749
extern "C" { typedef int (*__compar_d_fn_t)(const void *, const void *, void *); }
# 755
extern "C" void *bsearch(const void * , const void * , size_t , size_t , __compar_fn_t )
# 757
 __attribute((__nonnull__(1, 2, 5))); 
# 761
extern "C" void qsort(void * , size_t , size_t , __compar_fn_t )
# 762
 __attribute((__nonnull__(1, 4))); 
# 764
extern "C" void qsort_r(void * , size_t , size_t , __compar_d_fn_t , void * )
# 766
 __attribute((__nonnull__(1, 4))); 
# 771
extern "C" int abs(int ) throw() __attribute((const)); 
# 772
extern "C" long labs(long ) throw() __attribute((const)); 
# 776
__extension__ extern "C" long long llabs(long long ) throw()
# 777
 __attribute((const)); 
# 785
extern "C" div_t div(int , int ) throw()
# 786
 __attribute((const)); 
# 787
extern "C" ldiv_t ldiv(long , long ) throw()
# 788
 __attribute((const)); 
# 793
__extension__ extern "C" lldiv_t lldiv(long long , long long ) throw()
# 795
 __attribute((const)); 
# 808 "/usr/include/stdlib.h" 3
extern "C" char *ecvt(double , int , int *__restrict__ , int *__restrict__ ) throw()
# 809
 __attribute((__nonnull__(3, 4))); 
# 814
extern "C" char *fcvt(double , int , int *__restrict__ , int *__restrict__ ) throw()
# 815
 __attribute((__nonnull__(3, 4))); 
# 820
extern "C" char *gcvt(double , int , char * ) throw()
# 821
 __attribute((__nonnull__(3))); 
# 826
extern "C" char *qecvt(long double , int , int *__restrict__ , int *__restrict__ ) throw()
# 828
 __attribute((__nonnull__(3, 4))); 
# 829
extern "C" char *qfcvt(long double , int , int *__restrict__ , int *__restrict__ ) throw()
# 831
 __attribute((__nonnull__(3, 4))); 
# 832
extern "C" char *qgcvt(long double , int , char * ) throw()
# 833
 __attribute((__nonnull__(3))); 
# 838
extern "C" int ecvt_r(double , int , int *__restrict__ , int *__restrict__ , char *__restrict__ , size_t ) throw()
# 840
 __attribute((__nonnull__(3, 4, 5))); 
# 841
extern "C" int fcvt_r(double , int , int *__restrict__ , int *__restrict__ , char *__restrict__ , size_t ) throw()
# 843
 __attribute((__nonnull__(3, 4, 5))); 
# 845
extern "C" int qecvt_r(long double , int , int *__restrict__ , int *__restrict__ , char *__restrict__ , size_t ) throw()
# 848
 __attribute((__nonnull__(3, 4, 5))); 
# 849
extern "C" int qfcvt_r(long double , int , int *__restrict__ , int *__restrict__ , char *__restrict__ , size_t ) throw()
# 852
 __attribute((__nonnull__(3, 4, 5))); 
# 860
extern "C" int mblen(const char * , size_t ) throw(); 
# 863
extern "C" int mbtowc(wchar_t *__restrict__ , const char *__restrict__ , size_t ) throw(); 
# 867
extern "C" int wctomb(char * , wchar_t ) throw(); 
# 871
extern "C" size_t mbstowcs(wchar_t *__restrict__ , const char *__restrict__ , size_t ) throw(); 
# 874
extern "C" size_t wcstombs(char *__restrict__ , const wchar_t *__restrict__ , size_t ) throw(); 
# 885
extern "C" int rpmatch(const char * ) throw() __attribute((__nonnull__(1))); 
# 896 "/usr/include/stdlib.h" 3
extern "C" int getsubopt(char **__restrict__ , char *const *__restrict__ , char **__restrict__ ) throw()
# 899
 __attribute((__nonnull__(1, 2, 3))); 
# 905
extern "C" void setkey(const char * ) throw() __attribute((__nonnull__(1))); 
# 913
extern "C" int posix_openpt(int ); 
# 921
extern "C" int grantpt(int ) throw(); 
# 925
extern "C" int unlockpt(int ) throw(); 
# 930
extern "C" char *ptsname(int ) throw(); 
# 937
extern "C" int ptsname_r(int , char * , size_t ) throw()
# 938
 __attribute((__nonnull__(2))); 
# 941
extern "C" int getpt(); 
# 948
extern "C" int getloadavg(double  [], int ) throw()
# 949
 __attribute((__nonnull__(1))); 
# 69 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/cpp_type_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 71
template < typename _Iterator, typename _Container >
    class __normal_iterator;
# 74
}
# 76
namespace std __attribute((__visibility__("default"))) { 
# 78
struct __true_type { }; 
# 79
struct __false_type { }; 
# 81
template< bool __T0> 
# 82
struct __truth_type { 
# 83
typedef __false_type __type; }; 
# 86
template<> struct __truth_type< true>  { 
# 87
typedef __true_type __type; }; 
# 91
template< class _Sp, class _Tp> 
# 92
struct __traitor { 
# 94
enum { __value = ((bool)_Sp::__value) || ((bool)_Tp::__value)}; 
# 95
typedef typename __truth_type< __value> ::__type __type; 
# 96
}; 
# 99
template< class , class > 
# 100
struct __are_same { 
# 102
enum { __value}; 
# 103
typedef __false_type __type; 
# 104
}; 
# 106
template< class _Tp> 
# 107
struct __are_same< _Tp, _Tp>  { 
# 109
enum { __value = 1}; 
# 110
typedef __true_type __type; 
# 111
}; 
# 114
template< class _Tp> 
# 115
struct __is_void { 
# 117
enum { __value}; 
# 118
typedef __false_type __type; 
# 119
}; 
# 122
template<> struct __is_void< void>  { 
# 124
enum { __value = 1}; 
# 125
typedef __true_type __type; 
# 126
}; 
# 131
template< class _Tp> 
# 132
struct __is_integer { 
# 134
enum { __value}; 
# 135
typedef __false_type __type; 
# 136
}; 
# 142
template<> struct __is_integer< bool>  { 
# 144
enum { __value = 1}; 
# 145
typedef __true_type __type; 
# 146
}; 
# 149
template<> struct __is_integer< char>  { 
# 151
enum { __value = 1}; 
# 152
typedef __true_type __type; 
# 153
}; 
# 156
template<> struct __is_integer< signed char>  { 
# 158
enum { __value = 1}; 
# 159
typedef __true_type __type; 
# 160
}; 
# 163
template<> struct __is_integer< unsigned char>  { 
# 165
enum { __value = 1}; 
# 166
typedef __true_type __type; 
# 167
}; 
# 171
template<> struct __is_integer< wchar_t>  { 
# 173
enum { __value = 1}; 
# 174
typedef __true_type __type; 
# 175
}; 
# 195 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/cpp_type_traits.h" 3
template<> struct __is_integer< short>  { 
# 197
enum { __value = 1}; 
# 198
typedef __true_type __type; 
# 199
}; 
# 202
template<> struct __is_integer< unsigned short>  { 
# 204
enum { __value = 1}; 
# 205
typedef __true_type __type; 
# 206
}; 
# 209
template<> struct __is_integer< int>  { 
# 211
enum { __value = 1}; 
# 212
typedef __true_type __type; 
# 213
}; 
# 216
template<> struct __is_integer< unsigned>  { 
# 218
enum { __value = 1}; 
# 219
typedef __true_type __type; 
# 220
}; 
# 223
template<> struct __is_integer< long>  { 
# 225
enum { __value = 1}; 
# 226
typedef __true_type __type; 
# 227
}; 
# 230
template<> struct __is_integer< unsigned long>  { 
# 232
enum { __value = 1}; 
# 233
typedef __true_type __type; 
# 234
}; 
# 237
template<> struct __is_integer< long long>  { 
# 239
enum { __value = 1}; 
# 240
typedef __true_type __type; 
# 241
}; 
# 244
template<> struct __is_integer< unsigned long long>  { 
# 246
enum { __value = 1}; 
# 247
typedef __true_type __type; 
# 248
}; 
# 253
template< class _Tp> 
# 254
struct __is_floating { 
# 256
enum { __value}; 
# 257
typedef __false_type __type; 
# 258
}; 
# 262
template<> struct __is_floating< float>  { 
# 264
enum { __value = 1}; 
# 265
typedef __true_type __type; 
# 266
}; 
# 269
template<> struct __is_floating< double>  { 
# 271
enum { __value = 1}; 
# 272
typedef __true_type __type; 
# 273
}; 
# 276
template<> struct __is_floating< long double>  { 
# 278
enum { __value = 1}; 
# 279
typedef __true_type __type; 
# 280
}; 
# 285
template< class _Tp> 
# 286
struct __is_pointer { 
# 288
enum { __value}; 
# 289
typedef __false_type __type; 
# 290
}; 
# 292
template< class _Tp> 
# 293
struct __is_pointer< _Tp *>  { 
# 295
enum { __value = 1}; 
# 296
typedef __true_type __type; 
# 297
}; 
# 302
template< class _Tp> 
# 303
struct __is_normal_iterator { 
# 305
enum { __value}; 
# 306
typedef __false_type __type; 
# 307
}; 
# 309
template< class _Iterator, class _Container> 
# 310
struct __is_normal_iterator< __gnu_cxx::__normal_iterator< _Iterator, _Container> >  { 
# 313
enum { __value = 1}; 
# 314
typedef __true_type __type; 
# 315
}; 
# 320
template< class _Tp> 
# 321
struct __is_arithmetic : public __traitor< __is_integer< _Tp> , __is_floating< _Tp> >  { 
# 323
}; 
# 328
template< class _Tp> 
# 329
struct __is_fundamental : public __traitor< __is_void< _Tp> , __is_arithmetic< _Tp> >  { 
# 331
}; 
# 336
template< class _Tp> 
# 337
struct __is_scalar : public __traitor< __is_arithmetic< _Tp> , __is_pointer< _Tp> >  { 
# 339
}; 
# 344
template< class _Tp> 
# 345
struct __is_char { 
# 347
enum { __value}; 
# 348
typedef __false_type __type; 
# 349
}; 
# 352
template<> struct __is_char< char>  { 
# 354
enum { __value = 1}; 
# 355
typedef __true_type __type; 
# 356
}; 
# 360
template<> struct __is_char< wchar_t>  { 
# 362
enum { __value = 1}; 
# 363
typedef __true_type __type; 
# 364
}; 
# 367
template< class _Tp> 
# 368
struct __is_byte { 
# 370
enum { __value}; 
# 371
typedef __false_type __type; 
# 372
}; 
# 375
template<> struct __is_byte< char>  { 
# 377
enum { __value = 1}; 
# 378
typedef __true_type __type; 
# 379
}; 
# 382
template<> struct __is_byte< signed char>  { 
# 384
enum { __value = 1}; 
# 385
typedef __true_type __type; 
# 386
}; 
# 389
template<> struct __is_byte< unsigned char>  { 
# 391
enum { __value = 1}; 
# 392
typedef __true_type __type; 
# 393
}; 
# 398
template< class _Tp> 
# 399
struct __is_move_iterator { 
# 401
enum { __value}; 
# 402
typedef __false_type __type; 
# 403
}; 
# 417 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/cpp_type_traits.h" 3
}
# 37 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/type_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 40
template< bool __T1, class > 
# 41
struct __enable_if { 
# 42
}; 
# 44
template< class _Tp> 
# 45
struct __enable_if< true, _Tp>  { 
# 46
typedef _Tp __type; }; 
# 50
template< bool _Cond, class _Iftrue, class _Iffalse> 
# 51
struct __conditional_type { 
# 52
typedef _Iftrue __type; }; 
# 54
template< class _Iftrue, class _Iffalse> 
# 55
struct __conditional_type< false, _Iftrue, _Iffalse>  { 
# 56
typedef _Iffalse __type; }; 
# 60
template< class _Tp> 
# 61
struct __add_unsigned { 
# 64
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp>  __if_type; 
# 67
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type; 
# 68
}; 
# 71
template<> struct __add_unsigned< char>  { 
# 72
typedef unsigned char __type; }; 
# 75
template<> struct __add_unsigned< signed char>  { 
# 76
typedef unsigned char __type; }; 
# 79
template<> struct __add_unsigned< short>  { 
# 80
typedef unsigned short __type; }; 
# 83
template<> struct __add_unsigned< int>  { 
# 84
typedef unsigned __type; }; 
# 87
template<> struct __add_unsigned< long>  { 
# 88
typedef unsigned long __type; }; 
# 91
template<> struct __add_unsigned< long long>  { 
# 92
typedef unsigned long long __type; }; 
# 96
template<> struct __add_unsigned< bool> ; 
# 99
template<> struct __add_unsigned< wchar_t> ; 
# 103
template< class _Tp> 
# 104
struct __remove_unsigned { 
# 107
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp>  __if_type; 
# 110
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type; 
# 111
}; 
# 114
template<> struct __remove_unsigned< char>  { 
# 115
typedef signed char __type; }; 
# 118
template<> struct __remove_unsigned< unsigned char>  { 
# 119
typedef signed char __type; }; 
# 122
template<> struct __remove_unsigned< unsigned short>  { 
# 123
typedef short __type; }; 
# 126
template<> struct __remove_unsigned< unsigned>  { 
# 127
typedef int __type; }; 
# 130
template<> struct __remove_unsigned< unsigned long>  { 
# 131
typedef long __type; }; 
# 134
template<> struct __remove_unsigned< unsigned long long>  { 
# 135
typedef long long __type; }; 
# 139
template<> struct __remove_unsigned< bool> ; 
# 142
template<> struct __remove_unsigned< wchar_t> ; 
# 146
template < typename _Type >
    inline bool
    __is_null_pointer ( _Type * __ptr )
    { return __ptr == 0; }
# 151
template < typename _Type >
    inline bool
    __is_null_pointer ( _Type )
    { return false; }
# 158
template< class _Tp, bool __T2 = std::__is_integer< _Tp> ::__value> 
# 159
struct __promote { 
# 160
typedef double __type; }; 
# 162
template< class _Tp> 
# 163
struct __promote< _Tp, false>  { 
# 164
typedef _Tp __type; }; 
# 166
template< class _Tp, class _Up> 
# 167
struct __promote_2 { 
# 170
private: typedef typename __promote< _Tp> ::__type __type1; 
# 171
typedef typename __promote< _Up> ::__type __type2; 
# 174
public: typedef __typeof__(__type1() + __type2()) __type; 
# 175
}; 
# 177
template< class _Tp, class _Up, class _Vp> 
# 178
struct __promote_3 { 
# 181
private: typedef typename __promote< _Tp> ::__type __type1; 
# 182
typedef typename __promote< _Up> ::__type __type2; 
# 183
typedef typename __promote< _Vp> ::__type __type3; 
# 186
public: typedef __typeof__((__type1() + __type2()) + __type3()) __type; 
# 187
}; 
# 189
template< class _Tp, class _Up, class _Vp, class _Wp> 
# 190
struct __promote_4 { 
# 193
private: typedef typename __promote< _Tp> ::__type __type1; 
# 194
typedef typename __promote< _Up> ::__type __type2; 
# 195
typedef typename __promote< _Vp> ::__type __type3; 
# 196
typedef typename __promote< _Wp> ::__type __type4; 
# 199
public: typedef __typeof__(((__type1() + __type2()) + __type3()) + __type4()) __type; 
# 200
}; 
# 202
}
# 77 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/cmath" 3
namespace std __attribute((__visibility__("default"))) { 
# 81
template < typename _Tp >
    _Tp __cmath_power ( _Tp, unsigned int );
# 84
template < typename _Tp >
    inline _Tp
    __pow_helper ( _Tp __x, int __n )
    {
      return __n < 0
        ? _Tp ( 1 ) / __cmath_power ( __x, - __n )
        : __cmath_power ( __x, __n );
    }
# 94
inline double abs(double __x) 
# 95
{ return __builtin_fabs(__x); } 
# 98
inline float abs(float __x) 
# 99
{ return __builtin_fabsf(__x); } 
# 102
inline long double abs(long double __x) 
# 103
{ return __builtin_fabsl(__x); } 
# 105
using ::acos;
# 108
inline float acos(float __x) 
# 109
{ return __builtin_acosf(__x); } 
# 112
inline long double acos(long double __x) 
# 113
{ return __builtin_acosl(__x); } 
# 115
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    acos ( _Tp __x )
    { return __builtin_acos ( __x ); }
# 121
using ::asin;
# 124
inline float asin(float __x) 
# 125
{ return __builtin_asinf(__x); } 
# 128
inline long double asin(long double __x) 
# 129
{ return __builtin_asinl(__x); } 
# 131
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    asin ( _Tp __x )
    { return __builtin_asin ( __x ); }
# 137
using ::atan;
# 140
inline float atan(float __x) 
# 141
{ return __builtin_atanf(__x); } 
# 144
inline long double atan(long double __x) 
# 145
{ return __builtin_atanl(__x); } 
# 147
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    atan ( _Tp __x )
    { return __builtin_atan ( __x ); }
# 153
using ::atan2;
# 156
inline float atan2(float __y, float __x) 
# 157
{ return __builtin_atan2f(__y, __x); } 
# 160
inline long double atan2(long double __y, long double __x) 
# 161
{ return __builtin_atan2l(__y, __x); } 
# 163
template < typename _Tp, typename _Up >
    inline
    typename __gnu_cxx :: __promote_2 <
    typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value
        && __is_arithmetic < _Up > :: __value,
        _Tp > :: __type, _Up > :: __type
    atan2 ( _Tp __y, _Up __x )
    {
      typedef typename __gnu_cxx :: __promote_2 < _Tp, _Up > :: __type __type;
      return atan2 ( __type ( __y ), __type ( __x ) );
    }
# 175
using ::ceil;
# 178
inline float ceil(float __x) 
# 179
{ return __builtin_ceilf(__x); } 
# 182
inline long double ceil(long double __x) 
# 183
{ return __builtin_ceill(__x); } 
# 185
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    ceil ( _Tp __x )
    { return __builtin_ceil ( __x ); }
# 191
using ::cos;
# 194
inline float cos(float __x) 
# 195
{ return __builtin_cosf(__x); } 
# 198
inline long double cos(long double __x) 
# 199
{ return __builtin_cosl(__x); } 
# 201
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    cos ( _Tp __x )
    { return __builtin_cos ( __x ); }
# 207
using ::cosh;
# 210
inline float cosh(float __x) 
# 211
{ return __builtin_coshf(__x); } 
# 214
inline long double cosh(long double __x) 
# 215
{ return __builtin_coshl(__x); } 
# 217
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    cosh ( _Tp __x )
    { return __builtin_cosh ( __x ); }
# 223
using ::exp;
# 226
inline float exp(float __x) 
# 227
{ return __builtin_expf(__x); } 
# 230
inline long double exp(long double __x) 
# 231
{ return __builtin_expl(__x); } 
# 233
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    exp ( _Tp __x )
    { return __builtin_exp ( __x ); }
# 239
using ::fabs;
# 242
inline float fabs(float __x) 
# 243
{ return __builtin_fabsf(__x); } 
# 246
inline long double fabs(long double __x) 
# 247
{ return __builtin_fabsl(__x); } 
# 249
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    fabs ( _Tp __x )
    { return __builtin_fabs ( __x ); }
# 255
using ::floor;
# 258
inline float floor(float __x) 
# 259
{ return __builtin_floorf(__x); } 
# 262
inline long double floor(long double __x) 
# 263
{ return __builtin_floorl(__x); } 
# 265
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    floor ( _Tp __x )
    { return __builtin_floor ( __x ); }
# 271
using ::fmod;
# 274
inline float fmod(float __x, float __y) 
# 275
{ return __builtin_fmodf(__x, __y); } 
# 278
inline long double fmod(long double __x, long double __y) 
# 279
{ return __builtin_fmodl(__x, __y); } 
# 281
using ::frexp;
# 284
inline float frexp(float __x, int *__exp) 
# 285
{ return __builtin_frexpf(__x, __exp); } 
# 288
inline long double frexp(long double __x, int *__exp) 
# 289
{ return __builtin_frexpl(__x, __exp); } 
# 291
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    frexp ( _Tp __x, int * __exp )
    { return __builtin_frexp ( __x, __exp ); }
# 297
using ::ldexp;
# 300
inline float ldexp(float __x, int __exp) 
# 301
{ return __builtin_ldexpf(__x, __exp); } 
# 304
inline long double ldexp(long double __x, int __exp) 
# 305
{ return __builtin_ldexpl(__x, __exp); } 
# 307
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
  ldexp ( _Tp __x, int __exp )
  { return __builtin_ldexp ( __x, __exp ); }
# 313
using ::log;
# 316
inline float log(float __x) 
# 317
{ return __builtin_logf(__x); } 
# 320
inline long double log(long double __x) 
# 321
{ return __builtin_logl(__x); } 
# 323
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    log ( _Tp __x )
    { return __builtin_log ( __x ); }
# 329
using ::log10;
# 332
inline float log10(float __x) 
# 333
{ return __builtin_log10f(__x); } 
# 336
inline long double log10(long double __x) 
# 337
{ return __builtin_log10l(__x); } 
# 339
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    log10 ( _Tp __x )
    { return __builtin_log10 ( __x ); }
# 345
using ::modf;
# 348
inline float modf(float __x, float *__iptr) 
# 349
{ return __builtin_modff(__x, __iptr); } 
# 352
inline long double modf(long double __x, long double *__iptr) 
# 353
{ return __builtin_modfl(__x, __iptr); } 
# 355
using ::pow;
# 358
inline float pow(float __x, float __y) 
# 359
{ return __builtin_powf(__x, __y); } 
# 362
inline long double pow(long double __x, long double __y) 
# 363
{ return __builtin_powl(__x, __y); } 
# 369
inline double pow(double __x, int __i) 
# 370
{ return __builtin_powi(__x, __i); } 
# 373
inline float pow(float __x, int __n) 
# 374
{ return __builtin_powif(__x, __n); } 
# 377
inline long double pow(long double __x, int __n) 
# 378
{ return __builtin_powil(__x, __n); } 
# 381
template < typename _Tp, typename _Up >
    inline
    typename __gnu_cxx :: __promote_2 <
    typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value
        && __is_arithmetic < _Up > :: __value,
        _Tp > :: __type, _Up > :: __type
    pow ( _Tp __x, _Up __y )
    {
      typedef typename __gnu_cxx :: __promote_2 < _Tp, _Up > :: __type __type;
      return pow ( __type ( __x ), __type ( __y ) );
    }
# 393
using ::sin;
# 396
inline float sin(float __x) 
# 397
{ return __builtin_sinf(__x); } 
# 400
inline long double sin(long double __x) 
# 401
{ return __builtin_sinl(__x); } 
# 403
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    sin ( _Tp __x )
    { return __builtin_sin ( __x ); }
# 409
using ::sinh;
# 412
inline float sinh(float __x) 
# 413
{ return __builtin_sinhf(__x); } 
# 416
inline long double sinh(long double __x) 
# 417
{ return __builtin_sinhl(__x); } 
# 419
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    sinh ( _Tp __x )
    { return __builtin_sinh ( __x ); }
# 425
using ::sqrt;
# 428
inline float sqrt(float __x) 
# 429
{ return __builtin_sqrtf(__x); } 
# 432
inline long double sqrt(long double __x) 
# 433
{ return __builtin_sqrtl(__x); } 
# 435
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    sqrt ( _Tp __x )
    { return __builtin_sqrt ( __x ); }
# 441
using ::tan;
# 444
inline float tan(float __x) 
# 445
{ return __builtin_tanf(__x); } 
# 448
inline long double tan(long double __x) 
# 449
{ return __builtin_tanl(__x); } 
# 451
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    tan ( _Tp __x )
    { return __builtin_tan ( __x ); }
# 457
using ::tanh;
# 460
inline float tanh(float __x) 
# 461
{ return __builtin_tanhf(__x); } 
# 464
inline long double tanh(long double __x) 
# 465
{ return __builtin_tanhl(__x); } 
# 467
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    tanh ( _Tp __x )
    { return __builtin_tanh ( __x ); }
# 473
}
# 492 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/cmath" 3
namespace std __attribute((__visibility__("default"))) { 
# 494
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    fpclassify ( _Tp __f )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_fpclassify ( FP_NAN, FP_INFINITE, FP_NORMAL,
      FP_SUBNORMAL, FP_ZERO, __type ( __f ) );
    }
# 504
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isfinite ( _Tp __f )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isfinite ( __type ( __f ) );
    }
# 513
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isinf ( _Tp __f )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isinf ( __type ( __f ) );
    }
# 522
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isnan ( _Tp __f )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isnan ( __type ( __f ) );
    }
# 531
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isnormal ( _Tp __f )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isnormal ( __type ( __f ) );
    }
# 540
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    signbit ( _Tp __f )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_signbit ( __type ( __f ) );
    }
# 549
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isgreater ( _Tp __f1, _Tp __f2 )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isgreater ( __type ( __f1 ), __type ( __f2 ) );
    }
# 558
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isgreaterequal ( _Tp __f1, _Tp __f2 )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isgreaterequal ( __type ( __f1 ), __type ( __f2 ) );
    }
# 567
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isless ( _Tp __f1, _Tp __f2 )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isless ( __type ( __f1 ), __type ( __f2 ) );
    }
# 576
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    islessequal ( _Tp __f1, _Tp __f2 )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_islessequal ( __type ( __f1 ), __type ( __f2 ) );
    }
# 585
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    islessgreater ( _Tp __f1, _Tp __f2 )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_islessgreater ( __type ( __f1 ), __type ( __f2 ) );
    }
# 594
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isunordered ( _Tp __f1, _Tp __f2 )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isunordered ( __type ( __f1 ), __type ( __f2 ) );
    }
# 603
}
# 35 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/cmath.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 37
template < typename _Tp >
    inline _Tp
    __cmath_power ( _Tp __x, unsigned int __n )
    {
      _Tp __y = __n % 2 ? __x : _Tp ( 1 );

      while ( __n >>= 1 )
        {
          __x = __x * __x;
          if ( __n % 2 )
            __y = __y * __x;
        }

      return __y;
    }
# 53
}
# 49 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/cstddef" 3
namespace std __attribute((__visibility__("default"))) { 
# 51
using ::ptrdiff_t;
# 52
using ::size_t;
# 54
}
# 100 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/cstdlib" 3
namespace std __attribute((__visibility__("default"))) { 
# 102
using ::div_t;
# 103
using ::ldiv_t;
# 105
using ::abort;
# 106
using ::abs;
# 107
using ::atexit;
# 108
using ::atof;
# 109
using ::atoi;
# 110
using ::atol;
# 111
using ::bsearch;
# 112
using ::calloc;
# 113
using ::div;
# 114
using ::exit;
# 115
using ::free;
# 116
using ::getenv;
# 117
using ::labs;
# 118
using ::ldiv;
# 119
using ::malloc;
# 121
using ::mblen;
# 122
using ::mbstowcs;
# 123
using ::mbtowc;
# 125
using ::qsort;
# 126
using ::rand;
# 127
using ::realloc;
# 128
using ::srand;
# 129
using ::strtod;
# 130
using ::strtol;
# 131
using ::strtoul;
# 132
using ::system;
# 134
using ::wcstombs;
# 135
using ::wctomb;
# 139
inline long abs(long __i) { return labs(__i); } 
# 142
inline ldiv_t div(long __i, long __j) { return ldiv(__i, __j); } 
# 144
}
# 157 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/cstdlib" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 160
using ::lldiv_t;
# 166
using ::_Exit;
# 170
inline long long abs(long long __x) { return (__x >= (0)) ? __x : (-__x); } 
# 173
using ::llabs;
# 176
inline lldiv_t div(long long __n, long long __d) 
# 177
{ lldiv_t __q; (__q.quot) = (__n / __d); (__q.rem) = (__n % __d); return __q; } 
# 179
using ::lldiv;
# 190 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/cstdlib" 3
using ::atoll;
# 191
using ::strtoll;
# 192
using ::strtoull;
# 194
using ::strtof;
# 195
using ::strtold;
# 197
}
# 199
namespace std __attribute((__visibility__("default"))) { 
# 202
using __gnu_cxx::lldiv_t;
# 204
using __gnu_cxx::_Exit;
# 205
using __gnu_cxx::abs;
# 207
using __gnu_cxx::llabs;
# 208
using __gnu_cxx::div;
# 209
using __gnu_cxx::lldiv;
# 211
using __gnu_cxx::atoll;
# 212
using __gnu_cxx::strtof;
# 213
using __gnu_cxx::strtoll;
# 214
using __gnu_cxx::strtoull;
# 215
using __gnu_cxx::strtold;
# 217
}
# 7604 "/usr/local/cuda-5.0/include/math_functions.h"
namespace __gnu_cxx { 
# 7606
extern inline long long abs(long long); 
# 7607
}
# 7609
namespace std { 
# 7611
template< class T> extern inline T __pow_helper(T, int); 
# 7612
template< class T> extern inline T __cmath_power(T, unsigned); 
# 7613
}
# 7615
using std::abs;
# 7616
using std::fabs;
# 7617
using std::ceil;
# 7618
using std::floor;
# 7619
using std::sqrt;
# 7620
using std::pow;
# 7621
using std::log;
# 7622
using std::log10;
# 7623
using std::fmod;
# 7624
using std::modf;
# 7625
using std::exp;
# 7626
using std::frexp;
# 7627
using std::ldexp;
# 7628
using std::asin;
# 7629
using std::sin;
# 7630
using std::sinh;
# 7631
using std::acos;
# 7632
using std::cos;
# 7633
using std::cosh;
# 7634
using std::atan;
# 7635
using std::atan2;
# 7636
using std::tan;
# 7637
using std::tanh;
# 7807 "/usr/local/cuda-5.0/include/math_functions.h"
namespace std { 
# 7810
extern inline long abs(long); 
# 7811
extern inline float abs(float); 
# 7812
extern inline double abs(double); 
# 7813
extern inline float fabs(float); 
# 7814
extern inline float ceil(float); 
# 7815
extern inline float floor(float); 
# 7816
extern inline float sqrt(float); 
# 7817
extern inline float pow(float, float); 
# 7818
extern inline float pow(float, int); 
# 7819
extern inline double pow(double, int); 
# 7820
extern inline float log(float); 
# 7821
extern inline float log10(float); 
# 7822
extern inline float fmod(float, float); 
# 7823
extern inline float modf(float, float *); 
# 7824
extern inline float exp(float); 
# 7825
extern inline float frexp(float, int *); 
# 7826
extern inline float ldexp(float, int); 
# 7827
extern inline float asin(float); 
# 7828
extern inline float sin(float); 
# 7829
extern inline float sinh(float); 
# 7830
extern inline float acos(float); 
# 7831
extern inline float cos(float); 
# 7832
extern inline float cosh(float); 
# 7833
extern inline float atan(float); 
# 7834
extern inline float atan2(float, float); 
# 7835
extern inline float tan(float); 
# 7836
extern inline float tanh(float); 
# 7839
}
# 7842
static inline float logb(float a) 
# 7843
{ 
# 7844
return logbf(a); 
# 7845
} 
# 7847
static inline int ilogb(float a) 
# 7848
{ 
# 7849
return ilogbf(a); 
# 7850
} 
# 7852
static inline float scalbn(float a, int b) 
# 7853
{ 
# 7854
return scalbnf(a, b); 
# 7855
} 
# 7857
static inline float scalbln(float a, long b) 
# 7858
{ 
# 7859
return scalblnf(a, b); 
# 7860
} 
# 7862
static inline float exp2(float a) 
# 7863
{ 
# 7864
return exp2f(a); 
# 7865
} 
# 7867
static inline float exp10(float a) 
# 7868
{ 
# 7869
return exp10f(a); 
# 7870
} 
# 7872
static inline float expm1(float a) 
# 7873
{ 
# 7874
return expm1f(a); 
# 7875
} 
# 7877
static inline float log2(float a) 
# 7878
{ 
# 7879
return log2f(a); 
# 7880
} 
# 7882
static inline float log1p(float a) 
# 7883
{ 
# 7884
return log1pf(a); 
# 7885
} 
# 7887
static inline float rsqrt(float a) 
# 7888
{ 
# 7889
return rsqrtf(a); 
# 7890
} 
# 7892
static inline float acosh(float a) 
# 7893
{ 
# 7894
return acoshf(a); 
# 7895
} 
# 7897
static inline float asinh(float a) 
# 7898
{ 
# 7899
return asinhf(a); 
# 7900
} 
# 7902
static inline float atanh(float a) 
# 7903
{ 
# 7904
return atanhf(a); 
# 7905
} 
# 7907
static inline float hypot(float a, float b) 
# 7908
{ 
# 7909
return hypotf(a, b); 
# 7910
} 
# 7912
static inline float cbrt(float a) 
# 7913
{ 
# 7914
return cbrtf(a); 
# 7915
} 
# 7917
static inline float rcbrt(float a) 
# 7918
{ 
# 7919
return rcbrtf(a); 
# 7920
} 
# 7922
static inline float sinpi(float a) 
# 7923
{ 
# 7924
return sinpif(a); 
# 7925
} 
# 7927
static inline float cospi(float a) 
# 7928
{ 
# 7929
return cospif(a); 
# 7930
} 
# 7932
static inline void sincospi(float a, float *sptr, float *cptr) 
# 7933
{ 
# 7934
sincospif(a, sptr, cptr); 
# 7935
} 
# 7937
static inline void sincos(float a, float *sptr, float *cptr) 
# 7938
{ 
# 7939
sincosf(a, sptr, cptr); 
# 7940
} 
# 7942
static inline float j0(float a) 
# 7943
{ 
# 7944
return j0f(a); 
# 7945
} 
# 7947
static inline float j1(float a) 
# 7948
{ 
# 7949
return j1f(a); 
# 7950
} 
# 7952
static inline float jn(int n, float a) 
# 7953
{ 
# 7954
return jnf(n, a); 
# 7955
} 
# 7957
static inline float y0(float a) 
# 7958
{ 
# 7959
return y0f(a); 
# 7960
} 
# 7962
static inline float y1(float a) 
# 7963
{ 
# 7964
return y1f(a); 
# 7965
} 
# 7967
static inline float yn(int n, float a) 
# 7968
{ 
# 7969
return ynf(n, a); 
# 7970
} 
# 7972
static inline float erf(float a) 
# 7973
{ 
# 7974
return erff(a); 
# 7975
} 
# 7977
static inline float erfinv(float a) 
# 7978
{ 
# 7979
return erfinvf(a); 
# 7980
} 
# 7982
static inline float erfc(float a) 
# 7983
{ 
# 7984
return erfcf(a); 
# 7985
} 
# 7987
static inline float erfcinv(float a) 
# 7988
{ 
# 7989
return erfcinvf(a); 
# 7990
} 
# 7992
static inline float normcdfinv(float a) 
# 7993
{ 
# 7994
return normcdfinvf(a); 
# 7995
} 
# 7997
static inline float normcdf(float a) 
# 7998
{ 
# 7999
return normcdff(a); 
# 8000
} 
# 8002
static inline float erfcx(float a) 
# 8003
{ 
# 8004
return erfcxf(a); 
# 8005
} 
# 8007
static inline float lgamma(float a) 
# 8008
{ 
# 8009
return lgammaf(a); 
# 8010
} 
# 8012
static inline float tgamma(float a) 
# 8013
{ 
# 8014
return tgammaf(a); 
# 8015
} 
# 8017
static inline float copysign(float a, float b) 
# 8018
{ 
# 8019
return copysignf(a, b); 
# 8020
} 
# 8022
static inline double copysign(double a, float b) 
# 8023
{ 
# 8024
return copysign(a, (double)b); 
# 8025
} 
# 8027
static inline float copysign(float a, double b) 
# 8028
{ 
# 8029
return copysignf(a, (float)b); 
# 8030
} 
# 8032
static inline float nextafter(float a, float b) 
# 8033
{ 
# 8034
return nextafterf(a, b); 
# 8035
} 
# 8037
static inline float remainder(float a, float b) 
# 8038
{ 
# 8039
return remainderf(a, b); 
# 8040
} 
# 8042
static inline float remquo(float a, float b, int *quo) 
# 8043
{ 
# 8044
return remquof(a, b, quo); 
# 8045
} 
# 8047
static inline float round(float a) 
# 8048
{ 
# 8049
return roundf(a); 
# 8050
} 
# 8052
static inline long lround(float a) 
# 8053
{ 
# 8054
return lroundf(a); 
# 8055
} 
# 8057
static inline long long llround(float a) 
# 8058
{ 
# 8059
return llroundf(a); 
# 8060
} 
# 8062
static inline float trunc(float a) 
# 8063
{ 
# 8064
return truncf(a); 
# 8065
} 
# 8067
static inline float rint(float a) 
# 8068
{ 
# 8069
return rintf(a); 
# 8070
} 
# 8072
static inline long lrint(float a) 
# 8073
{ 
# 8074
return lrintf(a); 
# 8075
} 
# 8077
static inline long long llrint(float a) 
# 8078
{ 
# 8079
return llrintf(a); 
# 8080
} 
# 8082
static inline float nearbyint(float a) 
# 8083
{ 
# 8084
return nearbyintf(a); 
# 8085
} 
# 8087
static inline float fdim(float a, float b) 
# 8088
{ 
# 8089
return fdimf(a, b); 
# 8090
} 
# 8092
static inline float fma(float a, float b, float c) 
# 8093
{ 
# 8094
return fmaf(a, b, c); 
# 8095
} 
# 8097
static inline float fmax(float a, float b) 
# 8098
{ 
# 8099
return fmaxf(a, b); 
# 8100
} 
# 8102
static inline float fmin(float a, float b) 
# 8103
{ 
# 8104
return fminf(a, b); 
# 8105
} 
# 8107
static inline unsigned min(unsigned a, unsigned b) 
# 8108
{ 
# 8109
return umin(a, b); 
# 8110
} 
# 8112
static inline unsigned min(int a, unsigned b) 
# 8113
{ 
# 8114
return umin((unsigned)a, b); 
# 8115
} 
# 8117
static inline unsigned min(unsigned a, int b) 
# 8118
{ 
# 8119
return umin(a, (unsigned)b); 
# 8120
} 
# 8122
static inline long long min(long long a, long long b) 
# 8123
{ 
# 8124
return llmin(a, b); 
# 8125
} 
# 8127
static inline unsigned long long min(unsigned long long a, unsigned long long b) 
# 8128
{ 
# 8129
return ullmin(a, b); 
# 8130
} 
# 8132
static inline unsigned long long min(long long a, unsigned long long b) 
# 8133
{ 
# 8134
return ullmin((unsigned long long)a, b); 
# 8135
} 
# 8137
static inline unsigned long long min(unsigned long long a, long long b) 
# 8138
{ 
# 8139
return ullmin(a, (unsigned long long)b); 
# 8140
} 
# 8142
static inline float min(float a, float b) 
# 8143
{ 
# 8144
return fminf(a, b); 
# 8145
} 
# 8147
static inline double min(double a, double b) 
# 8148
{ 
# 8149
return fmin(a, b); 
# 8150
} 
# 8152
static inline double min(float a, double b) 
# 8153
{ 
# 8154
return fmin((double)a, b); 
# 8155
} 
# 8157
static inline double min(double a, float b) 
# 8158
{ 
# 8159
return fmin(a, (double)b); 
# 8160
} 
# 8162
static inline unsigned max(unsigned a, unsigned b) 
# 8163
{ 
# 8164
return umax(a, b); 
# 8165
} 
# 8167
static inline unsigned max(int a, unsigned b) 
# 8168
{ 
# 8169
return umax((unsigned)a, b); 
# 8170
} 
# 8172
static inline unsigned max(unsigned a, int b) 
# 8173
{ 
# 8174
return umax(a, (unsigned)b); 
# 8175
} 
# 8177
static inline long long max(long long a, long long b) 
# 8178
{ 
# 8179
return llmax(a, b); 
# 8180
} 
# 8182
static inline unsigned long long max(unsigned long long a, unsigned long long b) 
# 8183
{ 
# 8184
return ullmax(a, b); 
# 8185
} 
# 8187
static inline unsigned long long max(long long a, unsigned long long b) 
# 8188
{ 
# 8189
return ullmax((unsigned long long)a, b); 
# 8190
} 
# 8192
static inline unsigned long long max(unsigned long long a, long long b) 
# 8193
{ 
# 8194
return ullmax(a, (unsigned long long)b); 
# 8195
} 
# 8197
static inline float max(float a, float b) 
# 8198
{ 
# 8199
return fmaxf(a, b); 
# 8200
} 
# 8202
static inline double max(double a, double b) 
# 8203
{ 
# 8204
return fmax(a, b); 
# 8205
} 
# 8207
static inline double max(float a, double b) 
# 8208
{ 
# 8209
return fmax((double)a, b); 
# 8210
} 
# 8212
static inline double max(double a, float b) 
# 8213
{ 
# 8214
return fmax(a, (double)b); 
# 8215
} 
# 73 "/usr/local/cuda-5.0/include/cuda_surface_types.h"
template< class T, int dim = 1> 
# 74
struct surface : public surfaceReference { 
# 76
surface() 
# 77
{ 
# 78
(channelDesc) = cudaCreateChannelDesc< T> (); 
# 79
} 
# 81
surface(cudaChannelFormatDesc desc) 
# 82
{ 
# 83
(channelDesc) = desc; 
# 84
} 
# 85
}; 
# 87
template< int dim> 
# 88
struct surface< void, dim>  : public surfaceReference { 
# 90
surface() 
# 91
{ 
# 92
(channelDesc) = cudaCreateChannelDesc< void> (); 
# 93
} 
# 94
}; 
# 73 "/usr/local/cuda-5.0/include/cuda_texture_types.h"
template< class T, int texType = 1, cudaTextureReadMode mode = cudaReadModeElementType> 
# 74
struct texture : public textureReference { 
# 76
texture(int norm = (0), cudaTextureFilterMode 
# 77
fMode = (cudaFilterModePoint), cudaTextureAddressMode 
# 78
aMode = (cudaAddressModeClamp)) 
# 79
{ 
# 80
(normalized) = norm; 
# 81
(filterMode) = fMode; 
# 82
((addressMode)[0]) = aMode; 
# 83
((addressMode)[1]) = aMode; 
# 84
((addressMode)[2]) = aMode; 
# 85
(channelDesc) = cudaCreateChannelDesc< T> (); 
# 86
(sRGB) = 0; 
# 87
} 
# 89
texture(int norm, cudaTextureFilterMode 
# 90
fMode, cudaTextureAddressMode 
# 91
aMode, cudaChannelFormatDesc 
# 92
desc) 
# 93
{ 
# 94
(normalized) = norm; 
# 95
(filterMode) = fMode; 
# 96
((addressMode)[0]) = aMode; 
# 97
((addressMode)[1]) = aMode; 
# 98
((addressMode)[2]) = aMode; 
# 99
(channelDesc) = desc; 
# 100
(sRGB) = 0; 
# 101
} 
# 102
}; 
# 2191 "/usr/local/cuda-5.0/include/device_functions.h"
__attribute__((unused)) static inline int mulhi(int a, int b) 
# 2192
{int volatile ___ = 1;(void)a;(void)b;
# 2194
::exit(___);}
#if 0
# 2192
{ 
# 2193
return __mulhi(a, b); 
# 2194
} 
#endif
# 2196 "/usr/local/cuda-5.0/include/device_functions.h"
__attribute__((unused)) static inline unsigned mulhi(unsigned a, unsigned b) 
# 2197
{int volatile ___ = 1;(void)a;(void)b;
# 2199
::exit(___);}
#if 0
# 2197
{ 
# 2198
return __umulhi(a, b); 
# 2199
} 
#endif
# 2201 "/usr/local/cuda-5.0/include/device_functions.h"
__attribute__((unused)) static inline unsigned mulhi(int a, unsigned b) 
# 2202
{int volatile ___ = 1;(void)a;(void)b;
# 2204
::exit(___);}
#if 0
# 2202
{ 
# 2203
return __umulhi((unsigned)a, b); 
# 2204
} 
#endif
# 2206 "/usr/local/cuda-5.0/include/device_functions.h"
__attribute__((unused)) static inline unsigned mulhi(unsigned a, int b) 
# 2207
{int volatile ___ = 1;(void)a;(void)b;
# 2209
::exit(___);}
#if 0
# 2207
{ 
# 2208
return __umulhi(a, (unsigned)b); 
# 2209
} 
#endif
# 2211 "/usr/local/cuda-5.0/include/device_functions.h"
__attribute__((unused)) static inline long long mul64hi(long long a, long long b) 
# 2212
{int volatile ___ = 1;(void)a;(void)b;
# 2214
::exit(___);}
#if 0
# 2212
{ 
# 2213
return __mul64hi(a, b); 
# 2214
} 
#endif
# 2216 "/usr/local/cuda-5.0/include/device_functions.h"
__attribute__((unused)) static inline unsigned long long mul64hi(unsigned long long a, unsigned long long b) 
# 2217
{int volatile ___ = 1;(void)a;(void)b;
# 2219
::exit(___);}
#if 0
# 2217
{ 
# 2218
return __umul64hi(a, b); 
# 2219
} 
#endif
# 2221 "/usr/local/cuda-5.0/include/device_functions.h"
__attribute__((unused)) static inline unsigned long long mul64hi(long long a, unsigned long long b) 
# 2222
{int volatile ___ = 1;(void)a;(void)b;
# 2224
::exit(___);}
#if 0
# 2222
{ 
# 2223
return __umul64hi((unsigned long long)a, b); 
# 2224
} 
#endif
# 2226 "/usr/local/cuda-5.0/include/device_functions.h"
__attribute__((unused)) static inline unsigned long long mul64hi(unsigned long long a, long long b) 
# 2227
{int volatile ___ = 1;(void)a;(void)b;
# 2229
::exit(___);}
#if 0
# 2227
{ 
# 2228
return __umul64hi(a, (unsigned long long)b); 
# 2229
} 
#endif
# 2231 "/usr/local/cuda-5.0/include/device_functions.h"
__attribute__((unused)) static inline int float_as_int(float a) 
# 2232
{int volatile ___ = 1;(void)a;
# 2234
::exit(___);}
#if 0
# 2232
{ 
# 2233
return __float_as_int(a); 
# 2234
} 
#endif
# 2236 "/usr/local/cuda-5.0/include/device_functions.h"
__attribute__((unused)) static inline float int_as_float(int a) 
# 2237
{int volatile ___ = 1;(void)a;
# 2239
::exit(___);}
#if 0
# 2237
{ 
# 2238
return __int_as_float(a); 
# 2239
} 
#endif
# 2241 "/usr/local/cuda-5.0/include/device_functions.h"
__attribute__((unused)) static inline float saturate(float a) 
# 2242
{int volatile ___ = 1;(void)a;
# 2244
::exit(___);}
#if 0
# 2242
{ 
# 2243
return __saturatef(a); 
# 2244
} 
#endif
# 2246 "/usr/local/cuda-5.0/include/device_functions.h"
__attribute__((unused)) static inline int mul24(int a, int b) 
# 2247
{int volatile ___ = 1;(void)a;(void)b;
# 2249
::exit(___);}
#if 0
# 2247
{ 
# 2248
return __mul24(a, b); 
# 2249
} 
#endif
# 2251 "/usr/local/cuda-5.0/include/device_functions.h"
__attribute__((unused)) static inline unsigned umul24(unsigned a, unsigned b) 
# 2252
{int volatile ___ = 1;(void)a;(void)b;
# 2254
::exit(___);}
#if 0
# 2252
{ 
# 2253
return __umul24(a, b); 
# 2254
} 
#endif
# 2256 "/usr/local/cuda-5.0/include/device_functions.h"
__attribute__((unused)) static inline void trap() 
# 2257
{int volatile ___ = 1;
# 2259
::exit(___);}
#if 0
# 2257
{ 
# 2258
__trap(); 
# 2259
} 
#endif
# 2262 "/usr/local/cuda-5.0/include/device_functions.h"
__attribute__((unused)) static inline void brkpt(int c = (0)) 
# 2263
{int volatile ___ = 1;(void)c;
# 2265
::exit(___);}
#if 0
# 2263
{ 
# 2264
__brkpt(c); 
# 2265
} 
#endif
# 2267 "/usr/local/cuda-5.0/include/device_functions.h"
__attribute__((unused)) static inline void syncthreads() 
# 2268
{int volatile ___ = 1;
# 2270
::exit(___);}
#if 0
# 2268
{ 
# 2269
__syncthreads(); 
# 2270
} 
#endif
# 2272 "/usr/local/cuda-5.0/include/device_functions.h"
__attribute__((unused)) static inline void prof_trigger(int e) 
# 2273
{int volatile ___ = 1;(void)e;
# 2290
::exit(___);}
#if 0
# 2273
{ 
# 2274
if (e == 0) { __prof_trigger(0); } else { 
# 2275
if (e == 1) { __prof_trigger(1); } else { 
# 2276
if (e == 2) { __prof_trigger(2); } else { 
# 2277
if (e == 3) { __prof_trigger(3); } else { 
# 2278
if (e == 4) { __prof_trigger(4); } else { 
# 2279
if (e == 5) { __prof_trigger(5); } else { 
# 2280
if (e == 6) { __prof_trigger(6); } else { 
# 2281
if (e == 7) { __prof_trigger(7); } else { 
# 2282
if (e == 8) { __prof_trigger(8); } else { 
# 2283
if (e == 9) { __prof_trigger(9); } else { 
# 2284
if (e == 10) { __prof_trigger(10); } else { 
# 2285
if (e == 11) { __prof_trigger(11); } else { 
# 2286
if (e == 12) { __prof_trigger(12); } else { 
# 2287
if (e == 13) { __prof_trigger(13); } else { 
# 2288
if (e == 14) { __prof_trigger(14); } else { 
# 2289
if (e == 15) { __prof_trigger(15); }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  
# 2290
} 
#endif
# 2292 "/usr/local/cuda-5.0/include/device_functions.h"
__attribute__((unused)) static inline void threadfence(bool global = (true)) 
# 2293
{int volatile ___ = 1;(void)global;
# 2295
::exit(___);}
#if 0
# 2293
{ 
# 2294
global ? __threadfence() : __threadfence_block(); 
# 2295
} 
#endif
# 2297 "/usr/local/cuda-5.0/include/device_functions.h"
__attribute__((unused)) static inline int float2int(float a, cudaRoundMode mode = (cudaRoundZero)) 
# 2298
{int volatile ___ = 1;(void)a;(void)mode;
# 2303
::exit(___);}
#if 0
# 2298
{ 
# 2299
return (mode == (cudaRoundNearest)) ? __float2int_rn(a) : ((mode == (cudaRoundPosInf)) ? __float2int_ru(a) : ((mode == (cudaRoundMinInf)) ? __float2int_rd(a) : __float2int_rz(a))); 
# 2303
} 
#endif
# 2305 "/usr/local/cuda-5.0/include/device_functions.h"
__attribute__((unused)) static inline unsigned float2uint(float a, cudaRoundMode mode = (cudaRoundZero)) 
# 2306
{int volatile ___ = 1;(void)a;(void)mode;
# 2311
::exit(___);}
#if 0
# 2306
{ 
# 2307
return (mode == (cudaRoundNearest)) ? __float2uint_rn(a) : ((mode == (cudaRoundPosInf)) ? __float2uint_ru(a) : ((mode == (cudaRoundMinInf)) ? __float2uint_rd(a) : __float2uint_rz(a))); 
# 2311
} 
#endif
# 2313 "/usr/local/cuda-5.0/include/device_functions.h"
__attribute__((unused)) static inline float int2float(int a, cudaRoundMode mode = (cudaRoundNearest)) 
# 2314
{int volatile ___ = 1;(void)a;(void)mode;
# 2319
::exit(___);}
#if 0
# 2314
{ 
# 2315
return (mode == (cudaRoundZero)) ? __int2float_rz(a) : ((mode == (cudaRoundPosInf)) ? __int2float_ru(a) : ((mode == (cudaRoundMinInf)) ? __int2float_rd(a) : __int2float_rn(a))); 
# 2319
} 
#endif
# 2321 "/usr/local/cuda-5.0/include/device_functions.h"
__attribute__((unused)) static inline float uint2float(unsigned a, cudaRoundMode mode = (cudaRoundNearest)) 
# 2322
{int volatile ___ = 1;(void)a;(void)mode;
# 2327
::exit(___);}
#if 0
# 2322
{ 
# 2323
return (mode == (cudaRoundZero)) ? __uint2float_rz(a) : ((mode == (cudaRoundPosInf)) ? __uint2float_ru(a) : ((mode == (cudaRoundMinInf)) ? __uint2float_rd(a) : __uint2float_rn(a))); 
# 2327
} 
#endif
# 96 "/usr/local/cuda-5.0/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd(int *address, int val) 
# 97
{int volatile ___ = 1;(void)address;(void)val;
# 99
::exit(___);}
#if 0
# 97
{ 
# 98
return __iAtomicAdd(address, val); 
# 99
} 
#endif
# 101 "/usr/local/cuda-5.0/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd(unsigned *address, unsigned val) 
# 102
{int volatile ___ = 1;(void)address;(void)val;
# 104
::exit(___);}
#if 0
# 102
{ 
# 103
return __uAtomicAdd(address, val); 
# 104
} 
#endif
# 106 "/usr/local/cuda-5.0/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicSub(int *address, int val) 
# 107
{int volatile ___ = 1;(void)address;(void)val;
# 109
::exit(___);}
#if 0
# 107
{ 
# 108
return __iAtomicAdd(address, (unsigned)(-((int)val))); 
# 109
} 
#endif
# 111 "/usr/local/cuda-5.0/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicSub(unsigned *address, unsigned val) 
# 112
{int volatile ___ = 1;(void)address;(void)val;
# 114
::exit(___);}
#if 0
# 112
{ 
# 113
return __uAtomicAdd(address, (unsigned)(-((int)val))); 
# 114
} 
#endif
# 116 "/usr/local/cuda-5.0/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch(int *address, int val) 
# 117
{int volatile ___ = 1;(void)address;(void)val;
# 119
::exit(___);}
#if 0
# 117
{ 
# 118
return __iAtomicExch(address, val); 
# 119
} 
#endif
# 121 "/usr/local/cuda-5.0/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch(unsigned *address, unsigned val) 
# 122
{int volatile ___ = 1;(void)address;(void)val;
# 124
::exit(___);}
#if 0
# 122
{ 
# 123
return __uAtomicExch(address, val); 
# 124
} 
#endif
# 126 "/usr/local/cuda-5.0/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch(float *address, float val) 
# 127
{int volatile ___ = 1;(void)address;(void)val;
# 129
::exit(___);}
#if 0
# 127
{ 
# 128
return __fAtomicExch(address, val); 
# 129
} 
#endif
# 131 "/usr/local/cuda-5.0/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin(int *address, int val) 
# 132
{int volatile ___ = 1;(void)address;(void)val;
# 134
::exit(___);}
#if 0
# 132
{ 
# 133
return __iAtomicMin(address, val); 
# 134
} 
#endif
# 136 "/usr/local/cuda-5.0/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin(unsigned *address, unsigned val) 
# 137
{int volatile ___ = 1;(void)address;(void)val;
# 139
::exit(___);}
#if 0
# 137
{ 
# 138
return __uAtomicMin(address, val); 
# 139
} 
#endif
# 141 "/usr/local/cuda-5.0/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax(int *address, int val) 
# 142
{int volatile ___ = 1;(void)address;(void)val;
# 144
::exit(___);}
#if 0
# 142
{ 
# 143
return __iAtomicMax(address, val); 
# 144
} 
#endif
# 146 "/usr/local/cuda-5.0/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax(unsigned *address, unsigned val) 
# 147
{int volatile ___ = 1;(void)address;(void)val;
# 149
::exit(___);}
#if 0
# 147
{ 
# 148
return __uAtomicMax(address, val); 
# 149
} 
#endif
# 151 "/usr/local/cuda-5.0/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc(unsigned *address, unsigned val) 
# 152
{int volatile ___ = 1;(void)address;(void)val;
# 154
::exit(___);}
#if 0
# 152
{ 
# 153
return __uAtomicInc(address, val); 
# 154
} 
#endif
# 156 "/usr/local/cuda-5.0/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec(unsigned *address, unsigned val) 
# 157
{int volatile ___ = 1;(void)address;(void)val;
# 159
::exit(___);}
#if 0
# 157
{ 
# 158
return __uAtomicDec(address, val); 
# 159
} 
#endif
# 161 "/usr/local/cuda-5.0/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd(int *address, int val) 
# 162
{int volatile ___ = 1;(void)address;(void)val;
# 164
::exit(___);}
#if 0
# 162
{ 
# 163
return __iAtomicAnd(address, val); 
# 164
} 
#endif
# 166 "/usr/local/cuda-5.0/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd(unsigned *address, unsigned val) 
# 167
{int volatile ___ = 1;(void)address;(void)val;
# 169
::exit(___);}
#if 0
# 167
{ 
# 168
return __uAtomicAnd(address, val); 
# 169
} 
#endif
# 171 "/usr/local/cuda-5.0/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr(int *address, int val) 
# 172
{int volatile ___ = 1;(void)address;(void)val;
# 174
::exit(___);}
#if 0
# 172
{ 
# 173
return __iAtomicOr(address, val); 
# 174
} 
#endif
# 176 "/usr/local/cuda-5.0/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr(unsigned *address, unsigned val) 
# 177
{int volatile ___ = 1;(void)address;(void)val;
# 179
::exit(___);}
#if 0
# 177
{ 
# 178
return __uAtomicOr(address, val); 
# 179
} 
#endif
# 181 "/usr/local/cuda-5.0/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor(int *address, int val) 
# 182
{int volatile ___ = 1;(void)address;(void)val;
# 184
::exit(___);}
#if 0
# 182
{ 
# 183
return __iAtomicXor(address, val); 
# 184
} 
#endif
# 186 "/usr/local/cuda-5.0/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor(unsigned *address, unsigned val) 
# 187
{int volatile ___ = 1;(void)address;(void)val;
# 189
::exit(___);}
#if 0
# 187
{ 
# 188
return __uAtomicXor(address, val); 
# 189
} 
#endif
# 191 "/usr/local/cuda-5.0/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS(int *address, int compare, int val) 
# 192
{int volatile ___ = 1;(void)address;(void)compare;(void)val;
# 194
::exit(___);}
#if 0
# 192
{ 
# 193
return __iAtomicCAS(address, compare, val); 
# 194
} 
#endif
# 196 "/usr/local/cuda-5.0/include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS(unsigned *address, unsigned compare, unsigned val) 
# 197
{int volatile ___ = 1;(void)address;(void)compare;(void)val;
# 199
::exit(___);}
#if 0
# 197
{ 
# 198
return __uAtomicCAS(address, compare, val); 
# 199
} 
#endif
# 81 "/usr/local/cuda-5.0/include/sm_12_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd(unsigned long long *address, unsigned long long val) 
# 82
{int volatile ___ = 1;(void)address;(void)val;
# 84
::exit(___);}
#if 0
# 82
{ 
# 83
return __ullAtomicAdd(address, val); 
# 84
} 
#endif
# 86 "/usr/local/cuda-5.0/include/sm_12_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch(unsigned long long *address, unsigned long long val) 
# 87
{int volatile ___ = 1;(void)address;(void)val;
# 89
::exit(___);}
#if 0
# 87
{ 
# 88
return __ullAtomicExch(address, val); 
# 89
} 
#endif
# 91 "/usr/local/cuda-5.0/include/sm_12_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS(unsigned long long *address, unsigned long long compare, unsigned long long val) 
# 92
{int volatile ___ = 1;(void)address;(void)compare;(void)val;
# 94
::exit(___);}
#if 0
# 92
{ 
# 93
return __ullAtomicCAS(address, compare, val); 
# 94
} 
#endif
# 96 "/usr/local/cuda-5.0/include/sm_12_atomic_functions.h"
__attribute__((unused)) static inline bool any(bool cond) 
# 97
{int volatile ___ = 1;(void)cond;
# 99
::exit(___);}
#if 0
# 97
{ 
# 98
return (bool)__any((int)cond); 
# 99
} 
#endif
# 101 "/usr/local/cuda-5.0/include/sm_12_atomic_functions.h"
__attribute__((unused)) static inline bool all(bool cond) 
# 102
{int volatile ___ = 1;(void)cond;
# 104
::exit(___);}
#if 0
# 102
{ 
# 103
return (bool)__all((int)cond); 
# 104
} 
#endif
# 1085 "/usr/local/cuda-5.0/include/sm_13_double_functions.h"
__attribute__((unused)) static inline double fma(double a, double b, double c, cudaRoundMode mode) 
# 1086
{int volatile ___ = 1;(void)a;(void)b;(void)c;(void)mode;
# 1091
::exit(___);}
#if 0
# 1086
{ 
# 1087
return (mode == (cudaRoundZero)) ? __fma_rz(a, b, c) : ((mode == (cudaRoundPosInf)) ? __fma_ru(a, b, c) : ((mode == (cudaRoundMinInf)) ? __fma_rd(a, b, c) : __fma_rn(a, b, c))); 
# 1091
} 
#endif
# 1093 "/usr/local/cuda-5.0/include/sm_13_double_functions.h"
__attribute__((unused)) static inline double dmul(double a, double b, cudaRoundMode mode = (cudaRoundNearest)) 
# 1094
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 1099
::exit(___);}
#if 0
# 1094
{ 
# 1095
return (mode == (cudaRoundZero)) ? __dmul_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dmul_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dmul_rd(a, b) : __dmul_rn(a, b))); 
# 1099
} 
#endif
# 1101 "/usr/local/cuda-5.0/include/sm_13_double_functions.h"
__attribute__((unused)) static inline double dadd(double a, double b, cudaRoundMode mode = (cudaRoundNearest)) 
# 1102
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 1107
::exit(___);}
#if 0
# 1102
{ 
# 1103
return (mode == (cudaRoundZero)) ? __dadd_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dadd_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dadd_rd(a, b) : __dadd_rn(a, b))); 
# 1107
} 
#endif
# 1109 "/usr/local/cuda-5.0/include/sm_13_double_functions.h"
__attribute__((unused)) static inline int double2int(double a, cudaRoundMode mode = (cudaRoundZero)) 
# 1110
{int volatile ___ = 1;(void)a;(void)mode;
# 1115
::exit(___);}
#if 0
# 1110
{ 
# 1111
return (mode == (cudaRoundNearest)) ? __double2int_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2int_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2int_rd(a) : __double2int_rz(a))); 
# 1115
} 
#endif
# 1117 "/usr/local/cuda-5.0/include/sm_13_double_functions.h"
__attribute__((unused)) static inline unsigned double2uint(double a, cudaRoundMode mode = (cudaRoundZero)) 
# 1118
{int volatile ___ = 1;(void)a;(void)mode;
# 1123
::exit(___);}
#if 0
# 1118
{ 
# 1119
return (mode == (cudaRoundNearest)) ? __double2uint_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2uint_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2uint_rd(a) : __double2uint_rz(a))); 
# 1123
} 
#endif
# 1125 "/usr/local/cuda-5.0/include/sm_13_double_functions.h"
__attribute__((unused)) static inline long long double2ll(double a, cudaRoundMode mode = (cudaRoundZero)) 
# 1126
{int volatile ___ = 1;(void)a;(void)mode;
# 1131
::exit(___);}
#if 0
# 1126
{ 
# 1127
return (mode == (cudaRoundNearest)) ? __double2ll_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ll_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ll_rd(a) : __double2ll_rz(a))); 
# 1131
} 
#endif
# 1133 "/usr/local/cuda-5.0/include/sm_13_double_functions.h"
__attribute__((unused)) static inline unsigned long long double2ull(double a, cudaRoundMode mode = (cudaRoundZero)) 
# 1134
{int volatile ___ = 1;(void)a;(void)mode;
# 1139
::exit(___);}
#if 0
# 1134
{ 
# 1135
return (mode == (cudaRoundNearest)) ? __double2ull_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ull_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ull_rd(a) : __double2ull_rz(a))); 
# 1139
} 
#endif
# 1141 "/usr/local/cuda-5.0/include/sm_13_double_functions.h"
__attribute__((unused)) static inline double ll2double(long long a, cudaRoundMode mode = (cudaRoundNearest)) 
# 1142
{int volatile ___ = 1;(void)a;(void)mode;
# 1147
::exit(___);}
#if 0
# 1142
{ 
# 1143
return (mode == (cudaRoundZero)) ? __ll2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ll2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ll2double_rd(a) : __ll2double_rn(a))); 
# 1147
} 
#endif
# 1149 "/usr/local/cuda-5.0/include/sm_13_double_functions.h"
__attribute__((unused)) static inline double ull2double(unsigned long long a, cudaRoundMode mode = (cudaRoundNearest)) 
# 1150
{int volatile ___ = 1;(void)a;(void)mode;
# 1155
::exit(___);}
#if 0
# 1150
{ 
# 1151
return (mode == (cudaRoundZero)) ? __ull2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ull2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ull2double_rd(a) : __ull2double_rn(a))); 
# 1155
} 
#endif
# 1157 "/usr/local/cuda-5.0/include/sm_13_double_functions.h"
__attribute__((unused)) static inline double int2double(int a, cudaRoundMode mode = (cudaRoundNearest)) 
# 1158
{int volatile ___ = 1;(void)a;(void)mode;
# 1160
::exit(___);}
#if 0
# 1158
{ 
# 1159
return (double)a; 
# 1160
} 
#endif
# 1162 "/usr/local/cuda-5.0/include/sm_13_double_functions.h"
__attribute__((unused)) static inline double uint2double(unsigned a, cudaRoundMode mode = (cudaRoundNearest)) 
# 1163
{int volatile ___ = 1;(void)a;(void)mode;
# 1165
::exit(___);}
#if 0
# 1163
{ 
# 1164
return (double)a; 
# 1165
} 
#endif
# 1167 "/usr/local/cuda-5.0/include/sm_13_double_functions.h"
__attribute__((unused)) static inline double float2double(float a, cudaRoundMode mode = (cudaRoundNearest)) 
# 1168
{int volatile ___ = 1;(void)a;(void)mode;
# 1170
::exit(___);}
#if 0
# 1168
{ 
# 1169
return (double)a; 
# 1170
} 
#endif
# 77 "/usr/local/cuda-5.0/include/sm_20_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd(float *address, float val) 
# 78
{int volatile ___ = 1;(void)address;(void)val;
# 80
::exit(___);}
#if 0
# 78
{ 
# 79
return __fAtomicAdd(address, val); 
# 80
} 
#endif
# 83 "/usr/local/cuda-5.0/include/sm_35_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin(long long *address, long long val) 
# 84
{int volatile ___ = 1;(void)address;(void)val;
# 86
::exit(___);}
#if 0
# 84
{ 
# 85
return __illAtomicMin(address, val); 
# 86
} 
#endif
# 88 "/usr/local/cuda-5.0/include/sm_35_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMax(long long *address, long long val) 
# 89
{int volatile ___ = 1;(void)address;(void)val;
# 91
::exit(___);}
#if 0
# 89
{ 
# 90
return __illAtomicMax(address, val); 
# 91
} 
#endif
# 93 "/usr/local/cuda-5.0/include/sm_35_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMin(unsigned long long *address, unsigned long long val) 
# 94
{int volatile ___ = 1;(void)address;(void)val;
# 96
::exit(___);}
#if 0
# 94
{ 
# 95
return __ullAtomicMin(address, val); 
# 96
} 
#endif
# 98 "/usr/local/cuda-5.0/include/sm_35_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMax(unsigned long long *address, unsigned long long val) 
# 99
{int volatile ___ = 1;(void)address;(void)val;
# 101
::exit(___);}
#if 0
# 99
{ 
# 100
return __ullAtomicMax(address, val); 
# 101
} 
#endif
# 103 "/usr/local/cuda-5.0/include/sm_35_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAnd(unsigned long long *address, unsigned long long val) 
# 104
{int volatile ___ = 1;(void)address;(void)val;
# 106
::exit(___);}
#if 0
# 104
{ 
# 105
return __ullAtomicAnd(address, val); 
# 106
} 
#endif
# 108 "/usr/local/cuda-5.0/include/sm_35_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicOr(unsigned long long *address, unsigned long long val) 
# 109
{int volatile ___ = 1;(void)address;(void)val;
# 111
::exit(___);}
#if 0
# 109
{ 
# 110
return __ullAtomicOr(address, val); 
# 111
} 
#endif
# 113 "/usr/local/cuda-5.0/include/sm_35_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicXor(unsigned long long *address, unsigned long long val) 
# 114
{int volatile ___ = 1;(void)address;(void)val;
# 116
::exit(___);}
#if 0
# 114
{ 
# 115
return __ullAtomicXor(address, val); 
# 116
} 
#endif
# 407 "/usr/local/cuda-5.0/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned ballot(bool pred) 
# 408
{int volatile ___ = 1;(void)pred;
# 410
::exit(___);}
#if 0
# 408
{ 
# 409
return __ballot((int)pred); 
# 410
} 
#endif
# 412 "/usr/local/cuda-5.0/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline int syncthreads_count(bool pred) 
# 413
{int volatile ___ = 1;(void)pred;
# 415
::exit(___);}
#if 0
# 413
{ 
# 414
return __syncthreads_count((int)pred); 
# 415
} 
#endif
# 417 "/usr/local/cuda-5.0/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline bool syncthreads_and(bool pred) 
# 418
{int volatile ___ = 1;(void)pred;
# 420
::exit(___);}
#if 0
# 418
{ 
# 419
return (bool)__syncthreads_and((int)pred); 
# 420
} 
#endif
# 422 "/usr/local/cuda-5.0/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline bool syncthreads_or(bool pred) 
# 423
{int volatile ___ = 1;(void)pred;
# 425
::exit(___);}
#if 0
# 423
{ 
# 424
return (bool)__syncthreads_or((int)pred); 
# 425
} 
#endif
# 430 "/usr/local/cuda-5.0/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isGlobal(const void *ptr) 
# 431
{int volatile ___ = 1;(void)ptr;
# 444
::exit(___);}
#if 0
# 431
{ 
# 432
unsigned ret; 
# 433
__asm__ volatile("{ \n\t    .reg .pred p; \n\t    isspacep.global p, %1; \n\t    selp.u32 %0, 1, 0, p;  \n\t} \n\t" : "=r" (ret) : "l" (ptr)); 
# 443
return ret; 
# 444
} 
#endif
# 93 "/usr/local/cuda-5.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl(int var, int srcLane, int width = (32)) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;
# 98
::exit(___);}
#if 0
# 93
{ 
# 94
int ret, c; 
# 95
c = (((32 - width) << 8) | 31); 
# 96
__asm__ volatile("shfl.idx.b32 %0, %1, %2, %3;" : "=r" (ret) : "r" (var), "r" (srcLane), "r" (c)); 
# 97
return ret; 
# 98
} 
#endif
# 100 "/usr/local/cuda-5.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_up(int var, unsigned delta, int width = (32)) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 105
::exit(___);}
#if 0
# 100
{ 
# 101
int ret, c; 
# 102
c = ((32 - width) << 8); 
# 103
__asm__ volatile("shfl.up.b32 %0, %1, %2, %3;" : "=r" (ret) : "r" (var), "r" (delta), "r" (c)); 
# 104
return ret; 
# 105
} 
#endif
# 107 "/usr/local/cuda-5.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_down(int var, unsigned delta, int width = (32)) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 112
::exit(___);}
#if 0
# 107
{ 
# 108
int ret, c; 
# 109
c = (((32 - width) << 8) | 31); 
# 110
__asm__ volatile("shfl.down.b32 %0, %1, %2, %3;" : "=r" (ret) : "r" (var), "r" (delta), "r" (c)); 
# 111
return ret; 
# 112
} 
#endif
# 114 "/usr/local/cuda-5.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_xor(int var, int laneMask, int width = (32)) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;
# 119
::exit(___);}
#if 0
# 114
{ 
# 115
int ret, c; 
# 116
c = (((32 - width) << 8) | 31); 
# 117
__asm__ volatile("shfl.bfly.b32 %0, %1, %2, %3;" : "=r" (ret) : "r" (var), "r" (laneMask), "r" (c)); 
# 118
return ret; 
# 119
} 
#endif
# 121 "/usr/local/cuda-5.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl(float var, int srcLane, int width = (32)) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;
# 127
::exit(___);}
#if 0
# 121
{ 
# 122
float ret; 
# 123
int c; 
# 124
c = (((32 - width) << 8) | 31); 
# 125
__asm__ volatile("shfl.idx.b32 %0, %1, %2, %3;" : "=f" (ret) : "f" (var), "r" (srcLane), "r" (c)); 
# 126
return ret; 
# 127
} 
#endif
# 129 "/usr/local/cuda-5.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_up(float var, unsigned delta, int width = (32)) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 135
::exit(___);}
#if 0
# 129
{ 
# 130
float ret; 
# 131
int c; 
# 132
c = ((32 - width) << 8); 
# 133
__asm__ volatile("shfl.up.b32 %0, %1, %2, %3;" : "=f" (ret) : "f" (var), "r" (delta), "r" (c)); 
# 134
return ret; 
# 135
} 
#endif
# 137 "/usr/local/cuda-5.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_down(float var, unsigned delta, int width = (32)) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 143
::exit(___);}
#if 0
# 137
{ 
# 138
float ret; 
# 139
int c; 
# 140
c = (((32 - width) << 8) | 31); 
# 141
__asm__ volatile("shfl.down.b32 %0, %1, %2, %3;" : "=f" (ret) : "f" (var), "r" (delta), "r" (c)); 
# 142
return ret; 
# 143
} 
#endif
# 145 "/usr/local/cuda-5.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_xor(float var, int laneMask, int width = (32)) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;
# 151
::exit(___);}
#if 0
# 145
{ 
# 146
float ret; 
# 147
int c; 
# 148
c = (((32 - width) << 8) | 31); 
# 149
__asm__ volatile("shfl.bfly.b32 %0, %1, %2, %3;" : "=f" (ret) : "f" (var), "r" (laneMask), "r" (c)); 
# 150
return ret; 
# 151
} 
#endif
# 91 "/usr/local/cuda-5.0/include/sm_35_intrinsics.h"
__attribute__((unused)) static inline char __ldg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 91
{ unsigned ret; __asm__ volatile("ld.global.nc.s8 %0, [%1];" : "=r" (ret) : "l" (ptr)); return (char)ret; } 
#endif
# 92 "/usr/local/cuda-5.0/include/sm_35_intrinsics.h"
__attribute__((unused)) static inline short __ldg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 92
{ unsigned short ret; __asm__ volatile("ld.global.nc.s16 %0, [%1];" : "=h" (ret) : "l" (ptr)); return (short)ret; } 
#endif
# 93 "/usr/local/cuda-5.0/include/sm_35_intrinsics.h"
__attribute__((unused)) static inline int __ldg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 93
{ unsigned ret; __asm__ volatile("ld.global.nc.s32 %0, [%1];" : "=r" (ret) : "l" (ptr)); return (int)ret; } 
#endif
# 94 "/usr/local/cuda-5.0/include/sm_35_intrinsics.h"
__attribute__((unused)) static inline long long __ldg(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 94
{ unsigned long long ret; __asm__ volatile("ld.global.nc.s64 %0, [%1];" : "=l" (ret) : "l" (ptr)); return (long long)ret; } 
#endif
# 95 "/usr/local/cuda-5.0/include/sm_35_intrinsics.h"
__attribute__((unused)) static inline int2 __ldg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 95
{ int2 ret; __asm__ volatile("ld.global.nc.v2.s32 {%0,%1}, [%2];" : "=r" (ret.x), "=r" (ret.y) : "l" (ptr)); return ret; } 
#endif
# 96 "/usr/local/cuda-5.0/include/sm_35_intrinsics.h"
__attribute__((unused)) static inline int4 __ldg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 96
{ int4 ret; __asm__ volatile("ld.global.nc.v4.s32 {%0,%1,%2,%3}, [%4];" : "=r" (ret.x), "=r" (ret.y), "=r" (ret.z), "=r" (ret.w) : "l" (ptr)); return ret; } 
#endif
# 97 "/usr/local/cuda-5.0/include/sm_35_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 97
{ unsigned ret; __asm__ volatile("ld.global.nc.s8 %0, [%1];" : "=r" (ret) : "l" (ptr)); return (unsigned char)ret; } 
#endif
# 98 "/usr/local/cuda-5.0/include/sm_35_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 98
{ unsigned short ret; __asm__ volatile("ld.global.nc.s16 %0, [%1];" : "=h" (ret) : "l" (ptr)); return ret; } 
#endif
# 99 "/usr/local/cuda-5.0/include/sm_35_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 99
{ unsigned ret; __asm__ volatile("ld.global.nc.s32 %0, [%1];" : "=r" (ret) : "l" (ptr)); return ret; } 
#endif
# 100 "/usr/local/cuda-5.0/include/sm_35_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldg(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 100
{ unsigned long long ret; __asm__ volatile("ld.global.nc.s64 %0, [%1];" : "=l" (ret) : "l" (ptr)); return ret; } 
#endif
# 101 "/usr/local/cuda-5.0/include/sm_35_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 101
{ uint2 ret; __asm__ volatile("ld.global.nc.v2.u32 {%0,%1}, [%2];" : "=r" (ret.x), "=r" (ret.y) : "l" (ptr)); return ret; } 
#endif
# 102 "/usr/local/cuda-5.0/include/sm_35_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 102
{ uint4 ret; __asm__ volatile("ld.global.nc.v4.u32 {%0,%1,%2,%3}, [%4];" : "=r" (ret.x), "=r" (ret.y), "=r" (ret.z), "=r" (ret.w) : "l" (ptr)); return ret; } 
#endif
# 103 "/usr/local/cuda-5.0/include/sm_35_intrinsics.h"
__attribute__((unused)) static inline float __ldg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 103
{ float ret; __asm__ volatile("ld.global.nc.f32 %0, [%1];" : "=f" (ret) : "l" (ptr)); return ret; } 
#endif
# 104 "/usr/local/cuda-5.0/include/sm_35_intrinsics.h"
__attribute__((unused)) static inline double __ldg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 104
{ double ret; __asm__ volatile("ld.global.nc.f64 %0, [%1];" : "=d" (ret) : "l" (ptr)); return ret; } 
#endif
# 105 "/usr/local/cuda-5.0/include/sm_35_intrinsics.h"
__attribute__((unused)) static inline float2 __ldg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 105
{ float2 ret; __asm__ volatile("ld.global.nc.v2.f32 {%0,%1}, [%2];" : "=f" (ret.x), "=f" (ret.y) : "l" (ptr)); return ret; } 
#endif
# 106 "/usr/local/cuda-5.0/include/sm_35_intrinsics.h"
__attribute__((unused)) static inline float4 __ldg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 106
{ float4 ret; __asm__ volatile("ld.global.nc.v4.f32 {%0,%1,%2,%3}, [%4];" : "=f" (ret.x), "=f" (ret.y), "=f" (ret.z), "=f" (ret.w) : "l" (ptr)); return ret; } 
#endif
# 107 "/usr/local/cuda-5.0/include/sm_35_intrinsics.h"
__attribute__((unused)) static inline double2 __ldg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 107
{ double2 ret; __asm__ volatile("ld.global.nc.v2.f64 {%0,%1}, [%2];" : "=d" (ret.x), "=d" (ret.y) : "l" (ptr)); return ret; } 
#endif
# 118 "/usr/local/cuda-5.0/include/sm_35_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_l(unsigned lo, unsigned hi, unsigned shift) 
# 119
{int volatile ___ = 1;(void)lo;(void)hi;(void)shift;
# 123
::exit(___);}
#if 0
# 119
{ 
# 120
unsigned ret; 
# 121
__asm__ volatile("shf.l.wrap.b32 %0, %1, %2, %3;" : "=r" (ret) : "r" (lo), "r" (hi), "r" (shift)); 
# 122
return ret; 
# 123
} 
#endif
# 124 "/usr/local/cuda-5.0/include/sm_35_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_lc(unsigned lo, unsigned hi, unsigned shift) 
# 125
{int volatile ___ = 1;(void)lo;(void)hi;(void)shift;
# 129
::exit(___);}
#if 0
# 125
{ 
# 126
unsigned ret; 
# 127
__asm__ volatile("shf.l.clamp.b32 %0, %1, %2, %3;" : "=r" (ret) : "r" (lo), "r" (hi), "r" (shift)); 
# 128
return ret; 
# 129
} 
#endif
# 132 "/usr/local/cuda-5.0/include/sm_35_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_r(unsigned lo, unsigned hi, unsigned shift) 
# 133
{int volatile ___ = 1;(void)lo;(void)hi;(void)shift;
# 137
::exit(___);}
#if 0
# 133
{ 
# 134
unsigned ret; 
# 135
__asm__ volatile("shf.r.wrap.b32 %0, %1, %2, %3;" : "=r" (ret) : "r" (lo), "r" (hi), "r" (shift)); 
# 136
return ret; 
# 137
} 
#endif
# 138 "/usr/local/cuda-5.0/include/sm_35_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_rc(unsigned lo, unsigned hi, unsigned shift) 
# 139
{int volatile ___ = 1;(void)lo;(void)hi;(void)shift;
# 143
::exit(___);}
#if 0
# 139
{ 
# 140
unsigned ret; 
# 141
__asm__ volatile("shf.r.clamp.b32 %0, %1, %2, %3;" : "=r" (ret) : "r" (lo), "r" (hi), "r" (shift)); 
# 142
return ret; 
# 143
} 
#endif
# 99 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 100
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(T *res, surface< void, 1>  surf, int x, int s, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 101
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)s;(void)mode;
# 108
::exit(___);}
#if 0
# 101
{ 
# 102
(s == 1) ? ((void)((*((uchar1 *)res)) = __surf1Dreadc1(surf, x, cudaBoundaryModeTrap))) : ((s == 2) ? ((void)((*((ushort1 *)res)) = __surf1Dreads1(surf, x, cudaBoundaryModeTrap))) : ((s == 4) ? ((void)((*((uint1 *)res)) = __surf1Dreadu1(surf, x, cudaBoundaryModeTrap))) : ((s == 8) ? ((void)((*((uint2 *)res)) = __surf1Dreadu2(surf, x, cudaBoundaryModeTrap))) : ((s == 16) ? ((void)((*((uint4 *)res)) = __surf1Dreadu4(surf, x, cudaBoundaryModeTrap))) : ((void)0))))); 
# 108
} 
#endif
# 110 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 111
__attribute((always_inline)) __attribute__((unused)) static inline T surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 112
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 118
::exit(___);}
#if 0
# 112
{ 
# 113
T tmp; 
# 115
surf1Dread(&tmp, surf, x, (int)sizeof(T), mode); 
# 117
return tmp; 
# 118
} 
#endif
# 120 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 121
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(T *res, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 122
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)mode;
# 124
::exit(___);}
#if 0
# 122
{ 
# 123
(*res) = surf1Dread< T> (surf, x, mode); 
# 124
} 
#endif
# 127 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 127
__attribute((always_inline)) __attribute__((unused)) inline char surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 128
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 130
::exit(___);}
#if 0
# 128
{ 
# 129
return (char)(__surf1Dreadc1(surf, x, cudaBoundaryModeTrap).x); 
# 130
} 
#endif
# 133 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 133
__attribute((always_inline)) __attribute__((unused)) inline signed char surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 134
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 136
::exit(___);}
#if 0
# 134
{ 
# 135
return (signed char)(__surf1Dreadc1(surf, x, cudaBoundaryModeTrap).x); 
# 136
} 
#endif
# 139 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 139
__attribute((always_inline)) __attribute__((unused)) inline unsigned char surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 140
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 142
::exit(___);}
#if 0
# 140
{ 
# 141
return __surf1Dreadc1(surf, x, cudaBoundaryModeTrap).x; 
# 142
} 
#endif
# 145 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 145
__attribute((always_inline)) __attribute__((unused)) inline char1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 146
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 148
::exit(___);}
#if 0
# 146
{ 
# 147
return make_char1((signed char)(__surf1Dreadc1(surf, x, cudaBoundaryModeTrap).x)); 
# 148
} 
#endif
# 151 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 151
__attribute((always_inline)) __attribute__((unused)) inline uchar1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 152
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 154
::exit(___);}
#if 0
# 152
{ 
# 153
return __surf1Dreadc1(surf, x, cudaBoundaryModeTrap); 
# 154
} 
#endif
# 157 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 157
__attribute((always_inline)) __attribute__((unused)) inline char2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 158
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 162
::exit(___);}
#if 0
# 158
{ 
# 159
uchar2 tmp = __surf1Dreadc2(surf, x, cudaBoundaryModeTrap); 
# 161
return make_char2((signed char)(tmp.x), (signed char)(tmp.y)); 
# 162
} 
#endif
# 165 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 165
__attribute((always_inline)) __attribute__((unused)) inline uchar2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 166
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 168
::exit(___);}
#if 0
# 166
{ 
# 167
return __surf1Dreadc2(surf, x, cudaBoundaryModeTrap); 
# 168
} 
#endif
# 171 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 171
__attribute((always_inline)) __attribute__((unused)) inline char4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 172
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 176
::exit(___);}
#if 0
# 172
{ 
# 173
uchar4 tmp = __surf1Dreadc4(surf, x, cudaBoundaryModeTrap); 
# 175
return make_char4((signed char)(tmp.x), (signed char)(tmp.y), (signed char)(tmp.z), (signed char)(tmp.w)); 
# 176
} 
#endif
# 179 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 179
__attribute((always_inline)) __attribute__((unused)) inline uchar4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 180
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 182
::exit(___);}
#if 0
# 180
{ 
# 181
return __surf1Dreadc4(surf, x, cudaBoundaryModeTrap); 
# 182
} 
#endif
# 185 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 185
__attribute((always_inline)) __attribute__((unused)) inline short surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 186
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 188
::exit(___);}
#if 0
# 186
{ 
# 187
return (short)(__surf1Dreads1(surf, x, cudaBoundaryModeTrap).x); 
# 188
} 
#endif
# 191 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 191
__attribute((always_inline)) __attribute__((unused)) inline unsigned short surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 192
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 194
::exit(___);}
#if 0
# 192
{ 
# 193
return __surf1Dreads1(surf, x, cudaBoundaryModeTrap).x; 
# 194
} 
#endif
# 197 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 197
__attribute((always_inline)) __attribute__((unused)) inline short1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 198
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 200
::exit(___);}
#if 0
# 198
{ 
# 199
return make_short1((signed short)(__surf1Dreads1(surf, x, cudaBoundaryModeTrap).x)); 
# 200
} 
#endif
# 203 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 203
__attribute((always_inline)) __attribute__((unused)) inline ushort1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 204
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 206
::exit(___);}
#if 0
# 204
{ 
# 205
return __surf1Dreads1(surf, x, cudaBoundaryModeTrap); 
# 206
} 
#endif
# 209 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 209
__attribute((always_inline)) __attribute__((unused)) inline short2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 210
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 214
::exit(___);}
#if 0
# 210
{ 
# 211
ushort2 tmp = __surf1Dreads2(surf, x, cudaBoundaryModeTrap); 
# 213
return make_short2((signed short)(tmp.x), (signed short)(tmp.y)); 
# 214
} 
#endif
# 217 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 217
__attribute((always_inline)) __attribute__((unused)) inline ushort2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 218
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 220
::exit(___);}
#if 0
# 218
{ 
# 219
return __surf1Dreads2(surf, x, cudaBoundaryModeTrap); 
# 220
} 
#endif
# 223 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 223
__attribute((always_inline)) __attribute__((unused)) inline short4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 224
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 228
::exit(___);}
#if 0
# 224
{ 
# 225
ushort4 tmp = __surf1Dreads4(surf, x, cudaBoundaryModeTrap); 
# 227
return make_short4((signed short)(tmp.x), (signed short)(tmp.y), (signed short)(tmp.z), (signed short)(tmp.w)); 
# 228
} 
#endif
# 231 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 231
__attribute((always_inline)) __attribute__((unused)) inline ushort4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 232
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 234
::exit(___);}
#if 0
# 232
{ 
# 233
return __surf1Dreads4(surf, x, cudaBoundaryModeTrap); 
# 234
} 
#endif
# 237 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 237
__attribute((always_inline)) __attribute__((unused)) inline int surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 238
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 240
::exit(___);}
#if 0
# 238
{ 
# 239
return (int)(__surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x); 
# 240
} 
#endif
# 243 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 243
__attribute((always_inline)) __attribute__((unused)) inline unsigned surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 244
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 246
::exit(___);}
#if 0
# 244
{ 
# 245
return __surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x; 
# 246
} 
#endif
# 249 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 249
__attribute((always_inline)) __attribute__((unused)) inline int1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 250
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 252
::exit(___);}
#if 0
# 250
{ 
# 251
return make_int1((signed int)(__surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x)); 
# 252
} 
#endif
# 255 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 255
__attribute((always_inline)) __attribute__((unused)) inline uint1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 256
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 258
::exit(___);}
#if 0
# 256
{ 
# 257
return __surf1Dreadu1(surf, x, cudaBoundaryModeTrap); 
# 258
} 
#endif
# 261 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 261
__attribute((always_inline)) __attribute__((unused)) inline int2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 262
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 266
::exit(___);}
#if 0
# 262
{ 
# 263
uint2 tmp = __surf1Dreadu2(surf, x, cudaBoundaryModeTrap); 
# 265
return make_int2((int)(tmp.x), (int)(tmp.y)); 
# 266
} 
#endif
# 269 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 269
__attribute((always_inline)) __attribute__((unused)) inline uint2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 270
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 272
::exit(___);}
#if 0
# 270
{ 
# 271
return __surf1Dreadu2(surf, x, cudaBoundaryModeTrap); 
# 272
} 
#endif
# 275 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 275
__attribute((always_inline)) __attribute__((unused)) inline int4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 276
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 280
::exit(___);}
#if 0
# 276
{ 
# 277
uint4 tmp = __surf1Dreadu4(surf, x, cudaBoundaryModeTrap); 
# 279
return make_int4((int)(tmp.x), (int)(tmp.y), (int)(tmp.z), (int)(tmp.w)); 
# 280
} 
#endif
# 283 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 283
__attribute((always_inline)) __attribute__((unused)) inline uint4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 284
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 286
::exit(___);}
#if 0
# 284
{ 
# 285
return __surf1Dreadu4(surf, x, cudaBoundaryModeTrap); 
# 286
} 
#endif
# 289 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 289
__attribute((always_inline)) __attribute__((unused)) inline long long surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 290
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 292
::exit(___);}
#if 0
# 290
{ 
# 291
return (long long)(__surf1Dreadl1(surf, x, cudaBoundaryModeTrap).x); 
# 292
} 
#endif
# 295 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 295
__attribute((always_inline)) __attribute__((unused)) inline unsigned long long surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 296
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 298
::exit(___);}
#if 0
# 296
{ 
# 297
return __surf1Dreadl1(surf, x, cudaBoundaryModeTrap).x; 
# 298
} 
#endif
# 301 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 301
__attribute((always_inline)) __attribute__((unused)) inline longlong1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 302
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 304
::exit(___);}
#if 0
# 302
{ 
# 303
return make_longlong1((long long)(__surf1Dreadl1(surf, x, cudaBoundaryModeTrap).x)); 
# 304
} 
#endif
# 307 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 307
__attribute((always_inline)) __attribute__((unused)) inline ulonglong1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 308
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 310
::exit(___);}
#if 0
# 308
{ 
# 309
return __surf1Dreadl1(surf, x, cudaBoundaryModeTrap); 
# 310
} 
#endif
# 313 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 313
__attribute((always_inline)) __attribute__((unused)) inline longlong2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 314
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 318
::exit(___);}
#if 0
# 314
{ 
# 315
ulonglong2 tmp = __surf1Dreadl2(surf, x, cudaBoundaryModeTrap); 
# 317
return make_longlong2((long long)(tmp.x), (long long)(tmp.y)); 
# 318
} 
#endif
# 321 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111
__attribute((always_inline)) 
# 321
__attribute((always_inline)) __attribute__((unused)) inline ulonglong2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 322
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 324
::exit(___);}
#if 0
# 322
{ 
# 323
return __surf1Dreadl2(surf, x, cudaBoundaryModeTrap); 
# 324
} 
#endif
# 387 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) 
# 387 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 388
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 390
::exit(___);}
#if 0
# 388
{ 
# 389
return __int_as_float((int)(__surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x)); 
# 390
} 
#endif
# 393 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) 
# 393 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 394
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 396
::exit(___);}
#if 0
# 394
{ 
# 395
return make_float1(__int_as_float((int)(__surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x))); 
# 396
} 
#endif
# 399 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) 
# 399 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 400
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 404
::exit(___);}
#if 0
# 400
{ 
# 401
uint2 tmp = __surf1Dreadu2(surf, x, cudaBoundaryModeTrap); 
# 403
return make_float2(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y))); 
# 404
} 
#endif
# 407 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 111 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) 
# 407 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
# 408
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 412
::exit(___);}
#if 0
# 408
{ 
# 409
uint4 tmp = __surf1Dreadu4(surf, x, cudaBoundaryModeTrap); 
# 411
return make_float4(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y)), __int_as_float((int)(tmp.z)), __int_as_float((int)(tmp.w))); 
# 412
} 
#endif
# 447 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 448
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(T *res, surface< void, 2>  surf, int x, int y, int s, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 449
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)s;(void)mode;
# 456
::exit(___);}
#if 0
# 449
{ 
# 450
(s == 1) ? ((void)((*((uchar1 *)res)) = __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap))) : ((s == 2) ? ((void)((*((ushort1 *)res)) = __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap))) : ((s == 4) ? ((void)((*((uint1 *)res)) = __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap))) : ((s == 8) ? ((void)((*((uint2 *)res)) = __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap))) : ((s == 16) ? ((void)((*((uint4 *)res)) = __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap))) : ((void)0))))); 
# 456
} 
#endif
# 458 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 459
__attribute((always_inline)) __attribute__((unused)) static inline T surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 460
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 466
::exit(___);}
#if 0
# 460
{ 
# 461
T tmp; 
# 463
surf2Dread(&tmp, surf, x, y, (int)sizeof(T), mode); 
# 465
return tmp; 
# 466
} 
#endif
# 468 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 469
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(T *res, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 470
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)mode;
# 472
::exit(___);}
#if 0
# 470
{ 
# 471
(*res) = surf2Dread< T> (surf, x, y, mode); 
# 472
} 
#endif
# 475 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 475
__attribute((always_inline)) __attribute__((unused)) inline char surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 476
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 478
::exit(___);}
#if 0
# 476
{ 
# 477
return (char)(__surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap).x); 
# 478
} 
#endif
# 481 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 481
__attribute((always_inline)) __attribute__((unused)) inline signed char surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 482
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 484
::exit(___);}
#if 0
# 482
{ 
# 483
return (signed char)(__surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap).x); 
# 484
} 
#endif
# 487 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 487
__attribute((always_inline)) __attribute__((unused)) inline unsigned char surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 488
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 490
::exit(___);}
#if 0
# 488
{ 
# 489
return __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap).x; 
# 490
} 
#endif
# 493 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 493
__attribute((always_inline)) __attribute__((unused)) inline char1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 494
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 496
::exit(___);}
#if 0
# 494
{ 
# 495
return make_char1((signed char)(__surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap).x)); 
# 496
} 
#endif
# 499 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 499
__attribute((always_inline)) __attribute__((unused)) inline uchar1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 500
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 502
::exit(___);}
#if 0
# 500
{ 
# 501
return __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap); 
# 502
} 
#endif
# 505 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 505
__attribute((always_inline)) __attribute__((unused)) inline char2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 506
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 510
::exit(___);}
#if 0
# 506
{ 
# 507
uchar2 tmp = __surf2Dreadc2(surf, x, y, cudaBoundaryModeTrap); 
# 509
return make_char2((signed char)(tmp.x), (signed char)(tmp.y)); 
# 510
} 
#endif
# 513 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 513
__attribute((always_inline)) __attribute__((unused)) inline uchar2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 514
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 516
::exit(___);}
#if 0
# 514
{ 
# 515
return __surf2Dreadc2(surf, x, y, cudaBoundaryModeTrap); 
# 516
} 
#endif
# 519 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 519
__attribute((always_inline)) __attribute__((unused)) inline char4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 520
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 524
::exit(___);}
#if 0
# 520
{ 
# 521
uchar4 tmp = __surf2Dreadc4(surf, x, y, cudaBoundaryModeTrap); 
# 523
return make_char4((signed char)(tmp.x), (signed char)(tmp.y), (signed char)(tmp.z), (signed char)(tmp.w)); 
# 524
} 
#endif
# 527 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 527
__attribute((always_inline)) __attribute__((unused)) inline uchar4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 528
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 530
::exit(___);}
#if 0
# 528
{ 
# 529
return __surf2Dreadc4(surf, x, y, cudaBoundaryModeTrap); 
# 530
} 
#endif
# 533 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 533
__attribute((always_inline)) __attribute__((unused)) inline short surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 534
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 536
::exit(___);}
#if 0
# 534
{ 
# 535
return (short)(__surf2Dreads1(surf, x, y, cudaBoundaryModeTrap).x); 
# 536
} 
#endif
# 539 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 539
__attribute((always_inline)) __attribute__((unused)) inline unsigned short surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 540
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 542
::exit(___);}
#if 0
# 540
{ 
# 541
return __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap).x; 
# 542
} 
#endif
# 545 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 545
__attribute((always_inline)) __attribute__((unused)) inline short1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 546
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 548
::exit(___);}
#if 0
# 546
{ 
# 547
return make_short1((signed short)(__surf2Dreads1(surf, x, y, cudaBoundaryModeTrap).x)); 
# 548
} 
#endif
# 551 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 551
__attribute((always_inline)) __attribute__((unused)) inline ushort1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 552
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 554
::exit(___);}
#if 0
# 552
{ 
# 553
return __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap); 
# 554
} 
#endif
# 557 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 557
__attribute((always_inline)) __attribute__((unused)) inline short2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 558
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 562
::exit(___);}
#if 0
# 558
{ 
# 559
ushort2 tmp = __surf2Dreads2(surf, x, y, cudaBoundaryModeTrap); 
# 561
return make_short2((signed short)(tmp.x), (signed short)(tmp.y)); 
# 562
} 
#endif
# 565 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 565
__attribute((always_inline)) __attribute__((unused)) inline ushort2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 566
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 568
::exit(___);}
#if 0
# 566
{ 
# 567
return __surf2Dreads2(surf, x, y, cudaBoundaryModeTrap); 
# 568
} 
#endif
# 571 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 571
__attribute((always_inline)) __attribute__((unused)) inline short4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 572
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 576
::exit(___);}
#if 0
# 572
{ 
# 573
ushort4 tmp = __surf2Dreads4(surf, x, y, cudaBoundaryModeTrap); 
# 575
return make_short4((signed short)(tmp.x), (signed short)(tmp.y), (signed short)(tmp.z), (signed short)(tmp.w)); 
# 576
} 
#endif
# 579 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 579
__attribute((always_inline)) __attribute__((unused)) inline ushort4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 580
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 582
::exit(___);}
#if 0
# 580
{ 
# 581
return __surf2Dreads4(surf, x, y, cudaBoundaryModeTrap); 
# 582
} 
#endif
# 585 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 585
__attribute((always_inline)) __attribute__((unused)) inline int surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 586
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 588
::exit(___);}
#if 0
# 586
{ 
# 587
return (int)(__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x); 
# 588
} 
#endif
# 591 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 591
__attribute((always_inline)) __attribute__((unused)) inline unsigned surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 592
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 594
::exit(___);}
#if 0
# 592
{ 
# 593
return __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x; 
# 594
} 
#endif
# 597 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 597
__attribute((always_inline)) __attribute__((unused)) inline int1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 598
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 600
::exit(___);}
#if 0
# 598
{ 
# 599
return make_int1((signed int)(__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x)); 
# 600
} 
#endif
# 603 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 603
__attribute((always_inline)) __attribute__((unused)) inline uint1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 604
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 606
::exit(___);}
#if 0
# 604
{ 
# 605
return __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap); 
# 606
} 
#endif
# 609 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 609
__attribute((always_inline)) __attribute__((unused)) inline int2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 610
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 614
::exit(___);}
#if 0
# 610
{ 
# 611
uint2 tmp = __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap); 
# 613
return make_int2((int)(tmp.x), (int)(tmp.y)); 
# 614
} 
#endif
# 617 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 617
__attribute((always_inline)) __attribute__((unused)) inline uint2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 618
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 620
::exit(___);}
#if 0
# 618
{ 
# 619
return __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap); 
# 620
} 
#endif
# 623 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 623
__attribute((always_inline)) __attribute__((unused)) inline int4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 624
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 628
::exit(___);}
#if 0
# 624
{ 
# 625
uint4 tmp = __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap); 
# 627
return make_int4((int)(tmp.x), (int)(tmp.y), (int)(tmp.z), (int)(tmp.w)); 
# 628
} 
#endif
# 631 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 631
__attribute((always_inline)) __attribute__((unused)) inline uint4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 632
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 634
::exit(___);}
#if 0
# 632
{ 
# 633
return __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap); 
# 634
} 
#endif
# 637 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 637
__attribute((always_inline)) __attribute__((unused)) inline long long surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 638
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 640
::exit(___);}
#if 0
# 638
{ 
# 639
return (long long)(__surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap).x); 
# 640
} 
#endif
# 643 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 643
__attribute((always_inline)) __attribute__((unused)) inline unsigned long long surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 644
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 646
::exit(___);}
#if 0
# 644
{ 
# 645
return __surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap).x; 
# 646
} 
#endif
# 649 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 649
__attribute((always_inline)) __attribute__((unused)) inline longlong1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 650
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 652
::exit(___);}
#if 0
# 650
{ 
# 651
return make_longlong1((long long)(__surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap).x)); 
# 652
} 
#endif
# 655 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 655
__attribute((always_inline)) __attribute__((unused)) inline ulonglong1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 656
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 658
::exit(___);}
#if 0
# 656
{ 
# 657
return __surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap); 
# 658
} 
#endif
# 661 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 661
__attribute((always_inline)) __attribute__((unused)) inline longlong2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 662
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 666
::exit(___);}
#if 0
# 662
{ 
# 663
ulonglong2 tmp = __surf2Dreadl2(surf, x, y, cudaBoundaryModeTrap); 
# 665
return make_longlong2((long long)(tmp.x), (long long)(tmp.y)); 
# 666
} 
#endif
# 669 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459
__attribute((always_inline)) 
# 669
__attribute((always_inline)) __attribute__((unused)) inline ulonglong2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 670
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 672
::exit(___);}
#if 0
# 670
{ 
# 671
return __surf2Dreadl2(surf, x, y, cudaBoundaryModeTrap); 
# 672
} 
#endif
# 735 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) 
# 735 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 736
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 738
::exit(___);}
#if 0
# 736
{ 
# 737
return __int_as_float((int)(__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x)); 
# 738
} 
#endif
# 741 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) 
# 741 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 742
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 744
::exit(___);}
#if 0
# 742
{ 
# 743
return make_float1(__int_as_float((int)(__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x))); 
# 744
} 
#endif
# 747 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) 
# 747 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 748
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 752
::exit(___);}
#if 0
# 748
{ 
# 749
uint2 tmp = __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap); 
# 751
return make_float2(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y))); 
# 752
} 
#endif
# 755 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 459 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) 
# 755 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
# 756
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 760
::exit(___);}
#if 0
# 756
{ 
# 757
uint4 tmp = __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap); 
# 759
return make_float4(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y)), __int_as_float((int)(tmp.z)), __int_as_float((int)(tmp.w))); 
# 760
} 
#endif
# 795 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 796
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(T *res, surface< void, 3>  surf, int x, int y, int z, int s, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 797
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
# 804
::exit(___);}
#if 0
# 797
{ 
# 798
(s == 1) ? ((void)((*((uchar1 *)res)) = __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap))) : ((s == 2) ? ((void)((*((ushort1 *)res)) = __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap))) : ((s == 4) ? ((void)((*((uint1 *)res)) = __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap))) : ((s == 8) ? ((void)((*((uint2 *)res)) = __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap))) : ((s == 16) ? ((void)((*((uint4 *)res)) = __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap))) : ((void)0))))); 
# 804
} 
#endif
# 806 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 807
__attribute((always_inline)) __attribute__((unused)) static inline T surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 808
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 814
::exit(___);}
#if 0
# 808
{ 
# 809
T tmp; 
# 811
surf3Dread(&tmp, surf, x, y, z, (int)sizeof(T), mode); 
# 813
return tmp; 
# 814
} 
#endif
# 816 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 817
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(T *res, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 818
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 820
::exit(___);}
#if 0
# 818
{ 
# 819
(*res) = surf3Dread< T> (surf, x, y, z, mode); 
# 820
} 
#endif
# 823 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 823
__attribute((always_inline)) __attribute__((unused)) inline char surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 824
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 826
::exit(___);}
#if 0
# 824
{ 
# 825
return (char)(__surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap).x); 
# 826
} 
#endif
# 829 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 829
__attribute((always_inline)) __attribute__((unused)) inline signed char surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 830
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 832
::exit(___);}
#if 0
# 830
{ 
# 831
return (signed char)(__surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap).x); 
# 832
} 
#endif
# 835 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 835
__attribute((always_inline)) __attribute__((unused)) inline unsigned char surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 836
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 838
::exit(___);}
#if 0
# 836
{ 
# 837
return __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap).x; 
# 838
} 
#endif
# 841 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 841
__attribute((always_inline)) __attribute__((unused)) inline char1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 842
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 844
::exit(___);}
#if 0
# 842
{ 
# 843
return make_char1((signed char)(__surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap).x)); 
# 844
} 
#endif
# 847 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 847
__attribute((always_inline)) __attribute__((unused)) inline uchar1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 848
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 850
::exit(___);}
#if 0
# 848
{ 
# 849
return __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap); 
# 850
} 
#endif
# 853 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 853
__attribute((always_inline)) __attribute__((unused)) inline char2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 854
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 858
::exit(___);}
#if 0
# 854
{ 
# 855
uchar2 tmp = __surf3Dreadc2(surf, x, y, z, cudaBoundaryModeTrap); 
# 857
return make_char2((signed char)(tmp.x), (signed char)(tmp.y)); 
# 858
} 
#endif
# 861 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 861
__attribute((always_inline)) __attribute__((unused)) inline uchar2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 862
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 864
::exit(___);}
#if 0
# 862
{ 
# 863
return __surf3Dreadc2(surf, x, y, z, cudaBoundaryModeTrap); 
# 864
} 
#endif
# 867 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 867
__attribute((always_inline)) __attribute__((unused)) inline char4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 868
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 872
::exit(___);}
#if 0
# 868
{ 
# 869
uchar4 tmp = __surf3Dreadc4(surf, x, y, z, cudaBoundaryModeTrap); 
# 871
return make_char4((signed char)(tmp.x), (signed char)(tmp.y), (signed char)(tmp.z), (signed char)(tmp.w)); 
# 872
} 
#endif
# 875 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 875
__attribute((always_inline)) __attribute__((unused)) inline uchar4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 876
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 878
::exit(___);}
#if 0
# 876
{ 
# 877
return __surf3Dreadc4(surf, x, y, z, cudaBoundaryModeTrap); 
# 878
} 
#endif
# 881 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 881
__attribute((always_inline)) __attribute__((unused)) inline short surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 882
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 884
::exit(___);}
#if 0
# 882
{ 
# 883
return (short)(__surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap).x); 
# 884
} 
#endif
# 887 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 887
__attribute((always_inline)) __attribute__((unused)) inline unsigned short surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 888
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 890
::exit(___);}
#if 0
# 888
{ 
# 889
return __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap).x; 
# 890
} 
#endif
# 893 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 893
__attribute((always_inline)) __attribute__((unused)) inline short1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 894
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 896
::exit(___);}
#if 0
# 894
{ 
# 895
return make_short1((signed short)(__surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap).x)); 
# 896
} 
#endif
# 899 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 899
__attribute((always_inline)) __attribute__((unused)) inline ushort1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 900
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 902
::exit(___);}
#if 0
# 900
{ 
# 901
return __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap); 
# 902
} 
#endif
# 905 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 905
__attribute((always_inline)) __attribute__((unused)) inline short2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 906
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 910
::exit(___);}
#if 0
# 906
{ 
# 907
ushort2 tmp = __surf3Dreads2(surf, x, y, z, cudaBoundaryModeTrap); 
# 909
return make_short2((signed short)(tmp.x), (signed short)(tmp.y)); 
# 910
} 
#endif
# 913 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 913
__attribute((always_inline)) __attribute__((unused)) inline ushort2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 914
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 916
::exit(___);}
#if 0
# 914
{ 
# 915
return __surf3Dreads2(surf, x, y, z, cudaBoundaryModeTrap); 
# 916
} 
#endif
# 919 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 919
__attribute((always_inline)) __attribute__((unused)) inline short4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 920
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 924
::exit(___);}
#if 0
# 920
{ 
# 921
ushort4 tmp = __surf3Dreads4(surf, x, y, z, cudaBoundaryModeTrap); 
# 923
return make_short4((signed short)(tmp.x), (signed short)(tmp.y), (signed short)(tmp.z), (signed short)(tmp.w)); 
# 924
} 
#endif
# 927 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 927
__attribute((always_inline)) __attribute__((unused)) inline ushort4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 928
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 930
::exit(___);}
#if 0
# 928
{ 
# 929
return __surf3Dreads4(surf, x, y, z, cudaBoundaryModeTrap); 
# 930
} 
#endif
# 933 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 933
__attribute((always_inline)) __attribute__((unused)) inline int surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 934
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 936
::exit(___);}
#if 0
# 934
{ 
# 935
return (int)(__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x); 
# 936
} 
#endif
# 939 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 939
__attribute((always_inline)) __attribute__((unused)) inline unsigned surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 940
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 942
::exit(___);}
#if 0
# 940
{ 
# 941
return __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x; 
# 942
} 
#endif
# 945 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 945
__attribute((always_inline)) __attribute__((unused)) inline int1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 946
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 948
::exit(___);}
#if 0
# 946
{ 
# 947
return make_int1((signed int)(__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x)); 
# 948
} 
#endif
# 951 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 951
__attribute((always_inline)) __attribute__((unused)) inline uint1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 952
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 954
::exit(___);}
#if 0
# 952
{ 
# 953
return __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap); 
# 954
} 
#endif
# 957 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 957
__attribute((always_inline)) __attribute__((unused)) inline int2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 958
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 962
::exit(___);}
#if 0
# 958
{ 
# 959
uint2 tmp = __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap); 
# 961
return make_int2((int)(tmp.x), (int)(tmp.y)); 
# 962
} 
#endif
# 965 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 965
__attribute((always_inline)) __attribute__((unused)) inline uint2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 966
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 968
::exit(___);}
#if 0
# 966
{ 
# 967
return __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap); 
# 968
} 
#endif
# 971 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 971
__attribute((always_inline)) __attribute__((unused)) inline int4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 972
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 976
::exit(___);}
#if 0
# 972
{ 
# 973
uint4 tmp = __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap); 
# 975
return make_int4((int)(tmp.x), (int)(tmp.y), (int)(tmp.z), (int)(tmp.w)); 
# 976
} 
#endif
# 979 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 979
__attribute((always_inline)) __attribute__((unused)) inline uint4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 980
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 982
::exit(___);}
#if 0
# 980
{ 
# 981
return __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap); 
# 982
} 
#endif
# 985 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 985
__attribute((always_inline)) __attribute__((unused)) inline long long surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 986
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 988
::exit(___);}
#if 0
# 986
{ 
# 987
return (long long)(__surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap).x); 
# 988
} 
#endif
# 991 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 991
__attribute((always_inline)) __attribute__((unused)) inline unsigned long long surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 992
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 994
::exit(___);}
#if 0
# 992
{ 
# 993
return __surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap).x; 
# 994
} 
#endif
# 997 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 997
__attribute((always_inline)) __attribute__((unused)) inline longlong1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 998
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 1000
::exit(___);}
#if 0
# 998
{ 
# 999
return make_longlong1((long long)(__surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap).x)); 
# 1000
} 
#endif
# 1003 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 1003
__attribute((always_inline)) __attribute__((unused)) inline ulonglong1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 1004
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 1006
::exit(___);}
#if 0
# 1004
{ 
# 1005
return __surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap); 
# 1006
} 
#endif
# 1009 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 1009
__attribute((always_inline)) __attribute__((unused)) inline longlong2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 1010
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 1014
::exit(___);}
#if 0
# 1010
{ 
# 1011
ulonglong2 tmp = __surf3Dreadl2(surf, x, y, z, cudaBoundaryModeTrap); 
# 1013
return make_longlong2((long long)(tmp.x), (long long)(tmp.y)); 
# 1014
} 
#endif
# 1017 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807
__attribute((always_inline)) 
# 1017
__attribute((always_inline)) __attribute__((unused)) inline ulonglong2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 1018
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 1020
::exit(___);}
#if 0
# 1018
{ 
# 1019
return __surf3Dreadl2(surf, x, y, z, cudaBoundaryModeTrap); 
# 1020
} 
#endif
# 1083 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) 
# 1083 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 1084
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 1086
::exit(___);}
#if 0
# 1084
{ 
# 1085
return __int_as_float((int)(__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x)); 
# 1086
} 
#endif
# 1089 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) 
# 1089 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 1090
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 1092
::exit(___);}
#if 0
# 1090
{ 
# 1091
return make_float1(__int_as_float((int)(__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x))); 
# 1092
} 
#endif
# 1095 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) 
# 1095 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 1096
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 1100
::exit(___);}
#if 0
# 1096
{ 
# 1097
uint2 tmp = __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap); 
# 1099
return make_float2(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y))); 
# 1100
} 
#endif
# 1103 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 807 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) 
# 1103 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
# 1104
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 1108
::exit(___);}
#if 0
# 1104
{ 
# 1105
uint4 tmp = __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap); 
# 1107
return make_float4(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y)), __int_as_float((int)(tmp.z)), __int_as_float((int)(tmp.w))); 
# 1108
} 
#endif
# 1143 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 1144
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(T *res, surface< void, 241>  surf, int x, int layer, int s, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 1145
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
# 1152
::exit(___);}
#if 0
# 1145
{ 
# 1146
(s == 1) ? ((void)((*((uchar1 *)res)) = __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap))) : ((s == 2) ? ((void)((*((ushort1 *)res)) = __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap))) : ((s == 4) ? ((void)((*((uint1 *)res)) = __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap))) : ((s == 8) ? ((void)((*((uint2 *)res)) = __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap))) : ((s == 16) ? ((void)((*((uint4 *)res)) = __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap))) : ((void)0))))); 
# 1152
} 
#endif
# 1154 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 1155
__attribute((always_inline)) __attribute__((unused)) static inline T surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 1156
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1162
::exit(___);}
#if 0
# 1156
{ 
# 1157
T tmp; 
# 1159
surf1DLayeredread(&tmp, surf, x, layer, (int)sizeof(T), mode); 
# 1161
return tmp; 
# 1162
} 
#endif
# 1164 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 1165
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(T *res, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 1166
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)mode;
# 1168
::exit(___);}
#if 0
# 1166
{ 
# 1167
(*res) = surf1DLayeredread< T> (surf, x, layer, mode); 
# 1168
} 
#endif
# 1171 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1171
__attribute((always_inline)) __attribute__((unused)) inline char surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1172
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1174
::exit(___);}
#if 0
# 1172
{ 
# 1173
return (char)(__surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap).x); 
# 1174
} 
#endif
# 1177 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1177
__attribute((always_inline)) __attribute__((unused)) inline signed char surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1178
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1180
::exit(___);}
#if 0
# 1178
{ 
# 1179
return (signed char)(__surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap).x); 
# 1180
} 
#endif
# 1183 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1183
__attribute((always_inline)) __attribute__((unused)) inline unsigned char surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1184
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1186
::exit(___);}
#if 0
# 1184
{ 
# 1185
return __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap).x; 
# 1186
} 
#endif
# 1189 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1189
__attribute((always_inline)) __attribute__((unused)) inline char1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1190
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1192
::exit(___);}
#if 0
# 1190
{ 
# 1191
return make_char1((signed char)(__surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap).x)); 
# 1192
} 
#endif
# 1195 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1195
__attribute((always_inline)) __attribute__((unused)) inline uchar1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1196
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1198
::exit(___);}
#if 0
# 1196
{ 
# 1197
return __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap); 
# 1198
} 
#endif
# 1201 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1201
__attribute((always_inline)) __attribute__((unused)) inline char2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1202
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1206
::exit(___);}
#if 0
# 1202
{ 
# 1203
uchar2 tmp = __surf1DLayeredreadc2(surf, x, layer, cudaBoundaryModeTrap); 
# 1205
return make_char2((signed char)(tmp.x), (signed char)(tmp.y)); 
# 1206
} 
#endif
# 1209 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1209
__attribute((always_inline)) __attribute__((unused)) inline uchar2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1210
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1212
::exit(___);}
#if 0
# 1210
{ 
# 1211
return __surf1DLayeredreadc2(surf, x, layer, cudaBoundaryModeTrap); 
# 1212
} 
#endif
# 1215 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1215
__attribute((always_inline)) __attribute__((unused)) inline char4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1216
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1220
::exit(___);}
#if 0
# 1216
{ 
# 1217
uchar4 tmp = __surf1DLayeredreadc4(surf, x, layer, cudaBoundaryModeTrap); 
# 1219
return make_char4((signed char)(tmp.x), (signed char)(tmp.y), (signed char)(tmp.z), (signed char)(tmp.w)); 
# 1220
} 
#endif
# 1223 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1223
__attribute((always_inline)) __attribute__((unused)) inline uchar4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1224
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1226
::exit(___);}
#if 0
# 1224
{ 
# 1225
return __surf1DLayeredreadc4(surf, x, layer, cudaBoundaryModeTrap); 
# 1226
} 
#endif
# 1229 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1229
__attribute((always_inline)) __attribute__((unused)) inline short surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1230
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1232
::exit(___);}
#if 0
# 1230
{ 
# 1231
return (short)(__surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap).x); 
# 1232
} 
#endif
# 1235 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1235
__attribute((always_inline)) __attribute__((unused)) inline unsigned short surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1236
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1238
::exit(___);}
#if 0
# 1236
{ 
# 1237
return __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap).x; 
# 1238
} 
#endif
# 1241 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1241
__attribute((always_inline)) __attribute__((unused)) inline short1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1242
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1244
::exit(___);}
#if 0
# 1242
{ 
# 1243
return make_short1((signed short)(__surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap).x)); 
# 1244
} 
#endif
# 1247 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1247
__attribute((always_inline)) __attribute__((unused)) inline ushort1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1248
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1250
::exit(___);}
#if 0
# 1248
{ 
# 1249
return __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap); 
# 1250
} 
#endif
# 1253 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1253
__attribute((always_inline)) __attribute__((unused)) inline short2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1254
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1258
::exit(___);}
#if 0
# 1254
{ 
# 1255
ushort2 tmp = __surf1DLayeredreads2(surf, x, layer, cudaBoundaryModeTrap); 
# 1257
return make_short2((signed short)(tmp.x), (signed short)(tmp.y)); 
# 1258
} 
#endif
# 1261 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1261
__attribute((always_inline)) __attribute__((unused)) inline ushort2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1262
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1264
::exit(___);}
#if 0
# 1262
{ 
# 1263
return __surf1DLayeredreads2(surf, x, layer, cudaBoundaryModeTrap); 
# 1264
} 
#endif
# 1267 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1267
__attribute((always_inline)) __attribute__((unused)) inline short4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1268
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1272
::exit(___);}
#if 0
# 1268
{ 
# 1269
ushort4 tmp = __surf1DLayeredreads4(surf, x, layer, cudaBoundaryModeTrap); 
# 1271
return make_short4((signed short)(tmp.x), (signed short)(tmp.y), (signed short)(tmp.z), (signed short)(tmp.w)); 
# 1272
} 
#endif
# 1275 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1275
__attribute((always_inline)) __attribute__((unused)) inline ushort4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1276
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1278
::exit(___);}
#if 0
# 1276
{ 
# 1277
return __surf1DLayeredreads4(surf, x, layer, cudaBoundaryModeTrap); 
# 1278
} 
#endif
# 1281 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1281
__attribute((always_inline)) __attribute__((unused)) inline int surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1282
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1284
::exit(___);}
#if 0
# 1282
{ 
# 1283
return (int)(__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x); 
# 1284
} 
#endif
# 1287 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1287
__attribute((always_inline)) __attribute__((unused)) inline unsigned surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1288
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1290
::exit(___);}
#if 0
# 1288
{ 
# 1289
return __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x; 
# 1290
} 
#endif
# 1293 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1293
__attribute((always_inline)) __attribute__((unused)) inline int1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1294
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1296
::exit(___);}
#if 0
# 1294
{ 
# 1295
return make_int1((signed int)(__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x)); 
# 1296
} 
#endif
# 1299 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1299
__attribute((always_inline)) __attribute__((unused)) inline uint1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1300
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1302
::exit(___);}
#if 0
# 1300
{ 
# 1301
return __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap); 
# 1302
} 
#endif
# 1305 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1305
__attribute((always_inline)) __attribute__((unused)) inline int2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1306
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1310
::exit(___);}
#if 0
# 1306
{ 
# 1307
uint2 tmp = __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap); 
# 1309
return make_int2((int)(tmp.x), (int)(tmp.y)); 
# 1310
} 
#endif
# 1313 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1313
__attribute((always_inline)) __attribute__((unused)) inline uint2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1314
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1316
::exit(___);}
#if 0
# 1314
{ 
# 1315
return __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap); 
# 1316
} 
#endif
# 1319 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1319
__attribute((always_inline)) __attribute__((unused)) inline int4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1320
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1324
::exit(___);}
#if 0
# 1320
{ 
# 1321
uint4 tmp = __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap); 
# 1323
return make_int4((int)(tmp.x), (int)(tmp.y), (int)(tmp.z), (int)(tmp.w)); 
# 1324
} 
#endif
# 1327 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1327
__attribute((always_inline)) __attribute__((unused)) inline uint4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1328
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1330
::exit(___);}
#if 0
# 1328
{ 
# 1329
return __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap); 
# 1330
} 
#endif
# 1333 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1333
__attribute((always_inline)) __attribute__((unused)) inline long long surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1334
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1336
::exit(___);}
#if 0
# 1334
{ 
# 1335
return (long long)(__surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap).x); 
# 1336
} 
#endif
# 1339 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1339
__attribute((always_inline)) __attribute__((unused)) inline unsigned long long surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1340
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1342
::exit(___);}
#if 0
# 1340
{ 
# 1341
return __surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap).x; 
# 1342
} 
#endif
# 1345 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1345
__attribute((always_inline)) __attribute__((unused)) inline longlong1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1346
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1348
::exit(___);}
#if 0
# 1346
{ 
# 1347
return make_longlong1((long long)(__surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap).x)); 
# 1348
} 
#endif
# 1351 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1351
__attribute((always_inline)) __attribute__((unused)) inline ulonglong1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1352
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1354
::exit(___);}
#if 0
# 1352
{ 
# 1353
return __surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap); 
# 1354
} 
#endif
# 1357 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1357
__attribute((always_inline)) __attribute__((unused)) inline longlong2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1358
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1362
::exit(___);}
#if 0
# 1358
{ 
# 1359
ulonglong2 tmp = __surf1DLayeredreadl2(surf, x, layer, cudaBoundaryModeTrap); 
# 1361
return make_longlong2((long long)(tmp.x), (long long)(tmp.y)); 
# 1362
} 
#endif
# 1365 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155
__attribute((always_inline)) 
# 1365
__attribute((always_inline)) __attribute__((unused)) inline ulonglong2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1366
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1368
::exit(___);}
#if 0
# 1366
{ 
# 1367
return __surf1DLayeredreadl2(surf, x, layer, cudaBoundaryModeTrap); 
# 1368
} 
#endif
# 1431 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) 
# 1431 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1432
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1434
::exit(___);}
#if 0
# 1432
{ 
# 1433
return __int_as_float((int)(__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x)); 
# 1434
} 
#endif
# 1437 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) 
# 1437 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1438
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1440
::exit(___);}
#if 0
# 1438
{ 
# 1439
return make_float1(__int_as_float((int)(__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x))); 
# 1440
} 
#endif
# 1443 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) 
# 1443 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1444
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1448
::exit(___);}
#if 0
# 1444
{ 
# 1445
uint2 tmp = __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap); 
# 1447
return make_float2(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y))); 
# 1448
} 
#endif
# 1451 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1155 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) 
# 1451 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
# 1452
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 1456
::exit(___);}
#if 0
# 1452
{ 
# 1453
uint4 tmp = __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap); 
# 1455
return make_float4(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y)), __int_as_float((int)(tmp.z)), __int_as_float((int)(tmp.w))); 
# 1456
} 
#endif
# 1491 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 1492
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(T *res, surface< void, 242>  surf, int x, int y, int layer, int s, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 1493
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
# 1500
::exit(___);}
#if 0
# 1493
{ 
# 1494
(s == 1) ? ((void)((*((uchar1 *)res)) = __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap))) : ((s == 2) ? ((void)((*((ushort1 *)res)) = __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap))) : ((s == 4) ? ((void)((*((uint1 *)res)) = __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap))) : ((s == 8) ? ((void)((*((uint2 *)res)) = __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap))) : ((s == 16) ? ((void)((*((uint4 *)res)) = __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap))) : ((void)0))))); 
# 1500
} 
#endif
# 1502 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 1503
__attribute((always_inline)) __attribute__((unused)) static inline T surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 1504
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1510
::exit(___);}
#if 0
# 1504
{ 
# 1505
T tmp; 
# 1507
surf2DLayeredread(&tmp, surf, x, y, layer, (int)sizeof(T), mode); 
# 1509
return tmp; 
# 1510
} 
#endif
# 1512 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 1513
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(T *res, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 1514
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1516
::exit(___);}
#if 0
# 1514
{ 
# 1515
(*res) = surf2DLayeredread< T> (surf, x, y, layer, mode); 
# 1516
} 
#endif
# 1519 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1519
__attribute((always_inline)) __attribute__((unused)) inline char surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1520
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1522
::exit(___);}
#if 0
# 1520
{ 
# 1521
return (char)(__surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap).x); 
# 1522
} 
#endif
# 1525 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1525
__attribute((always_inline)) __attribute__((unused)) inline signed char surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1526
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1528
::exit(___);}
#if 0
# 1526
{ 
# 1527
return (signed char)(__surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap).x); 
# 1528
} 
#endif
# 1531 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1531
__attribute((always_inline)) __attribute__((unused)) inline unsigned char surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1532
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1534
::exit(___);}
#if 0
# 1532
{ 
# 1533
return __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap).x; 
# 1534
} 
#endif
# 1537 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1537
__attribute((always_inline)) __attribute__((unused)) inline char1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1538
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1540
::exit(___);}
#if 0
# 1538
{ 
# 1539
return make_char1((signed char)(__surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap).x)); 
# 1540
} 
#endif
# 1543 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1543
__attribute((always_inline)) __attribute__((unused)) inline uchar1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1544
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1546
::exit(___);}
#if 0
# 1544
{ 
# 1545
return __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1546
} 
#endif
# 1549 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1549
__attribute((always_inline)) __attribute__((unused)) inline char2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1550
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1554
::exit(___);}
#if 0
# 1550
{ 
# 1551
uchar2 tmp = __surf2DLayeredreadc2(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1553
return make_char2((signed char)(tmp.x), (signed char)(tmp.y)); 
# 1554
} 
#endif
# 1557 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1557
__attribute((always_inline)) __attribute__((unused)) inline uchar2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1558
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1560
::exit(___);}
#if 0
# 1558
{ 
# 1559
return __surf2DLayeredreadc2(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1560
} 
#endif
# 1563 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1563
__attribute((always_inline)) __attribute__((unused)) inline char4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1564
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1568
::exit(___);}
#if 0
# 1564
{ 
# 1565
uchar4 tmp = __surf2DLayeredreadc4(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1567
return make_char4((signed char)(tmp.x), (signed char)(tmp.y), (signed char)(tmp.z), (signed char)(tmp.w)); 
# 1568
} 
#endif
# 1571 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1571
__attribute((always_inline)) __attribute__((unused)) inline uchar4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1572
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1574
::exit(___);}
#if 0
# 1572
{ 
# 1573
return __surf2DLayeredreadc4(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1574
} 
#endif
# 1577 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1577
__attribute((always_inline)) __attribute__((unused)) inline short surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1578
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1580
::exit(___);}
#if 0
# 1578
{ 
# 1579
return (short)(__surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap).x); 
# 1580
} 
#endif
# 1583 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1583
__attribute((always_inline)) __attribute__((unused)) inline unsigned short surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1584
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1586
::exit(___);}
#if 0
# 1584
{ 
# 1585
return __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap).x; 
# 1586
} 
#endif
# 1589 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1589
__attribute((always_inline)) __attribute__((unused)) inline short1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1590
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1592
::exit(___);}
#if 0
# 1590
{ 
# 1591
return make_short1((signed short)(__surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap).x)); 
# 1592
} 
#endif
# 1595 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1595
__attribute((always_inline)) __attribute__((unused)) inline ushort1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1596
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1598
::exit(___);}
#if 0
# 1596
{ 
# 1597
return __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1598
} 
#endif
# 1601 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1601
__attribute((always_inline)) __attribute__((unused)) inline short2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1602
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1606
::exit(___);}
#if 0
# 1602
{ 
# 1603
ushort2 tmp = __surf2DLayeredreads2(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1605
return make_short2((signed short)(tmp.x), (signed short)(tmp.y)); 
# 1606
} 
#endif
# 1609 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1609
__attribute((always_inline)) __attribute__((unused)) inline ushort2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1610
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1612
::exit(___);}
#if 0
# 1610
{ 
# 1611
return __surf2DLayeredreads2(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1612
} 
#endif
# 1615 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1615
__attribute((always_inline)) __attribute__((unused)) inline short4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1616
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1620
::exit(___);}
#if 0
# 1616
{ 
# 1617
ushort4 tmp = __surf2DLayeredreads4(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1619
return make_short4((signed short)(tmp.x), (signed short)(tmp.y), (signed short)(tmp.z), (signed short)(tmp.w)); 
# 1620
} 
#endif
# 1623 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1623
__attribute((always_inline)) __attribute__((unused)) inline ushort4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1624
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1626
::exit(___);}
#if 0
# 1624
{ 
# 1625
return __surf2DLayeredreads4(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1626
} 
#endif
# 1629 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1629
__attribute((always_inline)) __attribute__((unused)) inline int surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1630
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1632
::exit(___);}
#if 0
# 1630
{ 
# 1631
return (int)(__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x); 
# 1632
} 
#endif
# 1635 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1635
__attribute((always_inline)) __attribute__((unused)) inline unsigned surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1636
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1638
::exit(___);}
#if 0
# 1636
{ 
# 1637
return __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x; 
# 1638
} 
#endif
# 1641 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1641
__attribute((always_inline)) __attribute__((unused)) inline int1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1642
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1644
::exit(___);}
#if 0
# 1642
{ 
# 1643
return make_int1((signed int)(__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x)); 
# 1644
} 
#endif
# 1647 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1647
__attribute((always_inline)) __attribute__((unused)) inline uint1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1648
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1650
::exit(___);}
#if 0
# 1648
{ 
# 1649
return __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1650
} 
#endif
# 1653 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1653
__attribute((always_inline)) __attribute__((unused)) inline int2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1654
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1658
::exit(___);}
#if 0
# 1654
{ 
# 1655
uint2 tmp = __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1657
return make_int2((int)(tmp.x), (int)(tmp.y)); 
# 1658
} 
#endif
# 1661 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1661
__attribute((always_inline)) __attribute__((unused)) inline uint2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1662
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1664
::exit(___);}
#if 0
# 1662
{ 
# 1663
return __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1664
} 
#endif
# 1667 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1667
__attribute((always_inline)) __attribute__((unused)) inline int4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1668
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1672
::exit(___);}
#if 0
# 1668
{ 
# 1669
uint4 tmp = __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1671
return make_int4((int)(tmp.x), (int)(tmp.y), (int)(tmp.z), (int)(tmp.w)); 
# 1672
} 
#endif
# 1675 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1675
__attribute((always_inline)) __attribute__((unused)) inline uint4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1676
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1678
::exit(___);}
#if 0
# 1676
{ 
# 1677
return __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1678
} 
#endif
# 1681 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1681
__attribute((always_inline)) __attribute__((unused)) inline long long surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1682
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1684
::exit(___);}
#if 0
# 1682
{ 
# 1683
return (long long)(__surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap).x); 
# 1684
} 
#endif
# 1687 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1687
__attribute((always_inline)) __attribute__((unused)) inline unsigned long long surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1688
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1690
::exit(___);}
#if 0
# 1688
{ 
# 1689
return __surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap).x; 
# 1690
} 
#endif
# 1693 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1693
__attribute((always_inline)) __attribute__((unused)) inline longlong1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1694
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1696
::exit(___);}
#if 0
# 1694
{ 
# 1695
return make_longlong1((long long)(__surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap).x)); 
# 1696
} 
#endif
# 1699 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1699
__attribute((always_inline)) __attribute__((unused)) inline ulonglong1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1700
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1702
::exit(___);}
#if 0
# 1700
{ 
# 1701
return __surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1702
} 
#endif
# 1705 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1705
__attribute((always_inline)) __attribute__((unused)) inline longlong2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1706
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1710
::exit(___);}
#if 0
# 1706
{ 
# 1707
ulonglong2 tmp = __surf2DLayeredreadl2(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1709
return make_longlong2((long long)(tmp.x), (long long)(tmp.y)); 
# 1710
} 
#endif
# 1713 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503
__attribute((always_inline)) 
# 1713
__attribute((always_inline)) __attribute__((unused)) inline ulonglong2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1714
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1716
::exit(___);}
#if 0
# 1714
{ 
# 1715
return __surf2DLayeredreadl2(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1716
} 
#endif
# 1779 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) 
# 1779 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1780
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1782
::exit(___);}
#if 0
# 1780
{ 
# 1781
return __int_as_float((int)(__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x)); 
# 1782
} 
#endif
# 1785 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) 
# 1785 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1786
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1788
::exit(___);}
#if 0
# 1786
{ 
# 1787
return make_float1(__int_as_float((int)(__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x))); 
# 1788
} 
#endif
# 1791 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) 
# 1791 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1792
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1796
::exit(___);}
#if 0
# 1792
{ 
# 1793
uint2 tmp = __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1795
return make_float2(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y))); 
# 1796
} 
#endif
# 1799 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1503 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) 
# 1799 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
# 1800
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1804
::exit(___);}
#if 0
# 1800
{ 
# 1801
uint4 tmp = __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap); 
# 1803
return make_float4(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y)), __int_as_float((int)(tmp.z)), __int_as_float((int)(tmp.w))); 
# 1804
} 
#endif
# 1839 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 1840
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(T *res, surface< void, 12>  surf, int x, int y, int face, int s, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 1841
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
# 1848
::exit(___);}
#if 0
# 1841
{ 
# 1842
(s == 1) ? ((void)((*((uchar1 *)res)) = __surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap))) : ((s == 2) ? ((void)((*((ushort1 *)res)) = __surfCubemapreads1(surf, x, y, face, cudaBoundaryModeTrap))) : ((s == 4) ? ((void)((*((uint1 *)res)) = __surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap))) : ((s == 8) ? ((void)((*((uint2 *)res)) = __surfCubemapreadu2(surf, x, y, face, cudaBoundaryModeTrap))) : ((s == 16) ? ((void)((*((uint4 *)res)) = __surfCubemapreadu4(surf, x, y, face, cudaBoundaryModeTrap))) : ((void)0))))); 
# 1848
} 
#endif
# 1850 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 1851
__attribute((always_inline)) __attribute__((unused)) static inline T surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 1852
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1858
::exit(___);}
#if 0
# 1852
{ 
# 1853
T tmp; 
# 1855
surfCubemapread(&tmp, surf, x, y, face, (int)sizeof(T), mode); 
# 1857
return tmp; 
# 1858
} 
#endif
# 1860 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 1861
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(T *res, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 1862
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1864
::exit(___);}
#if 0
# 1862
{ 
# 1863
(*res) = surfCubemapread< T> (surf, x, y, face, mode); 
# 1864
} 
#endif
# 1867 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 1867
__attribute((always_inline)) __attribute__((unused)) inline char surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1868
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1870
::exit(___);}
#if 0
# 1868
{ 
# 1869
return (char)(__surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap).x); 
# 1870
} 
#endif
# 1873 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 1873
__attribute((always_inline)) __attribute__((unused)) inline signed char surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1874
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1876
::exit(___);}
#if 0
# 1874
{ 
# 1875
return (signed char)(__surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap).x); 
# 1876
} 
#endif
# 1879 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 1879
__attribute((always_inline)) __attribute__((unused)) inline unsigned char surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1880
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1882
::exit(___);}
#if 0
# 1880
{ 
# 1881
return __surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap).x; 
# 1882
} 
#endif
# 1885 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 1885
__attribute((always_inline)) __attribute__((unused)) inline char1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1886
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1888
::exit(___);}
#if 0
# 1886
{ 
# 1887
return make_char1((signed char)(__surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap).x)); 
# 1888
} 
#endif
# 1891 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 1891
__attribute((always_inline)) __attribute__((unused)) inline uchar1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1892
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1894
::exit(___);}
#if 0
# 1892
{ 
# 1893
return __surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap); 
# 1894
} 
#endif
# 1897 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 1897
__attribute((always_inline)) __attribute__((unused)) inline char2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1898
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1902
::exit(___);}
#if 0
# 1898
{ 
# 1899
uchar2 tmp = __surfCubemapreadc2(surf, x, y, face, cudaBoundaryModeTrap); 
# 1901
return make_char2((signed char)(tmp.x), (signed char)(tmp.y)); 
# 1902
} 
#endif
# 1905 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 1905
__attribute((always_inline)) __attribute__((unused)) inline uchar2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1906
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1908
::exit(___);}
#if 0
# 1906
{ 
# 1907
return __surfCubemapreadc2(surf, x, y, face, cudaBoundaryModeTrap); 
# 1908
} 
#endif
# 1911 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 1911
__attribute((always_inline)) __attribute__((unused)) inline char4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1912
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1916
::exit(___);}
#if 0
# 1912
{ 
# 1913
uchar4 tmp = __surfCubemapreadc4(surf, x, y, face, cudaBoundaryModeTrap); 
# 1915
return make_char4((signed char)(tmp.x), (signed char)(tmp.y), (signed char)(tmp.z), (signed char)(tmp.w)); 
# 1916
} 
#endif
# 1919 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 1919
__attribute((always_inline)) __attribute__((unused)) inline uchar4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1920
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1922
::exit(___);}
#if 0
# 1920
{ 
# 1921
return __surfCubemapreadc4(surf, x, y, face, cudaBoundaryModeTrap); 
# 1922
} 
#endif
# 1925 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 1925
__attribute((always_inline)) __attribute__((unused)) inline short surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1926
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1928
::exit(___);}
#if 0
# 1926
{ 
# 1927
return (short)(__surfCubemapreads1(surf, x, y, face, cudaBoundaryModeTrap).x); 
# 1928
} 
#endif
# 1931 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 1931
__attribute((always_inline)) __attribute__((unused)) inline unsigned short surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1932
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1934
::exit(___);}
#if 0
# 1932
{ 
# 1933
return __surfCubemapreads1(surf, x, y, face, cudaBoundaryModeTrap).x; 
# 1934
} 
#endif
# 1937 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 1937
__attribute((always_inline)) __attribute__((unused)) inline short1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1938
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1940
::exit(___);}
#if 0
# 1938
{ 
# 1939
return make_short1((signed short)(__surfCubemapreads1(surf, x, y, face, cudaBoundaryModeTrap).x)); 
# 1940
} 
#endif
# 1943 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 1943
__attribute((always_inline)) __attribute__((unused)) inline ushort1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1944
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1946
::exit(___);}
#if 0
# 1944
{ 
# 1945
return __surfCubemapreads1(surf, x, y, face, cudaBoundaryModeTrap); 
# 1946
} 
#endif
# 1949 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 1949
__attribute((always_inline)) __attribute__((unused)) inline short2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1950
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1954
::exit(___);}
#if 0
# 1950
{ 
# 1951
ushort2 tmp = __surfCubemapreads2(surf, x, y, face, cudaBoundaryModeTrap); 
# 1953
return make_short2((signed short)(tmp.x), (signed short)(tmp.y)); 
# 1954
} 
#endif
# 1957 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 1957
__attribute((always_inline)) __attribute__((unused)) inline ushort2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1958
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1960
::exit(___);}
#if 0
# 1958
{ 
# 1959
return __surfCubemapreads2(surf, x, y, face, cudaBoundaryModeTrap); 
# 1960
} 
#endif
# 1963 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 1963
__attribute((always_inline)) __attribute__((unused)) inline short4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1964
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1968
::exit(___);}
#if 0
# 1964
{ 
# 1965
ushort4 tmp = __surfCubemapreads4(surf, x, y, face, cudaBoundaryModeTrap); 
# 1967
return make_short4((signed short)(tmp.x), (signed short)(tmp.y), (signed short)(tmp.z), (signed short)(tmp.w)); 
# 1968
} 
#endif
# 1971 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 1971
__attribute((always_inline)) __attribute__((unused)) inline ushort4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1972
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1974
::exit(___);}
#if 0
# 1972
{ 
# 1973
return __surfCubemapreads4(surf, x, y, face, cudaBoundaryModeTrap); 
# 1974
} 
#endif
# 1977 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 1977
__attribute((always_inline)) __attribute__((unused)) inline int surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1978
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1980
::exit(___);}
#if 0
# 1978
{ 
# 1979
return (int)(__surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x); 
# 1980
} 
#endif
# 1983 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 1983
__attribute((always_inline)) __attribute__((unused)) inline unsigned surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1984
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1986
::exit(___);}
#if 0
# 1984
{ 
# 1985
return __surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x; 
# 1986
} 
#endif
# 1989 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 1989
__attribute((always_inline)) __attribute__((unused)) inline int1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1990
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1992
::exit(___);}
#if 0
# 1990
{ 
# 1991
return make_int1((signed int)(__surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x)); 
# 1992
} 
#endif
# 1995 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 1995
__attribute((always_inline)) __attribute__((unused)) inline uint1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 1996
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1998
::exit(___);}
#if 0
# 1996
{ 
# 1997
return __surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap); 
# 1998
} 
#endif
# 2001 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 2001
__attribute((always_inline)) __attribute__((unused)) inline int2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2002
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2006
::exit(___);}
#if 0
# 2002
{ 
# 2003
uint2 tmp = __surfCubemapreadu2(surf, x, y, face, cudaBoundaryModeTrap); 
# 2005
return make_int2((int)(tmp.x), (int)(tmp.y)); 
# 2006
} 
#endif
# 2009 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 2009
__attribute((always_inline)) __attribute__((unused)) inline uint2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2010
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2012
::exit(___);}
#if 0
# 2010
{ 
# 2011
return __surfCubemapreadu2(surf, x, y, face, cudaBoundaryModeTrap); 
# 2012
} 
#endif
# 2015 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 2015
__attribute((always_inline)) __attribute__((unused)) inline int4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2016
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2020
::exit(___);}
#if 0
# 2016
{ 
# 2017
uint4 tmp = __surfCubemapreadu4(surf, x, y, face, cudaBoundaryModeTrap); 
# 2019
return make_int4((int)(tmp.x), (int)(tmp.y), (int)(tmp.z), (int)(tmp.w)); 
# 2020
} 
#endif
# 2023 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 2023
__attribute((always_inline)) __attribute__((unused)) inline uint4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2024
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2026
::exit(___);}
#if 0
# 2024
{ 
# 2025
return __surfCubemapreadu4(surf, x, y, face, cudaBoundaryModeTrap); 
# 2026
} 
#endif
# 2029 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 2029
__attribute((always_inline)) __attribute__((unused)) inline long long surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2030
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2032
::exit(___);}
#if 0
# 2030
{ 
# 2031
return (long long)(__surfCubemapreadl1(surf, x, y, face, cudaBoundaryModeTrap).x); 
# 2032
} 
#endif
# 2035 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 2035
__attribute((always_inline)) __attribute__((unused)) inline unsigned long long surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2036
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2038
::exit(___);}
#if 0
# 2036
{ 
# 2037
return __surfCubemapreadl1(surf, x, y, face, cudaBoundaryModeTrap).x; 
# 2038
} 
#endif
# 2041 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 2041
__attribute((always_inline)) __attribute__((unused)) inline longlong1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2042
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2044
::exit(___);}
#if 0
# 2042
{ 
# 2043
return make_longlong1((long long)(__surfCubemapreadl1(surf, x, y, face, cudaBoundaryModeTrap).x)); 
# 2044
} 
#endif
# 2047 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 2047
__attribute((always_inline)) __attribute__((unused)) inline ulonglong1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2048
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2050
::exit(___);}
#if 0
# 2048
{ 
# 2049
return __surfCubemapreadl1(surf, x, y, face, cudaBoundaryModeTrap); 
# 2050
} 
#endif
# 2053 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 2053
__attribute((always_inline)) __attribute__((unused)) inline longlong2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2054
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2058
::exit(___);}
#if 0
# 2054
{ 
# 2055
ulonglong2 tmp = __surfCubemapreadl2(surf, x, y, face, cudaBoundaryModeTrap); 
# 2057
return make_longlong2((long long)(tmp.x), (long long)(tmp.y)); 
# 2058
} 
#endif
# 2061 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851
__attribute((always_inline)) 
# 2061
__attribute((always_inline)) __attribute__((unused)) inline ulonglong2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2062
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2064
::exit(___);}
#if 0
# 2062
{ 
# 2063
return __surfCubemapreadl2(surf, x, y, face, cudaBoundaryModeTrap); 
# 2064
} 
#endif
# 2127 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) 
# 2127 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2128
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2130
::exit(___);}
#if 0
# 2128
{ 
# 2129
return __int_as_float((int)(__surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x)); 
# 2130
} 
#endif
# 2133 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) 
# 2133 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2134
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2136
::exit(___);}
#if 0
# 2134
{ 
# 2135
return make_float1(__int_as_float((int)(__surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x))); 
# 2136
} 
#endif
# 2139 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) 
# 2139 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2140
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2144
::exit(___);}
#if 0
# 2140
{ 
# 2141
uint2 tmp = __surfCubemapreadu2(surf, x, y, face, cudaBoundaryModeTrap); 
# 2143
return make_float2(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y))); 
# 2144
} 
#endif
# 2147 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 1851 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) 
# 2147 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
# 2148
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 2152
::exit(___);}
#if 0
# 2148
{ 
# 2149
uint4 tmp = __surfCubemapreadu4(surf, x, y, face, cudaBoundaryModeTrap); 
# 2151
return make_float4(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y)), __int_as_float((int)(tmp.z)), __int_as_float((int)(tmp.w))); 
# 2152
} 
#endif
# 2188 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 2189
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(T *res, surface< void, 252>  surf, int x, int y, int layerFace, int s, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2190
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
# 2197
::exit(___);}
#if 0
# 2190
{ 
# 2191
(s == 1) ? ((void)((*((uchar1 *)res)) = __surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap))) : ((s == 2) ? ((void)((*((ushort1 *)res)) = __surfCubemapLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap))) : ((s == 4) ? ((void)((*((uint1 *)res)) = __surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap))) : ((s == 8) ? ((void)((*((uint2 *)res)) = __surfCubemapLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap))) : ((s == 16) ? ((void)((*((uint4 *)res)) = __surfCubemapLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap))) : ((void)0))))); 
# 2197
} 
#endif
# 2199 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 2200
__attribute((always_inline)) __attribute__((unused)) static inline T surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2201
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2207
::exit(___);}
#if 0
# 2201
{ 
# 2202
T tmp; 
# 2204
surfCubemapLayeredread(&tmp, surf, x, y, layerFace, (int)sizeof(T), mode); 
# 2206
return tmp; 
# 2207
} 
#endif
# 2209 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 2210
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(T *res, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2211
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2213
::exit(___);}
#if 0
# 2211
{ 
# 2212
(*res) = surfCubemapLayeredread< T> (surf, x, y, layerFace, mode); 
# 2213
} 
#endif
# 2216 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2216
__attribute((always_inline)) __attribute__((unused)) inline char surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2217
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2219
::exit(___);}
#if 0
# 2217
{ 
# 2218
return (char)(__surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap).x); 
# 2219
} 
#endif
# 2222 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2222
__attribute((always_inline)) __attribute__((unused)) inline signed char surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2223
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2225
::exit(___);}
#if 0
# 2223
{ 
# 2224
return (signed char)(__surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap).x); 
# 2225
} 
#endif
# 2228 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2228
__attribute((always_inline)) __attribute__((unused)) inline unsigned char surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2229
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2231
::exit(___);}
#if 0
# 2229
{ 
# 2230
return __surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap).x; 
# 2231
} 
#endif
# 2234 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2234
__attribute((always_inline)) __attribute__((unused)) inline char1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2235
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2237
::exit(___);}
#if 0
# 2235
{ 
# 2236
return make_char1((signed char)(__surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap).x)); 
# 2237
} 
#endif
# 2240 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2240
__attribute((always_inline)) __attribute__((unused)) inline uchar1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2241
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2243
::exit(___);}
#if 0
# 2241
{ 
# 2242
return __surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2243
} 
#endif
# 2246 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2246
__attribute((always_inline)) __attribute__((unused)) inline char2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2247
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2251
::exit(___);}
#if 0
# 2247
{ 
# 2248
uchar2 tmp = __surfCubemapLayeredreadc2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2250
return make_char2((signed char)(tmp.x), (signed char)(tmp.y)); 
# 2251
} 
#endif
# 2254 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2254
__attribute((always_inline)) __attribute__((unused)) inline uchar2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2255
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2257
::exit(___);}
#if 0
# 2255
{ 
# 2256
return __surfCubemapLayeredreadc2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2257
} 
#endif
# 2260 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2260
__attribute((always_inline)) __attribute__((unused)) inline char4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2261
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2265
::exit(___);}
#if 0
# 2261
{ 
# 2262
uchar4 tmp = __surfCubemapLayeredreadc4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2264
return make_char4((signed char)(tmp.x), (signed char)(tmp.y), (signed char)(tmp.z), (signed char)(tmp.w)); 
# 2265
} 
#endif
# 2268 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2268
__attribute((always_inline)) __attribute__((unused)) inline uchar4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2269
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2271
::exit(___);}
#if 0
# 2269
{ 
# 2270
return __surfCubemapLayeredreadc4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2271
} 
#endif
# 2274 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2274
__attribute((always_inline)) __attribute__((unused)) inline short surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2275
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2277
::exit(___);}
#if 0
# 2275
{ 
# 2276
return (short)(__surfCubemapLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap).x); 
# 2277
} 
#endif
# 2280 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2280
__attribute((always_inline)) __attribute__((unused)) inline unsigned short surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2281
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2283
::exit(___);}
#if 0
# 2281
{ 
# 2282
return __surfCubemapLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap).x; 
# 2283
} 
#endif
# 2286 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2286
__attribute((always_inline)) __attribute__((unused)) inline short1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2287
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2289
::exit(___);}
#if 0
# 2287
{ 
# 2288
return make_short1((signed short)(__surfCubemapLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap).x)); 
# 2289
} 
#endif
# 2292 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2292
__attribute((always_inline)) __attribute__((unused)) inline ushort1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2293
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2295
::exit(___);}
#if 0
# 2293
{ 
# 2294
return __surfCubemapLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2295
} 
#endif
# 2298 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2298
__attribute((always_inline)) __attribute__((unused)) inline short2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2299
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2303
::exit(___);}
#if 0
# 2299
{ 
# 2300
ushort2 tmp = __surfCubemapLayeredreads2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2302
return make_short2((signed short)(tmp.x), (signed short)(tmp.y)); 
# 2303
} 
#endif
# 2306 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2306
__attribute((always_inline)) __attribute__((unused)) inline ushort2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2307
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2309
::exit(___);}
#if 0
# 2307
{ 
# 2308
return __surfCubemapLayeredreads2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2309
} 
#endif
# 2312 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2312
__attribute((always_inline)) __attribute__((unused)) inline short4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2313
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2317
::exit(___);}
#if 0
# 2313
{ 
# 2314
ushort4 tmp = __surfCubemapLayeredreads4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2316
return make_short4((signed short)(tmp.x), (signed short)(tmp.y), (signed short)(tmp.z), (signed short)(tmp.w)); 
# 2317
} 
#endif
# 2320 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2320
__attribute((always_inline)) __attribute__((unused)) inline ushort4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2321
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2323
::exit(___);}
#if 0
# 2321
{ 
# 2322
return __surfCubemapLayeredreads4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2323
} 
#endif
# 2326 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2326
__attribute((always_inline)) __attribute__((unused)) inline int surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2327
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2329
::exit(___);}
#if 0
# 2327
{ 
# 2328
return (int)(__surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x); 
# 2329
} 
#endif
# 2332 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2332
__attribute((always_inline)) __attribute__((unused)) inline unsigned surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2333
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2335
::exit(___);}
#if 0
# 2333
{ 
# 2334
return __surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x; 
# 2335
} 
#endif
# 2338 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2338
__attribute((always_inline)) __attribute__((unused)) inline int1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2339
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2341
::exit(___);}
#if 0
# 2339
{ 
# 2340
return make_int1((signed int)(__surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x)); 
# 2341
} 
#endif
# 2344 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2344
__attribute((always_inline)) __attribute__((unused)) inline uint1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2345
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2347
::exit(___);}
#if 0
# 2345
{ 
# 2346
return __surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2347
} 
#endif
# 2350 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2350
__attribute((always_inline)) __attribute__((unused)) inline int2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2351
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2355
::exit(___);}
#if 0
# 2351
{ 
# 2352
uint2 tmp = __surfCubemapLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2354
return make_int2((int)(tmp.x), (int)(tmp.y)); 
# 2355
} 
#endif
# 2358 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2358
__attribute((always_inline)) __attribute__((unused)) inline uint2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2359
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2361
::exit(___);}
#if 0
# 2359
{ 
# 2360
return __surfCubemapLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2361
} 
#endif
# 2364 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2364
__attribute((always_inline)) __attribute__((unused)) inline int4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2365
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2369
::exit(___);}
#if 0
# 2365
{ 
# 2366
uint4 tmp = __surfCubemapLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2368
return make_int4((int)(tmp.x), (int)(tmp.y), (int)(tmp.z), (int)(tmp.w)); 
# 2369
} 
#endif
# 2372 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2372
__attribute((always_inline)) __attribute__((unused)) inline uint4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2373
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2375
::exit(___);}
#if 0
# 2373
{ 
# 2374
return __surfCubemapLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2375
} 
#endif
# 2378 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2378
__attribute((always_inline)) __attribute__((unused)) inline long long surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2379
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2381
::exit(___);}
#if 0
# 2379
{ 
# 2380
return (long long)(__surfCubemapLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap).x); 
# 2381
} 
#endif
# 2384 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2384
__attribute((always_inline)) __attribute__((unused)) inline unsigned long long surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2385
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2387
::exit(___);}
#if 0
# 2385
{ 
# 2386
return __surfCubemapLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap).x; 
# 2387
} 
#endif
# 2390 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2390
__attribute((always_inline)) __attribute__((unused)) inline longlong1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2391
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2393
::exit(___);}
#if 0
# 2391
{ 
# 2392
return make_longlong1((long long)(__surfCubemapLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap).x)); 
# 2393
} 
#endif
# 2396 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2396
__attribute((always_inline)) __attribute__((unused)) inline ulonglong1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2397
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2399
::exit(___);}
#if 0
# 2397
{ 
# 2398
return __surfCubemapLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2399
} 
#endif
# 2402 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2402
__attribute((always_inline)) __attribute__((unused)) inline longlong2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2403
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2407
::exit(___);}
#if 0
# 2403
{ 
# 2404
ulonglong2 tmp = __surfCubemapLayeredreadl2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2406
return make_longlong2((long long)(tmp.x), (long long)(tmp.y)); 
# 2407
} 
#endif
# 2410 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200
__attribute((always_inline)) 
# 2410
__attribute((always_inline)) __attribute__((unused)) inline ulonglong2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2411
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2413
::exit(___);}
#if 0
# 2411
{ 
# 2412
return __surfCubemapLayeredreadl2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2413
} 
#endif
# 2476 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) 
# 2476 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2477
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2479
::exit(___);}
#if 0
# 2477
{ 
# 2478
return __int_as_float((int)(__surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x)); 
# 2479
} 
#endif
# 2482 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) 
# 2482 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2483
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2485
::exit(___);}
#if 0
# 2483
{ 
# 2484
return make_float1(__int_as_float((int)(__surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x))); 
# 2485
} 
#endif
# 2488 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) 
# 2488 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2489
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2493
::exit(___);}
#if 0
# 2489
{ 
# 2490
uint2 tmp = __surfCubemapLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2492
return make_float2(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y))); 
# 2493
} 
#endif
# 2496 "/usr/local/cuda-5.0/include/surface_functions.h"
template<> 
# 2200 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) 
# 2496 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) inline float4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
# 2497
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2501
::exit(___);}
#if 0
# 2497
{ 
# 2498
uint4 tmp = __surfCubemapLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 2500
return make_float4(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y)), __int_as_float((int)(tmp.z)), __int_as_float((int)(tmp.w))); 
# 2501
} 
#endif
# 2537 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 2538
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(T val, surface< void, 1>  surf, int x, int s, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2539
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)s;(void)mode;
# 2557
::exit(___);}
#if 0
# 2539
{ 
# 2540
union { 
# 2541
T val; 
# 2542
uchar1 c1; 
# 2543
ushort1 s1; 
# 2544
uint1 u1; 
# 2545
uint2 u2; 
# 2546
uint4 u4; 
# 2547
} tmp; 
# 2549
(tmp.val) = val; 
# 2551
(s == 1) ? ((void)__surf1Dwritec1(tmp.c1, surf, x, cudaBoundaryModeTrap)) : ((s == 2) ? ((void)__surf1Dwrites1(tmp.s1, surf, x, cudaBoundaryModeTrap)) : ((s == 4) ? ((void)__surf1Dwriteu1(tmp.u1, surf, x, cudaBoundaryModeTrap)) : ((s == 8) ? ((void)__surf1Dwriteu2(tmp.u2, surf, x, cudaBoundaryModeTrap)) : ((s == 16) ? ((void)__surf1Dwriteu4(tmp.u4, surf, x, cudaBoundaryModeTrap)) : ((void)0))))); 
# 2557
} 
#endif
# 2559 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 2560
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(T val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2561
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2563
::exit(___);}
#if 0
# 2561
{ ; 
# 2562
surf1Dwrite(val, surf, x, (int)sizeof(T), mode); 
# 2563
} 
#endif
# 2566 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(char val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2567
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2569
::exit(___);}
#if 0
# 2567
{ 
# 2568
__surf1Dwritec1(make_uchar1((unsigned char)val), surf, x, cudaBoundaryModeTrap); 
# 2569
} 
#endif
# 2571 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(signed char val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2572
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2574
::exit(___);}
#if 0
# 2572
{ 
# 2573
__surf1Dwritec1(make_uchar1((unsigned char)val), surf, x, cudaBoundaryModeTrap); 
# 2574
} 
#endif
# 2576 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(unsigned char val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2577
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2579
::exit(___);}
#if 0
# 2577
{ 
# 2578
__surf1Dwritec1(make_uchar1(val), surf, x, cudaBoundaryModeTrap); 
# 2579
} 
#endif
# 2581 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(char1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2582
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2584
::exit(___);}
#if 0
# 2582
{ 
# 2583
__surf1Dwritec1(make_uchar1((unsigned char)(val.x)), surf, x, cudaBoundaryModeTrap); 
# 2584
} 
#endif
# 2586 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uchar1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2587
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2589
::exit(___);}
#if 0
# 2587
{ 
# 2588
__surf1Dwritec1(val, surf, x, cudaBoundaryModeTrap); 
# 2589
} 
#endif
# 2591 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(char2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2592
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2594
::exit(___);}
#if 0
# 2592
{ 
# 2593
__surf1Dwritec2(make_uchar2((unsigned char)(val.x), (unsigned char)(val.y)), surf, x, cudaBoundaryModeTrap); 
# 2594
} 
#endif
# 2596 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uchar2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2597
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2599
::exit(___);}
#if 0
# 2597
{ 
# 2598
__surf1Dwritec2(val, surf, x, cudaBoundaryModeTrap); 
# 2599
} 
#endif
# 2601 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(char4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2602
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2604
::exit(___);}
#if 0
# 2602
{ 
# 2603
__surf1Dwritec4(make_uchar4((unsigned char)(val.x), (unsigned char)(val.y), (unsigned char)(val.z), (unsigned char)(val.w)), surf, x, cudaBoundaryModeTrap); 
# 2604
} 
#endif
# 2606 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uchar4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2607
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2609
::exit(___);}
#if 0
# 2607
{ 
# 2608
__surf1Dwritec4(val, surf, x, cudaBoundaryModeTrap); 
# 2609
} 
#endif
# 2611 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(short val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2612
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2614
::exit(___);}
#if 0
# 2612
{ 
# 2613
__surf1Dwrites1(make_ushort1((unsigned short)val), surf, x, cudaBoundaryModeTrap); 
# 2614
} 
#endif
# 2616 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(unsigned short val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2617
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2619
::exit(___);}
#if 0
# 2617
{ 
# 2618
__surf1Dwrites1(make_ushort1(val), surf, x, cudaBoundaryModeTrap); 
# 2619
} 
#endif
# 2621 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(short1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2622
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2624
::exit(___);}
#if 0
# 2622
{ 
# 2623
__surf1Dwrites1(make_ushort1((unsigned short)(val.x)), surf, x, cudaBoundaryModeTrap); 
# 2624
} 
#endif
# 2626 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ushort1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2627
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2629
::exit(___);}
#if 0
# 2627
{ 
# 2628
__surf1Dwrites1(val, surf, x, cudaBoundaryModeTrap); 
# 2629
} 
#endif
# 2631 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(short2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2632
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2634
::exit(___);}
#if 0
# 2632
{ 
# 2633
__surf1Dwrites2(make_ushort2((unsigned short)(val.x), (unsigned short)(val.y)), surf, x, cudaBoundaryModeTrap); 
# 2634
} 
#endif
# 2636 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ushort2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2637
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2639
::exit(___);}
#if 0
# 2637
{ 
# 2638
__surf1Dwrites2(val, surf, x, cudaBoundaryModeTrap); 
# 2639
} 
#endif
# 2641 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(short4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2642
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2644
::exit(___);}
#if 0
# 2642
{ 
# 2643
__surf1Dwrites4(make_ushort4((unsigned short)(val.x), (unsigned short)(val.y), (unsigned short)(val.z), (unsigned short)(val.w)), surf, x, cudaBoundaryModeTrap); 
# 2644
} 
#endif
# 2646 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ushort4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2647
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2649
::exit(___);}
#if 0
# 2647
{ 
# 2648
__surf1Dwrites4(val, surf, x, cudaBoundaryModeTrap); 
# 2649
} 
#endif
# 2651 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(int val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2652
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2654
::exit(___);}
#if 0
# 2652
{ 
# 2653
__surf1Dwriteu1(make_uint1((unsigned)val), surf, x, cudaBoundaryModeTrap); 
# 2654
} 
#endif
# 2656 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(unsigned val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2657
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2659
::exit(___);}
#if 0
# 2657
{ 
# 2658
__surf1Dwriteu1(make_uint1(val), surf, x, cudaBoundaryModeTrap); 
# 2659
} 
#endif
# 2661 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(int1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2662
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2664
::exit(___);}
#if 0
# 2662
{ 
# 2663
__surf1Dwriteu1(make_uint1((unsigned)(val.x)), surf, x, cudaBoundaryModeTrap); 
# 2664
} 
#endif
# 2666 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uint1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2667
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2669
::exit(___);}
#if 0
# 2667
{ 
# 2668
__surf1Dwriteu1(val, surf, x, cudaBoundaryModeTrap); 
# 2669
} 
#endif
# 2671 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(int2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2672
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2674
::exit(___);}
#if 0
# 2672
{ 
# 2673
__surf1Dwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, cudaBoundaryModeTrap); 
# 2674
} 
#endif
# 2676 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uint2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2677
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2679
::exit(___);}
#if 0
# 2677
{ 
# 2678
__surf1Dwriteu2(val, surf, x, cudaBoundaryModeTrap); 
# 2679
} 
#endif
# 2681 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(int4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2682
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2684
::exit(___);}
#if 0
# 2682
{ 
# 2683
__surf1Dwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, cudaBoundaryModeTrap); 
# 2684
} 
#endif
# 2686 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uint4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2687
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2689
::exit(___);}
#if 0
# 2687
{ 
# 2688
__surf1Dwriteu4(val, surf, x, cudaBoundaryModeTrap); 
# 2689
} 
#endif
# 2691 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(long long val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2692
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2694
::exit(___);}
#if 0
# 2692
{ 
# 2693
__surf1Dwritel1(make_ulonglong1((unsigned long long)val), surf, x, cudaBoundaryModeTrap); 
# 2694
} 
#endif
# 2696 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(unsigned long long val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2697
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2699
::exit(___);}
#if 0
# 2697
{ 
# 2698
__surf1Dwritel1(make_ulonglong1(val), surf, x, cudaBoundaryModeTrap); 
# 2699
} 
#endif
# 2701 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(longlong1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2702
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2704
::exit(___);}
#if 0
# 2702
{ 
# 2703
__surf1Dwritel1(make_ulonglong1((unsigned long long)(val.x)), surf, x, cudaBoundaryModeTrap); 
# 2704
} 
#endif
# 2706 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ulonglong1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2707
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2709
::exit(___);}
#if 0
# 2707
{ 
# 2708
__surf1Dwritel1(val, surf, x, cudaBoundaryModeTrap); 
# 2709
} 
#endif
# 2711 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(longlong2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2712
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2714
::exit(___);}
#if 0
# 2712
{ 
# 2713
__surf1Dwritel2(make_ulonglong2((unsigned long long)(val.x), (unsigned long long)(val.y)), surf, x, cudaBoundaryModeTrap); 
# 2714
} 
#endif
# 2716 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ulonglong2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2717
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2719
::exit(___);}
#if 0
# 2717
{ 
# 2718
__surf1Dwritel2(val, surf, x, cudaBoundaryModeTrap); 
# 2719
} 
#endif
# 2765 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(float val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2766
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2768
::exit(___);}
#if 0
# 2766
{ 
# 2767
__surf1Dwriteu1(make_uint1((unsigned)__float_as_int(val)), surf, x, cudaBoundaryModeTrap); 
# 2768
} 
#endif
# 2770 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(float1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2771
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2773
::exit(___);}
#if 0
# 2771
{ 
# 2772
__surf1Dwriteu1(make_uint1((unsigned)__float_as_int(val.x)), surf, x, cudaBoundaryModeTrap); 
# 2773
} 
#endif
# 2775 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(float2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2776
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2778
::exit(___);}
#if 0
# 2776
{ 
# 2777
__surf1Dwriteu2(make_uint2((unsigned)__float_as_int(val.x), __float_as_int((unsigned)(val.y))), surf, x, cudaBoundaryModeTrap); 
# 2778
} 
#endif
# 2780 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(float4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2781
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 2783
::exit(___);}
#if 0
# 2781
{ 
# 2782
__surf1Dwriteu4(make_uint4((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y), (unsigned)__float_as_int(val.z), (unsigned)__float_as_int(val.w)), surf, x, cudaBoundaryModeTrap); 
# 2783
} 
#endif
# 2819 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 2820
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(T val, surface< void, 2>  surf, int x, int y, int s, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2821
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)s;(void)mode;
# 2839
::exit(___);}
#if 0
# 2821
{ 
# 2822
union { 
# 2823
T val; 
# 2824
uchar1 c1; 
# 2825
ushort1 s1; 
# 2826
uint1 u1; 
# 2827
uint2 u2; 
# 2828
uint4 u4; 
# 2829
} tmp; 
# 2831
(tmp.val) = val; 
# 2833
(s == 1) ? ((void)__surf2Dwritec1(tmp.c1, surf, x, y, cudaBoundaryModeTrap)) : ((s == 2) ? ((void)__surf2Dwrites1(tmp.s1, surf, x, y, cudaBoundaryModeTrap)) : ((s == 4) ? ((void)__surf2Dwriteu1(tmp.u1, surf, x, y, cudaBoundaryModeTrap)) : ((s == 8) ? ((void)__surf2Dwriteu2(tmp.u2, surf, x, y, cudaBoundaryModeTrap)) : ((s == 16) ? ((void)__surf2Dwriteu4(tmp.u4, surf, x, y, cudaBoundaryModeTrap)) : ((void)0))))); 
# 2839
} 
#endif
# 2841 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 2842
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(T val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2843
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2845
::exit(___);}
#if 0
# 2843
{ ; 
# 2844
surf2Dwrite(val, surf, x, y, (int)sizeof(T), mode); 
# 2845
} 
#endif
# 2848 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(char val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2849
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2851
::exit(___);}
#if 0
# 2849
{ 
# 2850
__surf2Dwritec1(make_uchar1((unsigned char)val), surf, x, y, cudaBoundaryModeTrap); 
# 2851
} 
#endif
# 2853 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(signed char val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2854
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2856
::exit(___);}
#if 0
# 2854
{ 
# 2855
__surf2Dwritec1(make_uchar1((unsigned char)val), surf, x, y, cudaBoundaryModeTrap); 
# 2856
} 
#endif
# 2858 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(unsigned char val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2859
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2861
::exit(___);}
#if 0
# 2859
{ 
# 2860
__surf2Dwritec1(make_uchar1(val), surf, x, y, cudaBoundaryModeTrap); 
# 2861
} 
#endif
# 2863 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(char1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2864
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2866
::exit(___);}
#if 0
# 2864
{ 
# 2865
__surf2Dwritec1(make_uchar1((unsigned char)(val.x)), surf, x, y, cudaBoundaryModeTrap); 
# 2866
} 
#endif
# 2868 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uchar1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2869
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2871
::exit(___);}
#if 0
# 2869
{ 
# 2870
__surf2Dwritec1(val, surf, x, y, cudaBoundaryModeTrap); 
# 2871
} 
#endif
# 2873 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(char2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2874
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2876
::exit(___);}
#if 0
# 2874
{ 
# 2875
__surf2Dwritec2(make_uchar2((unsigned char)(val.x), (unsigned char)(val.y)), surf, x, y, cudaBoundaryModeTrap); 
# 2876
} 
#endif
# 2878 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uchar2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2879
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2881
::exit(___);}
#if 0
# 2879
{ 
# 2880
__surf2Dwritec2(val, surf, x, y, cudaBoundaryModeTrap); 
# 2881
} 
#endif
# 2883 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(char4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2884
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2886
::exit(___);}
#if 0
# 2884
{ 
# 2885
__surf2Dwritec4(make_uchar4((unsigned char)(val.x), (unsigned char)(val.y), (unsigned char)(val.z), (unsigned char)(val.w)), surf, x, y, cudaBoundaryModeTrap); 
# 2886
} 
#endif
# 2888 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uchar4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2889
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2891
::exit(___);}
#if 0
# 2889
{ 
# 2890
__surf2Dwritec4(val, surf, x, y, cudaBoundaryModeTrap); 
# 2891
} 
#endif
# 2893 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(short val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2894
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2896
::exit(___);}
#if 0
# 2894
{ 
# 2895
__surf2Dwrites1(make_ushort1((unsigned short)val), surf, x, y, cudaBoundaryModeTrap); 
# 2896
} 
#endif
# 2898 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(unsigned short val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2899
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2901
::exit(___);}
#if 0
# 2899
{ 
# 2900
__surf2Dwrites1(make_ushort1(val), surf, x, y, cudaBoundaryModeTrap); 
# 2901
} 
#endif
# 2903 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(short1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2904
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2906
::exit(___);}
#if 0
# 2904
{ 
# 2905
__surf2Dwrites1(make_ushort1((unsigned short)(val.x)), surf, x, y, cudaBoundaryModeTrap); 
# 2906
} 
#endif
# 2908 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ushort1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2909
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2911
::exit(___);}
#if 0
# 2909
{ 
# 2910
__surf2Dwrites1(val, surf, x, y, cudaBoundaryModeTrap); 
# 2911
} 
#endif
# 2913 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(short2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2914
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2916
::exit(___);}
#if 0
# 2914
{ 
# 2915
__surf2Dwrites2(make_ushort2((unsigned short)(val.x), (unsigned short)(val.y)), surf, x, y, cudaBoundaryModeTrap); 
# 2916
} 
#endif
# 2918 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ushort2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2919
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2921
::exit(___);}
#if 0
# 2919
{ 
# 2920
__surf2Dwrites2(val, surf, x, y, cudaBoundaryModeTrap); 
# 2921
} 
#endif
# 2923 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(short4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2924
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2926
::exit(___);}
#if 0
# 2924
{ 
# 2925
__surf2Dwrites4(make_ushort4((unsigned short)(val.x), (unsigned short)(val.y), (unsigned short)(val.z), (unsigned short)(val.w)), surf, x, y, cudaBoundaryModeTrap); 
# 2926
} 
#endif
# 2928 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ushort4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2929
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2931
::exit(___);}
#if 0
# 2929
{ 
# 2930
__surf2Dwrites4(val, surf, x, y, cudaBoundaryModeTrap); 
# 2931
} 
#endif
# 2933 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(int val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2934
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2936
::exit(___);}
#if 0
# 2934
{ 
# 2935
__surf2Dwriteu1(make_uint1((unsigned)val), surf, x, y, cudaBoundaryModeTrap); 
# 2936
} 
#endif
# 2938 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(unsigned val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2939
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2941
::exit(___);}
#if 0
# 2939
{ 
# 2940
__surf2Dwriteu1(make_uint1(val), surf, x, y, cudaBoundaryModeTrap); 
# 2941
} 
#endif
# 2943 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(int1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2944
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2946
::exit(___);}
#if 0
# 2944
{ 
# 2945
__surf2Dwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, cudaBoundaryModeTrap); 
# 2946
} 
#endif
# 2948 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uint1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2949
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2951
::exit(___);}
#if 0
# 2949
{ 
# 2950
__surf2Dwriteu1(val, surf, x, y, cudaBoundaryModeTrap); 
# 2951
} 
#endif
# 2953 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(int2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2954
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2956
::exit(___);}
#if 0
# 2954
{ 
# 2955
__surf2Dwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, cudaBoundaryModeTrap); 
# 2956
} 
#endif
# 2958 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uint2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2959
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2961
::exit(___);}
#if 0
# 2959
{ 
# 2960
__surf2Dwriteu2(val, surf, x, y, cudaBoundaryModeTrap); 
# 2961
} 
#endif
# 2963 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(int4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2964
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2966
::exit(___);}
#if 0
# 2964
{ 
# 2965
__surf2Dwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, cudaBoundaryModeTrap); 
# 2966
} 
#endif
# 2968 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uint4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2969
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2971
::exit(___);}
#if 0
# 2969
{ 
# 2970
__surf2Dwriteu4(val, surf, x, y, cudaBoundaryModeTrap); 
# 2971
} 
#endif
# 2973 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(long long val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2974
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2976
::exit(___);}
#if 0
# 2974
{ 
# 2975
__surf2Dwritel1(make_ulonglong1((unsigned long long)val), surf, x, y, cudaBoundaryModeTrap); 
# 2976
} 
#endif
# 2978 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(unsigned long long val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2979
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2981
::exit(___);}
#if 0
# 2979
{ 
# 2980
__surf2Dwritel1(make_ulonglong1(val), surf, x, y, cudaBoundaryModeTrap); 
# 2981
} 
#endif
# 2983 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(longlong1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2984
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2986
::exit(___);}
#if 0
# 2984
{ 
# 2985
__surf2Dwritel1(make_ulonglong1((unsigned long long)(val.x)), surf, x, y, cudaBoundaryModeTrap); 
# 2986
} 
#endif
# 2988 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ulonglong1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2989
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2991
::exit(___);}
#if 0
# 2989
{ 
# 2990
__surf2Dwritel1(val, surf, x, y, cudaBoundaryModeTrap); 
# 2991
} 
#endif
# 2993 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(longlong2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2994
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 2996
::exit(___);}
#if 0
# 2994
{ 
# 2995
__surf2Dwritel2(make_ulonglong2((unsigned long long)(val.x), (unsigned long long)(val.y)), surf, x, y, cudaBoundaryModeTrap); 
# 2996
} 
#endif
# 2998 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ulonglong2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 2999
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 3001
::exit(___);}
#if 0
# 2999
{ 
# 3000
__surf2Dwritel2(val, surf, x, y, cudaBoundaryModeTrap); 
# 3001
} 
#endif
# 3047 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(float val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3048
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 3050
::exit(___);}
#if 0
# 3048
{ 
# 3049
__surf2Dwriteu1(make_uint1((unsigned)__float_as_int(val)), surf, x, y, cudaBoundaryModeTrap); 
# 3050
} 
#endif
# 3052 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(float1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3053
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 3055
::exit(___);}
#if 0
# 3053
{ 
# 3054
__surf2Dwriteu1(make_uint1((unsigned)__float_as_int(val.x)), surf, x, y, cudaBoundaryModeTrap); 
# 3055
} 
#endif
# 3057 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(float2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3058
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 3060
::exit(___);}
#if 0
# 3058
{ 
# 3059
__surf2Dwriteu2(make_uint2((unsigned)__float_as_int(val.x), __float_as_int((unsigned)(val.y))), surf, x, y, cudaBoundaryModeTrap); 
# 3060
} 
#endif
# 3062 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(float4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3063
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 3065
::exit(___);}
#if 0
# 3063
{ 
# 3064
__surf2Dwriteu4(make_uint4((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y), (unsigned)__float_as_int(val.z), (unsigned)__float_as_int(val.w)), surf, x, y, cudaBoundaryModeTrap); 
# 3065
} 
#endif
# 3101 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 3102
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(T val, surface< void, 3>  surf, int x, int y, int z, int s, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3103
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
# 3121
::exit(___);}
#if 0
# 3103
{ 
# 3104
union { 
# 3105
T val; 
# 3106
uchar1 c1; 
# 3107
ushort1 s1; 
# 3108
uint1 u1; 
# 3109
uint2 u2; 
# 3110
uint4 u4; 
# 3111
} tmp; 
# 3113
(tmp.val) = val; 
# 3115
(s == 1) ? ((void)__surf3Dwritec1(tmp.c1, surf, x, y, z, cudaBoundaryModeTrap)) : ((s == 2) ? ((void)__surf3Dwrites1(tmp.s1, surf, x, y, z, cudaBoundaryModeTrap)) : ((s == 4) ? ((void)__surf3Dwriteu1(tmp.u1, surf, x, y, z, cudaBoundaryModeTrap)) : ((s == 8) ? ((void)__surf3Dwriteu2(tmp.u2, surf, x, y, z, cudaBoundaryModeTrap)) : ((s == 16) ? ((void)__surf3Dwriteu4(tmp.u4, surf, x, y, z, cudaBoundaryModeTrap)) : ((void)0))))); 
# 3121
} 
#endif
# 3123 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 3124
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(T val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3125
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3127
::exit(___);}
#if 0
# 3125
{ ; 
# 3126
surf3Dwrite(val, surf, x, y, z, (int)sizeof(T), mode); 
# 3127
} 
#endif
# 3130 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(char val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3131
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3133
::exit(___);}
#if 0
# 3131
{ 
# 3132
__surf3Dwritec1(make_uchar1((unsigned char)val), surf, x, y, z, cudaBoundaryModeTrap); 
# 3133
} 
#endif
# 3135 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(signed char val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3136
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3138
::exit(___);}
#if 0
# 3136
{ 
# 3137
__surf3Dwritec1(make_uchar1((unsigned char)val), surf, x, y, z, cudaBoundaryModeTrap); 
# 3138
} 
#endif
# 3140 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(unsigned char val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3141
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3143
::exit(___);}
#if 0
# 3141
{ 
# 3142
__surf3Dwritec1(make_uchar1(val), surf, x, y, z, cudaBoundaryModeTrap); 
# 3143
} 
#endif
# 3145 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(char1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3146
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3148
::exit(___);}
#if 0
# 3146
{ 
# 3147
__surf3Dwritec1(make_uchar1((unsigned char)(val.x)), surf, x, y, z, cudaBoundaryModeTrap); 
# 3148
} 
#endif
# 3150 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uchar1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3151
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3153
::exit(___);}
#if 0
# 3151
{ 
# 3152
__surf3Dwritec1(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 3153
} 
#endif
# 3155 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(char2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3156
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3158
::exit(___);}
#if 0
# 3156
{ 
# 3157
__surf3Dwritec2(make_uchar2((unsigned char)(val.x), (unsigned char)(val.y)), surf, x, y, z, cudaBoundaryModeTrap); 
# 3158
} 
#endif
# 3160 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uchar2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3161
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3163
::exit(___);}
#if 0
# 3161
{ 
# 3162
__surf3Dwritec2(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 3163
} 
#endif
# 3165 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(char4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3166
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3168
::exit(___);}
#if 0
# 3166
{ 
# 3167
__surf3Dwritec4(make_uchar4((unsigned char)(val.x), (unsigned char)(val.y), (unsigned char)(val.z), (unsigned char)(val.w)), surf, x, y, z, cudaBoundaryModeTrap); 
# 3168
} 
#endif
# 3170 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uchar4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3171
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3173
::exit(___);}
#if 0
# 3171
{ 
# 3172
__surf3Dwritec4(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 3173
} 
#endif
# 3175 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(short val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3176
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3178
::exit(___);}
#if 0
# 3176
{ 
# 3177
__surf3Dwrites1(make_ushort1((unsigned short)val), surf, x, y, z, cudaBoundaryModeTrap); 
# 3178
} 
#endif
# 3180 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(unsigned short val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3181
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3183
::exit(___);}
#if 0
# 3181
{ 
# 3182
__surf3Dwrites1(make_ushort1(val), surf, x, y, z, cudaBoundaryModeTrap); 
# 3183
} 
#endif
# 3185 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(short1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3186
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3188
::exit(___);}
#if 0
# 3186
{ 
# 3187
__surf3Dwrites1(make_ushort1((unsigned short)(val.x)), surf, x, y, z, cudaBoundaryModeTrap); 
# 3188
} 
#endif
# 3190 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ushort1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3191
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3193
::exit(___);}
#if 0
# 3191
{ 
# 3192
__surf3Dwrites1(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 3193
} 
#endif
# 3195 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(short2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3196
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3198
::exit(___);}
#if 0
# 3196
{ 
# 3197
__surf3Dwrites2(make_ushort2((unsigned short)(val.x), (unsigned short)(val.y)), surf, x, y, z, cudaBoundaryModeTrap); 
# 3198
} 
#endif
# 3200 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ushort2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3201
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3203
::exit(___);}
#if 0
# 3201
{ 
# 3202
__surf3Dwrites2(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 3203
} 
#endif
# 3205 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(short4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3206
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3208
::exit(___);}
#if 0
# 3206
{ 
# 3207
__surf3Dwrites4(make_ushort4((unsigned short)(val.x), (unsigned short)(val.y), (unsigned short)(val.z), (unsigned short)(val.w)), surf, x, y, z, cudaBoundaryModeTrap); 
# 3208
} 
#endif
# 3210 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ushort4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3211
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3213
::exit(___);}
#if 0
# 3211
{ 
# 3212
__surf3Dwrites4(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 3213
} 
#endif
# 3215 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(int val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3216
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3218
::exit(___);}
#if 0
# 3216
{ 
# 3217
__surf3Dwriteu1(make_uint1((unsigned)val), surf, x, y, z, cudaBoundaryModeTrap); 
# 3218
} 
#endif
# 3220 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(unsigned val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3221
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3223
::exit(___);}
#if 0
# 3221
{ 
# 3222
__surf3Dwriteu1(make_uint1(val), surf, x, y, z, cudaBoundaryModeTrap); 
# 3223
} 
#endif
# 3225 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(int1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3226
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3228
::exit(___);}
#if 0
# 3226
{ 
# 3227
__surf3Dwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, z, cudaBoundaryModeTrap); 
# 3228
} 
#endif
# 3230 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uint1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3231
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3233
::exit(___);}
#if 0
# 3231
{ 
# 3232
__surf3Dwriteu1(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 3233
} 
#endif
# 3235 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(int2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3236
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3238
::exit(___);}
#if 0
# 3236
{ 
# 3237
__surf3Dwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, z, cudaBoundaryModeTrap); 
# 3238
} 
#endif
# 3240 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uint2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3241
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3243
::exit(___);}
#if 0
# 3241
{ 
# 3242
__surf3Dwriteu2(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 3243
} 
#endif
# 3245 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(int4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3246
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3248
::exit(___);}
#if 0
# 3246
{ 
# 3247
__surf3Dwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, z, cudaBoundaryModeTrap); 
# 3248
} 
#endif
# 3250 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uint4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3251
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3253
::exit(___);}
#if 0
# 3251
{ 
# 3252
__surf3Dwriteu4(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 3253
} 
#endif
# 3255 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(long long val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3256
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3258
::exit(___);}
#if 0
# 3256
{ 
# 3257
__surf3Dwritel1(make_ulonglong1((unsigned long long)val), surf, x, y, z, cudaBoundaryModeTrap); 
# 3258
} 
#endif
# 3260 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(unsigned long long val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3261
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3263
::exit(___);}
#if 0
# 3261
{ 
# 3262
__surf3Dwritel1(make_ulonglong1(val), surf, x, y, z, cudaBoundaryModeTrap); 
# 3263
} 
#endif
# 3265 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(longlong1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3266
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3268
::exit(___);}
#if 0
# 3266
{ 
# 3267
__surf3Dwritel1(make_ulonglong1((unsigned long long)(val.x)), surf, x, y, z, cudaBoundaryModeTrap); 
# 3268
} 
#endif
# 3270 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ulonglong1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3271
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3273
::exit(___);}
#if 0
# 3271
{ 
# 3272
__surf3Dwritel1(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 3273
} 
#endif
# 3275 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(longlong2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3276
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3278
::exit(___);}
#if 0
# 3276
{ 
# 3277
__surf3Dwritel2(make_ulonglong2((unsigned long long)(val.x), (unsigned long long)(val.y)), surf, x, y, z, cudaBoundaryModeTrap); 
# 3278
} 
#endif
# 3280 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ulonglong2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3281
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3283
::exit(___);}
#if 0
# 3281
{ 
# 3282
__surf3Dwritel2(val, surf, x, y, z, cudaBoundaryModeTrap); 
# 3283
} 
#endif
# 3329 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(float val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3330
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3332
::exit(___);}
#if 0
# 3330
{ 
# 3331
__surf3Dwriteu1(make_uint1((unsigned)__float_as_int(val)), surf, x, y, z, cudaBoundaryModeTrap); 
# 3332
} 
#endif
# 3334 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(float1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3335
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3337
::exit(___);}
#if 0
# 3335
{ 
# 3336
__surf3Dwriteu1(make_uint1((unsigned)__float_as_int(val.x)), surf, x, y, z, cudaBoundaryModeTrap); 
# 3337
} 
#endif
# 3339 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(float2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3340
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3342
::exit(___);}
#if 0
# 3340
{ 
# 3341
__surf3Dwriteu2(make_uint2((unsigned)__float_as_int(val.x), __float_as_int((unsigned)(val.y))), surf, x, y, z, cudaBoundaryModeTrap); 
# 3342
} 
#endif
# 3344 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(float4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3345
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 3347
::exit(___);}
#if 0
# 3345
{ 
# 3346
__surf3Dwriteu4(make_uint4((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y), (unsigned)__float_as_int(val.z), (unsigned)__float_as_int(val.w)), surf, x, y, z, cudaBoundaryModeTrap); 
# 3347
} 
#endif
# 3383 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 3384
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(T val, surface< void, 241>  surf, int x, int layer, int s, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3385
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
# 3403
::exit(___);}
#if 0
# 3385
{ 
# 3386
union { 
# 3387
T val; 
# 3388
uchar1 c1; 
# 3389
ushort1 s1; 
# 3390
uint1 u1; 
# 3391
uint2 u2; 
# 3392
uint4 u4; 
# 3393
} tmp; 
# 3395
(tmp.val) = val; 
# 3397
(s == 1) ? ((void)__surf1DLayeredwritec1(tmp.c1, surf, x, layer, cudaBoundaryModeTrap)) : ((s == 2) ? ((void)__surf1DLayeredwrites1(tmp.s1, surf, x, layer, cudaBoundaryModeTrap)) : ((s == 4) ? ((void)__surf1DLayeredwriteu1(tmp.u1, surf, x, layer, cudaBoundaryModeTrap)) : ((s == 8) ? ((void)__surf1DLayeredwriteu2(tmp.u2, surf, x, layer, cudaBoundaryModeTrap)) : ((s == 16) ? ((void)__surf1DLayeredwriteu4(tmp.u4, surf, x, layer, cudaBoundaryModeTrap)) : ((void)0))))); 
# 3403
} 
#endif
# 3405 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 3406
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(T val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3407
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3409
::exit(___);}
#if 0
# 3407
{ ; 
# 3408
surf1DLayeredwrite(val, surf, x, layer, (int)sizeof(T), mode); 
# 3409
} 
#endif
# 3412 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(char val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3413
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3415
::exit(___);}
#if 0
# 3413
{ 
# 3414
__surf1DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, layer, cudaBoundaryModeTrap); 
# 3415
} 
#endif
# 3417 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(signed char val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3418
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3420
::exit(___);}
#if 0
# 3418
{ 
# 3419
__surf1DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, layer, cudaBoundaryModeTrap); 
# 3420
} 
#endif
# 3422 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(unsigned char val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3423
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3425
::exit(___);}
#if 0
# 3423
{ 
# 3424
__surf1DLayeredwritec1(make_uchar1(val), surf, x, layer, cudaBoundaryModeTrap); 
# 3425
} 
#endif
# 3427 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(char1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3428
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3430
::exit(___);}
#if 0
# 3428
{ 
# 3429
__surf1DLayeredwritec1(make_uchar1((unsigned char)(val.x)), surf, x, layer, cudaBoundaryModeTrap); 
# 3430
} 
#endif
# 3432 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uchar1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3433
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3435
::exit(___);}
#if 0
# 3433
{ 
# 3434
__surf1DLayeredwritec1(val, surf, x, layer, cudaBoundaryModeTrap); 
# 3435
} 
#endif
# 3437 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(char2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3438
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3440
::exit(___);}
#if 0
# 3438
{ 
# 3439
__surf1DLayeredwritec2(make_uchar2((unsigned char)(val.x), (unsigned char)(val.y)), surf, x, layer, cudaBoundaryModeTrap); 
# 3440
} 
#endif
# 3442 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uchar2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3443
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3445
::exit(___);}
#if 0
# 3443
{ 
# 3444
__surf1DLayeredwritec2(val, surf, x, layer, cudaBoundaryModeTrap); 
# 3445
} 
#endif
# 3447 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(char4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3448
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3450
::exit(___);}
#if 0
# 3448
{ 
# 3449
__surf1DLayeredwritec4(make_uchar4((unsigned char)(val.x), (unsigned char)(val.y), (unsigned char)(val.z), (unsigned char)(val.w)), surf, x, layer, cudaBoundaryModeTrap); 
# 3450
} 
#endif
# 3452 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uchar4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3453
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3455
::exit(___);}
#if 0
# 3453
{ 
# 3454
__surf1DLayeredwritec4(val, surf, x, layer, cudaBoundaryModeTrap); 
# 3455
} 
#endif
# 3457 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(short val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3458
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3460
::exit(___);}
#if 0
# 3458
{ 
# 3459
__surf1DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, layer, cudaBoundaryModeTrap); 
# 3460
} 
#endif
# 3462 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(unsigned short val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3463
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3465
::exit(___);}
#if 0
# 3463
{ 
# 3464
__surf1DLayeredwrites1(make_ushort1(val), surf, x, layer, cudaBoundaryModeTrap); 
# 3465
} 
#endif
# 3467 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(short1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3468
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3470
::exit(___);}
#if 0
# 3468
{ 
# 3469
__surf1DLayeredwrites1(make_ushort1((unsigned short)(val.x)), surf, x, layer, cudaBoundaryModeTrap); 
# 3470
} 
#endif
# 3472 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ushort1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3473
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3475
::exit(___);}
#if 0
# 3473
{ 
# 3474
__surf1DLayeredwrites1(val, surf, x, layer, cudaBoundaryModeTrap); 
# 3475
} 
#endif
# 3477 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(short2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3478
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3480
::exit(___);}
#if 0
# 3478
{ 
# 3479
__surf1DLayeredwrites2(make_ushort2((unsigned short)(val.x), (unsigned short)(val.y)), surf, x, layer, cudaBoundaryModeTrap); 
# 3480
} 
#endif
# 3482 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ushort2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3483
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3485
::exit(___);}
#if 0
# 3483
{ 
# 3484
__surf1DLayeredwrites2(val, surf, x, layer, cudaBoundaryModeTrap); 
# 3485
} 
#endif
# 3487 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(short4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3488
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3490
::exit(___);}
#if 0
# 3488
{ 
# 3489
__surf1DLayeredwrites4(make_ushort4((unsigned short)(val.x), (unsigned short)(val.y), (unsigned short)(val.z), (unsigned short)(val.w)), surf, x, layer, cudaBoundaryModeTrap); 
# 3490
} 
#endif
# 3492 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ushort4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3493
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3495
::exit(___);}
#if 0
# 3493
{ 
# 3494
__surf1DLayeredwrites4(val, surf, x, layer, cudaBoundaryModeTrap); 
# 3495
} 
#endif
# 3497 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(int val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3498
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3500
::exit(___);}
#if 0
# 3498
{ 
# 3499
__surf1DLayeredwriteu1(make_uint1((unsigned)val), surf, x, layer, cudaBoundaryModeTrap); 
# 3500
} 
#endif
# 3502 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(unsigned val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3503
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3505
::exit(___);}
#if 0
# 3503
{ 
# 3504
__surf1DLayeredwriteu1(make_uint1(val), surf, x, layer, cudaBoundaryModeTrap); 
# 3505
} 
#endif
# 3507 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(int1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3508
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3510
::exit(___);}
#if 0
# 3508
{ 
# 3509
__surf1DLayeredwriteu1(make_uint1((unsigned)(val.x)), surf, x, layer, cudaBoundaryModeTrap); 
# 3510
} 
#endif
# 3512 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uint1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3513
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3515
::exit(___);}
#if 0
# 3513
{ 
# 3514
__surf1DLayeredwriteu1(val, surf, x, layer, cudaBoundaryModeTrap); 
# 3515
} 
#endif
# 3517 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(int2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3518
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3520
::exit(___);}
#if 0
# 3518
{ 
# 3519
__surf1DLayeredwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, layer, cudaBoundaryModeTrap); 
# 3520
} 
#endif
# 3522 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uint2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3523
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3525
::exit(___);}
#if 0
# 3523
{ 
# 3524
__surf1DLayeredwriteu2(val, surf, x, layer, cudaBoundaryModeTrap); 
# 3525
} 
#endif
# 3527 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(int4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3528
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3530
::exit(___);}
#if 0
# 3528
{ 
# 3529
__surf1DLayeredwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, layer, cudaBoundaryModeTrap); 
# 3530
} 
#endif
# 3532 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uint4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3533
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3535
::exit(___);}
#if 0
# 3533
{ 
# 3534
__surf1DLayeredwriteu4(val, surf, x, layer, cudaBoundaryModeTrap); 
# 3535
} 
#endif
# 3537 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(long long val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3538
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3540
::exit(___);}
#if 0
# 3538
{ 
# 3539
__surf1DLayeredwritel1(make_ulonglong1((unsigned long long)val), surf, x, layer, cudaBoundaryModeTrap); 
# 3540
} 
#endif
# 3542 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(unsigned long long val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3543
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3545
::exit(___);}
#if 0
# 3543
{ 
# 3544
__surf1DLayeredwritel1(make_ulonglong1(val), surf, x, layer, cudaBoundaryModeTrap); 
# 3545
} 
#endif
# 3547 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(longlong1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3548
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3550
::exit(___);}
#if 0
# 3548
{ 
# 3549
__surf1DLayeredwritel1(make_ulonglong1((unsigned long long)(val.x)), surf, x, layer, cudaBoundaryModeTrap); 
# 3550
} 
#endif
# 3552 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ulonglong1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3553
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3555
::exit(___);}
#if 0
# 3553
{ 
# 3554
__surf1DLayeredwritel1(val, surf, x, layer, cudaBoundaryModeTrap); 
# 3555
} 
#endif
# 3557 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(longlong2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3558
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3560
::exit(___);}
#if 0
# 3558
{ 
# 3559
__surf1DLayeredwritel2(make_ulonglong2((unsigned long long)(val.x), (unsigned long long)(val.y)), surf, x, layer, cudaBoundaryModeTrap); 
# 3560
} 
#endif
# 3562 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ulonglong2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3563
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3565
::exit(___);}
#if 0
# 3563
{ 
# 3564
__surf1DLayeredwritel2(val, surf, x, layer, cudaBoundaryModeTrap); 
# 3565
} 
#endif
# 3611 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(float val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3612
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3614
::exit(___);}
#if 0
# 3612
{ 
# 3613
__surf1DLayeredwriteu1(make_uint1((unsigned)__float_as_int(val)), surf, x, layer, cudaBoundaryModeTrap); 
# 3614
} 
#endif
# 3616 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(float1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3617
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3619
::exit(___);}
#if 0
# 3617
{ 
# 3618
__surf1DLayeredwriteu1(make_uint1((unsigned)__float_as_int(val.x)), surf, x, layer, cudaBoundaryModeTrap); 
# 3619
} 
#endif
# 3621 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(float2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3622
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3624
::exit(___);}
#if 0
# 3622
{ 
# 3623
__surf1DLayeredwriteu2(make_uint2((unsigned)__float_as_int(val.x), __float_as_int((unsigned)(val.y))), surf, x, layer, cudaBoundaryModeTrap); 
# 3624
} 
#endif
# 3626 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(float4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3627
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 3629
::exit(___);}
#if 0
# 3627
{ 
# 3628
__surf1DLayeredwriteu4(make_uint4((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y), (unsigned)__float_as_int(val.z), (unsigned)__float_as_int(val.w)), surf, x, layer, cudaBoundaryModeTrap); 
# 3629
} 
#endif
# 3665 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 3666
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(T val, surface< void, 242>  surf, int x, int y, int layer, int s, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3667
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
# 3685
::exit(___);}
#if 0
# 3667
{ 
# 3668
union { 
# 3669
T val; 
# 3670
uchar1 c1; 
# 3671
ushort1 s1; 
# 3672
uint1 u1; 
# 3673
uint2 u2; 
# 3674
uint4 u4; 
# 3675
} tmp; 
# 3677
(tmp.val) = val; 
# 3679
(s == 1) ? ((void)__surf2DLayeredwritec1(tmp.c1, surf, x, y, layer, cudaBoundaryModeTrap)) : ((s == 2) ? ((void)__surf2DLayeredwrites1(tmp.s1, surf, x, y, layer, cudaBoundaryModeTrap)) : ((s == 4) ? ((void)__surf2DLayeredwriteu1(tmp.u1, surf, x, y, layer, cudaBoundaryModeTrap)) : ((s == 8) ? ((void)__surf2DLayeredwriteu2(tmp.u2, surf, x, y, layer, cudaBoundaryModeTrap)) : ((s == 16) ? ((void)__surf2DLayeredwriteu4(tmp.u4, surf, x, y, layer, cudaBoundaryModeTrap)) : ((void)0))))); 
# 3685
} 
#endif
# 3687 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 3688
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(T val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3689
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3691
::exit(___);}
#if 0
# 3689
{ ; 
# 3690
surf2DLayeredwrite(val, surf, x, y, layer, (int)sizeof(T), mode); 
# 3691
} 
#endif
# 3694 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(char val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3695
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3697
::exit(___);}
#if 0
# 3695
{ 
# 3696
__surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3697
} 
#endif
# 3699 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(signed char val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3700
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3702
::exit(___);}
#if 0
# 3700
{ 
# 3701
__surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3702
} 
#endif
# 3704 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(unsigned char val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3705
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3707
::exit(___);}
#if 0
# 3705
{ 
# 3706
__surf2DLayeredwritec1(make_uchar1(val), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3707
} 
#endif
# 3709 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(char1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3710
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3712
::exit(___);}
#if 0
# 3710
{ 
# 3711
__surf2DLayeredwritec1(make_uchar1((unsigned char)(val.x)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3712
} 
#endif
# 3714 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uchar1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3715
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3717
::exit(___);}
#if 0
# 3715
{ 
# 3716
__surf2DLayeredwritec1(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 3717
} 
#endif
# 3719 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(char2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3720
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3722
::exit(___);}
#if 0
# 3720
{ 
# 3721
__surf2DLayeredwritec2(make_uchar2((unsigned char)(val.x), (unsigned char)(val.y)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3722
} 
#endif
# 3724 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uchar2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3725
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3727
::exit(___);}
#if 0
# 3725
{ 
# 3726
__surf2DLayeredwritec2(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 3727
} 
#endif
# 3729 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(char4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3730
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3732
::exit(___);}
#if 0
# 3730
{ 
# 3731
__surf2DLayeredwritec4(make_uchar4((unsigned char)(val.x), (unsigned char)(val.y), (unsigned char)(val.z), (unsigned char)(val.w)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3732
} 
#endif
# 3734 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uchar4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3735
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3737
::exit(___);}
#if 0
# 3735
{ 
# 3736
__surf2DLayeredwritec4(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 3737
} 
#endif
# 3739 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(short val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3740
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3742
::exit(___);}
#if 0
# 3740
{ 
# 3741
__surf2DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3742
} 
#endif
# 3744 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(unsigned short val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3745
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3747
::exit(___);}
#if 0
# 3745
{ 
# 3746
__surf2DLayeredwrites1(make_ushort1(val), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3747
} 
#endif
# 3749 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(short1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3750
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3752
::exit(___);}
#if 0
# 3750
{ 
# 3751
__surf2DLayeredwrites1(make_ushort1((unsigned short)(val.x)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3752
} 
#endif
# 3754 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ushort1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3755
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3757
::exit(___);}
#if 0
# 3755
{ 
# 3756
__surf2DLayeredwrites1(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 3757
} 
#endif
# 3759 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(short2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3760
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3762
::exit(___);}
#if 0
# 3760
{ 
# 3761
__surf2DLayeredwrites2(make_ushort2((unsigned short)(val.x), (unsigned short)(val.y)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3762
} 
#endif
# 3764 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ushort2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3765
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3767
::exit(___);}
#if 0
# 3765
{ 
# 3766
__surf2DLayeredwrites2(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 3767
} 
#endif
# 3769 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(short4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3770
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3772
::exit(___);}
#if 0
# 3770
{ 
# 3771
__surf2DLayeredwrites4(make_ushort4((unsigned short)(val.x), (unsigned short)(val.y), (unsigned short)(val.z), (unsigned short)(val.w)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3772
} 
#endif
# 3774 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ushort4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3775
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3777
::exit(___);}
#if 0
# 3775
{ 
# 3776
__surf2DLayeredwrites4(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 3777
} 
#endif
# 3779 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(int val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3780
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3782
::exit(___);}
#if 0
# 3780
{ 
# 3781
__surf2DLayeredwriteu1(make_uint1((unsigned)val), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3782
} 
#endif
# 3784 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(unsigned val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3785
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3787
::exit(___);}
#if 0
# 3785
{ 
# 3786
__surf2DLayeredwriteu1(make_uint1(val), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3787
} 
#endif
# 3789 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(int1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3790
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3792
::exit(___);}
#if 0
# 3790
{ 
# 3791
__surf2DLayeredwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3792
} 
#endif
# 3794 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uint1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3795
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3797
::exit(___);}
#if 0
# 3795
{ 
# 3796
__surf2DLayeredwriteu1(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 3797
} 
#endif
# 3799 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(int2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3800
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3802
::exit(___);}
#if 0
# 3800
{ 
# 3801
__surf2DLayeredwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3802
} 
#endif
# 3804 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uint2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3805
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3807
::exit(___);}
#if 0
# 3805
{ 
# 3806
__surf2DLayeredwriteu2(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 3807
} 
#endif
# 3809 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(int4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3810
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3812
::exit(___);}
#if 0
# 3810
{ 
# 3811
__surf2DLayeredwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3812
} 
#endif
# 3814 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uint4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3815
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3817
::exit(___);}
#if 0
# 3815
{ 
# 3816
__surf2DLayeredwriteu4(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 3817
} 
#endif
# 3819 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(long long val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3820
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3822
::exit(___);}
#if 0
# 3820
{ 
# 3821
__surf2DLayeredwritel1(make_ulonglong1((unsigned long long)val), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3822
} 
#endif
# 3824 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(unsigned long long val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3825
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3827
::exit(___);}
#if 0
# 3825
{ 
# 3826
__surf2DLayeredwritel1(make_ulonglong1(val), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3827
} 
#endif
# 3829 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(longlong1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3830
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3832
::exit(___);}
#if 0
# 3830
{ 
# 3831
__surf2DLayeredwritel1(make_ulonglong1((unsigned long long)(val.x)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3832
} 
#endif
# 3834 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ulonglong1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3835
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3837
::exit(___);}
#if 0
# 3835
{ 
# 3836
__surf2DLayeredwritel1(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 3837
} 
#endif
# 3839 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(longlong2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3840
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3842
::exit(___);}
#if 0
# 3840
{ 
# 3841
__surf2DLayeredwritel2(make_ulonglong2((unsigned long long)(val.x), (unsigned long long)(val.y)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3842
} 
#endif
# 3844 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ulonglong2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3845
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3847
::exit(___);}
#if 0
# 3845
{ 
# 3846
__surf2DLayeredwritel2(val, surf, x, y, layer, cudaBoundaryModeTrap); 
# 3847
} 
#endif
# 3893 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(float val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3894
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3896
::exit(___);}
#if 0
# 3894
{ 
# 3895
__surf2DLayeredwriteu1(make_uint1((unsigned)__float_as_int(val)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3896
} 
#endif
# 3898 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(float1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3899
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3901
::exit(___);}
#if 0
# 3899
{ 
# 3900
__surf2DLayeredwriteu1(make_uint1((unsigned)__float_as_int(val.x)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3901
} 
#endif
# 3903 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(float2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3904
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3906
::exit(___);}
#if 0
# 3904
{ 
# 3905
__surf2DLayeredwriteu2(make_uint2((unsigned)__float_as_int(val.x), __float_as_int((unsigned)(val.y))), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3906
} 
#endif
# 3908 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(float4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3909
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 3911
::exit(___);}
#if 0
# 3909
{ 
# 3910
__surf2DLayeredwriteu4(make_uint4((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y), (unsigned)__float_as_int(val.z), (unsigned)__float_as_int(val.w)), surf, x, y, layer, cudaBoundaryModeTrap); 
# 3911
} 
#endif
# 3947 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 3948
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(T val, surface< void, 12>  surf, int x, int y, int face, int s, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3949
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
# 3967
::exit(___);}
#if 0
# 3949
{ 
# 3950
union { 
# 3951
T val; 
# 3952
uchar1 c1; 
# 3953
ushort1 s1; 
# 3954
uint1 u1; 
# 3955
uint2 u2; 
# 3956
uint4 u4; 
# 3957
} tmp; 
# 3959
(tmp.val) = val; 
# 3961
(s == 1) ? ((void)__surfCubemapwritec1(tmp.c1, surf, x, y, face, cudaBoundaryModeTrap)) : ((s == 2) ? ((void)__surfCubemapwrites1(tmp.s1, surf, x, y, face, cudaBoundaryModeTrap)) : ((s == 4) ? ((void)__surfCubemapwriteu1(tmp.u1, surf, x, y, face, cudaBoundaryModeTrap)) : ((s == 8) ? ((void)__surfCubemapwriteu2(tmp.u2, surf, x, y, face, cudaBoundaryModeTrap)) : ((s == 16) ? ((void)__surfCubemapwriteu4(tmp.u4, surf, x, y, face, cudaBoundaryModeTrap)) : ((void)0))))); 
# 3967
} 
#endif
# 3969 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 3970
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(T val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3971
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 3973
::exit(___);}
#if 0
# 3971
{ ; 
# 3972
surfCubemapwrite(val, surf, x, y, face, (int)sizeof(T), mode); 
# 3973
} 
#endif
# 3976 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(char val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3977
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 3979
::exit(___);}
#if 0
# 3977
{ 
# 3978
__surfCubemapwritec1(make_uchar1((unsigned char)val), surf, x, y, face, cudaBoundaryModeTrap); 
# 3979
} 
#endif
# 3981 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(signed char val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3982
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 3984
::exit(___);}
#if 0
# 3982
{ 
# 3983
__surfCubemapwritec1(make_uchar1((unsigned char)val), surf, x, y, face, cudaBoundaryModeTrap); 
# 3984
} 
#endif
# 3986 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(unsigned char val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3987
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 3989
::exit(___);}
#if 0
# 3987
{ 
# 3988
__surfCubemapwritec1(make_uchar1(val), surf, x, y, face, cudaBoundaryModeTrap); 
# 3989
} 
#endif
# 3991 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(char1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3992
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 3994
::exit(___);}
#if 0
# 3992
{ 
# 3993
__surfCubemapwritec1(make_uchar1((unsigned char)(val.x)), surf, x, y, face, cudaBoundaryModeTrap); 
# 3994
} 
#endif
# 3996 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uchar1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 3997
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 3999
::exit(___);}
#if 0
# 3997
{ 
# 3998
__surfCubemapwritec1(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 3999
} 
#endif
# 4001 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(char2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4002
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4004
::exit(___);}
#if 0
# 4002
{ 
# 4003
__surfCubemapwritec2(make_uchar2((unsigned char)(val.x), (unsigned char)(val.y)), surf, x, y, face, cudaBoundaryModeTrap); 
# 4004
} 
#endif
# 4006 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uchar2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4007
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4009
::exit(___);}
#if 0
# 4007
{ 
# 4008
__surfCubemapwritec2(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 4009
} 
#endif
# 4011 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(char4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4012
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4014
::exit(___);}
#if 0
# 4012
{ 
# 4013
__surfCubemapwritec4(make_uchar4((unsigned char)(val.x), (unsigned char)(val.y), (unsigned char)(val.z), (unsigned char)(val.w)), surf, x, y, face, cudaBoundaryModeTrap); 
# 4014
} 
#endif
# 4016 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uchar4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4017
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4019
::exit(___);}
#if 0
# 4017
{ 
# 4018
__surfCubemapwritec4(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 4019
} 
#endif
# 4021 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(short val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4022
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4024
::exit(___);}
#if 0
# 4022
{ 
# 4023
__surfCubemapwrites1(make_ushort1((unsigned short)val), surf, x, y, face, cudaBoundaryModeTrap); 
# 4024
} 
#endif
# 4026 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(unsigned short val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4027
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4029
::exit(___);}
#if 0
# 4027
{ 
# 4028
__surfCubemapwrites1(make_ushort1(val), surf, x, y, face, cudaBoundaryModeTrap); 
# 4029
} 
#endif
# 4031 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(short1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4032
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4034
::exit(___);}
#if 0
# 4032
{ 
# 4033
__surfCubemapwrites1(make_ushort1((unsigned short)(val.x)), surf, x, y, face, cudaBoundaryModeTrap); 
# 4034
} 
#endif
# 4036 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ushort1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4037
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4039
::exit(___);}
#if 0
# 4037
{ 
# 4038
__surfCubemapwrites1(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 4039
} 
#endif
# 4041 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(short2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4042
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4044
::exit(___);}
#if 0
# 4042
{ 
# 4043
__surfCubemapwrites2(make_ushort2((unsigned short)(val.x), (unsigned short)(val.y)), surf, x, y, face, cudaBoundaryModeTrap); 
# 4044
} 
#endif
# 4046 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ushort2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4047
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4049
::exit(___);}
#if 0
# 4047
{ 
# 4048
__surfCubemapwrites2(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 4049
} 
#endif
# 4051 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(short4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4052
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4054
::exit(___);}
#if 0
# 4052
{ 
# 4053
__surfCubemapwrites4(make_ushort4((unsigned short)(val.x), (unsigned short)(val.y), (unsigned short)(val.z), (unsigned short)(val.w)), surf, x, y, face, cudaBoundaryModeTrap); 
# 4054
} 
#endif
# 4056 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ushort4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4057
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4059
::exit(___);}
#if 0
# 4057
{ 
# 4058
__surfCubemapwrites4(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 4059
} 
#endif
# 4061 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(int val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4062
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4064
::exit(___);}
#if 0
# 4062
{ 
# 4063
__surfCubemapwriteu1(make_uint1((unsigned)val), surf, x, y, face, cudaBoundaryModeTrap); 
# 4064
} 
#endif
# 4066 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(unsigned val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4067
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4069
::exit(___);}
#if 0
# 4067
{ 
# 4068
__surfCubemapwriteu1(make_uint1(val), surf, x, y, face, cudaBoundaryModeTrap); 
# 4069
} 
#endif
# 4071 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(int1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4072
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4074
::exit(___);}
#if 0
# 4072
{ 
# 4073
__surfCubemapwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, face, cudaBoundaryModeTrap); 
# 4074
} 
#endif
# 4076 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uint1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4077
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4079
::exit(___);}
#if 0
# 4077
{ 
# 4078
__surfCubemapwriteu1(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 4079
} 
#endif
# 4081 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(int2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4082
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4084
::exit(___);}
#if 0
# 4082
{ 
# 4083
__surfCubemapwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, face, cudaBoundaryModeTrap); 
# 4084
} 
#endif
# 4086 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uint2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4087
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4089
::exit(___);}
#if 0
# 4087
{ 
# 4088
__surfCubemapwriteu2(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 4089
} 
#endif
# 4091 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(int4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4092
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4094
::exit(___);}
#if 0
# 4092
{ 
# 4093
__surfCubemapwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, face, cudaBoundaryModeTrap); 
# 4094
} 
#endif
# 4096 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uint4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4097
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4099
::exit(___);}
#if 0
# 4097
{ 
# 4098
__surfCubemapwriteu4(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 4099
} 
#endif
# 4101 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(long long val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4102
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4104
::exit(___);}
#if 0
# 4102
{ 
# 4103
__surfCubemapwritel1(make_ulonglong1((unsigned long long)val), surf, x, y, face, cudaBoundaryModeTrap); 
# 4104
} 
#endif
# 4106 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(unsigned long long val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4107
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4109
::exit(___);}
#if 0
# 4107
{ 
# 4108
__surfCubemapwritel1(make_ulonglong1(val), surf, x, y, face, cudaBoundaryModeTrap); 
# 4109
} 
#endif
# 4111 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(longlong1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4112
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4114
::exit(___);}
#if 0
# 4112
{ 
# 4113
__surfCubemapwritel1(make_ulonglong1((unsigned long long)(val.x)), surf, x, y, face, cudaBoundaryModeTrap); 
# 4114
} 
#endif
# 4116 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ulonglong1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4117
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4119
::exit(___);}
#if 0
# 4117
{ 
# 4118
__surfCubemapwritel1(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 4119
} 
#endif
# 4121 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(longlong2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4122
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4124
::exit(___);}
#if 0
# 4122
{ 
# 4123
__surfCubemapwritel2(make_ulonglong2((unsigned long long)(val.x), (unsigned long long)(val.y)), surf, x, y, face, cudaBoundaryModeTrap); 
# 4124
} 
#endif
# 4126 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ulonglong2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4127
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4129
::exit(___);}
#if 0
# 4127
{ 
# 4128
__surfCubemapwritel2(val, surf, x, y, face, cudaBoundaryModeTrap); 
# 4129
} 
#endif
# 4175 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(float val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4176
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4178
::exit(___);}
#if 0
# 4176
{ 
# 4177
__surfCubemapwriteu1(make_uint1((unsigned)__float_as_int(val)), surf, x, y, face, cudaBoundaryModeTrap); 
# 4178
} 
#endif
# 4180 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(float1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4181
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4183
::exit(___);}
#if 0
# 4181
{ 
# 4182
__surfCubemapwriteu1(make_uint1((unsigned)__float_as_int(val.x)), surf, x, y, face, cudaBoundaryModeTrap); 
# 4183
} 
#endif
# 4185 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(float2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4186
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4188
::exit(___);}
#if 0
# 4186
{ 
# 4187
__surfCubemapwriteu2(make_uint2((unsigned)__float_as_int(val.x), __float_as_int((unsigned)(val.y))), surf, x, y, face, cudaBoundaryModeTrap); 
# 4188
} 
#endif
# 4190 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(float4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4191
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 4193
::exit(___);}
#if 0
# 4191
{ 
# 4192
__surfCubemapwriteu4(make_uint4((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y), (unsigned)__float_as_int(val.z), (unsigned)__float_as_int(val.w)), surf, x, y, face, cudaBoundaryModeTrap); 
# 4193
} 
#endif
# 4229 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 4230
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(T val, surface< void, 252>  surf, int x, int y, int layerFace, int s, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4231
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
# 4249
::exit(___);}
#if 0
# 4231
{ 
# 4232
union { 
# 4233
T val; 
# 4234
uchar1 c1; 
# 4235
ushort1 s1; 
# 4236
uint1 u1; 
# 4237
uint2 u2; 
# 4238
uint4 u4; 
# 4239
} tmp; 
# 4241
(tmp.val) = val; 
# 4243
(s == 1) ? ((void)__surfCubemapLayeredwritec1(tmp.c1, surf, x, y, layerFace, cudaBoundaryModeTrap)) : ((s == 2) ? ((void)__surfCubemapLayeredwrites1(tmp.s1, surf, x, y, layerFace, cudaBoundaryModeTrap)) : ((s == 4) ? ((void)__surfCubemapLayeredwriteu1(tmp.u1, surf, x, y, layerFace, cudaBoundaryModeTrap)) : ((s == 8) ? ((void)__surfCubemapLayeredwriteu2(tmp.u2, surf, x, y, layerFace, cudaBoundaryModeTrap)) : ((s == 16) ? ((void)__surfCubemapLayeredwriteu4(tmp.u4, surf, x, y, layerFace, cudaBoundaryModeTrap)) : ((void)0))))); 
# 4249
} 
#endif
# 4251 "/usr/local/cuda-5.0/include/surface_functions.h"
template< class T> 
# 4252
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(T val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4253
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4255
::exit(___);}
#if 0
# 4253
{ ; 
# 4254
surfCubemapLayeredwrite(val, surf, x, y, layerFace, (int)sizeof(T), mode); 
# 4255
} 
#endif
# 4258 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(char val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4259
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4261
::exit(___);}
#if 0
# 4259
{ 
# 4260
__surfCubemapLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4261
} 
#endif
# 4263 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(signed char val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4264
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4266
::exit(___);}
#if 0
# 4264
{ 
# 4265
__surfCubemapLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4266
} 
#endif
# 4268 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(unsigned char val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4269
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4271
::exit(___);}
#if 0
# 4269
{ 
# 4270
__surfCubemapLayeredwritec1(make_uchar1(val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4271
} 
#endif
# 4273 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(char1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4274
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4276
::exit(___);}
#if 0
# 4274
{ 
# 4275
__surfCubemapLayeredwritec1(make_uchar1((unsigned char)(val.x)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4276
} 
#endif
# 4278 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uchar1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4279
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4281
::exit(___);}
#if 0
# 4279
{ 
# 4280
__surfCubemapLayeredwritec1(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4281
} 
#endif
# 4283 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(char2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4284
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4286
::exit(___);}
#if 0
# 4284
{ 
# 4285
__surfCubemapLayeredwritec2(make_uchar2((unsigned char)(val.x), (unsigned char)(val.y)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4286
} 
#endif
# 4288 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uchar2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4289
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4291
::exit(___);}
#if 0
# 4289
{ 
# 4290
__surfCubemapLayeredwritec2(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4291
} 
#endif
# 4293 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(char4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4294
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4296
::exit(___);}
#if 0
# 4294
{ 
# 4295
__surfCubemapLayeredwritec4(make_uchar4((unsigned char)(val.x), (unsigned char)(val.y), (unsigned char)(val.z), (unsigned char)(val.w)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4296
} 
#endif
# 4298 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uchar4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4299
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4301
::exit(___);}
#if 0
# 4299
{ 
# 4300
__surfCubemapLayeredwritec4(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4301
} 
#endif
# 4303 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(short val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4304
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4306
::exit(___);}
#if 0
# 4304
{ 
# 4305
__surfCubemapLayeredwrites1(make_ushort1((unsigned short)val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4306
} 
#endif
# 4308 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(unsigned short val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4309
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4311
::exit(___);}
#if 0
# 4309
{ 
# 4310
__surfCubemapLayeredwrites1(make_ushort1(val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4311
} 
#endif
# 4313 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(short1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4314
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4316
::exit(___);}
#if 0
# 4314
{ 
# 4315
__surfCubemapLayeredwrites1(make_ushort1((unsigned short)(val.x)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4316
} 
#endif
# 4318 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ushort1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4319
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4321
::exit(___);}
#if 0
# 4319
{ 
# 4320
__surfCubemapLayeredwrites1(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4321
} 
#endif
# 4323 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(short2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4324
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4326
::exit(___);}
#if 0
# 4324
{ 
# 4325
__surfCubemapLayeredwrites2(make_ushort2((unsigned short)(val.x), (unsigned short)(val.y)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4326
} 
#endif
# 4328 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ushort2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4329
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4331
::exit(___);}
#if 0
# 4329
{ 
# 4330
__surfCubemapLayeredwrites2(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4331
} 
#endif
# 4333 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(short4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4334
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4336
::exit(___);}
#if 0
# 4334
{ 
# 4335
__surfCubemapLayeredwrites4(make_ushort4((unsigned short)(val.x), (unsigned short)(val.y), (unsigned short)(val.z), (unsigned short)(val.w)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4336
} 
#endif
# 4338 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ushort4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4339
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4341
::exit(___);}
#if 0
# 4339
{ 
# 4340
__surfCubemapLayeredwrites4(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4341
} 
#endif
# 4343 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(int val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4344
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4346
::exit(___);}
#if 0
# 4344
{ 
# 4345
__surfCubemapLayeredwriteu1(make_uint1((unsigned)val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4346
} 
#endif
# 4348 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(unsigned val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4349
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4351
::exit(___);}
#if 0
# 4349
{ 
# 4350
__surfCubemapLayeredwriteu1(make_uint1(val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4351
} 
#endif
# 4353 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(int1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4354
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4356
::exit(___);}
#if 0
# 4354
{ 
# 4355
__surfCubemapLayeredwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4356
} 
#endif
# 4358 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uint1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4359
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4361
::exit(___);}
#if 0
# 4359
{ 
# 4360
__surfCubemapLayeredwriteu1(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4361
} 
#endif
# 4363 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(int2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4364
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4366
::exit(___);}
#if 0
# 4364
{ 
# 4365
__surfCubemapLayeredwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4366
} 
#endif
# 4368 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uint2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4369
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4371
::exit(___);}
#if 0
# 4369
{ 
# 4370
__surfCubemapLayeredwriteu2(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4371
} 
#endif
# 4373 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(int4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4374
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4376
::exit(___);}
#if 0
# 4374
{ 
# 4375
__surfCubemapLayeredwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4376
} 
#endif
# 4378 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uint4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4379
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4381
::exit(___);}
#if 0
# 4379
{ 
# 4380
__surfCubemapLayeredwriteu4(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4381
} 
#endif
# 4383 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(long long val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4384
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4386
::exit(___);}
#if 0
# 4384
{ 
# 4385
__surfCubemapLayeredwritel1(make_ulonglong1((unsigned long long)val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4386
} 
#endif
# 4388 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(unsigned long long val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4389
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4391
::exit(___);}
#if 0
# 4389
{ 
# 4390
__surfCubemapLayeredwritel1(make_ulonglong1(val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4391
} 
#endif
# 4393 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(longlong1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4394
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4396
::exit(___);}
#if 0
# 4394
{ 
# 4395
__surfCubemapLayeredwritel1(make_ulonglong1((unsigned long long)(val.x)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4396
} 
#endif
# 4398 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ulonglong1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4399
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4401
::exit(___);}
#if 0
# 4399
{ 
# 4400
__surfCubemapLayeredwritel1(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4401
} 
#endif
# 4403 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(longlong2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4404
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4406
::exit(___);}
#if 0
# 4404
{ 
# 4405
__surfCubemapLayeredwritel2(make_ulonglong2((unsigned long long)(val.x), (unsigned long long)(val.y)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4406
} 
#endif
# 4408 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ulonglong2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4409
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4411
::exit(___);}
#if 0
# 4409
{ 
# 4410
__surfCubemapLayeredwritel2(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4411
} 
#endif
# 4457 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(float val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4458
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4460
::exit(___);}
#if 0
# 4458
{ 
# 4459
__surfCubemapLayeredwriteu1(make_uint1((unsigned)__float_as_int(val)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4460
} 
#endif
# 4462 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(float1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4463
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4465
::exit(___);}
#if 0
# 4463
{ 
# 4464
__surfCubemapLayeredwriteu1(make_uint1((unsigned)__float_as_int(val.x)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4465
} 
#endif
# 4467 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(float2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4468
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4470
::exit(___);}
#if 0
# 4468
{ 
# 4469
__surfCubemapLayeredwriteu2(make_uint2((unsigned)__float_as_int(val.x), __float_as_int((unsigned)(val.y))), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4470
} 
#endif
# 4472 "/usr/local/cuda-5.0/include/surface_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(float4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = (cudaBoundaryModeTrap)) 
# 4473
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 4475
::exit(___);}
#if 0
# 4473
{ 
# 4474
__surfCubemapLayeredwriteu4(make_uint4((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y), (unsigned)__float_as_int(val.z), (unsigned)__float_as_int(val.w)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
# 4475
} 
#endif
# 96 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char tex1Dfetch(texture< char, 1, cudaReadModeElementType>  t, int x) 
# 97
{int volatile ___ = 1;(void)t;(void)x;
# 105
::exit(___);}
#if 0
# 97
{ 
# 101
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 104
return (char)(v.x); 
# 105
} 
#endif
# 107 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex1Dfetch(texture< signed char, 1, cudaReadModeElementType>  t, int x) 
# 108
{int volatile ___ = 1;(void)t;(void)x;
# 112
::exit(___);}
#if 0
# 108
{ 
# 109
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 111
return (signed char)(v.x); 
# 112
} 
#endif
# 114 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex1Dfetch(texture< unsigned char, 1, cudaReadModeElementType>  t, int x) 
# 115
{int volatile ___ = 1;(void)t;(void)x;
# 119
::exit(___);}
#if 0
# 115
{ 
# 116
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 118
return (unsigned char)(v.x); 
# 119
} 
#endif
# 121 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex1Dfetch(texture< char1, 1, cudaReadModeElementType>  t, int x) 
# 122
{int volatile ___ = 1;(void)t;(void)x;
# 126
::exit(___);}
#if 0
# 122
{ 
# 123
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 125
return make_char1(v.x); 
# 126
} 
#endif
# 128 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex1Dfetch(texture< uchar1, 1, cudaReadModeElementType>  t, int x) 
# 129
{int volatile ___ = 1;(void)t;(void)x;
# 133
::exit(___);}
#if 0
# 129
{ 
# 130
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 132
return make_uchar1(v.x); 
# 133
} 
#endif
# 135 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex1Dfetch(texture< char2, 1, cudaReadModeElementType>  t, int x) 
# 136
{int volatile ___ = 1;(void)t;(void)x;
# 140
::exit(___);}
#if 0
# 136
{ 
# 137
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 139
return make_char2(v.x, v.y); 
# 140
} 
#endif
# 142 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex1Dfetch(texture< uchar2, 1, cudaReadModeElementType>  t, int x) 
# 143
{int volatile ___ = 1;(void)t;(void)x;
# 147
::exit(___);}
#if 0
# 143
{ 
# 144
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 146
return make_uchar2(v.x, v.y); 
# 147
} 
#endif
# 149 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex1Dfetch(texture< char4, 1, cudaReadModeElementType>  t, int x) 
# 150
{int volatile ___ = 1;(void)t;(void)x;
# 154
::exit(___);}
#if 0
# 150
{ 
# 151
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 153
return make_char4(v.x, v.y, v.z, v.w); 
# 154
} 
#endif
# 156 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex1Dfetch(texture< uchar4, 1, cudaReadModeElementType>  t, int x) 
# 157
{int volatile ___ = 1;(void)t;(void)x;
# 161
::exit(___);}
#if 0
# 157
{ 
# 158
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 160
return make_uchar4(v.x, v.y, v.z, v.w); 
# 161
} 
#endif
# 169 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short tex1Dfetch(texture< short, 1, cudaReadModeElementType>  t, int x) 
# 170
{int volatile ___ = 1;(void)t;(void)x;
# 174
::exit(___);}
#if 0
# 170
{ 
# 171
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 173
return (short)(v.x); 
# 174
} 
#endif
# 176 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex1Dfetch(texture< unsigned short, 1, cudaReadModeElementType>  t, int x) 
# 177
{int volatile ___ = 1;(void)t;(void)x;
# 181
::exit(___);}
#if 0
# 177
{ 
# 178
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 180
return (unsigned short)(v.x); 
# 181
} 
#endif
# 183 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex1Dfetch(texture< short1, 1, cudaReadModeElementType>  t, int x) 
# 184
{int volatile ___ = 1;(void)t;(void)x;
# 188
::exit(___);}
#if 0
# 184
{ 
# 185
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 187
return make_short1(v.x); 
# 188
} 
#endif
# 190 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex1Dfetch(texture< ushort1, 1, cudaReadModeElementType>  t, int x) 
# 191
{int volatile ___ = 1;(void)t;(void)x;
# 195
::exit(___);}
#if 0
# 191
{ 
# 192
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 194
return make_ushort1(v.x); 
# 195
} 
#endif
# 197 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex1Dfetch(texture< short2, 1, cudaReadModeElementType>  t, int x) 
# 198
{int volatile ___ = 1;(void)t;(void)x;
# 202
::exit(___);}
#if 0
# 198
{ 
# 199
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 201
return make_short2(v.x, v.y); 
# 202
} 
#endif
# 204 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex1Dfetch(texture< ushort2, 1, cudaReadModeElementType>  t, int x) 
# 205
{int volatile ___ = 1;(void)t;(void)x;
# 209
::exit(___);}
#if 0
# 205
{ 
# 206
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 208
return make_ushort2(v.x, v.y); 
# 209
} 
#endif
# 211 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex1Dfetch(texture< short4, 1, cudaReadModeElementType>  t, int x) 
# 212
{int volatile ___ = 1;(void)t;(void)x;
# 216
::exit(___);}
#if 0
# 212
{ 
# 213
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 215
return make_short4(v.x, v.y, v.z, v.w); 
# 216
} 
#endif
# 218 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex1Dfetch(texture< ushort4, 1, cudaReadModeElementType>  t, int x) 
# 219
{int volatile ___ = 1;(void)t;(void)x;
# 223
::exit(___);}
#if 0
# 219
{ 
# 220
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 222
return make_ushort4(v.x, v.y, v.z, v.w); 
# 223
} 
#endif
# 231 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int tex1Dfetch(texture< int, 1, cudaReadModeElementType>  t, int x) 
# 232
{int volatile ___ = 1;(void)t;(void)x;
# 236
::exit(___);}
#if 0
# 232
{ 
# 233
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 235
return (int)(v.x); 
# 236
} 
#endif
# 238 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex1Dfetch(texture< unsigned, 1, cudaReadModeElementType>  t, int x) 
# 239
{int volatile ___ = 1;(void)t;(void)x;
# 243
::exit(___);}
#if 0
# 239
{ 
# 240
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 242
return (unsigned)(v.x); 
# 243
} 
#endif
# 245 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex1Dfetch(texture< int1, 1, cudaReadModeElementType>  t, int x) 
# 246
{int volatile ___ = 1;(void)t;(void)x;
# 250
::exit(___);}
#if 0
# 246
{ 
# 247
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 249
return make_int1(v.x); 
# 250
} 
#endif
# 252 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex1Dfetch(texture< uint1, 1, cudaReadModeElementType>  t, int x) 
# 253
{int volatile ___ = 1;(void)t;(void)x;
# 257
::exit(___);}
#if 0
# 253
{ 
# 254
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 256
return make_uint1(v.x); 
# 257
} 
#endif
# 259 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex1Dfetch(texture< int2, 1, cudaReadModeElementType>  t, int x) 
# 260
{int volatile ___ = 1;(void)t;(void)x;
# 264
::exit(___);}
#if 0
# 260
{ 
# 261
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 263
return make_int2(v.x, v.y); 
# 264
} 
#endif
# 266 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex1Dfetch(texture< uint2, 1, cudaReadModeElementType>  t, int x) 
# 267
{int volatile ___ = 1;(void)t;(void)x;
# 271
::exit(___);}
#if 0
# 267
{ 
# 268
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 270
return make_uint2(v.x, v.y); 
# 271
} 
#endif
# 273 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex1Dfetch(texture< int4, 1, cudaReadModeElementType>  t, int x) 
# 274
{int volatile ___ = 1;(void)t;(void)x;
# 278
::exit(___);}
#if 0
# 274
{ 
# 275
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 277
return make_int4(v.x, v.y, v.z, v.w); 
# 278
} 
#endif
# 280 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex1Dfetch(texture< uint4, 1, cudaReadModeElementType>  t, int x) 
# 281
{int volatile ___ = 1;(void)t;(void)x;
# 285
::exit(___);}
#if 0
# 281
{ 
# 282
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 284
return make_uint4(v.x, v.y, v.z, v.w); 
# 285
} 
#endif
# 359 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1Dfetch(texture< float, 1, cudaReadModeElementType>  t, int x) 
# 360
{int volatile ___ = 1;(void)t;(void)x;
# 364
::exit(___);}
#if 0
# 360
{ 
# 361
float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0)); 
# 363
return v.x; 
# 364
} 
#endif
# 366 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1Dfetch(texture< float1, 1, cudaReadModeElementType>  t, int x) 
# 367
{int volatile ___ = 1;(void)t;(void)x;
# 371
::exit(___);}
#if 0
# 367
{ 
# 368
float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0)); 
# 370
return make_float1(v.x); 
# 371
} 
#endif
# 373 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1Dfetch(texture< float2, 1, cudaReadModeElementType>  t, int x) 
# 374
{int volatile ___ = 1;(void)t;(void)x;
# 378
::exit(___);}
#if 0
# 374
{ 
# 375
float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0)); 
# 377
return make_float2(v.x, v.y); 
# 378
} 
#endif
# 380 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1Dfetch(texture< float4, 1, cudaReadModeElementType>  t, int x) 
# 381
{int volatile ___ = 1;(void)t;(void)x;
# 385
::exit(___);}
#if 0
# 381
{ 
# 382
float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0)); 
# 384
return make_float4(v.x, v.y, v.z, v.w); 
# 385
} 
#endif
# 393 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1Dfetch(texture< char, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 394
{int volatile ___ = 1;(void)t;(void)x;
# 403
::exit(___);}
#if 0
# 394
{ 
# 398
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 400
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 402
return w.x; 
# 403
} 
#endif
# 405 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1Dfetch(texture< signed char, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 406
{int volatile ___ = 1;(void)t;(void)x;
# 411
::exit(___);}
#if 0
# 406
{ 
# 407
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 408
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 410
return w.x; 
# 411
} 
#endif
# 413 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1Dfetch(texture< unsigned char, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 414
{int volatile ___ = 1;(void)t;(void)x;
# 419
::exit(___);}
#if 0
# 414
{ 
# 415
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 416
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 418
return w.x; 
# 419
} 
#endif
# 421 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1Dfetch(texture< char1, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 422
{int volatile ___ = 1;(void)t;(void)x;
# 427
::exit(___);}
#if 0
# 422
{ 
# 423
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 424
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 426
return make_float1(w.x); 
# 427
} 
#endif
# 429 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1Dfetch(texture< uchar1, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 430
{int volatile ___ = 1;(void)t;(void)x;
# 435
::exit(___);}
#if 0
# 430
{ 
# 431
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 432
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 434
return make_float1(w.x); 
# 435
} 
#endif
# 437 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1Dfetch(texture< char2, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 438
{int volatile ___ = 1;(void)t;(void)x;
# 443
::exit(___);}
#if 0
# 438
{ 
# 439
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 440
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 442
return make_float2(w.x, w.y); 
# 443
} 
#endif
# 445 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1Dfetch(texture< uchar2, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 446
{int volatile ___ = 1;(void)t;(void)x;
# 451
::exit(___);}
#if 0
# 446
{ 
# 447
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 448
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 450
return make_float2(w.x, w.y); 
# 451
} 
#endif
# 453 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1Dfetch(texture< char4, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 454
{int volatile ___ = 1;(void)t;(void)x;
# 459
::exit(___);}
#if 0
# 454
{ 
# 455
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 456
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 458
return make_float4(w.x, w.y, w.z, w.w); 
# 459
} 
#endif
# 461 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1Dfetch(texture< uchar4, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 462
{int volatile ___ = 1;(void)t;(void)x;
# 467
::exit(___);}
#if 0
# 462
{ 
# 463
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 464
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 466
return make_float4(w.x, w.y, w.z, w.w); 
# 467
} 
#endif
# 475 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1Dfetch(texture< short, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 476
{int volatile ___ = 1;(void)t;(void)x;
# 481
::exit(___);}
#if 0
# 476
{ 
# 477
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 478
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 480
return w.x; 
# 481
} 
#endif
# 483 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1Dfetch(texture< unsigned short, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 484
{int volatile ___ = 1;(void)t;(void)x;
# 489
::exit(___);}
#if 0
# 484
{ 
# 485
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 486
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 488
return w.x; 
# 489
} 
#endif
# 491 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1Dfetch(texture< short1, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 492
{int volatile ___ = 1;(void)t;(void)x;
# 497
::exit(___);}
#if 0
# 492
{ 
# 493
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 494
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 496
return make_float1(w.x); 
# 497
} 
#endif
# 499 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1Dfetch(texture< ushort1, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 500
{int volatile ___ = 1;(void)t;(void)x;
# 505
::exit(___);}
#if 0
# 500
{ 
# 501
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 502
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 504
return make_float1(w.x); 
# 505
} 
#endif
# 507 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1Dfetch(texture< short2, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 508
{int volatile ___ = 1;(void)t;(void)x;
# 513
::exit(___);}
#if 0
# 508
{ 
# 509
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 510
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 512
return make_float2(w.x, w.y); 
# 513
} 
#endif
# 515 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1Dfetch(texture< ushort2, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 516
{int volatile ___ = 1;(void)t;(void)x;
# 521
::exit(___);}
#if 0
# 516
{ 
# 517
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 518
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 520
return make_float2(w.x, w.y); 
# 521
} 
#endif
# 523 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1Dfetch(texture< short4, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 524
{int volatile ___ = 1;(void)t;(void)x;
# 529
::exit(___);}
#if 0
# 524
{ 
# 525
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
# 526
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 528
return make_float4(w.x, w.y, w.z, w.w); 
# 529
} 
#endif
# 531 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1Dfetch(texture< ushort4, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 532
{int volatile ___ = 1;(void)t;(void)x;
# 537
::exit(___);}
#if 0
# 532
{ 
# 533
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
# 534
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 536
return make_float4(w.x, w.y, w.z, w.w); 
# 537
} 
#endif
# 545 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char tex1D(texture< char, 1, cudaReadModeElementType>  t, float x) 
# 546
{int volatile ___ = 1;(void)t;(void)x;
# 554
::exit(___);}
#if 0
# 546
{ 
# 550
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 553
return (char)(v.x); 
# 554
} 
#endif
# 556 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex1D(texture< signed char, 1, cudaReadModeElementType>  t, float x) 
# 557
{int volatile ___ = 1;(void)t;(void)x;
# 561
::exit(___);}
#if 0
# 557
{ 
# 558
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 560
return (signed char)(v.x); 
# 561
} 
#endif
# 563 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex1D(texture< unsigned char, 1, cudaReadModeElementType>  t, float x) 
# 564
{int volatile ___ = 1;(void)t;(void)x;
# 568
::exit(___);}
#if 0
# 564
{ 
# 565
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 567
return (unsigned char)(v.x); 
# 568
} 
#endif
# 570 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex1D(texture< char1, 1, cudaReadModeElementType>  t, float x) 
# 571
{int volatile ___ = 1;(void)t;(void)x;
# 575
::exit(___);}
#if 0
# 571
{ 
# 572
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 574
return make_char1(v.x); 
# 575
} 
#endif
# 577 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex1D(texture< uchar1, 1, cudaReadModeElementType>  t, float x) 
# 578
{int volatile ___ = 1;(void)t;(void)x;
# 582
::exit(___);}
#if 0
# 578
{ 
# 579
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 581
return make_uchar1(v.x); 
# 582
} 
#endif
# 584 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex1D(texture< char2, 1, cudaReadModeElementType>  t, float x) 
# 585
{int volatile ___ = 1;(void)t;(void)x;
# 589
::exit(___);}
#if 0
# 585
{ 
# 586
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 588
return make_char2(v.x, v.y); 
# 589
} 
#endif
# 591 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex1D(texture< uchar2, 1, cudaReadModeElementType>  t, float x) 
# 592
{int volatile ___ = 1;(void)t;(void)x;
# 596
::exit(___);}
#if 0
# 592
{ 
# 593
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 595
return make_uchar2(v.x, v.y); 
# 596
} 
#endif
# 598 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex1D(texture< char4, 1, cudaReadModeElementType>  t, float x) 
# 599
{int volatile ___ = 1;(void)t;(void)x;
# 603
::exit(___);}
#if 0
# 599
{ 
# 600
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 602
return make_char4(v.x, v.y, v.z, v.w); 
# 603
} 
#endif
# 605 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex1D(texture< uchar4, 1, cudaReadModeElementType>  t, float x) 
# 606
{int volatile ___ = 1;(void)t;(void)x;
# 610
::exit(___);}
#if 0
# 606
{ 
# 607
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 609
return make_uchar4(v.x, v.y, v.z, v.w); 
# 610
} 
#endif
# 618 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short tex1D(texture< short, 1, cudaReadModeElementType>  t, float x) 
# 619
{int volatile ___ = 1;(void)t;(void)x;
# 623
::exit(___);}
#if 0
# 619
{ 
# 620
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 622
return (short)(v.x); 
# 623
} 
#endif
# 625 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex1D(texture< unsigned short, 1, cudaReadModeElementType>  t, float x) 
# 626
{int volatile ___ = 1;(void)t;(void)x;
# 630
::exit(___);}
#if 0
# 626
{ 
# 627
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 629
return (unsigned short)(v.x); 
# 630
} 
#endif
# 632 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex1D(texture< short1, 1, cudaReadModeElementType>  t, float x) 
# 633
{int volatile ___ = 1;(void)t;(void)x;
# 637
::exit(___);}
#if 0
# 633
{ 
# 634
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 636
return make_short1(v.x); 
# 637
} 
#endif
# 639 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex1D(texture< ushort1, 1, cudaReadModeElementType>  t, float x) 
# 640
{int volatile ___ = 1;(void)t;(void)x;
# 644
::exit(___);}
#if 0
# 640
{ 
# 641
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 643
return make_ushort1(v.x); 
# 644
} 
#endif
# 646 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex1D(texture< short2, 1, cudaReadModeElementType>  t, float x) 
# 647
{int volatile ___ = 1;(void)t;(void)x;
# 651
::exit(___);}
#if 0
# 647
{ 
# 648
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 650
return make_short2(v.x, v.y); 
# 651
} 
#endif
# 653 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex1D(texture< ushort2, 1, cudaReadModeElementType>  t, float x) 
# 654
{int volatile ___ = 1;(void)t;(void)x;
# 658
::exit(___);}
#if 0
# 654
{ 
# 655
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 657
return make_ushort2(v.x, v.y); 
# 658
} 
#endif
# 660 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex1D(texture< short4, 1, cudaReadModeElementType>  t, float x) 
# 661
{int volatile ___ = 1;(void)t;(void)x;
# 665
::exit(___);}
#if 0
# 661
{ 
# 662
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 664
return make_short4(v.x, v.y, v.z, v.w); 
# 665
} 
#endif
# 667 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex1D(texture< ushort4, 1, cudaReadModeElementType>  t, float x) 
# 668
{int volatile ___ = 1;(void)t;(void)x;
# 672
::exit(___);}
#if 0
# 668
{ 
# 669
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 671
return make_ushort4(v.x, v.y, v.z, v.w); 
# 672
} 
#endif
# 680 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int tex1D(texture< int, 1, cudaReadModeElementType>  t, float x) 
# 681
{int volatile ___ = 1;(void)t;(void)x;
# 685
::exit(___);}
#if 0
# 681
{ 
# 682
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 684
return (int)(v.x); 
# 685
} 
#endif
# 687 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex1D(texture< unsigned, 1, cudaReadModeElementType>  t, float x) 
# 688
{int volatile ___ = 1;(void)t;(void)x;
# 692
::exit(___);}
#if 0
# 688
{ 
# 689
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 691
return (unsigned)(v.x); 
# 692
} 
#endif
# 694 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex1D(texture< int1, 1, cudaReadModeElementType>  t, float x) 
# 695
{int volatile ___ = 1;(void)t;(void)x;
# 699
::exit(___);}
#if 0
# 695
{ 
# 696
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 698
return make_int1(v.x); 
# 699
} 
#endif
# 701 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex1D(texture< uint1, 1, cudaReadModeElementType>  t, float x) 
# 702
{int volatile ___ = 1;(void)t;(void)x;
# 706
::exit(___);}
#if 0
# 702
{ 
# 703
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 705
return make_uint1(v.x); 
# 706
} 
#endif
# 708 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex1D(texture< int2, 1, cudaReadModeElementType>  t, float x) 
# 709
{int volatile ___ = 1;(void)t;(void)x;
# 713
::exit(___);}
#if 0
# 709
{ 
# 710
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 712
return make_int2(v.x, v.y); 
# 713
} 
#endif
# 715 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex1D(texture< uint2, 1, cudaReadModeElementType>  t, float x) 
# 716
{int volatile ___ = 1;(void)t;(void)x;
# 720
::exit(___);}
#if 0
# 716
{ 
# 717
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 719
return make_uint2(v.x, v.y); 
# 720
} 
#endif
# 722 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex1D(texture< int4, 1, cudaReadModeElementType>  t, float x) 
# 723
{int volatile ___ = 1;(void)t;(void)x;
# 727
::exit(___);}
#if 0
# 723
{ 
# 724
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 726
return make_int4(v.x, v.y, v.z, v.w); 
# 727
} 
#endif
# 729 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex1D(texture< uint4, 1, cudaReadModeElementType>  t, float x) 
# 730
{int volatile ___ = 1;(void)t;(void)x;
# 734
::exit(___);}
#if 0
# 730
{ 
# 731
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 733
return make_uint4(v.x, v.y, v.z, v.w); 
# 734
} 
#endif
# 814 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1D(texture< float, 1, cudaReadModeElementType>  t, float x) 
# 815
{int volatile ___ = 1;(void)t;(void)x;
# 819
::exit(___);}
#if 0
# 815
{ 
# 816
float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0)); 
# 818
return v.x; 
# 819
} 
#endif
# 821 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1D(texture< float1, 1, cudaReadModeElementType>  t, float x) 
# 822
{int volatile ___ = 1;(void)t;(void)x;
# 826
::exit(___);}
#if 0
# 822
{ 
# 823
float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0)); 
# 825
return make_float1(v.x); 
# 826
} 
#endif
# 828 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1D(texture< float2, 1, cudaReadModeElementType>  t, float x) 
# 829
{int volatile ___ = 1;(void)t;(void)x;
# 833
::exit(___);}
#if 0
# 829
{ 
# 830
float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0)); 
# 832
return make_float2(v.x, v.y); 
# 833
} 
#endif
# 835 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1D(texture< float4, 1, cudaReadModeElementType>  t, float x) 
# 836
{int volatile ___ = 1;(void)t;(void)x;
# 840
::exit(___);}
#if 0
# 836
{ 
# 837
float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0)); 
# 839
return make_float4(v.x, v.y, v.z, v.w); 
# 840
} 
#endif
# 848 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1D(texture< char, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 849
{int volatile ___ = 1;(void)t;(void)x;
# 858
::exit(___);}
#if 0
# 849
{ 
# 853
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 855
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 857
return w.x; 
# 858
} 
#endif
# 860 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1D(texture< signed char, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 861
{int volatile ___ = 1;(void)t;(void)x;
# 866
::exit(___);}
#if 0
# 861
{ 
# 862
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 863
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 865
return w.x; 
# 866
} 
#endif
# 868 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1D(texture< unsigned char, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 869
{int volatile ___ = 1;(void)t;(void)x;
# 874
::exit(___);}
#if 0
# 869
{ 
# 870
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 871
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 873
return w.x; 
# 874
} 
#endif
# 876 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1D(texture< char1, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 877
{int volatile ___ = 1;(void)t;(void)x;
# 882
::exit(___);}
#if 0
# 877
{ 
# 878
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 879
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 881
return make_float1(w.x); 
# 882
} 
#endif
# 884 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1D(texture< uchar1, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 885
{int volatile ___ = 1;(void)t;(void)x;
# 890
::exit(___);}
#if 0
# 885
{ 
# 886
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 887
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 889
return make_float1(w.x); 
# 890
} 
#endif
# 892 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1D(texture< char2, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 893
{int volatile ___ = 1;(void)t;(void)x;
# 898
::exit(___);}
#if 0
# 893
{ 
# 894
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 895
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 897
return make_float2(w.x, w.y); 
# 898
} 
#endif
# 900 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1D(texture< uchar2, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 901
{int volatile ___ = 1;(void)t;(void)x;
# 906
::exit(___);}
#if 0
# 901
{ 
# 902
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 903
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 905
return make_float2(w.x, w.y); 
# 906
} 
#endif
# 908 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1D(texture< char4, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 909
{int volatile ___ = 1;(void)t;(void)x;
# 914
::exit(___);}
#if 0
# 909
{ 
# 910
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 911
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 913
return make_float4(w.x, w.y, w.z, w.w); 
# 914
} 
#endif
# 916 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1D(texture< uchar4, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 917
{int volatile ___ = 1;(void)t;(void)x;
# 922
::exit(___);}
#if 0
# 917
{ 
# 918
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 919
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 921
return make_float4(w.x, w.y, w.z, w.w); 
# 922
} 
#endif
# 930 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1D(texture< short, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 931
{int volatile ___ = 1;(void)t;(void)x;
# 936
::exit(___);}
#if 0
# 931
{ 
# 932
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 933
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 935
return w.x; 
# 936
} 
#endif
# 938 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1D(texture< unsigned short, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 939
{int volatile ___ = 1;(void)t;(void)x;
# 944
::exit(___);}
#if 0
# 939
{ 
# 940
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 941
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 943
return w.x; 
# 944
} 
#endif
# 946 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1D(texture< short1, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 947
{int volatile ___ = 1;(void)t;(void)x;
# 952
::exit(___);}
#if 0
# 947
{ 
# 948
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 949
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 951
return make_float1(w.x); 
# 952
} 
#endif
# 954 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1D(texture< ushort1, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 955
{int volatile ___ = 1;(void)t;(void)x;
# 960
::exit(___);}
#if 0
# 955
{ 
# 956
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 957
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 959
return make_float1(w.x); 
# 960
} 
#endif
# 962 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1D(texture< short2, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 963
{int volatile ___ = 1;(void)t;(void)x;
# 968
::exit(___);}
#if 0
# 963
{ 
# 964
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 965
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 967
return make_float2(w.x, w.y); 
# 968
} 
#endif
# 970 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1D(texture< ushort2, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 971
{int volatile ___ = 1;(void)t;(void)x;
# 976
::exit(___);}
#if 0
# 971
{ 
# 972
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 973
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 975
return make_float2(w.x, w.y); 
# 976
} 
#endif
# 978 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1D(texture< short4, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 979
{int volatile ___ = 1;(void)t;(void)x;
# 984
::exit(___);}
#if 0
# 979
{ 
# 980
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
# 981
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 983
return make_float4(w.x, w.y, w.z, w.w); 
# 984
} 
#endif
# 986 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1D(texture< ushort4, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 987
{int volatile ___ = 1;(void)t;(void)x;
# 992
::exit(___);}
#if 0
# 987
{ 
# 988
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
# 989
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 991
return make_float4(w.x, w.y, w.z, w.w); 
# 992
} 
#endif
# 1000 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char tex2D(texture< char, 2, cudaReadModeElementType>  t, float x, float y) 
# 1001
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1009
::exit(___);}
#if 0
# 1001
{ 
# 1005
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1008
return (char)(v.x); 
# 1009
} 
#endif
# 1011 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex2D(texture< signed char, 2, cudaReadModeElementType>  t, float x, float y) 
# 1012
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1016
::exit(___);}
#if 0
# 1012
{ 
# 1013
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1015
return (signed char)(v.x); 
# 1016
} 
#endif
# 1018 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex2D(texture< unsigned char, 2, cudaReadModeElementType>  t, float x, float y) 
# 1019
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1023
::exit(___);}
#if 0
# 1019
{ 
# 1020
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1022
return (unsigned char)(v.x); 
# 1023
} 
#endif
# 1025 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex2D(texture< char1, 2, cudaReadModeElementType>  t, float x, float y) 
# 1026
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1030
::exit(___);}
#if 0
# 1026
{ 
# 1027
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1029
return make_char1(v.x); 
# 1030
} 
#endif
# 1032 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex2D(texture< uchar1, 2, cudaReadModeElementType>  t, float x, float y) 
# 1033
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1037
::exit(___);}
#if 0
# 1033
{ 
# 1034
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1036
return make_uchar1(v.x); 
# 1037
} 
#endif
# 1039 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex2D(texture< char2, 2, cudaReadModeElementType>  t, float x, float y) 
# 1040
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1044
::exit(___);}
#if 0
# 1040
{ 
# 1041
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1043
return make_char2(v.x, v.y); 
# 1044
} 
#endif
# 1046 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex2D(texture< uchar2, 2, cudaReadModeElementType>  t, float x, float y) 
# 1047
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1051
::exit(___);}
#if 0
# 1047
{ 
# 1048
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1050
return make_uchar2(v.x, v.y); 
# 1051
} 
#endif
# 1053 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2D(texture< char4, 2, cudaReadModeElementType>  t, float x, float y) 
# 1054
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1058
::exit(___);}
#if 0
# 1054
{ 
# 1055
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1057
return make_char4(v.x, v.y, v.z, v.w); 
# 1058
} 
#endif
# 1060 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2D(texture< uchar4, 2, cudaReadModeElementType>  t, float x, float y) 
# 1061
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1065
::exit(___);}
#if 0
# 1061
{ 
# 1062
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1064
return make_uchar4(v.x, v.y, v.z, v.w); 
# 1065
} 
#endif
# 1073 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short tex2D(texture< short, 2, cudaReadModeElementType>  t, float x, float y) 
# 1074
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1078
::exit(___);}
#if 0
# 1074
{ 
# 1075
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1077
return (short)(v.x); 
# 1078
} 
#endif
# 1080 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex2D(texture< unsigned short, 2, cudaReadModeElementType>  t, float x, float y) 
# 1081
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1085
::exit(___);}
#if 0
# 1081
{ 
# 1082
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1084
return (unsigned short)(v.x); 
# 1085
} 
#endif
# 1087 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex2D(texture< short1, 2, cudaReadModeElementType>  t, float x, float y) 
# 1088
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1092
::exit(___);}
#if 0
# 1088
{ 
# 1089
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1091
return make_short1(v.x); 
# 1092
} 
#endif
# 1094 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex2D(texture< ushort1, 2, cudaReadModeElementType>  t, float x, float y) 
# 1095
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1099
::exit(___);}
#if 0
# 1095
{ 
# 1096
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1098
return make_ushort1(v.x); 
# 1099
} 
#endif
# 1101 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex2D(texture< short2, 2, cudaReadModeElementType>  t, float x, float y) 
# 1102
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1106
::exit(___);}
#if 0
# 1102
{ 
# 1103
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1105
return make_short2(v.x, v.y); 
# 1106
} 
#endif
# 1108 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex2D(texture< ushort2, 2, cudaReadModeElementType>  t, float x, float y) 
# 1109
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1113
::exit(___);}
#if 0
# 1109
{ 
# 1110
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1112
return make_ushort2(v.x, v.y); 
# 1113
} 
#endif
# 1115 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2D(texture< short4, 2, cudaReadModeElementType>  t, float x, float y) 
# 1116
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1120
::exit(___);}
#if 0
# 1116
{ 
# 1117
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1119
return make_short4(v.x, v.y, v.z, v.w); 
# 1120
} 
#endif
# 1122 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2D(texture< ushort4, 2, cudaReadModeElementType>  t, float x, float y) 
# 1123
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1127
::exit(___);}
#if 0
# 1123
{ 
# 1124
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1126
return make_ushort4(v.x, v.y, v.z, v.w); 
# 1127
} 
#endif
# 1135 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int tex2D(texture< int, 2, cudaReadModeElementType>  t, float x, float y) 
# 1136
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1140
::exit(___);}
#if 0
# 1136
{ 
# 1137
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1139
return (int)(v.x); 
# 1140
} 
#endif
# 1142 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex2D(texture< unsigned, 2, cudaReadModeElementType>  t, float x, float y) 
# 1143
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1147
::exit(___);}
#if 0
# 1143
{ 
# 1144
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1146
return (unsigned)(v.x); 
# 1147
} 
#endif
# 1149 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex2D(texture< int1, 2, cudaReadModeElementType>  t, float x, float y) 
# 1150
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1154
::exit(___);}
#if 0
# 1150
{ 
# 1151
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1153
return make_int1(v.x); 
# 1154
} 
#endif
# 1156 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex2D(texture< uint1, 2, cudaReadModeElementType>  t, float x, float y) 
# 1157
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1161
::exit(___);}
#if 0
# 1157
{ 
# 1158
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1160
return make_uint1(v.x); 
# 1161
} 
#endif
# 1163 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex2D(texture< int2, 2, cudaReadModeElementType>  t, float x, float y) 
# 1164
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1168
::exit(___);}
#if 0
# 1164
{ 
# 1165
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1167
return make_int2(v.x, v.y); 
# 1168
} 
#endif
# 1170 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex2D(texture< uint2, 2, cudaReadModeElementType>  t, float x, float y) 
# 1171
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1175
::exit(___);}
#if 0
# 1171
{ 
# 1172
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1174
return make_uint2(v.x, v.y); 
# 1175
} 
#endif
# 1177 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2D(texture< int4, 2, cudaReadModeElementType>  t, float x, float y) 
# 1178
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1182
::exit(___);}
#if 0
# 1178
{ 
# 1179
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1181
return make_int4(v.x, v.y, v.z, v.w); 
# 1182
} 
#endif
# 1184 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2D(texture< uint4, 2, cudaReadModeElementType>  t, float x, float y) 
# 1185
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1189
::exit(___);}
#if 0
# 1185
{ 
# 1186
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1188
return make_uint4(v.x, v.y, v.z, v.w); 
# 1189
} 
#endif
# 1263 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2D(texture< float, 2, cudaReadModeElementType>  t, float x, float y) 
# 1264
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1268
::exit(___);}
#if 0
# 1264
{ 
# 1265
float4 v = __ftexfetch(t, make_float4(x, y, 0, 0)); 
# 1267
return v.x; 
# 1268
} 
#endif
# 1270 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2D(texture< float1, 2, cudaReadModeElementType>  t, float x, float y) 
# 1271
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1275
::exit(___);}
#if 0
# 1271
{ 
# 1272
float4 v = __ftexfetch(t, make_float4(x, y, 0, 0)); 
# 1274
return make_float1(v.x); 
# 1275
} 
#endif
# 1277 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2D(texture< float2, 2, cudaReadModeElementType>  t, float x, float y) 
# 1278
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1282
::exit(___);}
#if 0
# 1278
{ 
# 1279
float4 v = __ftexfetch(t, make_float4(x, y, 0, 0)); 
# 1281
return make_float2(v.x, v.y); 
# 1282
} 
#endif
# 1284 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2D(texture< float4, 2, cudaReadModeElementType>  t, float x, float y) 
# 1285
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1289
::exit(___);}
#if 0
# 1285
{ 
# 1286
float4 v = __ftexfetch(t, make_float4(x, y, 0, 0)); 
# 1288
return make_float4(v.x, v.y, v.z, v.w); 
# 1289
} 
#endif
# 1297 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2D(texture< char, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1298
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1307
::exit(___);}
#if 0
# 1298
{ 
# 1302
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1304
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1306
return w.x; 
# 1307
} 
#endif
# 1309 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2D(texture< signed char, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1310
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1315
::exit(___);}
#if 0
# 1310
{ 
# 1311
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1312
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1314
return w.x; 
# 1315
} 
#endif
# 1317 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2D(texture< unsigned char, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1318
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1323
::exit(___);}
#if 0
# 1318
{ 
# 1319
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1320
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1322
return w.x; 
# 1323
} 
#endif
# 1325 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2D(texture< char1, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1326
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1331
::exit(___);}
#if 0
# 1326
{ 
# 1327
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1328
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1330
return make_float1(w.x); 
# 1331
} 
#endif
# 1333 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2D(texture< uchar1, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1334
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1339
::exit(___);}
#if 0
# 1334
{ 
# 1335
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1336
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1338
return make_float1(w.x); 
# 1339
} 
#endif
# 1341 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2D(texture< char2, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1342
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1347
::exit(___);}
#if 0
# 1342
{ 
# 1343
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1344
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1346
return make_float2(w.x, w.y); 
# 1347
} 
#endif
# 1349 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2D(texture< uchar2, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1350
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1355
::exit(___);}
#if 0
# 1350
{ 
# 1351
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1352
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1354
return make_float2(w.x, w.y); 
# 1355
} 
#endif
# 1357 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2D(texture< char4, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1358
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1363
::exit(___);}
#if 0
# 1358
{ 
# 1359
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1360
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1362
return make_float4(w.x, w.y, w.z, w.w); 
# 1363
} 
#endif
# 1365 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2D(texture< uchar4, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1366
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1371
::exit(___);}
#if 0
# 1366
{ 
# 1367
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1368
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1370
return make_float4(w.x, w.y, w.z, w.w); 
# 1371
} 
#endif
# 1379 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2D(texture< short, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1380
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1385
::exit(___);}
#if 0
# 1380
{ 
# 1381
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1382
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1384
return w.x; 
# 1385
} 
#endif
# 1387 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2D(texture< unsigned short, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1388
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1393
::exit(___);}
#if 0
# 1388
{ 
# 1389
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1390
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1392
return w.x; 
# 1393
} 
#endif
# 1395 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2D(texture< short1, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1396
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1401
::exit(___);}
#if 0
# 1396
{ 
# 1397
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1398
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1400
return make_float1(w.x); 
# 1401
} 
#endif
# 1403 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2D(texture< ushort1, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1404
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1409
::exit(___);}
#if 0
# 1404
{ 
# 1405
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1406
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1408
return make_float1(w.x); 
# 1409
} 
#endif
# 1411 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2D(texture< short2, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1412
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1417
::exit(___);}
#if 0
# 1412
{ 
# 1413
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1414
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1416
return make_float2(w.x, w.y); 
# 1417
} 
#endif
# 1419 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2D(texture< ushort2, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1420
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1425
::exit(___);}
#if 0
# 1420
{ 
# 1421
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1422
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1424
return make_float2(w.x, w.y); 
# 1425
} 
#endif
# 1427 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2D(texture< short4, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1428
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1433
::exit(___);}
#if 0
# 1428
{ 
# 1429
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
# 1430
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1432
return make_float4(w.x, w.y, w.z, w.w); 
# 1433
} 
#endif
# 1435 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2D(texture< ushort4, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 1436
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 1441
::exit(___);}
#if 0
# 1436
{ 
# 1437
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
# 1438
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1440
return make_float4(w.x, w.y, w.z, w.w); 
# 1441
} 
#endif
# 1449 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char tex1DLayered(texture< char, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1450
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1458
::exit(___);}
#if 0
# 1450
{ 
# 1454
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1457
return (char)(v.x); 
# 1458
} 
#endif
# 1460 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex1DLayered(texture< signed char, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1461
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1465
::exit(___);}
#if 0
# 1461
{ 
# 1462
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1464
return (signed char)(v.x); 
# 1465
} 
#endif
# 1467 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex1DLayered(texture< unsigned char, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1468
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1472
::exit(___);}
#if 0
# 1468
{ 
# 1469
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1471
return (unsigned char)(v.x); 
# 1472
} 
#endif
# 1474 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex1DLayered(texture< char1, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1475
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1479
::exit(___);}
#if 0
# 1475
{ 
# 1476
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1478
return make_char1(v.x); 
# 1479
} 
#endif
# 1481 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex1DLayered(texture< uchar1, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1482
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1486
::exit(___);}
#if 0
# 1482
{ 
# 1483
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1485
return make_uchar1(v.x); 
# 1486
} 
#endif
# 1488 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex1DLayered(texture< char2, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1489
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1493
::exit(___);}
#if 0
# 1489
{ 
# 1490
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1492
return make_char2(v.x, v.y); 
# 1493
} 
#endif
# 1495 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex1DLayered(texture< uchar2, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1496
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1500
::exit(___);}
#if 0
# 1496
{ 
# 1497
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1499
return make_uchar2(v.x, v.y); 
# 1500
} 
#endif
# 1502 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex1DLayered(texture< char4, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1503
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1507
::exit(___);}
#if 0
# 1503
{ 
# 1504
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1506
return make_char4(v.x, v.y, v.z, v.w); 
# 1507
} 
#endif
# 1509 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex1DLayered(texture< uchar4, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1510
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1514
::exit(___);}
#if 0
# 1510
{ 
# 1511
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1513
return make_uchar4(v.x, v.y, v.z, v.w); 
# 1514
} 
#endif
# 1522 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short tex1DLayered(texture< short, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1523
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1527
::exit(___);}
#if 0
# 1523
{ 
# 1524
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1526
return (short)(v.x); 
# 1527
} 
#endif
# 1529 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex1DLayered(texture< unsigned short, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1530
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1534
::exit(___);}
#if 0
# 1530
{ 
# 1531
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1533
return (unsigned short)(v.x); 
# 1534
} 
#endif
# 1536 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex1DLayered(texture< short1, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1537
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1541
::exit(___);}
#if 0
# 1537
{ 
# 1538
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1540
return make_short1(v.x); 
# 1541
} 
#endif
# 1543 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex1DLayered(texture< ushort1, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1544
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1548
::exit(___);}
#if 0
# 1544
{ 
# 1545
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1547
return make_ushort1(v.x); 
# 1548
} 
#endif
# 1550 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex1DLayered(texture< short2, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1551
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1555
::exit(___);}
#if 0
# 1551
{ 
# 1552
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1554
return make_short2(v.x, v.y); 
# 1555
} 
#endif
# 1557 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex1DLayered(texture< ushort2, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1558
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1562
::exit(___);}
#if 0
# 1558
{ 
# 1559
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1561
return make_ushort2(v.x, v.y); 
# 1562
} 
#endif
# 1564 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex1DLayered(texture< short4, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1565
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1569
::exit(___);}
#if 0
# 1565
{ 
# 1566
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1568
return make_short4(v.x, v.y, v.z, v.w); 
# 1569
} 
#endif
# 1571 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex1DLayered(texture< ushort4, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1572
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1576
::exit(___);}
#if 0
# 1572
{ 
# 1573
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1575
return make_ushort4(v.x, v.y, v.z, v.w); 
# 1576
} 
#endif
# 1584 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int tex1DLayered(texture< int, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1585
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1589
::exit(___);}
#if 0
# 1585
{ 
# 1586
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1588
return (int)(v.x); 
# 1589
} 
#endif
# 1591 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex1DLayered(texture< unsigned, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1592
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1596
::exit(___);}
#if 0
# 1592
{ 
# 1593
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1595
return (unsigned)(v.x); 
# 1596
} 
#endif
# 1598 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex1DLayered(texture< int1, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1599
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1603
::exit(___);}
#if 0
# 1599
{ 
# 1600
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1602
return make_int1(v.x); 
# 1603
} 
#endif
# 1605 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex1DLayered(texture< uint1, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1606
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1610
::exit(___);}
#if 0
# 1606
{ 
# 1607
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1609
return make_uint1(v.x); 
# 1610
} 
#endif
# 1612 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex1DLayered(texture< int2, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1613
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1617
::exit(___);}
#if 0
# 1613
{ 
# 1614
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1616
return make_int2(v.x, v.y); 
# 1617
} 
#endif
# 1619 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex1DLayered(texture< uint2, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1620
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1624
::exit(___);}
#if 0
# 1620
{ 
# 1621
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1623
return make_uint2(v.x, v.y); 
# 1624
} 
#endif
# 1626 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex1DLayered(texture< int4, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1627
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1631
::exit(___);}
#if 0
# 1627
{ 
# 1628
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1630
return make_int4(v.x, v.y, v.z, v.w); 
# 1631
} 
#endif
# 1633 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex1DLayered(texture< uint4, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1634
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1638
::exit(___);}
#if 0
# 1634
{ 
# 1635
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1637
return make_uint4(v.x, v.y, v.z, v.w); 
# 1638
} 
#endif
# 1712 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayered(texture< float, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1713
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1717
::exit(___);}
#if 0
# 1713
{ 
# 1714
float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1716
return v.x; 
# 1717
} 
#endif
# 1719 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayered(texture< float1, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1720
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1724
::exit(___);}
#if 0
# 1720
{ 
# 1721
float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1723
return make_float1(v.x); 
# 1724
} 
#endif
# 1726 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayered(texture< float2, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1727
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1731
::exit(___);}
#if 0
# 1727
{ 
# 1728
float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1730
return make_float2(v.x, v.y); 
# 1731
} 
#endif
# 1733 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayered(texture< float4, 241, cudaReadModeElementType>  t, float x, int layer) 
# 1734
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1738
::exit(___);}
#if 0
# 1734
{ 
# 1735
float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1737
return make_float4(v.x, v.y, v.z, v.w); 
# 1738
} 
#endif
# 1746 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayered(texture< char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1747
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1756
::exit(___);}
#if 0
# 1747
{ 
# 1751
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1753
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1755
return w.x; 
# 1756
} 
#endif
# 1758 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayered(texture< signed char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1759
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1764
::exit(___);}
#if 0
# 1759
{ 
# 1760
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1761
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1763
return w.x; 
# 1764
} 
#endif
# 1766 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayered(texture< unsigned char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1767
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1772
::exit(___);}
#if 0
# 1767
{ 
# 1768
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1769
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1771
return w.x; 
# 1772
} 
#endif
# 1774 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayered(texture< char1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1775
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1780
::exit(___);}
#if 0
# 1775
{ 
# 1776
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1777
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1779
return make_float1(w.x); 
# 1780
} 
#endif
# 1782 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayered(texture< uchar1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1783
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1788
::exit(___);}
#if 0
# 1783
{ 
# 1784
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1785
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1787
return make_float1(w.x); 
# 1788
} 
#endif
# 1790 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayered(texture< char2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1791
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1796
::exit(___);}
#if 0
# 1791
{ 
# 1792
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1793
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1795
return make_float2(w.x, w.y); 
# 1796
} 
#endif
# 1798 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayered(texture< uchar2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1799
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1804
::exit(___);}
#if 0
# 1799
{ 
# 1800
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1801
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1803
return make_float2(w.x, w.y); 
# 1804
} 
#endif
# 1806 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayered(texture< char4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1807
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1812
::exit(___);}
#if 0
# 1807
{ 
# 1808
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1809
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1811
return make_float4(w.x, w.y, w.z, w.w); 
# 1812
} 
#endif
# 1814 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayered(texture< uchar4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1815
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1820
::exit(___);}
#if 0
# 1815
{ 
# 1816
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1817
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1819
return make_float4(w.x, w.y, w.z, w.w); 
# 1820
} 
#endif
# 1828 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayered(texture< short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1829
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1834
::exit(___);}
#if 0
# 1829
{ 
# 1830
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1831
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1833
return w.x; 
# 1834
} 
#endif
# 1836 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayered(texture< unsigned short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1837
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1842
::exit(___);}
#if 0
# 1837
{ 
# 1838
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1839
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1841
return w.x; 
# 1842
} 
#endif
# 1844 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayered(texture< short1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1845
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1850
::exit(___);}
#if 0
# 1845
{ 
# 1846
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1847
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1849
return make_float1(w.x); 
# 1850
} 
#endif
# 1852 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayered(texture< ushort1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1853
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1858
::exit(___);}
#if 0
# 1853
{ 
# 1854
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1855
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1857
return make_float1(w.x); 
# 1858
} 
#endif
# 1860 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayered(texture< short2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1861
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1866
::exit(___);}
#if 0
# 1861
{ 
# 1862
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1863
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1865
return make_float2(w.x, w.y); 
# 1866
} 
#endif
# 1868 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayered(texture< ushort2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1869
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1874
::exit(___);}
#if 0
# 1869
{ 
# 1870
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1871
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1873
return make_float2(w.x, w.y); 
# 1874
} 
#endif
# 1876 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayered(texture< short4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1877
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1882
::exit(___);}
#if 0
# 1877
{ 
# 1878
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1879
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1881
return make_float4(w.x, w.y, w.z, w.w); 
# 1882
} 
#endif
# 1884 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayered(texture< ushort4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 1885
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 1890
::exit(___);}
#if 0
# 1885
{ 
# 1886
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
# 1887
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 1889
return make_float4(w.x, w.y, w.z, w.w); 
# 1890
} 
#endif
# 1898 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char tex2DLayered(texture< char, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1899
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1907
::exit(___);}
#if 0
# 1899
{ 
# 1903
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1906
return (char)(v.x); 
# 1907
} 
#endif
# 1909 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex2DLayered(texture< signed char, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1910
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1914
::exit(___);}
#if 0
# 1910
{ 
# 1911
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1913
return (signed char)(v.x); 
# 1914
} 
#endif
# 1916 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex2DLayered(texture< unsigned char, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1917
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1921
::exit(___);}
#if 0
# 1917
{ 
# 1918
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1920
return (unsigned char)(v.x); 
# 1921
} 
#endif
# 1923 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex2DLayered(texture< char1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1924
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1928
::exit(___);}
#if 0
# 1924
{ 
# 1925
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1927
return make_char1(v.x); 
# 1928
} 
#endif
# 1930 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex2DLayered(texture< uchar1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1931
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1935
::exit(___);}
#if 0
# 1931
{ 
# 1932
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1934
return make_uchar1(v.x); 
# 1935
} 
#endif
# 1937 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex2DLayered(texture< char2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1938
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1942
::exit(___);}
#if 0
# 1938
{ 
# 1939
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1941
return make_char2(v.x, v.y); 
# 1942
} 
#endif
# 1944 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex2DLayered(texture< uchar2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1945
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1949
::exit(___);}
#if 0
# 1945
{ 
# 1946
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1948
return make_uchar2(v.x, v.y); 
# 1949
} 
#endif
# 1951 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2DLayered(texture< char4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1952
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1956
::exit(___);}
#if 0
# 1952
{ 
# 1953
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1955
return make_char4(v.x, v.y, v.z, v.w); 
# 1956
} 
#endif
# 1958 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2DLayered(texture< uchar4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1959
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1963
::exit(___);}
#if 0
# 1959
{ 
# 1960
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1962
return make_uchar4(v.x, v.y, v.z, v.w); 
# 1963
} 
#endif
# 1971 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short tex2DLayered(texture< short, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1972
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1976
::exit(___);}
#if 0
# 1972
{ 
# 1973
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1975
return (short)(v.x); 
# 1976
} 
#endif
# 1978 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex2DLayered(texture< unsigned short, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1979
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1983
::exit(___);}
#if 0
# 1979
{ 
# 1980
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1982
return (unsigned short)(v.x); 
# 1983
} 
#endif
# 1985 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex2DLayered(texture< short1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1986
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1990
::exit(___);}
#if 0
# 1986
{ 
# 1987
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1989
return make_short1(v.x); 
# 1990
} 
#endif
# 1992 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex2DLayered(texture< ushort1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 1993
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 1997
::exit(___);}
#if 0
# 1993
{ 
# 1994
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 1996
return make_ushort1(v.x); 
# 1997
} 
#endif
# 1999 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex2DLayered(texture< short2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2000
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2004
::exit(___);}
#if 0
# 2000
{ 
# 2001
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2003
return make_short2(v.x, v.y); 
# 2004
} 
#endif
# 2006 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex2DLayered(texture< ushort2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2007
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2011
::exit(___);}
#if 0
# 2007
{ 
# 2008
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2010
return make_ushort2(v.x, v.y); 
# 2011
} 
#endif
# 2013 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2DLayered(texture< short4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2014
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2018
::exit(___);}
#if 0
# 2014
{ 
# 2015
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2017
return make_short4(v.x, v.y, v.z, v.w); 
# 2018
} 
#endif
# 2020 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2DLayered(texture< ushort4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2021
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2025
::exit(___);}
#if 0
# 2021
{ 
# 2022
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2024
return make_ushort4(v.x, v.y, v.z, v.w); 
# 2025
} 
#endif
# 2033 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int tex2DLayered(texture< int, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2034
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2038
::exit(___);}
#if 0
# 2034
{ 
# 2035
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2037
return (int)(v.x); 
# 2038
} 
#endif
# 2040 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex2DLayered(texture< unsigned, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2041
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2045
::exit(___);}
#if 0
# 2041
{ 
# 2042
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2044
return (unsigned)(v.x); 
# 2045
} 
#endif
# 2047 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex2DLayered(texture< int1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2048
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2052
::exit(___);}
#if 0
# 2048
{ 
# 2049
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2051
return make_int1(v.x); 
# 2052
} 
#endif
# 2054 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex2DLayered(texture< uint1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2055
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2059
::exit(___);}
#if 0
# 2055
{ 
# 2056
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2058
return make_uint1(v.x); 
# 2059
} 
#endif
# 2061 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex2DLayered(texture< int2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2062
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2066
::exit(___);}
#if 0
# 2062
{ 
# 2063
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2065
return make_int2(v.x, v.y); 
# 2066
} 
#endif
# 2068 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex2DLayered(texture< uint2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2069
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2073
::exit(___);}
#if 0
# 2069
{ 
# 2070
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2072
return make_uint2(v.x, v.y); 
# 2073
} 
#endif
# 2075 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2DLayered(texture< int4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2076
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2080
::exit(___);}
#if 0
# 2076
{ 
# 2077
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2079
return make_int4(v.x, v.y, v.z, v.w); 
# 2080
} 
#endif
# 2082 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2DLayered(texture< uint4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2083
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2087
::exit(___);}
#if 0
# 2083
{ 
# 2084
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2086
return make_uint4(v.x, v.y, v.z, v.w); 
# 2087
} 
#endif
# 2161 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayered(texture< float, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2162
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2166
::exit(___);}
#if 0
# 2162
{ 
# 2163
float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2165
return v.x; 
# 2166
} 
#endif
# 2168 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayered(texture< float1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2169
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2173
::exit(___);}
#if 0
# 2169
{ 
# 2170
float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2172
return make_float1(v.x); 
# 2173
} 
#endif
# 2175 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayered(texture< float2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2176
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2180
::exit(___);}
#if 0
# 2176
{ 
# 2177
float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2179
return make_float2(v.x, v.y); 
# 2180
} 
#endif
# 2182 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayered(texture< float4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 2183
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2187
::exit(___);}
#if 0
# 2183
{ 
# 2184
float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2186
return make_float4(v.x, v.y, v.z, v.w); 
# 2187
} 
#endif
# 2195 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayered(texture< char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2196
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2205
::exit(___);}
#if 0
# 2196
{ 
# 2200
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2202
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2204
return w.x; 
# 2205
} 
#endif
# 2207 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayered(texture< signed char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2208
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2213
::exit(___);}
#if 0
# 2208
{ 
# 2209
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2210
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2212
return w.x; 
# 2213
} 
#endif
# 2215 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayered(texture< unsigned char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2216
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2221
::exit(___);}
#if 0
# 2216
{ 
# 2217
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2218
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2220
return w.x; 
# 2221
} 
#endif
# 2223 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayered(texture< char1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2224
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2229
::exit(___);}
#if 0
# 2224
{ 
# 2225
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2226
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2228
return make_float1(w.x); 
# 2229
} 
#endif
# 2231 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayered(texture< uchar1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2232
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2237
::exit(___);}
#if 0
# 2232
{ 
# 2233
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2234
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2236
return make_float1(w.x); 
# 2237
} 
#endif
# 2239 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayered(texture< char2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2240
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2245
::exit(___);}
#if 0
# 2240
{ 
# 2241
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2242
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2244
return make_float2(w.x, w.y); 
# 2245
} 
#endif
# 2247 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayered(texture< uchar2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2248
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2253
::exit(___);}
#if 0
# 2248
{ 
# 2249
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2250
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2252
return make_float2(w.x, w.y); 
# 2253
} 
#endif
# 2255 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayered(texture< char4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2256
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2261
::exit(___);}
#if 0
# 2256
{ 
# 2257
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2258
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2260
return make_float4(w.x, w.y, w.z, w.w); 
# 2261
} 
#endif
# 2263 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayered(texture< uchar4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2264
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2269
::exit(___);}
#if 0
# 2264
{ 
# 2265
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2266
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2268
return make_float4(w.x, w.y, w.z, w.w); 
# 2269
} 
#endif
# 2277 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayered(texture< short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2278
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2283
::exit(___);}
#if 0
# 2278
{ 
# 2279
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2280
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2282
return w.x; 
# 2283
} 
#endif
# 2285 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayered(texture< unsigned short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2286
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2291
::exit(___);}
#if 0
# 2286
{ 
# 2287
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2288
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2290
return w.x; 
# 2291
} 
#endif
# 2293 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayered(texture< short1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2294
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2299
::exit(___);}
#if 0
# 2294
{ 
# 2295
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2296
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2298
return make_float1(w.x); 
# 2299
} 
#endif
# 2301 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayered(texture< ushort1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2302
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2307
::exit(___);}
#if 0
# 2302
{ 
# 2303
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2304
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2306
return make_float1(w.x); 
# 2307
} 
#endif
# 2309 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayered(texture< short2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2310
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2315
::exit(___);}
#if 0
# 2310
{ 
# 2311
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2312
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2314
return make_float2(w.x, w.y); 
# 2315
} 
#endif
# 2317 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayered(texture< ushort2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2318
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2323
::exit(___);}
#if 0
# 2318
{ 
# 2319
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2320
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2322
return make_float2(w.x, w.y); 
# 2323
} 
#endif
# 2325 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayered(texture< short4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2326
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2331
::exit(___);}
#if 0
# 2326
{ 
# 2327
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2328
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2330
return make_float4(w.x, w.y, w.z, w.w); 
# 2331
} 
#endif
# 2333 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayered(texture< ushort4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 2334
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 2339
::exit(___);}
#if 0
# 2334
{ 
# 2335
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
# 2336
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2338
return make_float4(w.x, w.y, w.z, w.w); 
# 2339
} 
#endif
# 2347 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char tex3D(texture< char, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2348
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2356
::exit(___);}
#if 0
# 2348
{ 
# 2352
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2355
return (char)(v.x); 
# 2356
} 
#endif
# 2358 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex3D(texture< signed char, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2359
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2363
::exit(___);}
#if 0
# 2359
{ 
# 2360
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2362
return (signed char)(v.x); 
# 2363
} 
#endif
# 2365 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex3D(texture< unsigned char, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2366
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2370
::exit(___);}
#if 0
# 2366
{ 
# 2367
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2369
return (unsigned char)(v.x); 
# 2370
} 
#endif
# 2372 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex3D(texture< char1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2373
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2377
::exit(___);}
#if 0
# 2373
{ 
# 2374
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2376
return make_char1(v.x); 
# 2377
} 
#endif
# 2379 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex3D(texture< uchar1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2380
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2384
::exit(___);}
#if 0
# 2380
{ 
# 2381
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2383
return make_uchar1(v.x); 
# 2384
} 
#endif
# 2386 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex3D(texture< char2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2387
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2391
::exit(___);}
#if 0
# 2387
{ 
# 2388
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2390
return make_char2(v.x, v.y); 
# 2391
} 
#endif
# 2393 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex3D(texture< uchar2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2394
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2398
::exit(___);}
#if 0
# 2394
{ 
# 2395
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2397
return make_uchar2(v.x, v.y); 
# 2398
} 
#endif
# 2400 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex3D(texture< char4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2401
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2405
::exit(___);}
#if 0
# 2401
{ 
# 2402
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2404
return make_char4(v.x, v.y, v.z, v.w); 
# 2405
} 
#endif
# 2407 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex3D(texture< uchar4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2408
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2412
::exit(___);}
#if 0
# 2408
{ 
# 2409
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2411
return make_uchar4(v.x, v.y, v.z, v.w); 
# 2412
} 
#endif
# 2420 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short tex3D(texture< short, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2421
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2425
::exit(___);}
#if 0
# 2421
{ 
# 2422
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2424
return (short)(v.x); 
# 2425
} 
#endif
# 2427 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex3D(texture< unsigned short, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2428
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2432
::exit(___);}
#if 0
# 2428
{ 
# 2429
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2431
return (unsigned short)(v.x); 
# 2432
} 
#endif
# 2434 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex3D(texture< short1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2435
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2439
::exit(___);}
#if 0
# 2435
{ 
# 2436
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2438
return make_short1(v.x); 
# 2439
} 
#endif
# 2441 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex3D(texture< ushort1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2442
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2446
::exit(___);}
#if 0
# 2442
{ 
# 2443
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2445
return make_ushort1(v.x); 
# 2446
} 
#endif
# 2448 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex3D(texture< short2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2449
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2453
::exit(___);}
#if 0
# 2449
{ 
# 2450
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2452
return make_short2(v.x, v.y); 
# 2453
} 
#endif
# 2455 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex3D(texture< ushort2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2456
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2460
::exit(___);}
#if 0
# 2456
{ 
# 2457
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2459
return make_ushort2(v.x, v.y); 
# 2460
} 
#endif
# 2462 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex3D(texture< short4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2463
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2467
::exit(___);}
#if 0
# 2463
{ 
# 2464
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2466
return make_short4(v.x, v.y, v.z, v.w); 
# 2467
} 
#endif
# 2469 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex3D(texture< ushort4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2470
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2474
::exit(___);}
#if 0
# 2470
{ 
# 2471
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2473
return make_ushort4(v.x, v.y, v.z, v.w); 
# 2474
} 
#endif
# 2482 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int tex3D(texture< int, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2483
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2487
::exit(___);}
#if 0
# 2483
{ 
# 2484
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2486
return (int)(v.x); 
# 2487
} 
#endif
# 2489 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex3D(texture< unsigned, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2490
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2494
::exit(___);}
#if 0
# 2490
{ 
# 2491
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2493
return (unsigned)(v.x); 
# 2494
} 
#endif
# 2496 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex3D(texture< int1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2497
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2501
::exit(___);}
#if 0
# 2497
{ 
# 2498
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2500
return make_int1(v.x); 
# 2501
} 
#endif
# 2503 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex3D(texture< uint1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2504
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2508
::exit(___);}
#if 0
# 2504
{ 
# 2505
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2507
return make_uint1(v.x); 
# 2508
} 
#endif
# 2510 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex3D(texture< int2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2511
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2515
::exit(___);}
#if 0
# 2511
{ 
# 2512
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2514
return make_int2(v.x, v.y); 
# 2515
} 
#endif
# 2517 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex3D(texture< uint2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2518
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2522
::exit(___);}
#if 0
# 2518
{ 
# 2519
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2521
return make_uint2(v.x, v.y); 
# 2522
} 
#endif
# 2524 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex3D(texture< int4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2525
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2529
::exit(___);}
#if 0
# 2525
{ 
# 2526
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2528
return make_int4(v.x, v.y, v.z, v.w); 
# 2529
} 
#endif
# 2531 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex3D(texture< uint4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2532
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2536
::exit(___);}
#if 0
# 2532
{ 
# 2533
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2535
return make_uint4(v.x, v.y, v.z, v.w); 
# 2536
} 
#endif
# 2610 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3D(texture< float, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2611
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2615
::exit(___);}
#if 0
# 2611
{ 
# 2612
float4 v = __ftexfetch(t, make_float4(x, y, z, 0)); 
# 2614
return v.x; 
# 2615
} 
#endif
# 2617 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3D(texture< float1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2618
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2622
::exit(___);}
#if 0
# 2618
{ 
# 2619
float4 v = __ftexfetch(t, make_float4(x, y, z, 0)); 
# 2621
return make_float1(v.x); 
# 2622
} 
#endif
# 2624 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3D(texture< float2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2625
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2629
::exit(___);}
#if 0
# 2625
{ 
# 2626
float4 v = __ftexfetch(t, make_float4(x, y, z, 0)); 
# 2628
return make_float2(v.x, v.y); 
# 2629
} 
#endif
# 2631 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3D(texture< float4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 2632
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2636
::exit(___);}
#if 0
# 2632
{ 
# 2633
float4 v = __ftexfetch(t, make_float4(x, y, z, 0)); 
# 2635
return make_float4(v.x, v.y, v.z, v.w); 
# 2636
} 
#endif
# 2644 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3D(texture< char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2645
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2654
::exit(___);}
#if 0
# 2645
{ 
# 2649
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2651
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2653
return w.x; 
# 2654
} 
#endif
# 2656 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3D(texture< signed char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2657
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2662
::exit(___);}
#if 0
# 2657
{ 
# 2658
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2659
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2661
return w.x; 
# 2662
} 
#endif
# 2664 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3D(texture< unsigned char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2665
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2670
::exit(___);}
#if 0
# 2665
{ 
# 2666
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2667
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2669
return w.x; 
# 2670
} 
#endif
# 2672 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3D(texture< char1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2673
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2678
::exit(___);}
#if 0
# 2673
{ 
# 2674
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2675
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2677
return make_float1(w.x); 
# 2678
} 
#endif
# 2680 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3D(texture< uchar1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2681
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2686
::exit(___);}
#if 0
# 2681
{ 
# 2682
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2683
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2685
return make_float1(w.x); 
# 2686
} 
#endif
# 2688 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3D(texture< char2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2689
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2694
::exit(___);}
#if 0
# 2689
{ 
# 2690
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2691
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2693
return make_float2(w.x, w.y); 
# 2694
} 
#endif
# 2696 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3D(texture< uchar2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2697
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2702
::exit(___);}
#if 0
# 2697
{ 
# 2698
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2699
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2701
return make_float2(w.x, w.y); 
# 2702
} 
#endif
# 2704 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3D(texture< char4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2705
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2710
::exit(___);}
#if 0
# 2705
{ 
# 2706
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2707
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2709
return make_float4(w.x, w.y, w.z, w.w); 
# 2710
} 
#endif
# 2712 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3D(texture< uchar4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2713
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2718
::exit(___);}
#if 0
# 2713
{ 
# 2714
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2715
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2717
return make_float4(w.x, w.y, w.z, w.w); 
# 2718
} 
#endif
# 2726 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3D(texture< short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2727
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2732
::exit(___);}
#if 0
# 2727
{ 
# 2728
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2729
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2731
return w.x; 
# 2732
} 
#endif
# 2734 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3D(texture< unsigned short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2735
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2740
::exit(___);}
#if 0
# 2735
{ 
# 2736
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2737
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2739
return w.x; 
# 2740
} 
#endif
# 2742 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3D(texture< short1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2743
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2748
::exit(___);}
#if 0
# 2743
{ 
# 2744
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2745
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2747
return make_float1(w.x); 
# 2748
} 
#endif
# 2750 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3D(texture< ushort1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2751
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2756
::exit(___);}
#if 0
# 2751
{ 
# 2752
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2753
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2755
return make_float1(w.x); 
# 2756
} 
#endif
# 2758 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3D(texture< short2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2759
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2764
::exit(___);}
#if 0
# 2759
{ 
# 2760
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2761
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2763
return make_float2(w.x, w.y); 
# 2764
} 
#endif
# 2766 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3D(texture< ushort2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2767
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2772
::exit(___);}
#if 0
# 2767
{ 
# 2768
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2769
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2771
return make_float2(w.x, w.y); 
# 2772
} 
#endif
# 2774 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3D(texture< short4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2775
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2780
::exit(___);}
#if 0
# 2775
{ 
# 2776
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
# 2777
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2779
return make_float4(w.x, w.y, w.z, w.w); 
# 2780
} 
#endif
# 2782 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3D(texture< ushort4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 2783
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2788
::exit(___);}
#if 0
# 2783
{ 
# 2784
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
# 2785
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 2787
return make_float4(w.x, w.y, w.z, w.w); 
# 2788
} 
#endif
# 2796 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char texCubemap(texture< char, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2797
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2805
::exit(___);}
#if 0
# 2797
{ 
# 2801
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2804
return (char)(v.x); 
# 2805
} 
#endif
# 2807 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline signed char texCubemap(texture< signed char, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2808
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2812
::exit(___);}
#if 0
# 2808
{ 
# 2809
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2811
return (signed char)(v.x); 
# 2812
} 
#endif
# 2814 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char texCubemap(texture< unsigned char, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2815
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2819
::exit(___);}
#if 0
# 2815
{ 
# 2816
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2818
return (unsigned char)(v.x); 
# 2819
} 
#endif
# 2821 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char1 texCubemap(texture< char1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2822
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2826
::exit(___);}
#if 0
# 2822
{ 
# 2823
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2825
return make_char1(v.x); 
# 2826
} 
#endif
# 2828 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 texCubemap(texture< uchar1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2829
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2833
::exit(___);}
#if 0
# 2829
{ 
# 2830
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2832
return make_uchar1(v.x); 
# 2833
} 
#endif
# 2835 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char2 texCubemap(texture< char2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2836
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2840
::exit(___);}
#if 0
# 2836
{ 
# 2837
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2839
return make_char2(v.x, v.y); 
# 2840
} 
#endif
# 2842 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 texCubemap(texture< uchar2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2843
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2847
::exit(___);}
#if 0
# 2843
{ 
# 2844
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2846
return make_uchar2(v.x, v.y); 
# 2847
} 
#endif
# 2849 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char4 texCubemap(texture< char4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2850
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2854
::exit(___);}
#if 0
# 2850
{ 
# 2851
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2853
return make_char4(v.x, v.y, v.z, v.w); 
# 2854
} 
#endif
# 2856 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 texCubemap(texture< uchar4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2857
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2861
::exit(___);}
#if 0
# 2857
{ 
# 2858
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2860
return make_uchar4(v.x, v.y, v.z, v.w); 
# 2861
} 
#endif
# 2869 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short texCubemap(texture< short, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2870
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2874
::exit(___);}
#if 0
# 2870
{ 
# 2871
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2873
return (short)(v.x); 
# 2874
} 
#endif
# 2876 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short texCubemap(texture< unsigned short, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2877
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2881
::exit(___);}
#if 0
# 2877
{ 
# 2878
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2880
return (unsigned short)(v.x); 
# 2881
} 
#endif
# 2883 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short1 texCubemap(texture< short1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2884
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2888
::exit(___);}
#if 0
# 2884
{ 
# 2885
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2887
return make_short1(v.x); 
# 2888
} 
#endif
# 2890 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 texCubemap(texture< ushort1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2891
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2895
::exit(___);}
#if 0
# 2891
{ 
# 2892
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2894
return make_ushort1(v.x); 
# 2895
} 
#endif
# 2897 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short2 texCubemap(texture< short2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2898
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2902
::exit(___);}
#if 0
# 2898
{ 
# 2899
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2901
return make_short2(v.x, v.y); 
# 2902
} 
#endif
# 2904 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 texCubemap(texture< ushort2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2905
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2909
::exit(___);}
#if 0
# 2905
{ 
# 2906
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2908
return make_ushort2(v.x, v.y); 
# 2909
} 
#endif
# 2911 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short4 texCubemap(texture< short4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2912
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2916
::exit(___);}
#if 0
# 2912
{ 
# 2913
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2915
return make_short4(v.x, v.y, v.z, v.w); 
# 2916
} 
#endif
# 2918 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 texCubemap(texture< ushort4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2919
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2923
::exit(___);}
#if 0
# 2919
{ 
# 2920
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2922
return make_ushort4(v.x, v.y, v.z, v.w); 
# 2923
} 
#endif
# 2931 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int texCubemap(texture< int, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2932
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2936
::exit(___);}
#if 0
# 2932
{ 
# 2933
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2935
return (int)(v.x); 
# 2936
} 
#endif
# 2938 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned texCubemap(texture< unsigned, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2939
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2943
::exit(___);}
#if 0
# 2939
{ 
# 2940
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2942
return (unsigned)(v.x); 
# 2943
} 
#endif
# 2945 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int1 texCubemap(texture< int1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2946
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2950
::exit(___);}
#if 0
# 2946
{ 
# 2947
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2949
return make_int1(v.x); 
# 2950
} 
#endif
# 2952 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 texCubemap(texture< uint1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2953
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2957
::exit(___);}
#if 0
# 2953
{ 
# 2954
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2956
return make_uint1(v.x); 
# 2957
} 
#endif
# 2959 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int2 texCubemap(texture< int2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2960
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2964
::exit(___);}
#if 0
# 2960
{ 
# 2961
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2963
return make_int2(v.x, v.y); 
# 2964
} 
#endif
# 2966 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 texCubemap(texture< uint2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2967
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2971
::exit(___);}
#if 0
# 2967
{ 
# 2968
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2970
return make_uint2(v.x, v.y); 
# 2971
} 
#endif
# 2973 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int4 texCubemap(texture< int4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2974
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2978
::exit(___);}
#if 0
# 2974
{ 
# 2975
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 2977
return make_int4(v.x, v.y, v.z, v.w); 
# 2978
} 
#endif
# 2980 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 texCubemap(texture< uint4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 2981
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 2985
::exit(___);}
#if 0
# 2981
{ 
# 2982
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 2984
return make_uint4(v.x, v.y, v.z, v.w); 
# 2985
} 
#endif
# 3059 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemap(texture< float, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 3060
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3064
::exit(___);}
#if 0
# 3060
{ 
# 3061
float4 v = __ftexfetchc(t, make_float4(x, y, z, 0)); 
# 3063
return v.x; 
# 3064
} 
#endif
# 3066 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemap(texture< float1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 3067
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3071
::exit(___);}
#if 0
# 3067
{ 
# 3068
float4 v = __ftexfetchc(t, make_float4(x, y, z, 0)); 
# 3070
return make_float1(v.x); 
# 3071
} 
#endif
# 3073 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemap(texture< float2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 3074
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3078
::exit(___);}
#if 0
# 3074
{ 
# 3075
float4 v = __ftexfetchc(t, make_float4(x, y, z, 0)); 
# 3077
return make_float2(v.x, v.y); 
# 3078
} 
#endif
# 3080 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemap(texture< float4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 3081
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3085
::exit(___);}
#if 0
# 3081
{ 
# 3082
float4 v = __ftexfetchc(t, make_float4(x, y, z, 0)); 
# 3084
return make_float4(v.x, v.y, v.z, v.w); 
# 3085
} 
#endif
# 3093 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemap(texture< char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3094
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3103
::exit(___);}
#if 0
# 3094
{ 
# 3098
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 3100
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3102
return w.x; 
# 3103
} 
#endif
# 3105 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemap(texture< signed char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3106
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3111
::exit(___);}
#if 0
# 3106
{ 
# 3107
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 3108
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3110
return w.x; 
# 3111
} 
#endif
# 3113 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemap(texture< unsigned char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3114
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3119
::exit(___);}
#if 0
# 3114
{ 
# 3115
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 3116
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3118
return w.x; 
# 3119
} 
#endif
# 3121 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemap(texture< char1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3122
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3127
::exit(___);}
#if 0
# 3122
{ 
# 3123
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 3124
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3126
return make_float1(w.x); 
# 3127
} 
#endif
# 3129 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemap(texture< uchar1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3130
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3135
::exit(___);}
#if 0
# 3130
{ 
# 3131
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 3132
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3134
return make_float1(w.x); 
# 3135
} 
#endif
# 3137 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemap(texture< char2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3138
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3143
::exit(___);}
#if 0
# 3138
{ 
# 3139
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 3140
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3142
return make_float2(w.x, w.y); 
# 3143
} 
#endif
# 3145 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemap(texture< uchar2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3146
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3151
::exit(___);}
#if 0
# 3146
{ 
# 3147
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 3148
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3150
return make_float2(w.x, w.y); 
# 3151
} 
#endif
# 3153 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemap(texture< char4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3154
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3159
::exit(___);}
#if 0
# 3154
{ 
# 3155
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 3156
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3158
return make_float4(w.x, w.y, w.z, w.w); 
# 3159
} 
#endif
# 3161 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemap(texture< uchar4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3162
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3167
::exit(___);}
#if 0
# 3162
{ 
# 3163
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 3164
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3166
return make_float4(w.x, w.y, w.z, w.w); 
# 3167
} 
#endif
# 3175 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemap(texture< short, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3176
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3181
::exit(___);}
#if 0
# 3176
{ 
# 3177
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 3178
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3180
return w.x; 
# 3181
} 
#endif
# 3183 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemap(texture< unsigned short, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3184
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3189
::exit(___);}
#if 0
# 3184
{ 
# 3185
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 3186
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3188
return w.x; 
# 3189
} 
#endif
# 3191 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemap(texture< short1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3192
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3197
::exit(___);}
#if 0
# 3192
{ 
# 3193
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 3194
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3196
return make_float1(w.x); 
# 3197
} 
#endif
# 3199 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemap(texture< ushort1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3200
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3205
::exit(___);}
#if 0
# 3200
{ 
# 3201
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 3202
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3204
return make_float1(w.x); 
# 3205
} 
#endif
# 3207 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemap(texture< short2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3208
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3213
::exit(___);}
#if 0
# 3208
{ 
# 3209
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 3210
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3212
return make_float2(w.x, w.y); 
# 3213
} 
#endif
# 3215 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemap(texture< ushort2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3216
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3221
::exit(___);}
#if 0
# 3216
{ 
# 3217
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 3218
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3220
return make_float2(w.x, w.y); 
# 3221
} 
#endif
# 3223 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemap(texture< short4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3224
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3229
::exit(___);}
#if 0
# 3224
{ 
# 3225
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
# 3226
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3228
return make_float4(w.x, w.y, w.z, w.w); 
# 3229
} 
#endif
# 3231 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemap(texture< ushort4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 3232
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 3237
::exit(___);}
#if 0
# 3232
{ 
# 3233
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
# 3234
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3236
return make_float4(w.x, w.y, w.z, w.w); 
# 3237
} 
#endif
# 3245 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char texCubemapLayered(texture< char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3246
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3254
::exit(___);}
#if 0
# 3246
{ 
# 3250
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3253
return (char)(v.x); 
# 3254
} 
#endif
# 3256 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline signed char texCubemapLayered(texture< signed char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3257
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3261
::exit(___);}
#if 0
# 3257
{ 
# 3258
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3260
return (signed char)(v.x); 
# 3261
} 
#endif
# 3263 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char texCubemapLayered(texture< unsigned char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3264
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3268
::exit(___);}
#if 0
# 3264
{ 
# 3265
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3267
return (unsigned char)(v.x); 
# 3268
} 
#endif
# 3270 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char1 texCubemapLayered(texture< char1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3271
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3275
::exit(___);}
#if 0
# 3271
{ 
# 3272
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3274
return make_char1(v.x); 
# 3275
} 
#endif
# 3277 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 texCubemapLayered(texture< uchar1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3278
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3282
::exit(___);}
#if 0
# 3278
{ 
# 3279
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3281
return make_uchar1(v.x); 
# 3282
} 
#endif
# 3284 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char2 texCubemapLayered(texture< char2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3285
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3289
::exit(___);}
#if 0
# 3285
{ 
# 3286
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3288
return make_char2(v.x, v.y); 
# 3289
} 
#endif
# 3291 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 texCubemapLayered(texture< uchar2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3292
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3296
::exit(___);}
#if 0
# 3292
{ 
# 3293
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3295
return make_uchar2(v.x, v.y); 
# 3296
} 
#endif
# 3298 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char4 texCubemapLayered(texture< char4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3299
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3303
::exit(___);}
#if 0
# 3299
{ 
# 3300
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3302
return make_char4(v.x, v.y, v.z, v.w); 
# 3303
} 
#endif
# 3305 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 texCubemapLayered(texture< uchar4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3306
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3310
::exit(___);}
#if 0
# 3306
{ 
# 3307
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3309
return make_uchar4(v.x, v.y, v.z, v.w); 
# 3310
} 
#endif
# 3318 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short texCubemapLayered(texture< short, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3319
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3323
::exit(___);}
#if 0
# 3319
{ 
# 3320
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3322
return (short)(v.x); 
# 3323
} 
#endif
# 3325 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short texCubemapLayered(texture< unsigned short, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3326
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3330
::exit(___);}
#if 0
# 3326
{ 
# 3327
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3329
return (unsigned short)(v.x); 
# 3330
} 
#endif
# 3332 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short1 texCubemapLayered(texture< short1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3333
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3337
::exit(___);}
#if 0
# 3333
{ 
# 3334
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3336
return make_short1(v.x); 
# 3337
} 
#endif
# 3339 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 texCubemapLayered(texture< ushort1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3340
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3344
::exit(___);}
#if 0
# 3340
{ 
# 3341
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3343
return make_ushort1(v.x); 
# 3344
} 
#endif
# 3346 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short2 texCubemapLayered(texture< short2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3347
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3351
::exit(___);}
#if 0
# 3347
{ 
# 3348
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3350
return make_short2(v.x, v.y); 
# 3351
} 
#endif
# 3353 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 texCubemapLayered(texture< ushort2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3354
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3358
::exit(___);}
#if 0
# 3354
{ 
# 3355
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3357
return make_ushort2(v.x, v.y); 
# 3358
} 
#endif
# 3360 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short4 texCubemapLayered(texture< short4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3361
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3365
::exit(___);}
#if 0
# 3361
{ 
# 3362
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3364
return make_short4(v.x, v.y, v.z, v.w); 
# 3365
} 
#endif
# 3367 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 texCubemapLayered(texture< ushort4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3368
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3372
::exit(___);}
#if 0
# 3368
{ 
# 3369
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3371
return make_ushort4(v.x, v.y, v.z, v.w); 
# 3372
} 
#endif
# 3380 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int texCubemapLayered(texture< int, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3381
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3385
::exit(___);}
#if 0
# 3381
{ 
# 3382
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3384
return (int)(v.x); 
# 3385
} 
#endif
# 3387 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned texCubemapLayered(texture< unsigned, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3388
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3392
::exit(___);}
#if 0
# 3388
{ 
# 3389
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3391
return (unsigned)(v.x); 
# 3392
} 
#endif
# 3394 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int1 texCubemapLayered(texture< int1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3395
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3399
::exit(___);}
#if 0
# 3395
{ 
# 3396
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3398
return make_int1(v.x); 
# 3399
} 
#endif
# 3401 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 texCubemapLayered(texture< uint1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3402
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3406
::exit(___);}
#if 0
# 3402
{ 
# 3403
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3405
return make_uint1(v.x); 
# 3406
} 
#endif
# 3408 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int2 texCubemapLayered(texture< int2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3409
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3413
::exit(___);}
#if 0
# 3409
{ 
# 3410
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3412
return make_int2(v.x, v.y); 
# 3413
} 
#endif
# 3415 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 texCubemapLayered(texture< uint2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3416
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3420
::exit(___);}
#if 0
# 3416
{ 
# 3417
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3419
return make_uint2(v.x, v.y); 
# 3420
} 
#endif
# 3422 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int4 texCubemapLayered(texture< int4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3423
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3427
::exit(___);}
#if 0
# 3423
{ 
# 3424
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3426
return make_int4(v.x, v.y, v.z, v.w); 
# 3427
} 
#endif
# 3429 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 texCubemapLayered(texture< uint4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3430
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3434
::exit(___);}
#if 0
# 3430
{ 
# 3431
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3433
return make_uint4(v.x, v.y, v.z, v.w); 
# 3434
} 
#endif
# 3508 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayered(texture< float, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3509
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3513
::exit(___);}
#if 0
# 3509
{ 
# 3510
float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3512
return v.x; 
# 3513
} 
#endif
# 3515 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayered(texture< float1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3516
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3520
::exit(___);}
#if 0
# 3516
{ 
# 3517
float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3519
return make_float1(v.x); 
# 3520
} 
#endif
# 3522 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayered(texture< float2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3523
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3527
::exit(___);}
#if 0
# 3523
{ 
# 3524
float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3526
return make_float2(v.x, v.y); 
# 3527
} 
#endif
# 3529 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayered(texture< float4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 3530
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3534
::exit(___);}
#if 0
# 3530
{ 
# 3531
float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3533
return make_float4(v.x, v.y, v.z, v.w); 
# 3534
} 
#endif
# 3542 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayered(texture< char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3543
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3552
::exit(___);}
#if 0
# 3543
{ 
# 3547
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3549
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3551
return w.x; 
# 3552
} 
#endif
# 3554 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayered(texture< signed char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3555
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3560
::exit(___);}
#if 0
# 3555
{ 
# 3556
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3557
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3559
return w.x; 
# 3560
} 
#endif
# 3562 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayered(texture< unsigned char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3563
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3568
::exit(___);}
#if 0
# 3563
{ 
# 3564
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3565
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3567
return w.x; 
# 3568
} 
#endif
# 3570 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayered(texture< char1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3571
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3576
::exit(___);}
#if 0
# 3571
{ 
# 3572
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3573
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3575
return make_float1(w.x); 
# 3576
} 
#endif
# 3578 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayered(texture< uchar1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3579
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3584
::exit(___);}
#if 0
# 3579
{ 
# 3580
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3581
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3583
return make_float1(w.x); 
# 3584
} 
#endif
# 3586 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayered(texture< char2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3587
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3592
::exit(___);}
#if 0
# 3587
{ 
# 3588
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3589
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3591
return make_float2(w.x, w.y); 
# 3592
} 
#endif
# 3594 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayered(texture< uchar2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3595
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3600
::exit(___);}
#if 0
# 3595
{ 
# 3596
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3597
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3599
return make_float2(w.x, w.y); 
# 3600
} 
#endif
# 3602 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayered(texture< char4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3603
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3608
::exit(___);}
#if 0
# 3603
{ 
# 3604
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3605
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3607
return make_float4(w.x, w.y, w.z, w.w); 
# 3608
} 
#endif
# 3610 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayered(texture< uchar4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3611
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3616
::exit(___);}
#if 0
# 3611
{ 
# 3612
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3613
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3615
return make_float4(w.x, w.y, w.z, w.w); 
# 3616
} 
#endif
# 3624 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayered(texture< short, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3625
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3630
::exit(___);}
#if 0
# 3625
{ 
# 3626
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3627
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3629
return w.x; 
# 3630
} 
#endif
# 3632 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayered(texture< unsigned short, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3633
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3638
::exit(___);}
#if 0
# 3633
{ 
# 3634
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3635
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3637
return w.x; 
# 3638
} 
#endif
# 3640 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayered(texture< short1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3641
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3646
::exit(___);}
#if 0
# 3641
{ 
# 3642
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3643
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3645
return make_float1(w.x); 
# 3646
} 
#endif
# 3648 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayered(texture< ushort1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3649
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3654
::exit(___);}
#if 0
# 3649
{ 
# 3650
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3651
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3653
return make_float1(w.x); 
# 3654
} 
#endif
# 3656 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayered(texture< short2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3657
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3662
::exit(___);}
#if 0
# 3657
{ 
# 3658
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3659
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3661
return make_float2(w.x, w.y); 
# 3662
} 
#endif
# 3664 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayered(texture< ushort2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3665
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3670
::exit(___);}
#if 0
# 3665
{ 
# 3666
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3667
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3669
return make_float2(w.x, w.y); 
# 3670
} 
#endif
# 3672 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayered(texture< short4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3673
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3678
::exit(___);}
#if 0
# 3673
{ 
# 3674
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3675
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3677
return make_float4(w.x, w.y, w.z, w.w); 
# 3678
} 
#endif
# 3680 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayered(texture< ushort4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 3681
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 3686
::exit(___);}
#if 0
# 3681
{ 
# 3682
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
# 3683
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 3685
return make_float4(w.x, w.y, w.z, w.w); 
# 3686
} 
#endif
# 3807 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2Dgather(texture< char, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3808
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3810
::exit(___);}
#if 0
# 3808
{ 
# 3809
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } ; 
# 3810
} 
#endif
# 3812 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2Dgather(texture< signed char, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3813
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3815
::exit(___);}
#if 0
# 3813
{ 
# 3814
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } ; 
# 3815
} 
#endif
# 3817 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2Dgather(texture< unsigned char, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3818
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3820
::exit(___);}
#if 0
# 3818
{ 
# 3819
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } ; 
# 3820
} 
#endif
# 3822 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2Dgather(texture< char1, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3823
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3825
::exit(___);}
#if 0
# 3823
{ 
# 3824
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } ; 
# 3825
} 
#endif
# 3827 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2Dgather(texture< uchar1, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3828
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3830
::exit(___);}
#if 0
# 3828
{ 
# 3829
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } ; 
# 3830
} 
#endif
# 3832 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2Dgather(texture< char2, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3833
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3835
::exit(___);}
#if 0
# 3833
{ 
# 3834
if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); }  ; 
# 3835
} 
#endif
# 3837 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2Dgather(texture< uchar2, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3838
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3840
::exit(___);}
#if 0
# 3838
{ 
# 3839
if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); }  ; 
# 3840
} 
#endif
# 3842 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2Dgather(texture< char3, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3843
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3845
::exit(___);}
#if 0
# 3843
{ 
# 3844
if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); }  }  ; 
# 3845
} 
#endif
# 3847 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2Dgather(texture< uchar3, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3848
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3850
::exit(___);}
#if 0
# 3848
{ 
# 3849
if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); }  }  ; 
# 3850
} 
#endif
# 3852 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2Dgather(texture< char4, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3853
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3855
::exit(___);}
#if 0
# 3853
{ 
# 3854
if (comp == 3) { int4 v = __itex2Dgather< 3> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); }  }  }  ; 
# 3855
} 
#endif
# 3857 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2Dgather(texture< uchar4, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3858
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3860
::exit(___);}
#if 0
# 3858
{ 
# 3859
if (comp == 3) { uint4 v = __utex2Dgather< 3> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); }  }  }  ; 
# 3860
} 
#endif
# 3862 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2Dgather(texture< short, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3863
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3865
::exit(___);}
#if 0
# 3863
{ 
# 3864
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } ; 
# 3865
} 
#endif
# 3867 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2Dgather(texture< unsigned short, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3868
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3870
::exit(___);}
#if 0
# 3868
{ 
# 3869
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } ; 
# 3870
} 
#endif
# 3872 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2Dgather(texture< short1, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3873
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3875
::exit(___);}
#if 0
# 3873
{ 
# 3874
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } ; 
# 3875
} 
#endif
# 3877 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2Dgather(texture< ushort1, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3878
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3880
::exit(___);}
#if 0
# 3878
{ 
# 3879
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } ; 
# 3880
} 
#endif
# 3882 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2Dgather(texture< short2, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3883
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3885
::exit(___);}
#if 0
# 3883
{ 
# 3884
if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); }  ; 
# 3885
} 
#endif
# 3887 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2Dgather(texture< ushort2, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3888
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3890
::exit(___);}
#if 0
# 3888
{ 
# 3889
if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); }  ; 
# 3890
} 
#endif
# 3892 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2Dgather(texture< short3, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3893
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3895
::exit(___);}
#if 0
# 3893
{ 
# 3894
if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); }  }  ; 
# 3895
} 
#endif
# 3897 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2Dgather(texture< ushort3, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3898
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3900
::exit(___);}
#if 0
# 3898
{ 
# 3899
if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); }  }  ; 
# 3900
} 
#endif
# 3902 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2Dgather(texture< short4, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3903
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3905
::exit(___);}
#if 0
# 3903
{ 
# 3904
if (comp == 3) { int4 v = __itex2Dgather< 3> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); }  }  }  ; 
# 3905
} 
#endif
# 3907 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2Dgather(texture< ushort4, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3908
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3910
::exit(___);}
#if 0
# 3908
{ 
# 3909
if (comp == 3) { uint4 v = __utex2Dgather< 3> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); }  }  }  ; 
# 3910
} 
#endif
# 3912 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2Dgather(texture< int, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3913
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3915
::exit(___);}
#if 0
# 3913
{ 
# 3914
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return v; } ; 
# 3915
} 
#endif
# 3917 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2Dgather(texture< unsigned, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3918
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3920
::exit(___);}
#if 0
# 3918
{ 
# 3919
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return v; } ; 
# 3920
} 
#endif
# 3922 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2Dgather(texture< int1, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3923
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3925
::exit(___);}
#if 0
# 3923
{ 
# 3924
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return v; } ; 
# 3925
} 
#endif
# 3927 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2Dgather(texture< uint1, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3928
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3930
::exit(___);}
#if 0
# 3928
{ 
# 3929
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return v; } ; 
# 3930
} 
#endif
# 3932 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2Dgather(texture< int2, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3933
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3935
::exit(___);}
#if 0
# 3933
{ 
# 3934
if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return v; } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return v; }  ; 
# 3935
} 
#endif
# 3937 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2Dgather(texture< uint2, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3938
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3940
::exit(___);}
#if 0
# 3938
{ 
# 3939
if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return v; } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return v; }  ; 
# 3940
} 
#endif
# 3942 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2Dgather(texture< int3, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3943
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3945
::exit(___);}
#if 0
# 3943
{ 
# 3944
if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return v; } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return v; } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return v; }  }  ; 
# 3945
} 
#endif
# 3947 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2Dgather(texture< uint3, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3948
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3950
::exit(___);}
#if 0
# 3948
{ 
# 3949
if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return v; } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return v; } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return v; }  }  ; 
# 3950
} 
#endif
# 3952 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2Dgather(texture< int4, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3953
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3955
::exit(___);}
#if 0
# 3953
{ 
# 3954
if (comp == 3) { int4 v = __itex2Dgather< 3> (t, make_float2(x, y)); return v; } else { if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return v; } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return v; } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return v; }  }  }  ; 
# 3955
} 
#endif
# 3957 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2Dgather(texture< uint4, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3958
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3960
::exit(___);}
#if 0
# 3958
{ 
# 3959
if (comp == 3) { uint4 v = __utex2Dgather< 3> (t, make_float2(x, y)); return v; } else { if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return v; } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return v; } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return v; }  }  }  ; 
# 3960
} 
#endif
# 3962 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< float, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3963
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3965
::exit(___);}
#if 0
# 3963
{ 
# 3964
{ float4 v = __ftex2Dgather< 0> (t, make_float2(x, y)); return v; } ; 
# 3965
} 
#endif
# 3967 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< float1, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3968
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3970
::exit(___);}
#if 0
# 3968
{ 
# 3969
{ float4 v = __ftex2Dgather< 0> (t, make_float2(x, y)); return v; } ; 
# 3970
} 
#endif
# 3972 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< float2, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3973
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3975
::exit(___);}
#if 0
# 3973
{ 
# 3974
if (comp == 1) { float4 v = __ftex2Dgather< 1> (t, make_float2(x, y)); return v; } else { float4 v = __ftex2Dgather< 0> (t, make_float2(x, y)); return v; }  ; 
# 3975
} 
#endif
# 3977 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< float3, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3978
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3980
::exit(___);}
#if 0
# 3978
{ 
# 3979
if (comp == 2) { float4 v = __ftex2Dgather< 2> (t, make_float2(x, y)); return v; } else { if (comp == 1) { float4 v = __ftex2Dgather< 1> (t, make_float2(x, y)); return v; } else { float4 v = __ftex2Dgather< 0> (t, make_float2(x, y)); return v; }  }  ; 
# 3980
} 
#endif
# 3982 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< float4, 2, cudaReadModeElementType>  t, float x, float y, int comp = (0)) 
# 3983
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3985
::exit(___);}
#if 0
# 3983
{ 
# 3984
if (comp == 3) { float4 v = __ftex2Dgather< 3> (t, make_float2(x, y)); return v; } else { if (comp == 2) { float4 v = __ftex2Dgather< 2> (t, make_float2(x, y)); return v; } else { if (comp == 1) { float4 v = __ftex2Dgather< 1> (t, make_float2(x, y)); return v; } else { float4 v = __ftex2Dgather< 0> (t, make_float2(x, y)); return v; }  }  }  ; 
# 3985
} 
#endif
# 3994 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = (0)) 
# 3995
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 3997
::exit(___);}
#if 0
# 3995
{ 
# 3996
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
# 3997
} 
#endif
# 3999 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< signed char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = (0)) 
# 4000
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4002
::exit(___);}
#if 0
# 4000
{ 
# 4001
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
# 4002
} 
#endif
# 4004 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< unsigned char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = (0)) 
# 4005
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4007
::exit(___);}
#if 0
# 4005
{ 
# 4006
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
# 4007
} 
#endif
# 4009 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< char1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = (0)) 
# 4010
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4012
::exit(___);}
#if 0
# 4010
{ 
# 4011
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
# 4012
} 
#endif
# 4014 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< uchar1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = (0)) 
# 4015
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4017
::exit(___);}
#if 0
# 4015
{ 
# 4016
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
# 4017
} 
#endif
# 4019 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< char2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = (0)) 
# 4020
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4022
::exit(___);}
#if 0
# 4020
{ 
# 4021
if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  ; 
# 4022
} 
#endif
# 4024 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< uchar2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = (0)) 
# 4025
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4027
::exit(___);}
#if 0
# 4025
{ 
# 4026
if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  ; 
# 4027
} 
#endif
# 4029 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< char3, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = (0)) 
# 4030
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4032
::exit(___);}
#if 0
# 4030
{ 
# 4031
if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  ; 
# 4032
} 
#endif
# 4034 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< uchar3, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = (0)) 
# 4035
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4037
::exit(___);}
#if 0
# 4035
{ 
# 4036
if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  ; 
# 4037
} 
#endif
# 4039 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< char4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = (0)) 
# 4040
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4042
::exit(___);}
#if 0
# 4040
{ 
# 4041
if (comp == 3) { int4 v = __itex2Dgather< 3> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  }  ; 
# 4042
} 
#endif
# 4044 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< uchar4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = (0)) 
# 4045
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4047
::exit(___);}
#if 0
# 4045
{ 
# 4046
if (comp == 3) { uint4 v = __utex2Dgather< 3> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  }  ; 
# 4047
} 
#endif
# 4049 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = (0)) 
# 4050
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4052
::exit(___);}
#if 0
# 4050
{ 
# 4051
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
# 4052
} 
#endif
# 4054 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< unsigned short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = (0)) 
# 4055
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4057
::exit(___);}
#if 0
# 4055
{ 
# 4056
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
# 4057
} 
#endif
# 4059 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< short1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = (0)) 
# 4060
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4062
::exit(___);}
#if 0
# 4060
{ 
# 4061
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
# 4062
} 
#endif
# 4064 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< ushort1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = (0)) 
# 4065
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4067
::exit(___);}
#if 0
# 4065
{ 
# 4066
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
# 4067
} 
#endif
# 4069 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< short2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = (0)) 
# 4070
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4072
::exit(___);}
#if 0
# 4070
{ 
# 4071
if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  ; 
# 4072
} 
#endif
# 4074 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< ushort2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = (0)) 
# 4075
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4077
::exit(___);}
#if 0
# 4075
{ 
# 4076
if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  ; 
# 4077
} 
#endif
# 4079 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< short3, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = (0)) 
# 4080
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4082
::exit(___);}
#if 0
# 4080
{ 
# 4081
if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  ; 
# 4082
} 
#endif
# 4084 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< ushort3, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = (0)) 
# 4085
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4087
::exit(___);}
#if 0
# 4085
{ 
# 4086
if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  ; 
# 4087
} 
#endif
# 4089 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< short4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = (0)) 
# 4090
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4092
::exit(___);}
#if 0
# 4090
{ 
# 4091
if (comp == 3) { int4 v = __itex2Dgather< 3> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  }  ; 
# 4092
} 
#endif
# 4094 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2Dgather(texture< ushort4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = (0)) 
# 4095
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 4097
::exit(___);}
#if 0
# 4095
{ 
# 4096
if (comp == 3) { uint4 v = __utex2Dgather< 3> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  }  ; 
# 4097
} 
#endif
# 4124 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char tex1DLod(texture< char, 1, cudaReadModeElementType>  t, float x, float level) 
# 4125
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4133
::exit(___);}
#if 0
# 4125
{ 
# 4129
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4132
return (char)(v.x); 
# 4133
} 
#endif
# 4135 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex1DLod(texture< signed char, 1, cudaReadModeElementType>  t, float x, float level) 
# 4136
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4140
::exit(___);}
#if 0
# 4136
{ 
# 4137
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4139
return (signed char)(v.x); 
# 4140
} 
#endif
# 4142 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex1DLod(texture< unsigned char, 1, cudaReadModeElementType>  t, float x, float level) 
# 4143
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4147
::exit(___);}
#if 0
# 4143
{ 
# 4144
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4146
return (unsigned char)(v.x); 
# 4147
} 
#endif
# 4149 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex1DLod(texture< char1, 1, cudaReadModeElementType>  t, float x, float level) 
# 4150
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4154
::exit(___);}
#if 0
# 4150
{ 
# 4151
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4153
return make_char1(v.x); 
# 4154
} 
#endif
# 4156 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex1DLod(texture< uchar1, 1, cudaReadModeElementType>  t, float x, float level) 
# 4157
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4161
::exit(___);}
#if 0
# 4157
{ 
# 4158
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4160
return make_uchar1(v.x); 
# 4161
} 
#endif
# 4163 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex1DLod(texture< char2, 1, cudaReadModeElementType>  t, float x, float level) 
# 4164
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4168
::exit(___);}
#if 0
# 4164
{ 
# 4165
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4167
return make_char2(v.x, v.y); 
# 4168
} 
#endif
# 4170 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex1DLod(texture< uchar2, 1, cudaReadModeElementType>  t, float x, float level) 
# 4171
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4175
::exit(___);}
#if 0
# 4171
{ 
# 4172
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4174
return make_uchar2(v.x, v.y); 
# 4175
} 
#endif
# 4177 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex1DLod(texture< char4, 1, cudaReadModeElementType>  t, float x, float level) 
# 4178
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4182
::exit(___);}
#if 0
# 4178
{ 
# 4179
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4181
return make_char4(v.x, v.y, v.z, v.w); 
# 4182
} 
#endif
# 4184 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex1DLod(texture< uchar4, 1, cudaReadModeElementType>  t, float x, float level) 
# 4185
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4189
::exit(___);}
#if 0
# 4185
{ 
# 4186
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4188
return make_uchar4(v.x, v.y, v.z, v.w); 
# 4189
} 
#endif
# 4197 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short tex1DLod(texture< short, 1, cudaReadModeElementType>  t, float x, float level) 
# 4198
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4202
::exit(___);}
#if 0
# 4198
{ 
# 4199
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4201
return (short)(v.x); 
# 4202
} 
#endif
# 4204 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex1DLod(texture< unsigned short, 1, cudaReadModeElementType>  t, float x, float level) 
# 4205
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4209
::exit(___);}
#if 0
# 4205
{ 
# 4206
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4208
return (unsigned short)(v.x); 
# 4209
} 
#endif
# 4211 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex1DLod(texture< short1, 1, cudaReadModeElementType>  t, float x, float level) 
# 4212
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4216
::exit(___);}
#if 0
# 4212
{ 
# 4213
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4215
return make_short1(v.x); 
# 4216
} 
#endif
# 4218 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex1DLod(texture< ushort1, 1, cudaReadModeElementType>  t, float x, float level) 
# 4219
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4223
::exit(___);}
#if 0
# 4219
{ 
# 4220
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4222
return make_ushort1(v.x); 
# 4223
} 
#endif
# 4225 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex1DLod(texture< short2, 1, cudaReadModeElementType>  t, float x, float level) 
# 4226
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4230
::exit(___);}
#if 0
# 4226
{ 
# 4227
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4229
return make_short2(v.x, v.y); 
# 4230
} 
#endif
# 4232 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex1DLod(texture< ushort2, 1, cudaReadModeElementType>  t, float x, float level) 
# 4233
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4237
::exit(___);}
#if 0
# 4233
{ 
# 4234
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4236
return make_ushort2(v.x, v.y); 
# 4237
} 
#endif
# 4239 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex1DLod(texture< short4, 1, cudaReadModeElementType>  t, float x, float level) 
# 4240
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4244
::exit(___);}
#if 0
# 4240
{ 
# 4241
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4243
return make_short4(v.x, v.y, v.z, v.w); 
# 4244
} 
#endif
# 4246 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex1DLod(texture< ushort4, 1, cudaReadModeElementType>  t, float x, float level) 
# 4247
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4251
::exit(___);}
#if 0
# 4247
{ 
# 4248
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4250
return make_ushort4(v.x, v.y, v.z, v.w); 
# 4251
} 
#endif
# 4259 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int tex1DLod(texture< int, 1, cudaReadModeElementType>  t, float x, float level) 
# 4260
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4264
::exit(___);}
#if 0
# 4260
{ 
# 4261
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4263
return (int)(v.x); 
# 4264
} 
#endif
# 4266 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex1DLod(texture< unsigned, 1, cudaReadModeElementType>  t, float x, float level) 
# 4267
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4271
::exit(___);}
#if 0
# 4267
{ 
# 4268
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4270
return (unsigned)(v.x); 
# 4271
} 
#endif
# 4273 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex1DLod(texture< int1, 1, cudaReadModeElementType>  t, float x, float level) 
# 4274
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4278
::exit(___);}
#if 0
# 4274
{ 
# 4275
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4277
return make_int1(v.x); 
# 4278
} 
#endif
# 4280 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex1DLod(texture< uint1, 1, cudaReadModeElementType>  t, float x, float level) 
# 4281
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4285
::exit(___);}
#if 0
# 4281
{ 
# 4282
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4284
return make_uint1(v.x); 
# 4285
} 
#endif
# 4287 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex1DLod(texture< int2, 1, cudaReadModeElementType>  t, float x, float level) 
# 4288
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4292
::exit(___);}
#if 0
# 4288
{ 
# 4289
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4291
return make_int2(v.x, v.y); 
# 4292
} 
#endif
# 4294 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex1DLod(texture< uint2, 1, cudaReadModeElementType>  t, float x, float level) 
# 4295
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4299
::exit(___);}
#if 0
# 4295
{ 
# 4296
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4298
return make_uint2(v.x, v.y); 
# 4299
} 
#endif
# 4301 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex1DLod(texture< int4, 1, cudaReadModeElementType>  t, float x, float level) 
# 4302
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4306
::exit(___);}
#if 0
# 4302
{ 
# 4303
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4305
return make_int4(v.x, v.y, v.z, v.w); 
# 4306
} 
#endif
# 4308 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex1DLod(texture< uint4, 1, cudaReadModeElementType>  t, float x, float level) 
# 4309
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4313
::exit(___);}
#if 0
# 4309
{ 
# 4310
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4312
return make_uint4(v.x, v.y, v.z, v.w); 
# 4313
} 
#endif
# 4393 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLod(texture< float, 1, cudaReadModeElementType>  t, float x, float level) 
# 4394
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4398
::exit(___);}
#if 0
# 4394
{ 
# 4395
float4 v = __ftexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4397
return v.x; 
# 4398
} 
#endif
# 4400 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLod(texture< float1, 1, cudaReadModeElementType>  t, float x, float level) 
# 4401
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4405
::exit(___);}
#if 0
# 4401
{ 
# 4402
float4 v = __ftexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4404
return make_float1(v.x); 
# 4405
} 
#endif
# 4407 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLod(texture< float2, 1, cudaReadModeElementType>  t, float x, float level) 
# 4408
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4412
::exit(___);}
#if 0
# 4408
{ 
# 4409
float4 v = __ftexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4411
return make_float2(v.x, v.y); 
# 4412
} 
#endif
# 4414 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLod(texture< float4, 1, cudaReadModeElementType>  t, float x, float level) 
# 4415
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4419
::exit(___);}
#if 0
# 4415
{ 
# 4416
float4 v = __ftexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4418
return make_float4(v.x, v.y, v.z, v.w); 
# 4419
} 
#endif
# 4427 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLod(texture< char, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4428
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4437
::exit(___);}
#if 0
# 4428
{ 
# 4432
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4434
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4436
return w.x; 
# 4437
} 
#endif
# 4439 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLod(texture< signed char, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4440
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4445
::exit(___);}
#if 0
# 4440
{ 
# 4441
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4442
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4444
return w.x; 
# 4445
} 
#endif
# 4447 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLod(texture< unsigned char, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4448
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4453
::exit(___);}
#if 0
# 4448
{ 
# 4449
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4450
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4452
return w.x; 
# 4453
} 
#endif
# 4455 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLod(texture< char1, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4456
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4461
::exit(___);}
#if 0
# 4456
{ 
# 4457
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4458
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4460
return make_float1(w.x); 
# 4461
} 
#endif
# 4463 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLod(texture< uchar1, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4464
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4469
::exit(___);}
#if 0
# 4464
{ 
# 4465
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4466
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4468
return make_float1(w.x); 
# 4469
} 
#endif
# 4471 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLod(texture< char2, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4472
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4477
::exit(___);}
#if 0
# 4472
{ 
# 4473
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4474
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4476
return make_float2(w.x, w.y); 
# 4477
} 
#endif
# 4479 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLod(texture< uchar2, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4480
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4485
::exit(___);}
#if 0
# 4480
{ 
# 4481
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4482
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4484
return make_float2(w.x, w.y); 
# 4485
} 
#endif
# 4487 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLod(texture< char4, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4488
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4493
::exit(___);}
#if 0
# 4488
{ 
# 4489
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4490
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4492
return make_float4(w.x, w.y, w.z, w.w); 
# 4493
} 
#endif
# 4495 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLod(texture< uchar4, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4496
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4501
::exit(___);}
#if 0
# 4496
{ 
# 4497
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4498
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4500
return make_float4(w.x, w.y, w.z, w.w); 
# 4501
} 
#endif
# 4509 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLod(texture< short, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4510
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4515
::exit(___);}
#if 0
# 4510
{ 
# 4511
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4512
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4514
return w.x; 
# 4515
} 
#endif
# 4517 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLod(texture< unsigned short, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4518
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4523
::exit(___);}
#if 0
# 4518
{ 
# 4519
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4520
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4522
return w.x; 
# 4523
} 
#endif
# 4525 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLod(texture< short1, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4526
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4531
::exit(___);}
#if 0
# 4526
{ 
# 4527
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4528
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4530
return make_float1(w.x); 
# 4531
} 
#endif
# 4533 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLod(texture< ushort1, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4534
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4539
::exit(___);}
#if 0
# 4534
{ 
# 4535
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4536
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4538
return make_float1(w.x); 
# 4539
} 
#endif
# 4541 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLod(texture< short2, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4542
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4547
::exit(___);}
#if 0
# 4542
{ 
# 4543
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4544
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4546
return make_float2(w.x, w.y); 
# 4547
} 
#endif
# 4549 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLod(texture< ushort2, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4550
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4555
::exit(___);}
#if 0
# 4550
{ 
# 4551
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4552
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4554
return make_float2(w.x, w.y); 
# 4555
} 
#endif
# 4557 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLod(texture< short4, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4558
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4563
::exit(___);}
#if 0
# 4558
{ 
# 4559
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4560
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4562
return make_float4(w.x, w.y, w.z, w.w); 
# 4563
} 
#endif
# 4565 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLod(texture< ushort4, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 4566
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 4571
::exit(___);}
#if 0
# 4566
{ 
# 4567
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
# 4568
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4570
return make_float4(w.x, w.y, w.z, w.w); 
# 4571
} 
#endif
# 4579 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char tex2DLod(texture< char, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4580
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4588
::exit(___);}
#if 0
# 4580
{ 
# 4584
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4587
return (char)(v.x); 
# 4588
} 
#endif
# 4590 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex2DLod(texture< signed char, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4591
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4595
::exit(___);}
#if 0
# 4591
{ 
# 4592
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4594
return (signed char)(v.x); 
# 4595
} 
#endif
# 4597 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex2DLod(texture< unsigned char, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4598
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4602
::exit(___);}
#if 0
# 4598
{ 
# 4599
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4601
return (unsigned char)(v.x); 
# 4602
} 
#endif
# 4604 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex2DLod(texture< char1, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4605
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4609
::exit(___);}
#if 0
# 4605
{ 
# 4606
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4608
return make_char1(v.x); 
# 4609
} 
#endif
# 4611 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex2DLod(texture< uchar1, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4612
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4616
::exit(___);}
#if 0
# 4612
{ 
# 4613
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4615
return make_uchar1(v.x); 
# 4616
} 
#endif
# 4618 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex2DLod(texture< char2, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4619
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4623
::exit(___);}
#if 0
# 4619
{ 
# 4620
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4622
return make_char2(v.x, v.y); 
# 4623
} 
#endif
# 4625 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex2DLod(texture< uchar2, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4626
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4630
::exit(___);}
#if 0
# 4626
{ 
# 4627
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4629
return make_uchar2(v.x, v.y); 
# 4630
} 
#endif
# 4632 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2DLod(texture< char4, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4633
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4637
::exit(___);}
#if 0
# 4633
{ 
# 4634
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4636
return make_char4(v.x, v.y, v.z, v.w); 
# 4637
} 
#endif
# 4639 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2DLod(texture< uchar4, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4640
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4644
::exit(___);}
#if 0
# 4640
{ 
# 4641
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4643
return make_uchar4(v.x, v.y, v.z, v.w); 
# 4644
} 
#endif
# 4652 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short tex2DLod(texture< short, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4653
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4657
::exit(___);}
#if 0
# 4653
{ 
# 4654
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4656
return (short)(v.x); 
# 4657
} 
#endif
# 4659 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex2DLod(texture< unsigned short, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4660
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4664
::exit(___);}
#if 0
# 4660
{ 
# 4661
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4663
return (unsigned short)(v.x); 
# 4664
} 
#endif
# 4666 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex2DLod(texture< short1, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4667
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4671
::exit(___);}
#if 0
# 4667
{ 
# 4668
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4670
return make_short1(v.x); 
# 4671
} 
#endif
# 4673 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex2DLod(texture< ushort1, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4674
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4678
::exit(___);}
#if 0
# 4674
{ 
# 4675
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4677
return make_ushort1(v.x); 
# 4678
} 
#endif
# 4680 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex2DLod(texture< short2, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4681
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4685
::exit(___);}
#if 0
# 4681
{ 
# 4682
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4684
return make_short2(v.x, v.y); 
# 4685
} 
#endif
# 4687 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex2DLod(texture< ushort2, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4688
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4692
::exit(___);}
#if 0
# 4688
{ 
# 4689
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4691
return make_ushort2(v.x, v.y); 
# 4692
} 
#endif
# 4694 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2DLod(texture< short4, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4695
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4699
::exit(___);}
#if 0
# 4695
{ 
# 4696
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4698
return make_short4(v.x, v.y, v.z, v.w); 
# 4699
} 
#endif
# 4701 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2DLod(texture< ushort4, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4702
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4706
::exit(___);}
#if 0
# 4702
{ 
# 4703
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4705
return make_ushort4(v.x, v.y, v.z, v.w); 
# 4706
} 
#endif
# 4714 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int tex2DLod(texture< int, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4715
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4719
::exit(___);}
#if 0
# 4715
{ 
# 4716
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4718
return (int)(v.x); 
# 4719
} 
#endif
# 4721 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex2DLod(texture< unsigned, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4722
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4726
::exit(___);}
#if 0
# 4722
{ 
# 4723
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4725
return (unsigned)(v.x); 
# 4726
} 
#endif
# 4728 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex2DLod(texture< int1, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4729
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4733
::exit(___);}
#if 0
# 4729
{ 
# 4730
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4732
return make_int1(v.x); 
# 4733
} 
#endif
# 4735 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex2DLod(texture< uint1, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4736
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4740
::exit(___);}
#if 0
# 4736
{ 
# 4737
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4739
return make_uint1(v.x); 
# 4740
} 
#endif
# 4742 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex2DLod(texture< int2, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4743
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4747
::exit(___);}
#if 0
# 4743
{ 
# 4744
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4746
return make_int2(v.x, v.y); 
# 4747
} 
#endif
# 4749 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex2DLod(texture< uint2, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4750
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4754
::exit(___);}
#if 0
# 4750
{ 
# 4751
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4753
return make_uint2(v.x, v.y); 
# 4754
} 
#endif
# 4756 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2DLod(texture< int4, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4757
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4761
::exit(___);}
#if 0
# 4757
{ 
# 4758
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4760
return make_int4(v.x, v.y, v.z, v.w); 
# 4761
} 
#endif
# 4763 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2DLod(texture< uint4, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4764
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4768
::exit(___);}
#if 0
# 4764
{ 
# 4765
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4767
return make_uint4(v.x, v.y, v.z, v.w); 
# 4768
} 
#endif
# 4842 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLod(texture< float, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4843
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4847
::exit(___);}
#if 0
# 4843
{ 
# 4844
float4 v = __ftexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4846
return v.x; 
# 4847
} 
#endif
# 4849 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLod(texture< float1, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4850
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4854
::exit(___);}
#if 0
# 4850
{ 
# 4851
float4 v = __ftexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4853
return make_float1(v.x); 
# 4854
} 
#endif
# 4856 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLod(texture< float2, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4857
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4861
::exit(___);}
#if 0
# 4857
{ 
# 4858
float4 v = __ftexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4860
return make_float2(v.x, v.y); 
# 4861
} 
#endif
# 4863 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLod(texture< float4, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 4864
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4868
::exit(___);}
#if 0
# 4864
{ 
# 4865
float4 v = __ftexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4867
return make_float4(v.x, v.y, v.z, v.w); 
# 4868
} 
#endif
# 4876 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLod(texture< char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4877
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4886
::exit(___);}
#if 0
# 4877
{ 
# 4881
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4883
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4885
return w.x; 
# 4886
} 
#endif
# 4888 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLod(texture< signed char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4889
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4894
::exit(___);}
#if 0
# 4889
{ 
# 4890
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4891
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4893
return w.x; 
# 4894
} 
#endif
# 4896 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLod(texture< unsigned char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4897
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4902
::exit(___);}
#if 0
# 4897
{ 
# 4898
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4899
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4901
return w.x; 
# 4902
} 
#endif
# 4904 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLod(texture< char1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4905
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4910
::exit(___);}
#if 0
# 4905
{ 
# 4906
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4907
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4909
return make_float1(w.x); 
# 4910
} 
#endif
# 4912 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLod(texture< uchar1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4913
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4918
::exit(___);}
#if 0
# 4913
{ 
# 4914
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4915
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4917
return make_float1(w.x); 
# 4918
} 
#endif
# 4920 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLod(texture< char2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4921
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4926
::exit(___);}
#if 0
# 4921
{ 
# 4922
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4923
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4925
return make_float2(w.x, w.y); 
# 4926
} 
#endif
# 4928 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLod(texture< uchar2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4929
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4934
::exit(___);}
#if 0
# 4929
{ 
# 4930
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4931
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4933
return make_float2(w.x, w.y); 
# 4934
} 
#endif
# 4936 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLod(texture< char4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4937
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4942
::exit(___);}
#if 0
# 4937
{ 
# 4938
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4939
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4941
return make_float4(w.x, w.y, w.z, w.w); 
# 4942
} 
#endif
# 4944 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLod(texture< uchar4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4945
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4950
::exit(___);}
#if 0
# 4945
{ 
# 4946
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4947
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4949
return make_float4(w.x, w.y, w.z, w.w); 
# 4950
} 
#endif
# 4958 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLod(texture< short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4959
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4964
::exit(___);}
#if 0
# 4959
{ 
# 4960
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4961
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4963
return w.x; 
# 4964
} 
#endif
# 4966 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLod(texture< unsigned short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4967
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4972
::exit(___);}
#if 0
# 4967
{ 
# 4968
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4969
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4971
return w.x; 
# 4972
} 
#endif
# 4974 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLod(texture< short1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4975
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4980
::exit(___);}
#if 0
# 4975
{ 
# 4976
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4977
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4979
return make_float1(w.x); 
# 4980
} 
#endif
# 4982 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLod(texture< ushort1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4983
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4988
::exit(___);}
#if 0
# 4983
{ 
# 4984
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4985
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4987
return make_float1(w.x); 
# 4988
} 
#endif
# 4990 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLod(texture< short2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4991
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 4996
::exit(___);}
#if 0
# 4991
{ 
# 4992
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 4993
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 4995
return make_float2(w.x, w.y); 
# 4996
} 
#endif
# 4998 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLod(texture< ushort2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 4999
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 5004
::exit(___);}
#if 0
# 4999
{ 
# 5000
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 5001
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5003
return make_float2(w.x, w.y); 
# 5004
} 
#endif
# 5006 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLod(texture< short4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 5007
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 5012
::exit(___);}
#if 0
# 5007
{ 
# 5008
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 5009
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5011
return make_float4(w.x, w.y, w.z, w.w); 
# 5012
} 
#endif
# 5014 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLod(texture< ushort4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 5015
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 5020
::exit(___);}
#if 0
# 5015
{ 
# 5016
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
# 5017
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5019
return make_float4(w.x, w.y, w.z, w.w); 
# 5020
} 
#endif
# 5028 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char tex1DLayeredLod(texture< char, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5029
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5037
::exit(___);}
#if 0
# 5029
{ 
# 5033
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5036
return (char)(v.x); 
# 5037
} 
#endif
# 5039 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex1DLayeredLod(texture< signed char, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5040
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5044
::exit(___);}
#if 0
# 5040
{ 
# 5041
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5043
return (signed char)(v.x); 
# 5044
} 
#endif
# 5046 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex1DLayeredLod(texture< unsigned char, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5047
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5051
::exit(___);}
#if 0
# 5047
{ 
# 5048
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5050
return (unsigned char)(v.x); 
# 5051
} 
#endif
# 5053 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex1DLayeredLod(texture< char1, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5054
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5058
::exit(___);}
#if 0
# 5054
{ 
# 5055
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5057
return make_char1(v.x); 
# 5058
} 
#endif
# 5060 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex1DLayeredLod(texture< uchar1, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5061
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5065
::exit(___);}
#if 0
# 5061
{ 
# 5062
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5064
return make_uchar1(v.x); 
# 5065
} 
#endif
# 5067 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex1DLayeredLod(texture< char2, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5068
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5072
::exit(___);}
#if 0
# 5068
{ 
# 5069
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5071
return make_char2(v.x, v.y); 
# 5072
} 
#endif
# 5074 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex1DLayeredLod(texture< uchar2, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5075
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5079
::exit(___);}
#if 0
# 5075
{ 
# 5076
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5078
return make_uchar2(v.x, v.y); 
# 5079
} 
#endif
# 5081 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex1DLayeredLod(texture< char4, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5082
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5086
::exit(___);}
#if 0
# 5082
{ 
# 5083
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5085
return make_char4(v.x, v.y, v.z, v.w); 
# 5086
} 
#endif
# 5088 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex1DLayeredLod(texture< uchar4, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5089
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5093
::exit(___);}
#if 0
# 5089
{ 
# 5090
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5092
return make_uchar4(v.x, v.y, v.z, v.w); 
# 5093
} 
#endif
# 5101 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short tex1DLayeredLod(texture< short, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5102
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5106
::exit(___);}
#if 0
# 5102
{ 
# 5103
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5105
return (short)(v.x); 
# 5106
} 
#endif
# 5108 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex1DLayeredLod(texture< unsigned short, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5109
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5113
::exit(___);}
#if 0
# 5109
{ 
# 5110
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5112
return (unsigned short)(v.x); 
# 5113
} 
#endif
# 5115 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex1DLayeredLod(texture< short1, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5116
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5120
::exit(___);}
#if 0
# 5116
{ 
# 5117
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5119
return make_short1(v.x); 
# 5120
} 
#endif
# 5122 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex1DLayeredLod(texture< ushort1, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5123
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5127
::exit(___);}
#if 0
# 5123
{ 
# 5124
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5126
return make_ushort1(v.x); 
# 5127
} 
#endif
# 5129 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex1DLayeredLod(texture< short2, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5130
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5134
::exit(___);}
#if 0
# 5130
{ 
# 5131
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5133
return make_short2(v.x, v.y); 
# 5134
} 
#endif
# 5136 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex1DLayeredLod(texture< ushort2, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5137
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5141
::exit(___);}
#if 0
# 5137
{ 
# 5138
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5140
return make_ushort2(v.x, v.y); 
# 5141
} 
#endif
# 5143 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex1DLayeredLod(texture< short4, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5144
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5148
::exit(___);}
#if 0
# 5144
{ 
# 5145
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5147
return make_short4(v.x, v.y, v.z, v.w); 
# 5148
} 
#endif
# 5150 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex1DLayeredLod(texture< ushort4, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5151
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5155
::exit(___);}
#if 0
# 5151
{ 
# 5152
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5154
return make_ushort4(v.x, v.y, v.z, v.w); 
# 5155
} 
#endif
# 5163 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int tex1DLayeredLod(texture< int, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5164
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5168
::exit(___);}
#if 0
# 5164
{ 
# 5165
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5167
return (int)(v.x); 
# 5168
} 
#endif
# 5170 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex1DLayeredLod(texture< unsigned, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5171
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5175
::exit(___);}
#if 0
# 5171
{ 
# 5172
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5174
return (unsigned)(v.x); 
# 5175
} 
#endif
# 5177 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex1DLayeredLod(texture< int1, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5178
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5182
::exit(___);}
#if 0
# 5178
{ 
# 5179
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5181
return make_int1(v.x); 
# 5182
} 
#endif
# 5184 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex1DLayeredLod(texture< uint1, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5185
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5189
::exit(___);}
#if 0
# 5185
{ 
# 5186
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5188
return make_uint1(v.x); 
# 5189
} 
#endif
# 5191 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex1DLayeredLod(texture< int2, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5192
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5196
::exit(___);}
#if 0
# 5192
{ 
# 5193
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5195
return make_int2(v.x, v.y); 
# 5196
} 
#endif
# 5198 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex1DLayeredLod(texture< uint2, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5199
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5203
::exit(___);}
#if 0
# 5199
{ 
# 5200
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5202
return make_uint2(v.x, v.y); 
# 5203
} 
#endif
# 5205 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex1DLayeredLod(texture< int4, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5206
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5210
::exit(___);}
#if 0
# 5206
{ 
# 5207
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5209
return make_int4(v.x, v.y, v.z, v.w); 
# 5210
} 
#endif
# 5212 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex1DLayeredLod(texture< uint4, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5213
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5217
::exit(___);}
#if 0
# 5213
{ 
# 5214
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5216
return make_uint4(v.x, v.y, v.z, v.w); 
# 5217
} 
#endif
# 5291 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredLod(texture< float, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5292
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5296
::exit(___);}
#if 0
# 5292
{ 
# 5293
float4 v = __ftexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5295
return v.x; 
# 5296
} 
#endif
# 5298 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredLod(texture< float1, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5299
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5303
::exit(___);}
#if 0
# 5299
{ 
# 5300
float4 v = __ftexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5302
return make_float1(v.x); 
# 5303
} 
#endif
# 5305 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredLod(texture< float2, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5306
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5310
::exit(___);}
#if 0
# 5306
{ 
# 5307
float4 v = __ftexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5309
return make_float2(v.x, v.y); 
# 5310
} 
#endif
# 5312 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredLod(texture< float4, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 5313
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5317
::exit(___);}
#if 0
# 5313
{ 
# 5314
float4 v = __ftexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5316
return make_float4(v.x, v.y, v.z, v.w); 
# 5317
} 
#endif
# 5325 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredLod(texture< char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5326
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5335
::exit(___);}
#if 0
# 5326
{ 
# 5330
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5332
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5334
return w.x; 
# 5335
} 
#endif
# 5337 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredLod(texture< signed char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5338
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5343
::exit(___);}
#if 0
# 5338
{ 
# 5339
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5340
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5342
return w.x; 
# 5343
} 
#endif
# 5345 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredLod(texture< unsigned char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5346
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5351
::exit(___);}
#if 0
# 5346
{ 
# 5347
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5348
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5350
return w.x; 
# 5351
} 
#endif
# 5353 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredLod(texture< char1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5354
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5359
::exit(___);}
#if 0
# 5354
{ 
# 5355
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5356
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5358
return make_float1(w.x); 
# 5359
} 
#endif
# 5361 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredLod(texture< uchar1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5362
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5367
::exit(___);}
#if 0
# 5362
{ 
# 5363
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5364
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5366
return make_float1(w.x); 
# 5367
} 
#endif
# 5369 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredLod(texture< char2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5370
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5375
::exit(___);}
#if 0
# 5370
{ 
# 5371
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5372
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5374
return make_float2(w.x, w.y); 
# 5375
} 
#endif
# 5377 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredLod(texture< uchar2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5378
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5383
::exit(___);}
#if 0
# 5378
{ 
# 5379
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5380
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5382
return make_float2(w.x, w.y); 
# 5383
} 
#endif
# 5385 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredLod(texture< char4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5386
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5391
::exit(___);}
#if 0
# 5386
{ 
# 5387
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5388
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5390
return make_float4(w.x, w.y, w.z, w.w); 
# 5391
} 
#endif
# 5393 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredLod(texture< uchar4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5394
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5399
::exit(___);}
#if 0
# 5394
{ 
# 5395
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5396
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5398
return make_float4(w.x, w.y, w.z, w.w); 
# 5399
} 
#endif
# 5407 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredLod(texture< short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5408
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5413
::exit(___);}
#if 0
# 5408
{ 
# 5409
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5410
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5412
return w.x; 
# 5413
} 
#endif
# 5415 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredLod(texture< unsigned short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5416
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5421
::exit(___);}
#if 0
# 5416
{ 
# 5417
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5418
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5420
return w.x; 
# 5421
} 
#endif
# 5423 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredLod(texture< short1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5424
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5429
::exit(___);}
#if 0
# 5424
{ 
# 5425
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5426
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5428
return make_float1(w.x); 
# 5429
} 
#endif
# 5431 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredLod(texture< ushort1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5432
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5437
::exit(___);}
#if 0
# 5432
{ 
# 5433
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5434
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5436
return make_float1(w.x); 
# 5437
} 
#endif
# 5439 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredLod(texture< short2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5440
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5445
::exit(___);}
#if 0
# 5440
{ 
# 5441
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5442
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5444
return make_float2(w.x, w.y); 
# 5445
} 
#endif
# 5447 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredLod(texture< ushort2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5448
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5453
::exit(___);}
#if 0
# 5448
{ 
# 5449
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5450
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5452
return make_float2(w.x, w.y); 
# 5453
} 
#endif
# 5455 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredLod(texture< short4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5456
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5461
::exit(___);}
#if 0
# 5456
{ 
# 5457
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5458
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5460
return make_float4(w.x, w.y, w.z, w.w); 
# 5461
} 
#endif
# 5463 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredLod(texture< ushort4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 5464
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 5469
::exit(___);}
#if 0
# 5464
{ 
# 5465
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
# 5466
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5468
return make_float4(w.x, w.y, w.z, w.w); 
# 5469
} 
#endif
# 5477 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char tex2DLayeredLod(texture< char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5478
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5486
::exit(___);}
#if 0
# 5478
{ 
# 5482
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5485
return (char)(v.x); 
# 5486
} 
#endif
# 5488 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex2DLayeredLod(texture< signed char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5489
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5493
::exit(___);}
#if 0
# 5489
{ 
# 5490
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5492
return (signed char)(v.x); 
# 5493
} 
#endif
# 5495 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex2DLayeredLod(texture< unsigned char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5496
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5500
::exit(___);}
#if 0
# 5496
{ 
# 5497
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5499
return (unsigned char)(v.x); 
# 5500
} 
#endif
# 5502 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex2DLayeredLod(texture< char1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5503
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5507
::exit(___);}
#if 0
# 5503
{ 
# 5504
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5506
return make_char1(v.x); 
# 5507
} 
#endif
# 5509 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex2DLayeredLod(texture< uchar1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5510
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5514
::exit(___);}
#if 0
# 5510
{ 
# 5511
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5513
return make_uchar1(v.x); 
# 5514
} 
#endif
# 5516 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex2DLayeredLod(texture< char2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5517
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5521
::exit(___);}
#if 0
# 5517
{ 
# 5518
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5520
return make_char2(v.x, v.y); 
# 5521
} 
#endif
# 5523 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex2DLayeredLod(texture< uchar2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5524
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5528
::exit(___);}
#if 0
# 5524
{ 
# 5525
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5527
return make_uchar2(v.x, v.y); 
# 5528
} 
#endif
# 5530 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2DLayeredLod(texture< char4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5531
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5535
::exit(___);}
#if 0
# 5531
{ 
# 5532
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5534
return make_char4(v.x, v.y, v.z, v.w); 
# 5535
} 
#endif
# 5537 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2DLayeredLod(texture< uchar4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5538
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5542
::exit(___);}
#if 0
# 5538
{ 
# 5539
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5541
return make_uchar4(v.x, v.y, v.z, v.w); 
# 5542
} 
#endif
# 5550 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short tex2DLayeredLod(texture< short, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5551
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5555
::exit(___);}
#if 0
# 5551
{ 
# 5552
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5554
return (short)(v.x); 
# 5555
} 
#endif
# 5557 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex2DLayeredLod(texture< unsigned short, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5558
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5562
::exit(___);}
#if 0
# 5558
{ 
# 5559
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5561
return (unsigned short)(v.x); 
# 5562
} 
#endif
# 5564 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex2DLayeredLod(texture< short1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5565
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5569
::exit(___);}
#if 0
# 5565
{ 
# 5566
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5568
return make_short1(v.x); 
# 5569
} 
#endif
# 5571 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex2DLayeredLod(texture< ushort1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5572
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5576
::exit(___);}
#if 0
# 5572
{ 
# 5573
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5575
return make_ushort1(v.x); 
# 5576
} 
#endif
# 5578 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex2DLayeredLod(texture< short2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5579
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5583
::exit(___);}
#if 0
# 5579
{ 
# 5580
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5582
return make_short2(v.x, v.y); 
# 5583
} 
#endif
# 5585 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex2DLayeredLod(texture< ushort2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5586
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5590
::exit(___);}
#if 0
# 5586
{ 
# 5587
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5589
return make_ushort2(v.x, v.y); 
# 5590
} 
#endif
# 5592 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2DLayeredLod(texture< short4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5593
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5597
::exit(___);}
#if 0
# 5593
{ 
# 5594
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5596
return make_short4(v.x, v.y, v.z, v.w); 
# 5597
} 
#endif
# 5599 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2DLayeredLod(texture< ushort4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5600
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5604
::exit(___);}
#if 0
# 5600
{ 
# 5601
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5603
return make_ushort4(v.x, v.y, v.z, v.w); 
# 5604
} 
#endif
# 5612 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int tex2DLayeredLod(texture< int, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5613
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5617
::exit(___);}
#if 0
# 5613
{ 
# 5614
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5616
return (int)(v.x); 
# 5617
} 
#endif
# 5619 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex2DLayeredLod(texture< unsigned, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5620
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5624
::exit(___);}
#if 0
# 5620
{ 
# 5621
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5623
return (unsigned)(v.x); 
# 5624
} 
#endif
# 5626 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex2DLayeredLod(texture< int1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5627
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5631
::exit(___);}
#if 0
# 5627
{ 
# 5628
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5630
return make_int1(v.x); 
# 5631
} 
#endif
# 5633 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex2DLayeredLod(texture< uint1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5634
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5638
::exit(___);}
#if 0
# 5634
{ 
# 5635
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5637
return make_uint1(v.x); 
# 5638
} 
#endif
# 5640 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex2DLayeredLod(texture< int2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5641
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5645
::exit(___);}
#if 0
# 5641
{ 
# 5642
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5644
return make_int2(v.x, v.y); 
# 5645
} 
#endif
# 5647 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex2DLayeredLod(texture< uint2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5648
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5652
::exit(___);}
#if 0
# 5648
{ 
# 5649
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5651
return make_uint2(v.x, v.y); 
# 5652
} 
#endif
# 5654 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2DLayeredLod(texture< int4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5655
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5659
::exit(___);}
#if 0
# 5655
{ 
# 5656
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5658
return make_int4(v.x, v.y, v.z, v.w); 
# 5659
} 
#endif
# 5661 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2DLayeredLod(texture< uint4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5662
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5666
::exit(___);}
#if 0
# 5662
{ 
# 5663
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5665
return make_uint4(v.x, v.y, v.z, v.w); 
# 5666
} 
#endif
# 5740 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredLod(texture< float, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5741
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5745
::exit(___);}
#if 0
# 5741
{ 
# 5742
float4 v = __ftexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5744
return v.x; 
# 5745
} 
#endif
# 5747 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredLod(texture< float1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5748
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5752
::exit(___);}
#if 0
# 5748
{ 
# 5749
float4 v = __ftexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5751
return make_float1(v.x); 
# 5752
} 
#endif
# 5754 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredLod(texture< float2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5755
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5759
::exit(___);}
#if 0
# 5755
{ 
# 5756
float4 v = __ftexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5758
return make_float2(v.x, v.y); 
# 5759
} 
#endif
# 5761 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredLod(texture< float4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 5762
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5766
::exit(___);}
#if 0
# 5762
{ 
# 5763
float4 v = __ftexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5765
return make_float4(v.x, v.y, v.z, v.w); 
# 5766
} 
#endif
# 5774 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredLod(texture< char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5775
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5784
::exit(___);}
#if 0
# 5775
{ 
# 5779
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5781
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5783
return w.x; 
# 5784
} 
#endif
# 5786 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredLod(texture< signed char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5787
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5792
::exit(___);}
#if 0
# 5787
{ 
# 5788
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5789
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5791
return w.x; 
# 5792
} 
#endif
# 5794 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredLod(texture< unsigned char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5795
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5800
::exit(___);}
#if 0
# 5795
{ 
# 5796
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5797
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5799
return w.x; 
# 5800
} 
#endif
# 5802 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredLod(texture< char1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5803
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5808
::exit(___);}
#if 0
# 5803
{ 
# 5804
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5805
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5807
return make_float1(w.x); 
# 5808
} 
#endif
# 5810 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredLod(texture< uchar1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5811
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5816
::exit(___);}
#if 0
# 5811
{ 
# 5812
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5813
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5815
return make_float1(w.x); 
# 5816
} 
#endif
# 5818 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredLod(texture< char2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5819
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5824
::exit(___);}
#if 0
# 5819
{ 
# 5820
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5821
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5823
return make_float2(w.x, w.y); 
# 5824
} 
#endif
# 5826 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredLod(texture< uchar2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5827
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5832
::exit(___);}
#if 0
# 5827
{ 
# 5828
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5829
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5831
return make_float2(w.x, w.y); 
# 5832
} 
#endif
# 5834 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredLod(texture< char4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5835
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5840
::exit(___);}
#if 0
# 5835
{ 
# 5836
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5837
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5839
return make_float4(w.x, w.y, w.z, w.w); 
# 5840
} 
#endif
# 5842 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredLod(texture< uchar4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5843
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5848
::exit(___);}
#if 0
# 5843
{ 
# 5844
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5845
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5847
return make_float4(w.x, w.y, w.z, w.w); 
# 5848
} 
#endif
# 5856 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredLod(texture< short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5857
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5862
::exit(___);}
#if 0
# 5857
{ 
# 5858
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5859
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5861
return w.x; 
# 5862
} 
#endif
# 5864 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredLod(texture< unsigned short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5865
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5870
::exit(___);}
#if 0
# 5865
{ 
# 5866
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5867
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5869
return w.x; 
# 5870
} 
#endif
# 5872 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredLod(texture< short1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5873
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5878
::exit(___);}
#if 0
# 5873
{ 
# 5874
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5875
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5877
return make_float1(w.x); 
# 5878
} 
#endif
# 5880 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredLod(texture< ushort1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5881
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5886
::exit(___);}
#if 0
# 5881
{ 
# 5882
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5883
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5885
return make_float1(w.x); 
# 5886
} 
#endif
# 5888 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredLod(texture< short2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5889
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5894
::exit(___);}
#if 0
# 5889
{ 
# 5890
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5891
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5893
return make_float2(w.x, w.y); 
# 5894
} 
#endif
# 5896 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredLod(texture< ushort2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5897
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5902
::exit(___);}
#if 0
# 5897
{ 
# 5898
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5899
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5901
return make_float2(w.x, w.y); 
# 5902
} 
#endif
# 5904 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredLod(texture< short4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5905
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5910
::exit(___);}
#if 0
# 5905
{ 
# 5906
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5907
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5909
return make_float4(w.x, w.y, w.z, w.w); 
# 5910
} 
#endif
# 5912 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredLod(texture< ushort4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 5913
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 5918
::exit(___);}
#if 0
# 5913
{ 
# 5914
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
# 5915
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 5917
return make_float4(w.x, w.y, w.z, w.w); 
# 5918
} 
#endif
# 5926 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char tex3DLod(texture< char, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5927
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5935
::exit(___);}
#if 0
# 5927
{ 
# 5931
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5934
return (char)(v.x); 
# 5935
} 
#endif
# 5937 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex3DLod(texture< signed char, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5938
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5942
::exit(___);}
#if 0
# 5938
{ 
# 5939
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5941
return (signed char)(v.x); 
# 5942
} 
#endif
# 5944 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex3DLod(texture< unsigned char, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5945
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5949
::exit(___);}
#if 0
# 5945
{ 
# 5946
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5948
return (unsigned char)(v.x); 
# 5949
} 
#endif
# 5951 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex3DLod(texture< char1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5952
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5956
::exit(___);}
#if 0
# 5952
{ 
# 5953
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5955
return make_char1(v.x); 
# 5956
} 
#endif
# 5958 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex3DLod(texture< uchar1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5959
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5963
::exit(___);}
#if 0
# 5959
{ 
# 5960
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5962
return make_uchar1(v.x); 
# 5963
} 
#endif
# 5965 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex3DLod(texture< char2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5966
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5970
::exit(___);}
#if 0
# 5966
{ 
# 5967
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5969
return make_char2(v.x, v.y); 
# 5970
} 
#endif
# 5972 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex3DLod(texture< uchar2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5973
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5977
::exit(___);}
#if 0
# 5973
{ 
# 5974
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5976
return make_uchar2(v.x, v.y); 
# 5977
} 
#endif
# 5979 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex3DLod(texture< char4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5980
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5984
::exit(___);}
#if 0
# 5980
{ 
# 5981
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5983
return make_char4(v.x, v.y, v.z, v.w); 
# 5984
} 
#endif
# 5986 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex3DLod(texture< uchar4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 5987
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 5991
::exit(___);}
#if 0
# 5987
{ 
# 5988
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 5990
return make_uchar4(v.x, v.y, v.z, v.w); 
# 5991
} 
#endif
# 5999 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short tex3DLod(texture< short, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6000
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6004
::exit(___);}
#if 0
# 6000
{ 
# 6001
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6003
return (short)(v.x); 
# 6004
} 
#endif
# 6006 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex3DLod(texture< unsigned short, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6007
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6011
::exit(___);}
#if 0
# 6007
{ 
# 6008
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6010
return (unsigned short)(v.x); 
# 6011
} 
#endif
# 6013 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex3DLod(texture< short1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6014
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6018
::exit(___);}
#if 0
# 6014
{ 
# 6015
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6017
return make_short1(v.x); 
# 6018
} 
#endif
# 6020 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex3DLod(texture< ushort1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6021
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6025
::exit(___);}
#if 0
# 6021
{ 
# 6022
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6024
return make_ushort1(v.x); 
# 6025
} 
#endif
# 6027 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex3DLod(texture< short2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6028
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6032
::exit(___);}
#if 0
# 6028
{ 
# 6029
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6031
return make_short2(v.x, v.y); 
# 6032
} 
#endif
# 6034 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex3DLod(texture< ushort2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6035
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6039
::exit(___);}
#if 0
# 6035
{ 
# 6036
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6038
return make_ushort2(v.x, v.y); 
# 6039
} 
#endif
# 6041 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex3DLod(texture< short4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6042
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6046
::exit(___);}
#if 0
# 6042
{ 
# 6043
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6045
return make_short4(v.x, v.y, v.z, v.w); 
# 6046
} 
#endif
# 6048 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex3DLod(texture< ushort4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6049
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6053
::exit(___);}
#if 0
# 6049
{ 
# 6050
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6052
return make_ushort4(v.x, v.y, v.z, v.w); 
# 6053
} 
#endif
# 6061 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int tex3DLod(texture< int, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6062
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6066
::exit(___);}
#if 0
# 6062
{ 
# 6063
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6065
return (int)(v.x); 
# 6066
} 
#endif
# 6068 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex3DLod(texture< unsigned, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6069
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6073
::exit(___);}
#if 0
# 6069
{ 
# 6070
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6072
return (unsigned)(v.x); 
# 6073
} 
#endif
# 6075 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex3DLod(texture< int1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6076
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6080
::exit(___);}
#if 0
# 6076
{ 
# 6077
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6079
return make_int1(v.x); 
# 6080
} 
#endif
# 6082 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex3DLod(texture< uint1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6083
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6087
::exit(___);}
#if 0
# 6083
{ 
# 6084
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6086
return make_uint1(v.x); 
# 6087
} 
#endif
# 6089 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex3DLod(texture< int2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6090
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6094
::exit(___);}
#if 0
# 6090
{ 
# 6091
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6093
return make_int2(v.x, v.y); 
# 6094
} 
#endif
# 6096 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex3DLod(texture< uint2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6097
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6101
::exit(___);}
#if 0
# 6097
{ 
# 6098
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6100
return make_uint2(v.x, v.y); 
# 6101
} 
#endif
# 6103 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex3DLod(texture< int4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6104
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6108
::exit(___);}
#if 0
# 6104
{ 
# 6105
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6107
return make_int4(v.x, v.y, v.z, v.w); 
# 6108
} 
#endif
# 6110 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex3DLod(texture< uint4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6111
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6115
::exit(___);}
#if 0
# 6111
{ 
# 6112
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6114
return make_uint4(v.x, v.y, v.z, v.w); 
# 6115
} 
#endif
# 6189 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DLod(texture< float, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6190
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6194
::exit(___);}
#if 0
# 6190
{ 
# 6191
float4 v = __ftexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6193
return v.x; 
# 6194
} 
#endif
# 6196 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DLod(texture< float1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6197
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6201
::exit(___);}
#if 0
# 6197
{ 
# 6198
float4 v = __ftexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6200
return make_float1(v.x); 
# 6201
} 
#endif
# 6203 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DLod(texture< float2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6204
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6208
::exit(___);}
#if 0
# 6204
{ 
# 6205
float4 v = __ftexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6207
return make_float2(v.x, v.y); 
# 6208
} 
#endif
# 6210 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DLod(texture< float4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6211
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6215
::exit(___);}
#if 0
# 6211
{ 
# 6212
float4 v = __ftexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6214
return make_float4(v.x, v.y, v.z, v.w); 
# 6215
} 
#endif
# 6223 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DLod(texture< char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6224
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6233
::exit(___);}
#if 0
# 6224
{ 
# 6228
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6230
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6232
return w.x; 
# 6233
} 
#endif
# 6235 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DLod(texture< signed char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6236
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6241
::exit(___);}
#if 0
# 6236
{ 
# 6237
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6238
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6240
return w.x; 
# 6241
} 
#endif
# 6243 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DLod(texture< unsigned char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6244
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6249
::exit(___);}
#if 0
# 6244
{ 
# 6245
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6246
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6248
return w.x; 
# 6249
} 
#endif
# 6251 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DLod(texture< char1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6252
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6257
::exit(___);}
#if 0
# 6252
{ 
# 6253
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6254
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6256
return make_float1(w.x); 
# 6257
} 
#endif
# 6259 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DLod(texture< uchar1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6260
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6265
::exit(___);}
#if 0
# 6260
{ 
# 6261
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6262
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6264
return make_float1(w.x); 
# 6265
} 
#endif
# 6267 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DLod(texture< char2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6268
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6273
::exit(___);}
#if 0
# 6268
{ 
# 6269
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6270
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6272
return make_float2(w.x, w.y); 
# 6273
} 
#endif
# 6275 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DLod(texture< uchar2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6276
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6281
::exit(___);}
#if 0
# 6276
{ 
# 6277
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6278
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6280
return make_float2(w.x, w.y); 
# 6281
} 
#endif
# 6283 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DLod(texture< char4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6284
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6289
::exit(___);}
#if 0
# 6284
{ 
# 6285
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6286
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6288
return make_float4(w.x, w.y, w.z, w.w); 
# 6289
} 
#endif
# 6291 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DLod(texture< uchar4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6292
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6297
::exit(___);}
#if 0
# 6292
{ 
# 6293
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6294
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6296
return make_float4(w.x, w.y, w.z, w.w); 
# 6297
} 
#endif
# 6305 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DLod(texture< short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6306
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6311
::exit(___);}
#if 0
# 6306
{ 
# 6307
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6308
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6310
return w.x; 
# 6311
} 
#endif
# 6313 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DLod(texture< unsigned short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6314
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6319
::exit(___);}
#if 0
# 6314
{ 
# 6315
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6316
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6318
return w.x; 
# 6319
} 
#endif
# 6321 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DLod(texture< short1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6322
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6327
::exit(___);}
#if 0
# 6322
{ 
# 6323
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6324
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6326
return make_float1(w.x); 
# 6327
} 
#endif
# 6329 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DLod(texture< ushort1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6330
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6335
::exit(___);}
#if 0
# 6330
{ 
# 6331
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6332
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6334
return make_float1(w.x); 
# 6335
} 
#endif
# 6337 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DLod(texture< short2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6338
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6343
::exit(___);}
#if 0
# 6338
{ 
# 6339
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6340
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6342
return make_float2(w.x, w.y); 
# 6343
} 
#endif
# 6345 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DLod(texture< ushort2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6346
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6351
::exit(___);}
#if 0
# 6346
{ 
# 6347
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6348
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6350
return make_float2(w.x, w.y); 
# 6351
} 
#endif
# 6353 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DLod(texture< short4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6354
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6359
::exit(___);}
#if 0
# 6354
{ 
# 6355
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6356
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6358
return make_float4(w.x, w.y, w.z, w.w); 
# 6359
} 
#endif
# 6361 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DLod(texture< ushort4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6362
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6367
::exit(___);}
#if 0
# 6362
{ 
# 6363
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
# 6364
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6366
return make_float4(w.x, w.y, w.z, w.w); 
# 6367
} 
#endif
# 6375 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char texCubemapLod(texture< char, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6376
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6384
::exit(___);}
#if 0
# 6376
{ 
# 6380
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6383
return (char)(v.x); 
# 6384
} 
#endif
# 6386 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline signed char texCubemapLod(texture< signed char, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6387
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6391
::exit(___);}
#if 0
# 6387
{ 
# 6388
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6390
return (signed char)(v.x); 
# 6391
} 
#endif
# 6393 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char texCubemapLod(texture< unsigned char, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6394
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6398
::exit(___);}
#if 0
# 6394
{ 
# 6395
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6397
return (unsigned char)(v.x); 
# 6398
} 
#endif
# 6400 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char1 texCubemapLod(texture< char1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6401
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6405
::exit(___);}
#if 0
# 6401
{ 
# 6402
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6404
return make_char1(v.x); 
# 6405
} 
#endif
# 6407 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 texCubemapLod(texture< uchar1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6408
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6412
::exit(___);}
#if 0
# 6408
{ 
# 6409
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6411
return make_uchar1(v.x); 
# 6412
} 
#endif
# 6414 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char2 texCubemapLod(texture< char2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6415
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6419
::exit(___);}
#if 0
# 6415
{ 
# 6416
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6418
return make_char2(v.x, v.y); 
# 6419
} 
#endif
# 6421 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 texCubemapLod(texture< uchar2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6422
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6426
::exit(___);}
#if 0
# 6422
{ 
# 6423
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6425
return make_uchar2(v.x, v.y); 
# 6426
} 
#endif
# 6428 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char4 texCubemapLod(texture< char4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6429
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6433
::exit(___);}
#if 0
# 6429
{ 
# 6430
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6432
return make_char4(v.x, v.y, v.z, v.w); 
# 6433
} 
#endif
# 6435 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 texCubemapLod(texture< uchar4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6436
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6440
::exit(___);}
#if 0
# 6436
{ 
# 6437
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6439
return make_uchar4(v.x, v.y, v.z, v.w); 
# 6440
} 
#endif
# 6448 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short texCubemapLod(texture< short, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6449
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6453
::exit(___);}
#if 0
# 6449
{ 
# 6450
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6452
return (short)(v.x); 
# 6453
} 
#endif
# 6455 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short texCubemapLod(texture< unsigned short, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6456
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6460
::exit(___);}
#if 0
# 6456
{ 
# 6457
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6459
return (unsigned short)(v.x); 
# 6460
} 
#endif
# 6462 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short1 texCubemapLod(texture< short1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6463
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6467
::exit(___);}
#if 0
# 6463
{ 
# 6464
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6466
return make_short1(v.x); 
# 6467
} 
#endif
# 6469 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 texCubemapLod(texture< ushort1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6470
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6474
::exit(___);}
#if 0
# 6470
{ 
# 6471
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6473
return make_ushort1(v.x); 
# 6474
} 
#endif
# 6476 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short2 texCubemapLod(texture< short2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6477
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6481
::exit(___);}
#if 0
# 6477
{ 
# 6478
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6480
return make_short2(v.x, v.y); 
# 6481
} 
#endif
# 6483 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 texCubemapLod(texture< ushort2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6484
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6488
::exit(___);}
#if 0
# 6484
{ 
# 6485
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6487
return make_ushort2(v.x, v.y); 
# 6488
} 
#endif
# 6490 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short4 texCubemapLod(texture< short4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6491
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6495
::exit(___);}
#if 0
# 6491
{ 
# 6492
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6494
return make_short4(v.x, v.y, v.z, v.w); 
# 6495
} 
#endif
# 6497 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 texCubemapLod(texture< ushort4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6498
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6502
::exit(___);}
#if 0
# 6498
{ 
# 6499
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6501
return make_ushort4(v.x, v.y, v.z, v.w); 
# 6502
} 
#endif
# 6510 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int texCubemapLod(texture< int, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6511
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6515
::exit(___);}
#if 0
# 6511
{ 
# 6512
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6514
return (int)(v.x); 
# 6515
} 
#endif
# 6517 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned texCubemapLod(texture< unsigned, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6518
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6522
::exit(___);}
#if 0
# 6518
{ 
# 6519
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6521
return (unsigned)(v.x); 
# 6522
} 
#endif
# 6524 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int1 texCubemapLod(texture< int1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6525
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6529
::exit(___);}
#if 0
# 6525
{ 
# 6526
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6528
return make_int1(v.x); 
# 6529
} 
#endif
# 6531 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 texCubemapLod(texture< uint1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6532
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6536
::exit(___);}
#if 0
# 6532
{ 
# 6533
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6535
return make_uint1(v.x); 
# 6536
} 
#endif
# 6538 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int2 texCubemapLod(texture< int2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6539
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6543
::exit(___);}
#if 0
# 6539
{ 
# 6540
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6542
return make_int2(v.x, v.y); 
# 6543
} 
#endif
# 6545 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 texCubemapLod(texture< uint2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6546
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6550
::exit(___);}
#if 0
# 6546
{ 
# 6547
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6549
return make_uint2(v.x, v.y); 
# 6550
} 
#endif
# 6552 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int4 texCubemapLod(texture< int4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6553
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6557
::exit(___);}
#if 0
# 6553
{ 
# 6554
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6556
return make_int4(v.x, v.y, v.z, v.w); 
# 6557
} 
#endif
# 6559 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 texCubemapLod(texture< uint4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6560
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6564
::exit(___);}
#if 0
# 6560
{ 
# 6561
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6563
return make_uint4(v.x, v.y, v.z, v.w); 
# 6564
} 
#endif
# 6638 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLod(texture< float, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6639
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6643
::exit(___);}
#if 0
# 6639
{ 
# 6640
float4 v = __ftexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6642
return v.x; 
# 6643
} 
#endif
# 6645 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLod(texture< float1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6646
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6650
::exit(___);}
#if 0
# 6646
{ 
# 6647
float4 v = __ftexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6649
return make_float1(v.x); 
# 6650
} 
#endif
# 6652 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLod(texture< float2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6653
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6657
::exit(___);}
#if 0
# 6653
{ 
# 6654
float4 v = __ftexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6656
return make_float2(v.x, v.y); 
# 6657
} 
#endif
# 6659 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLod(texture< float4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 6660
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6664
::exit(___);}
#if 0
# 6660
{ 
# 6661
float4 v = __ftexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6663
return make_float4(v.x, v.y, v.z, v.w); 
# 6664
} 
#endif
# 6672 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLod(texture< char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6673
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6682
::exit(___);}
#if 0
# 6673
{ 
# 6677
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6679
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6681
return w.x; 
# 6682
} 
#endif
# 6684 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLod(texture< signed char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6685
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6690
::exit(___);}
#if 0
# 6685
{ 
# 6686
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6687
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6689
return w.x; 
# 6690
} 
#endif
# 6692 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLod(texture< unsigned char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6693
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6698
::exit(___);}
#if 0
# 6693
{ 
# 6694
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6695
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6697
return w.x; 
# 6698
} 
#endif
# 6700 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLod(texture< char1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6701
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6706
::exit(___);}
#if 0
# 6701
{ 
# 6702
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6703
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6705
return make_float1(w.x); 
# 6706
} 
#endif
# 6708 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLod(texture< uchar1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6709
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6714
::exit(___);}
#if 0
# 6709
{ 
# 6710
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6711
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6713
return make_float1(w.x); 
# 6714
} 
#endif
# 6716 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLod(texture< char2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6717
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6722
::exit(___);}
#if 0
# 6717
{ 
# 6718
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6719
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6721
return make_float2(w.x, w.y); 
# 6722
} 
#endif
# 6724 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLod(texture< uchar2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6725
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6730
::exit(___);}
#if 0
# 6725
{ 
# 6726
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6727
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6729
return make_float2(w.x, w.y); 
# 6730
} 
#endif
# 6732 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLod(texture< char4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6733
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6738
::exit(___);}
#if 0
# 6733
{ 
# 6734
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6735
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6737
return make_float4(w.x, w.y, w.z, w.w); 
# 6738
} 
#endif
# 6740 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLod(texture< uchar4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6741
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6746
::exit(___);}
#if 0
# 6741
{ 
# 6742
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6743
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6745
return make_float4(w.x, w.y, w.z, w.w); 
# 6746
} 
#endif
# 6754 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLod(texture< short, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6755
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6760
::exit(___);}
#if 0
# 6755
{ 
# 6756
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6757
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6759
return w.x; 
# 6760
} 
#endif
# 6762 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLod(texture< unsigned short, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6763
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6768
::exit(___);}
#if 0
# 6763
{ 
# 6764
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6765
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6767
return w.x; 
# 6768
} 
#endif
# 6770 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLod(texture< short1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6771
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6776
::exit(___);}
#if 0
# 6771
{ 
# 6772
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6773
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6775
return make_float1(w.x); 
# 6776
} 
#endif
# 6778 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLod(texture< ushort1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6779
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6784
::exit(___);}
#if 0
# 6779
{ 
# 6780
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6781
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6783
return make_float1(w.x); 
# 6784
} 
#endif
# 6786 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLod(texture< short2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6787
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6792
::exit(___);}
#if 0
# 6787
{ 
# 6788
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6789
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6791
return make_float2(w.x, w.y); 
# 6792
} 
#endif
# 6794 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLod(texture< ushort2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6795
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6800
::exit(___);}
#if 0
# 6795
{ 
# 6796
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6797
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6799
return make_float2(w.x, w.y); 
# 6800
} 
#endif
# 6802 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLod(texture< short4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6803
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6808
::exit(___);}
#if 0
# 6803
{ 
# 6804
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6805
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6807
return make_float4(w.x, w.y, w.z, w.w); 
# 6808
} 
#endif
# 6810 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLod(texture< ushort4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 6811
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 6816
::exit(___);}
#if 0
# 6811
{ 
# 6812
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
# 6813
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 6815
return make_float4(w.x, w.y, w.z, w.w); 
# 6816
} 
#endif
# 6824 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char texCubemapLayeredLod(texture< char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6825
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6833
::exit(___);}
#if 0
# 6825
{ 
# 6829
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6832
return (char)(v.x); 
# 6833
} 
#endif
# 6835 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline signed char texCubemapLayeredLod(texture< signed char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6836
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6840
::exit(___);}
#if 0
# 6836
{ 
# 6837
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6839
return (signed char)(v.x); 
# 6840
} 
#endif
# 6842 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char texCubemapLayeredLod(texture< unsigned char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6843
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6847
::exit(___);}
#if 0
# 6843
{ 
# 6844
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6846
return (unsigned char)(v.x); 
# 6847
} 
#endif
# 6849 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char1 texCubemapLayeredLod(texture< char1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6850
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6854
::exit(___);}
#if 0
# 6850
{ 
# 6851
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6853
return make_char1(v.x); 
# 6854
} 
#endif
# 6856 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 texCubemapLayeredLod(texture< uchar1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6857
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6861
::exit(___);}
#if 0
# 6857
{ 
# 6858
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6860
return make_uchar1(v.x); 
# 6861
} 
#endif
# 6863 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char2 texCubemapLayeredLod(texture< char2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6864
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6868
::exit(___);}
#if 0
# 6864
{ 
# 6865
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6867
return make_char2(v.x, v.y); 
# 6868
} 
#endif
# 6870 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 texCubemapLayeredLod(texture< uchar2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6871
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6875
::exit(___);}
#if 0
# 6871
{ 
# 6872
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6874
return make_uchar2(v.x, v.y); 
# 6875
} 
#endif
# 6877 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char4 texCubemapLayeredLod(texture< char4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6878
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6882
::exit(___);}
#if 0
# 6878
{ 
# 6879
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6881
return make_char4(v.x, v.y, v.z, v.w); 
# 6882
} 
#endif
# 6884 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 texCubemapLayeredLod(texture< uchar4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6885
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6889
::exit(___);}
#if 0
# 6885
{ 
# 6886
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6888
return make_uchar4(v.x, v.y, v.z, v.w); 
# 6889
} 
#endif
# 6897 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short texCubemapLayeredLod(texture< short, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6898
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6902
::exit(___);}
#if 0
# 6898
{ 
# 6899
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6901
return (short)(v.x); 
# 6902
} 
#endif
# 6904 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short texCubemapLayeredLod(texture< unsigned short, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6905
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6909
::exit(___);}
#if 0
# 6905
{ 
# 6906
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6908
return (unsigned short)(v.x); 
# 6909
} 
#endif
# 6911 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short1 texCubemapLayeredLod(texture< short1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6912
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6916
::exit(___);}
#if 0
# 6912
{ 
# 6913
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6915
return make_short1(v.x); 
# 6916
} 
#endif
# 6918 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 texCubemapLayeredLod(texture< ushort1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6919
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6923
::exit(___);}
#if 0
# 6919
{ 
# 6920
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6922
return make_ushort1(v.x); 
# 6923
} 
#endif
# 6925 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short2 texCubemapLayeredLod(texture< short2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6926
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6930
::exit(___);}
#if 0
# 6926
{ 
# 6927
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6929
return make_short2(v.x, v.y); 
# 6930
} 
#endif
# 6932 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 texCubemapLayeredLod(texture< ushort2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6933
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6937
::exit(___);}
#if 0
# 6933
{ 
# 6934
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6936
return make_ushort2(v.x, v.y); 
# 6937
} 
#endif
# 6939 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short4 texCubemapLayeredLod(texture< short4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6940
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6944
::exit(___);}
#if 0
# 6940
{ 
# 6941
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6943
return make_short4(v.x, v.y, v.z, v.w); 
# 6944
} 
#endif
# 6946 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 texCubemapLayeredLod(texture< ushort4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6947
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6951
::exit(___);}
#if 0
# 6947
{ 
# 6948
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6950
return make_ushort4(v.x, v.y, v.z, v.w); 
# 6951
} 
#endif
# 6959 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int texCubemapLayeredLod(texture< int, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6960
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6964
::exit(___);}
#if 0
# 6960
{ 
# 6961
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6963
return (int)(v.x); 
# 6964
} 
#endif
# 6966 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned texCubemapLayeredLod(texture< unsigned, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6967
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6971
::exit(___);}
#if 0
# 6967
{ 
# 6968
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6970
return (unsigned)(v.x); 
# 6971
} 
#endif
# 6973 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int1 texCubemapLayeredLod(texture< int1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6974
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6978
::exit(___);}
#if 0
# 6974
{ 
# 6975
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6977
return make_int1(v.x); 
# 6978
} 
#endif
# 6980 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 texCubemapLayeredLod(texture< uint1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6981
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6985
::exit(___);}
#if 0
# 6981
{ 
# 6982
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6984
return make_uint1(v.x); 
# 6985
} 
#endif
# 6987 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int2 texCubemapLayeredLod(texture< int2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6988
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6992
::exit(___);}
#if 0
# 6988
{ 
# 6989
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6991
return make_int2(v.x, v.y); 
# 6992
} 
#endif
# 6994 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 texCubemapLayeredLod(texture< uint2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 6995
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 6999
::exit(___);}
#if 0
# 6995
{ 
# 6996
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 6998
return make_uint2(v.x, v.y); 
# 6999
} 
#endif
# 7001 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int4 texCubemapLayeredLod(texture< int4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 7002
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7006
::exit(___);}
#if 0
# 7002
{ 
# 7003
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7005
return make_int4(v.x, v.y, v.z, v.w); 
# 7006
} 
#endif
# 7008 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 texCubemapLayeredLod(texture< uint4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 7009
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7013
::exit(___);}
#if 0
# 7009
{ 
# 7010
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7012
return make_uint4(v.x, v.y, v.z, v.w); 
# 7013
} 
#endif
# 7087 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayeredLod(texture< float, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 7088
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7092
::exit(___);}
#if 0
# 7088
{ 
# 7089
float4 v = __ftexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7091
return v.x; 
# 7092
} 
#endif
# 7094 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayeredLod(texture< float1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 7095
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7099
::exit(___);}
#if 0
# 7095
{ 
# 7096
float4 v = __ftexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7098
return make_float1(v.x); 
# 7099
} 
#endif
# 7101 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayeredLod(texture< float2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 7102
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7106
::exit(___);}
#if 0
# 7102
{ 
# 7103
float4 v = __ftexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7105
return make_float2(v.x, v.y); 
# 7106
} 
#endif
# 7108 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayeredLod(texture< float4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 7109
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7113
::exit(___);}
#if 0
# 7109
{ 
# 7110
float4 v = __ftexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7112
return make_float4(v.x, v.y, v.z, v.w); 
# 7113
} 
#endif
# 7121 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayeredLod(texture< char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7122
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7131
::exit(___);}
#if 0
# 7122
{ 
# 7126
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7128
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7130
return w.x; 
# 7131
} 
#endif
# 7133 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayeredLod(texture< signed char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7134
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7139
::exit(___);}
#if 0
# 7134
{ 
# 7135
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7136
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7138
return w.x; 
# 7139
} 
#endif
# 7141 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayeredLod(texture< unsigned char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7142
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7147
::exit(___);}
#if 0
# 7142
{ 
# 7143
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7144
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7146
return w.x; 
# 7147
} 
#endif
# 7149 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayeredLod(texture< char1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7150
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7155
::exit(___);}
#if 0
# 7150
{ 
# 7151
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7152
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7154
return make_float1(w.x); 
# 7155
} 
#endif
# 7157 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayeredLod(texture< uchar1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7158
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7163
::exit(___);}
#if 0
# 7158
{ 
# 7159
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7160
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7162
return make_float1(w.x); 
# 7163
} 
#endif
# 7165 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayeredLod(texture< char2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7166
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7171
::exit(___);}
#if 0
# 7166
{ 
# 7167
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7168
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7170
return make_float2(w.x, w.y); 
# 7171
} 
#endif
# 7173 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayeredLod(texture< uchar2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7174
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7179
::exit(___);}
#if 0
# 7174
{ 
# 7175
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7176
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7178
return make_float2(w.x, w.y); 
# 7179
} 
#endif
# 7181 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayeredLod(texture< char4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7182
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7187
::exit(___);}
#if 0
# 7182
{ 
# 7183
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7184
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7186
return make_float4(w.x, w.y, w.z, w.w); 
# 7187
} 
#endif
# 7189 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayeredLod(texture< uchar4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7190
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7195
::exit(___);}
#if 0
# 7190
{ 
# 7191
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7192
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7194
return make_float4(w.x, w.y, w.z, w.w); 
# 7195
} 
#endif
# 7203 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayeredLod(texture< short, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7204
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7209
::exit(___);}
#if 0
# 7204
{ 
# 7205
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7206
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7208
return w.x; 
# 7209
} 
#endif
# 7211 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float texCubemapLayeredLod(texture< unsigned short, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7212
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7217
::exit(___);}
#if 0
# 7212
{ 
# 7213
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7214
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7216
return w.x; 
# 7217
} 
#endif
# 7219 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayeredLod(texture< short1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7220
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7225
::exit(___);}
#if 0
# 7220
{ 
# 7221
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7222
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7224
return make_float1(w.x); 
# 7225
} 
#endif
# 7227 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 texCubemapLayeredLod(texture< ushort1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7228
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7233
::exit(___);}
#if 0
# 7228
{ 
# 7229
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7230
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7232
return make_float1(w.x); 
# 7233
} 
#endif
# 7235 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayeredLod(texture< short2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7236
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7241
::exit(___);}
#if 0
# 7236
{ 
# 7237
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7238
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7240
return make_float2(w.x, w.y); 
# 7241
} 
#endif
# 7243 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 texCubemapLayeredLod(texture< ushort2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7244
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7249
::exit(___);}
#if 0
# 7244
{ 
# 7245
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7246
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7248
return make_float2(w.x, w.y); 
# 7249
} 
#endif
# 7251 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayeredLod(texture< short4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7252
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7257
::exit(___);}
#if 0
# 7252
{ 
# 7253
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7254
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7256
return make_float4(w.x, w.y, w.z, w.w); 
# 7257
} 
#endif
# 7259 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 texCubemapLayeredLod(texture< ushort4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 7260
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 7265
::exit(___);}
#if 0
# 7260
{ 
# 7261
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
# 7262
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7264
return make_float4(w.x, w.y, w.z, w.w); 
# 7265
} 
#endif
# 7281 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char tex1DGrad(texture< char, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7282
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7290
::exit(___);}
#if 0
# 7282
{ 
# 7286
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7289
return (char)(v.x); 
# 7290
} 
#endif
# 7292 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex1DGrad(texture< signed char, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7293
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7297
::exit(___);}
#if 0
# 7293
{ 
# 7294
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7296
return (signed char)(v.x); 
# 7297
} 
#endif
# 7299 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex1DGrad(texture< unsigned char, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7300
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7304
::exit(___);}
#if 0
# 7300
{ 
# 7301
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7303
return (unsigned char)(v.x); 
# 7304
} 
#endif
# 7306 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex1DGrad(texture< char1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7307
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7311
::exit(___);}
#if 0
# 7307
{ 
# 7308
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7310
return make_char1(v.x); 
# 7311
} 
#endif
# 7313 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex1DGrad(texture< uchar1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7314
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7318
::exit(___);}
#if 0
# 7314
{ 
# 7315
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7317
return make_uchar1(v.x); 
# 7318
} 
#endif
# 7320 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex1DGrad(texture< char2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7321
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7325
::exit(___);}
#if 0
# 7321
{ 
# 7322
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7324
return make_char2(v.x, v.y); 
# 7325
} 
#endif
# 7327 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex1DGrad(texture< uchar2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7328
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7332
::exit(___);}
#if 0
# 7328
{ 
# 7329
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7331
return make_uchar2(v.x, v.y); 
# 7332
} 
#endif
# 7334 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex1DGrad(texture< char4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7335
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7339
::exit(___);}
#if 0
# 7335
{ 
# 7336
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7338
return make_char4(v.x, v.y, v.z, v.w); 
# 7339
} 
#endif
# 7341 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex1DGrad(texture< uchar4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7342
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7346
::exit(___);}
#if 0
# 7342
{ 
# 7343
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7345
return make_uchar4(v.x, v.y, v.z, v.w); 
# 7346
} 
#endif
# 7354 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short tex1DGrad(texture< short, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7355
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7359
::exit(___);}
#if 0
# 7355
{ 
# 7356
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7358
return (short)(v.x); 
# 7359
} 
#endif
# 7361 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex1DGrad(texture< unsigned short, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7362
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7366
::exit(___);}
#if 0
# 7362
{ 
# 7363
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7365
return (unsigned short)(v.x); 
# 7366
} 
#endif
# 7368 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex1DGrad(texture< short1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7369
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7373
::exit(___);}
#if 0
# 7369
{ 
# 7370
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7372
return make_short1(v.x); 
# 7373
} 
#endif
# 7375 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex1DGrad(texture< ushort1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7376
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7380
::exit(___);}
#if 0
# 7376
{ 
# 7377
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7379
return make_ushort1(v.x); 
# 7380
} 
#endif
# 7382 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex1DGrad(texture< short2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7383
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7387
::exit(___);}
#if 0
# 7383
{ 
# 7384
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7386
return make_short2(v.x, v.y); 
# 7387
} 
#endif
# 7389 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex1DGrad(texture< ushort2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7390
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7394
::exit(___);}
#if 0
# 7390
{ 
# 7391
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7393
return make_ushort2(v.x, v.y); 
# 7394
} 
#endif
# 7396 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex1DGrad(texture< short4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7397
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7401
::exit(___);}
#if 0
# 7397
{ 
# 7398
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7400
return make_short4(v.x, v.y, v.z, v.w); 
# 7401
} 
#endif
# 7403 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex1DGrad(texture< ushort4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7404
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7408
::exit(___);}
#if 0
# 7404
{ 
# 7405
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7407
return make_ushort4(v.x, v.y, v.z, v.w); 
# 7408
} 
#endif
# 7416 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int tex1DGrad(texture< int, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7417
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7421
::exit(___);}
#if 0
# 7417
{ 
# 7418
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7420
return (int)(v.x); 
# 7421
} 
#endif
# 7423 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex1DGrad(texture< unsigned, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7424
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7428
::exit(___);}
#if 0
# 7424
{ 
# 7425
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7427
return (unsigned)(v.x); 
# 7428
} 
#endif
# 7430 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex1DGrad(texture< int1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7431
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7435
::exit(___);}
#if 0
# 7431
{ 
# 7432
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7434
return make_int1(v.x); 
# 7435
} 
#endif
# 7437 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex1DGrad(texture< uint1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7438
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7442
::exit(___);}
#if 0
# 7438
{ 
# 7439
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7441
return make_uint1(v.x); 
# 7442
} 
#endif
# 7444 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex1DGrad(texture< int2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7445
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7449
::exit(___);}
#if 0
# 7445
{ 
# 7446
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7448
return make_int2(v.x, v.y); 
# 7449
} 
#endif
# 7451 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex1DGrad(texture< uint2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7452
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7456
::exit(___);}
#if 0
# 7452
{ 
# 7453
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7455
return make_uint2(v.x, v.y); 
# 7456
} 
#endif
# 7458 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex1DGrad(texture< int4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7459
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7463
::exit(___);}
#if 0
# 7459
{ 
# 7460
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7462
return make_int4(v.x, v.y, v.z, v.w); 
# 7463
} 
#endif
# 7465 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex1DGrad(texture< uint4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7466
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7470
::exit(___);}
#if 0
# 7466
{ 
# 7467
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7469
return make_uint4(v.x, v.y, v.z, v.w); 
# 7470
} 
#endif
# 7550 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DGrad(texture< float, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7551
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7555
::exit(___);}
#if 0
# 7551
{ 
# 7552
float4 v = __ftexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7554
return v.x; 
# 7555
} 
#endif
# 7557 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DGrad(texture< float1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7558
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7562
::exit(___);}
#if 0
# 7558
{ 
# 7559
float4 v = __ftexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7561
return make_float1(v.x); 
# 7562
} 
#endif
# 7564 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DGrad(texture< float2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7565
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7569
::exit(___);}
#if 0
# 7565
{ 
# 7566
float4 v = __ftexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7568
return make_float2(v.x, v.y); 
# 7569
} 
#endif
# 7571 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DGrad(texture< float4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 7572
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7576
::exit(___);}
#if 0
# 7572
{ 
# 7573
float4 v = __ftexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7575
return make_float4(v.x, v.y, v.z, v.w); 
# 7576
} 
#endif
# 7584 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DGrad(texture< char, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7585
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7594
::exit(___);}
#if 0
# 7585
{ 
# 7589
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7591
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7593
return w.x; 
# 7594
} 
#endif
# 7596 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DGrad(texture< signed char, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7597
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7602
::exit(___);}
#if 0
# 7597
{ 
# 7598
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7599
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7601
return w.x; 
# 7602
} 
#endif
# 7604 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DGrad(texture< unsigned char, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7605
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7610
::exit(___);}
#if 0
# 7605
{ 
# 7606
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7607
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7609
return w.x; 
# 7610
} 
#endif
# 7612 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DGrad(texture< char1, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7613
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7618
::exit(___);}
#if 0
# 7613
{ 
# 7614
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7615
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7617
return make_float1(w.x); 
# 7618
} 
#endif
# 7620 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DGrad(texture< uchar1, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7621
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7626
::exit(___);}
#if 0
# 7621
{ 
# 7622
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7623
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7625
return make_float1(w.x); 
# 7626
} 
#endif
# 7628 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DGrad(texture< char2, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7629
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7634
::exit(___);}
#if 0
# 7629
{ 
# 7630
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7631
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7633
return make_float2(w.x, w.y); 
# 7634
} 
#endif
# 7636 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DGrad(texture< uchar2, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7637
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7642
::exit(___);}
#if 0
# 7637
{ 
# 7638
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7639
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7641
return make_float2(w.x, w.y); 
# 7642
} 
#endif
# 7644 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DGrad(texture< char4, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7645
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7650
::exit(___);}
#if 0
# 7645
{ 
# 7646
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7647
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7649
return make_float4(w.x, w.y, w.z, w.w); 
# 7650
} 
#endif
# 7652 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DGrad(texture< uchar4, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7653
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7658
::exit(___);}
#if 0
# 7653
{ 
# 7654
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7655
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7657
return make_float4(w.x, w.y, w.z, w.w); 
# 7658
} 
#endif
# 7666 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DGrad(texture< short, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7667
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7672
::exit(___);}
#if 0
# 7667
{ 
# 7668
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7669
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7671
return w.x; 
# 7672
} 
#endif
# 7674 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DGrad(texture< unsigned short, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7675
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7680
::exit(___);}
#if 0
# 7675
{ 
# 7676
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7677
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7679
return w.x; 
# 7680
} 
#endif
# 7682 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DGrad(texture< short1, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7683
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7688
::exit(___);}
#if 0
# 7683
{ 
# 7684
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7685
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7687
return make_float1(w.x); 
# 7688
} 
#endif
# 7690 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DGrad(texture< ushort1, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7691
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7696
::exit(___);}
#if 0
# 7691
{ 
# 7692
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7693
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7695
return make_float1(w.x); 
# 7696
} 
#endif
# 7698 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DGrad(texture< short2, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7699
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7704
::exit(___);}
#if 0
# 7699
{ 
# 7700
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7701
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7703
return make_float2(w.x, w.y); 
# 7704
} 
#endif
# 7706 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DGrad(texture< ushort2, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7707
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7712
::exit(___);}
#if 0
# 7707
{ 
# 7708
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7709
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7711
return make_float2(w.x, w.y); 
# 7712
} 
#endif
# 7714 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DGrad(texture< short4, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7715
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7720
::exit(___);}
#if 0
# 7715
{ 
# 7716
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7717
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7719
return make_float4(w.x, w.y, w.z, w.w); 
# 7720
} 
#endif
# 7722 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DGrad(texture< ushort4, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 7723
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 7728
::exit(___);}
#if 0
# 7723
{ 
# 7724
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 7725
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 7727
return make_float4(w.x, w.y, w.z, w.w); 
# 7728
} 
#endif
# 7736 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char tex2DGrad(texture< char, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7737
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7745
::exit(___);}
#if 0
# 7737
{ 
# 7741
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7744
return (char)(v.x); 
# 7745
} 
#endif
# 7747 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex2DGrad(texture< signed char, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7748
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7752
::exit(___);}
#if 0
# 7748
{ 
# 7749
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7751
return (signed char)(v.x); 
# 7752
} 
#endif
# 7754 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex2DGrad(texture< unsigned char, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7755
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7759
::exit(___);}
#if 0
# 7755
{ 
# 7756
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7758
return (unsigned char)(v.x); 
# 7759
} 
#endif
# 7761 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex2DGrad(texture< char1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7762
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7766
::exit(___);}
#if 0
# 7762
{ 
# 7763
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7765
return make_char1(v.x); 
# 7766
} 
#endif
# 7768 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex2DGrad(texture< uchar1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7769
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7773
::exit(___);}
#if 0
# 7769
{ 
# 7770
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7772
return make_uchar1(v.x); 
# 7773
} 
#endif
# 7775 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex2DGrad(texture< char2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7776
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7780
::exit(___);}
#if 0
# 7776
{ 
# 7777
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7779
return make_char2(v.x, v.y); 
# 7780
} 
#endif
# 7782 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex2DGrad(texture< uchar2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7783
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7787
::exit(___);}
#if 0
# 7783
{ 
# 7784
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7786
return make_uchar2(v.x, v.y); 
# 7787
} 
#endif
# 7789 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2DGrad(texture< char4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7790
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7794
::exit(___);}
#if 0
# 7790
{ 
# 7791
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7793
return make_char4(v.x, v.y, v.z, v.w); 
# 7794
} 
#endif
# 7796 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2DGrad(texture< uchar4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7797
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7801
::exit(___);}
#if 0
# 7797
{ 
# 7798
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7800
return make_uchar4(v.x, v.y, v.z, v.w); 
# 7801
} 
#endif
# 7809 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short tex2DGrad(texture< short, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7810
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7814
::exit(___);}
#if 0
# 7810
{ 
# 7811
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7813
return (short)(v.x); 
# 7814
} 
#endif
# 7816 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex2DGrad(texture< unsigned short, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7817
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7821
::exit(___);}
#if 0
# 7817
{ 
# 7818
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7820
return (unsigned short)(v.x); 
# 7821
} 
#endif
# 7823 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex2DGrad(texture< short1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7824
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7828
::exit(___);}
#if 0
# 7824
{ 
# 7825
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7827
return make_short1(v.x); 
# 7828
} 
#endif
# 7830 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex2DGrad(texture< ushort1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7831
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7835
::exit(___);}
#if 0
# 7831
{ 
# 7832
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7834
return make_ushort1(v.x); 
# 7835
} 
#endif
# 7837 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex2DGrad(texture< short2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7838
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7842
::exit(___);}
#if 0
# 7838
{ 
# 7839
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7841
return make_short2(v.x, v.y); 
# 7842
} 
#endif
# 7844 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex2DGrad(texture< ushort2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7845
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7849
::exit(___);}
#if 0
# 7845
{ 
# 7846
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7848
return make_ushort2(v.x, v.y); 
# 7849
} 
#endif
# 7851 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2DGrad(texture< short4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7852
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7856
::exit(___);}
#if 0
# 7852
{ 
# 7853
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7855
return make_short4(v.x, v.y, v.z, v.w); 
# 7856
} 
#endif
# 7858 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2DGrad(texture< ushort4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7859
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7863
::exit(___);}
#if 0
# 7859
{ 
# 7860
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7862
return make_ushort4(v.x, v.y, v.z, v.w); 
# 7863
} 
#endif
# 7871 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int tex2DGrad(texture< int, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7872
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7876
::exit(___);}
#if 0
# 7872
{ 
# 7873
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7875
return (int)(v.x); 
# 7876
} 
#endif
# 7878 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex2DGrad(texture< unsigned, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7879
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7883
::exit(___);}
#if 0
# 7879
{ 
# 7880
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7882
return (unsigned)(v.x); 
# 7883
} 
#endif
# 7885 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex2DGrad(texture< int1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7886
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7890
::exit(___);}
#if 0
# 7886
{ 
# 7887
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7889
return make_int1(v.x); 
# 7890
} 
#endif
# 7892 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex2DGrad(texture< uint1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7893
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7897
::exit(___);}
#if 0
# 7893
{ 
# 7894
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7896
return make_uint1(v.x); 
# 7897
} 
#endif
# 7899 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex2DGrad(texture< int2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7900
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7904
::exit(___);}
#if 0
# 7900
{ 
# 7901
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7903
return make_int2(v.x, v.y); 
# 7904
} 
#endif
# 7906 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex2DGrad(texture< uint2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7907
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7911
::exit(___);}
#if 0
# 7907
{ 
# 7908
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7910
return make_uint2(v.x, v.y); 
# 7911
} 
#endif
# 7913 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2DGrad(texture< int4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7914
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7918
::exit(___);}
#if 0
# 7914
{ 
# 7915
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7917
return make_int4(v.x, v.y, v.z, v.w); 
# 7918
} 
#endif
# 7920 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2DGrad(texture< uint4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 7921
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 7925
::exit(___);}
#if 0
# 7921
{ 
# 7922
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 7924
return make_uint4(v.x, v.y, v.z, v.w); 
# 7925
} 
#endif
# 7999 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DGrad(texture< float, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 8000
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 8004
::exit(___);}
#if 0
# 8000
{ 
# 8001
float4 v = __ftexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8003
return v.x; 
# 8004
} 
#endif
# 8006 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DGrad(texture< float1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 8007
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 8011
::exit(___);}
#if 0
# 8007
{ 
# 8008
float4 v = __ftexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8010
return make_float1(v.x); 
# 8011
} 
#endif
# 8013 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DGrad(texture< float2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 8014
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 8018
::exit(___);}
#if 0
# 8014
{ 
# 8015
float4 v = __ftexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8017
return make_float2(v.x, v.y); 
# 8018
} 
#endif
# 8020 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DGrad(texture< float4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 8021
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 8025
::exit(___);}
#if 0
# 8021
{ 
# 8022
float4 v = __ftexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8024
return make_float4(v.x, v.y, v.z, v.w); 
# 8025
} 
#endif
# 8033 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DGrad(texture< char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 8034
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 8043
::exit(___);}
#if 0
# 8034
{ 
# 8038
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8040
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8042
return w.x; 
# 8043
} 
#endif
# 8045 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DGrad(texture< signed char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 8046
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 8051
::exit(___);}
#if 0
# 8046
{ 
# 8047
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8048
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8050
return w.x; 
# 8051
} 
#endif
# 8053 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DGrad(texture< unsigned char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 8054
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 8059
::exit(___);}
#if 0
# 8054
{ 
# 8055
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8056
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8058
return w.x; 
# 8059
} 
#endif
# 8061 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DGrad(texture< char1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 8062
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 8067
::exit(___);}
#if 0
# 8062
{ 
# 8063
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8064
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8066
return make_float1(w.x); 
# 8067
} 
#endif
# 8069 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DGrad(texture< uchar1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 8070
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 8075
::exit(___);}
#if 0
# 8070
{ 
# 8071
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8072
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8074
return make_float1(w.x); 
# 8075
} 
#endif
# 8077 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DGrad(texture< char2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 8078
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 8083
::exit(___);}
#if 0
# 8078
{ 
# 8079
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8080
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8082
return make_float2(w.x, w.y); 
# 8083
} 
#endif
# 8085 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DGrad(texture< uchar2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 8086
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 8091
::exit(___);}
#if 0
# 8086
{ 
# 8087
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8088
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8090
return make_float2(w.x, w.y); 
# 8091
} 
#endif
# 8093 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DGrad(texture< char4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 8094
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 8099
::exit(___);}
#if 0
# 8094
{ 
# 8095
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8096
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8098
return make_float4(w.x, w.y, w.z, w.w); 
# 8099
} 
#endif
# 8101 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DGrad(texture< uchar4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 8102
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 8107
::exit(___);}
#if 0
# 8102
{ 
# 8103
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8104
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8106
return make_float4(w.x, w.y, w.z, w.w); 
# 8107
} 
#endif
# 8115 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DGrad(texture< short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 8116
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 8121
::exit(___);}
#if 0
# 8116
{ 
# 8117
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8118
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8120
return w.x; 
# 8121
} 
#endif
# 8123 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DGrad(texture< unsigned short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 8124
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 8129
::exit(___);}
#if 0
# 8124
{ 
# 8125
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8126
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8128
return w.x; 
# 8129
} 
#endif
# 8131 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DGrad(texture< short1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 8132
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 8137
::exit(___);}
#if 0
# 8132
{ 
# 8133
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8134
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8136
return make_float1(w.x); 
# 8137
} 
#endif
# 8139 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DGrad(texture< ushort1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 8140
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 8145
::exit(___);}
#if 0
# 8140
{ 
# 8141
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8142
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8144
return make_float1(w.x); 
# 8145
} 
#endif
# 8147 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DGrad(texture< short2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 8148
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 8153
::exit(___);}
#if 0
# 8148
{ 
# 8149
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8150
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8152
return make_float2(w.x, w.y); 
# 8153
} 
#endif
# 8155 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DGrad(texture< ushort2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 8156
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 8161
::exit(___);}
#if 0
# 8156
{ 
# 8157
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8158
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8160
return make_float2(w.x, w.y); 
# 8161
} 
#endif
# 8163 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DGrad(texture< short4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 8164
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 8169
::exit(___);}
#if 0
# 8164
{ 
# 8165
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8166
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8168
return make_float4(w.x, w.y, w.z, w.w); 
# 8169
} 
#endif
# 8171 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DGrad(texture< ushort4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 8172
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 8177
::exit(___);}
#if 0
# 8172
{ 
# 8173
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8174
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8176
return make_float4(w.x, w.y, w.z, w.w); 
# 8177
} 
#endif
# 8185 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char tex1DLayeredGrad(texture< char, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8186
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8194
::exit(___);}
#if 0
# 8186
{ 
# 8190
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8193
return (char)(v.x); 
# 8194
} 
#endif
# 8196 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex1DLayeredGrad(texture< signed char, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8197
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8201
::exit(___);}
#if 0
# 8197
{ 
# 8198
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8200
return (signed char)(v.x); 
# 8201
} 
#endif
# 8203 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex1DLayeredGrad(texture< unsigned char, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8204
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8208
::exit(___);}
#if 0
# 8204
{ 
# 8205
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8207
return (unsigned char)(v.x); 
# 8208
} 
#endif
# 8210 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex1DLayeredGrad(texture< char1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8211
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8215
::exit(___);}
#if 0
# 8211
{ 
# 8212
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8214
return make_char1(v.x); 
# 8215
} 
#endif
# 8217 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex1DLayeredGrad(texture< uchar1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8218
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8222
::exit(___);}
#if 0
# 8218
{ 
# 8219
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8221
return make_uchar1(v.x); 
# 8222
} 
#endif
# 8224 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex1DLayeredGrad(texture< char2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8225
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8229
::exit(___);}
#if 0
# 8225
{ 
# 8226
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8228
return make_char2(v.x, v.y); 
# 8229
} 
#endif
# 8231 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex1DLayeredGrad(texture< uchar2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8232
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8236
::exit(___);}
#if 0
# 8232
{ 
# 8233
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8235
return make_uchar2(v.x, v.y); 
# 8236
} 
#endif
# 8238 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex1DLayeredGrad(texture< char4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8239
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8243
::exit(___);}
#if 0
# 8239
{ 
# 8240
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8242
return make_char4(v.x, v.y, v.z, v.w); 
# 8243
} 
#endif
# 8245 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex1DLayeredGrad(texture< uchar4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8246
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8250
::exit(___);}
#if 0
# 8246
{ 
# 8247
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8249
return make_uchar4(v.x, v.y, v.z, v.w); 
# 8250
} 
#endif
# 8258 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short tex1DLayeredGrad(texture< short, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8259
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8263
::exit(___);}
#if 0
# 8259
{ 
# 8260
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8262
return (short)(v.x); 
# 8263
} 
#endif
# 8265 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex1DLayeredGrad(texture< unsigned short, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8266
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8270
::exit(___);}
#if 0
# 8266
{ 
# 8267
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8269
return (unsigned short)(v.x); 
# 8270
} 
#endif
# 8272 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex1DLayeredGrad(texture< short1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8273
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8277
::exit(___);}
#if 0
# 8273
{ 
# 8274
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8276
return make_short1(v.x); 
# 8277
} 
#endif
# 8279 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex1DLayeredGrad(texture< ushort1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8280
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8284
::exit(___);}
#if 0
# 8280
{ 
# 8281
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8283
return make_ushort1(v.x); 
# 8284
} 
#endif
# 8286 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex1DLayeredGrad(texture< short2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8287
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8291
::exit(___);}
#if 0
# 8287
{ 
# 8288
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8290
return make_short2(v.x, v.y); 
# 8291
} 
#endif
# 8293 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex1DLayeredGrad(texture< ushort2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8294
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8298
::exit(___);}
#if 0
# 8294
{ 
# 8295
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8297
return make_ushort2(v.x, v.y); 
# 8298
} 
#endif
# 8300 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex1DLayeredGrad(texture< short4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8301
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8305
::exit(___);}
#if 0
# 8301
{ 
# 8302
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8304
return make_short4(v.x, v.y, v.z, v.w); 
# 8305
} 
#endif
# 8307 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex1DLayeredGrad(texture< ushort4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8308
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8312
::exit(___);}
#if 0
# 8308
{ 
# 8309
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8311
return make_ushort4(v.x, v.y, v.z, v.w); 
# 8312
} 
#endif
# 8320 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int tex1DLayeredGrad(texture< int, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8321
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8325
::exit(___);}
#if 0
# 8321
{ 
# 8322
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8324
return (int)(v.x); 
# 8325
} 
#endif
# 8327 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex1DLayeredGrad(texture< unsigned, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8328
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8332
::exit(___);}
#if 0
# 8328
{ 
# 8329
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8331
return (unsigned)(v.x); 
# 8332
} 
#endif
# 8334 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex1DLayeredGrad(texture< int1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8335
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8339
::exit(___);}
#if 0
# 8335
{ 
# 8336
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8338
return make_int1(v.x); 
# 8339
} 
#endif
# 8341 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex1DLayeredGrad(texture< uint1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8342
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8346
::exit(___);}
#if 0
# 8342
{ 
# 8343
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8345
return make_uint1(v.x); 
# 8346
} 
#endif
# 8348 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex1DLayeredGrad(texture< int2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8349
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8353
::exit(___);}
#if 0
# 8349
{ 
# 8350
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8352
return make_int2(v.x, v.y); 
# 8353
} 
#endif
# 8355 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex1DLayeredGrad(texture< uint2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8356
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8360
::exit(___);}
#if 0
# 8356
{ 
# 8357
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8359
return make_uint2(v.x, v.y); 
# 8360
} 
#endif
# 8362 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex1DLayeredGrad(texture< int4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8363
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8367
::exit(___);}
#if 0
# 8363
{ 
# 8364
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8366
return make_int4(v.x, v.y, v.z, v.w); 
# 8367
} 
#endif
# 8369 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex1DLayeredGrad(texture< uint4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8370
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8374
::exit(___);}
#if 0
# 8370
{ 
# 8371
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8373
return make_uint4(v.x, v.y, v.z, v.w); 
# 8374
} 
#endif
# 8448 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredGrad(texture< float, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8449
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8453
::exit(___);}
#if 0
# 8449
{ 
# 8450
float4 v = __ftexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8452
return v.x; 
# 8453
} 
#endif
# 8455 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredGrad(texture< float1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8456
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8460
::exit(___);}
#if 0
# 8456
{ 
# 8457
float4 v = __ftexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8459
return make_float1(v.x); 
# 8460
} 
#endif
# 8462 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredGrad(texture< float2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8463
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8467
::exit(___);}
#if 0
# 8463
{ 
# 8464
float4 v = __ftexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8466
return make_float2(v.x, v.y); 
# 8467
} 
#endif
# 8469 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredGrad(texture< float4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 8470
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8474
::exit(___);}
#if 0
# 8470
{ 
# 8471
float4 v = __ftexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8473
return make_float4(v.x, v.y, v.z, v.w); 
# 8474
} 
#endif
# 8482 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredGrad(texture< char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8483
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8492
::exit(___);}
#if 0
# 8483
{ 
# 8487
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8489
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8491
return w.x; 
# 8492
} 
#endif
# 8494 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredGrad(texture< signed char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8495
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8500
::exit(___);}
#if 0
# 8495
{ 
# 8496
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8497
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8499
return w.x; 
# 8500
} 
#endif
# 8502 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredGrad(texture< unsigned char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8503
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8508
::exit(___);}
#if 0
# 8503
{ 
# 8504
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8505
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8507
return w.x; 
# 8508
} 
#endif
# 8510 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredGrad(texture< char1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8511
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8516
::exit(___);}
#if 0
# 8511
{ 
# 8512
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8513
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8515
return make_float1(w.x); 
# 8516
} 
#endif
# 8518 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredGrad(texture< uchar1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8519
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8524
::exit(___);}
#if 0
# 8519
{ 
# 8520
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8521
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8523
return make_float1(w.x); 
# 8524
} 
#endif
# 8526 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredGrad(texture< char2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8527
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8532
::exit(___);}
#if 0
# 8527
{ 
# 8528
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8529
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8531
return make_float2(w.x, w.y); 
# 8532
} 
#endif
# 8534 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredGrad(texture< uchar2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8535
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8540
::exit(___);}
#if 0
# 8535
{ 
# 8536
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8537
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8539
return make_float2(w.x, w.y); 
# 8540
} 
#endif
# 8542 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredGrad(texture< char4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8543
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8548
::exit(___);}
#if 0
# 8543
{ 
# 8544
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8545
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8547
return make_float4(w.x, w.y, w.z, w.w); 
# 8548
} 
#endif
# 8550 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredGrad(texture< uchar4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8551
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8556
::exit(___);}
#if 0
# 8551
{ 
# 8552
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8553
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8555
return make_float4(w.x, w.y, w.z, w.w); 
# 8556
} 
#endif
# 8564 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredGrad(texture< short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8565
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8570
::exit(___);}
#if 0
# 8565
{ 
# 8566
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8567
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8569
return w.x; 
# 8570
} 
#endif
# 8572 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex1DLayeredGrad(texture< unsigned short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8573
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8578
::exit(___);}
#if 0
# 8573
{ 
# 8574
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8575
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8577
return w.x; 
# 8578
} 
#endif
# 8580 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredGrad(texture< short1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8581
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8586
::exit(___);}
#if 0
# 8581
{ 
# 8582
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8583
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8585
return make_float1(w.x); 
# 8586
} 
#endif
# 8588 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex1DLayeredGrad(texture< ushort1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8589
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8594
::exit(___);}
#if 0
# 8589
{ 
# 8590
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8591
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8593
return make_float1(w.x); 
# 8594
} 
#endif
# 8596 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredGrad(texture< short2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8597
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8602
::exit(___);}
#if 0
# 8597
{ 
# 8598
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8599
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8601
return make_float2(w.x, w.y); 
# 8602
} 
#endif
# 8604 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex1DLayeredGrad(texture< ushort2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8605
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8610
::exit(___);}
#if 0
# 8605
{ 
# 8606
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8607
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8609
return make_float2(w.x, w.y); 
# 8610
} 
#endif
# 8612 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredGrad(texture< short4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8613
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8618
::exit(___);}
#if 0
# 8613
{ 
# 8614
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8615
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8617
return make_float4(w.x, w.y, w.z, w.w); 
# 8618
} 
#endif
# 8620 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex1DLayeredGrad(texture< ushort4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 8621
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 8626
::exit(___);}
#if 0
# 8621
{ 
# 8622
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
# 8623
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8625
return make_float4(w.x, w.y, w.z, w.w); 
# 8626
} 
#endif
# 8634 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char tex2DLayeredGrad(texture< char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8635
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8643
::exit(___);}
#if 0
# 8635
{ 
# 8639
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8642
return (char)(v.x); 
# 8643
} 
#endif
# 8645 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex2DLayeredGrad(texture< signed char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8646
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8650
::exit(___);}
#if 0
# 8646
{ 
# 8647
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8649
return (signed char)(v.x); 
# 8650
} 
#endif
# 8652 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex2DLayeredGrad(texture< unsigned char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8653
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8657
::exit(___);}
#if 0
# 8653
{ 
# 8654
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8656
return (unsigned char)(v.x); 
# 8657
} 
#endif
# 8659 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex2DLayeredGrad(texture< char1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8660
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8664
::exit(___);}
#if 0
# 8660
{ 
# 8661
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8663
return make_char1(v.x); 
# 8664
} 
#endif
# 8666 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex2DLayeredGrad(texture< uchar1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8667
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8671
::exit(___);}
#if 0
# 8667
{ 
# 8668
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8670
return make_uchar1(v.x); 
# 8671
} 
#endif
# 8673 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex2DLayeredGrad(texture< char2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8674
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8678
::exit(___);}
#if 0
# 8674
{ 
# 8675
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8677
return make_char2(v.x, v.y); 
# 8678
} 
#endif
# 8680 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex2DLayeredGrad(texture< uchar2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8681
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8685
::exit(___);}
#if 0
# 8681
{ 
# 8682
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8684
return make_uchar2(v.x, v.y); 
# 8685
} 
#endif
# 8687 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex2DLayeredGrad(texture< char4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8688
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8692
::exit(___);}
#if 0
# 8688
{ 
# 8689
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8691
return make_char4(v.x, v.y, v.z, v.w); 
# 8692
} 
#endif
# 8694 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex2DLayeredGrad(texture< uchar4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8695
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8699
::exit(___);}
#if 0
# 8695
{ 
# 8696
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8698
return make_uchar4(v.x, v.y, v.z, v.w); 
# 8699
} 
#endif
# 8707 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short tex2DLayeredGrad(texture< short, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8708
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8712
::exit(___);}
#if 0
# 8708
{ 
# 8709
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8711
return (short)(v.x); 
# 8712
} 
#endif
# 8714 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex2DLayeredGrad(texture< unsigned short, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8715
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8719
::exit(___);}
#if 0
# 8715
{ 
# 8716
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8718
return (unsigned short)(v.x); 
# 8719
} 
#endif
# 8721 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex2DLayeredGrad(texture< short1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8722
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8726
::exit(___);}
#if 0
# 8722
{ 
# 8723
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8725
return make_short1(v.x); 
# 8726
} 
#endif
# 8728 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex2DLayeredGrad(texture< ushort1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8729
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8733
::exit(___);}
#if 0
# 8729
{ 
# 8730
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8732
return make_ushort1(v.x); 
# 8733
} 
#endif
# 8735 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex2DLayeredGrad(texture< short2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8736
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8740
::exit(___);}
#if 0
# 8736
{ 
# 8737
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8739
return make_short2(v.x, v.y); 
# 8740
} 
#endif
# 8742 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex2DLayeredGrad(texture< ushort2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8743
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8747
::exit(___);}
#if 0
# 8743
{ 
# 8744
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8746
return make_ushort2(v.x, v.y); 
# 8747
} 
#endif
# 8749 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex2DLayeredGrad(texture< short4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8750
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8754
::exit(___);}
#if 0
# 8750
{ 
# 8751
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8753
return make_short4(v.x, v.y, v.z, v.w); 
# 8754
} 
#endif
# 8756 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex2DLayeredGrad(texture< ushort4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8757
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8761
::exit(___);}
#if 0
# 8757
{ 
# 8758
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8760
return make_ushort4(v.x, v.y, v.z, v.w); 
# 8761
} 
#endif
# 8769 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int tex2DLayeredGrad(texture< int, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8770
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8774
::exit(___);}
#if 0
# 8770
{ 
# 8771
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8773
return (int)(v.x); 
# 8774
} 
#endif
# 8776 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex2DLayeredGrad(texture< unsigned, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8777
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8781
::exit(___);}
#if 0
# 8777
{ 
# 8778
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8780
return (unsigned)(v.x); 
# 8781
} 
#endif
# 8783 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex2DLayeredGrad(texture< int1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8784
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8788
::exit(___);}
#if 0
# 8784
{ 
# 8785
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8787
return make_int1(v.x); 
# 8788
} 
#endif
# 8790 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex2DLayeredGrad(texture< uint1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8791
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8795
::exit(___);}
#if 0
# 8791
{ 
# 8792
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8794
return make_uint1(v.x); 
# 8795
} 
#endif
# 8797 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex2DLayeredGrad(texture< int2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8798
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8802
::exit(___);}
#if 0
# 8798
{ 
# 8799
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8801
return make_int2(v.x, v.y); 
# 8802
} 
#endif
# 8804 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex2DLayeredGrad(texture< uint2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8805
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8809
::exit(___);}
#if 0
# 8805
{ 
# 8806
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8808
return make_uint2(v.x, v.y); 
# 8809
} 
#endif
# 8811 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex2DLayeredGrad(texture< int4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8812
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8816
::exit(___);}
#if 0
# 8812
{ 
# 8813
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8815
return make_int4(v.x, v.y, v.z, v.w); 
# 8816
} 
#endif
# 8818 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex2DLayeredGrad(texture< uint4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8819
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8823
::exit(___);}
#if 0
# 8819
{ 
# 8820
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8822
return make_uint4(v.x, v.y, v.z, v.w); 
# 8823
} 
#endif
# 8897 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredGrad(texture< float, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8898
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8902
::exit(___);}
#if 0
# 8898
{ 
# 8899
float4 v = __ftexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8901
return v.x; 
# 8902
} 
#endif
# 8904 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredGrad(texture< float1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8905
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8909
::exit(___);}
#if 0
# 8905
{ 
# 8906
float4 v = __ftexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8908
return make_float1(v.x); 
# 8909
} 
#endif
# 8911 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredGrad(texture< float2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8912
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8916
::exit(___);}
#if 0
# 8912
{ 
# 8913
float4 v = __ftexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8915
return make_float2(v.x, v.y); 
# 8916
} 
#endif
# 8918 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredGrad(texture< float4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8919
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8923
::exit(___);}
#if 0
# 8919
{ 
# 8920
float4 v = __ftexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8922
return make_float4(v.x, v.y, v.z, v.w); 
# 8923
} 
#endif
# 8931 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredGrad(texture< char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8932
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8941
::exit(___);}
#if 0
# 8932
{ 
# 8936
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8938
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8940
return w.x; 
# 8941
} 
#endif
# 8943 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredGrad(texture< signed char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8944
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8949
::exit(___);}
#if 0
# 8944
{ 
# 8945
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8946
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8948
return w.x; 
# 8949
} 
#endif
# 8951 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredGrad(texture< unsigned char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8952
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8957
::exit(___);}
#if 0
# 8952
{ 
# 8953
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8954
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8956
return w.x; 
# 8957
} 
#endif
# 8959 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredGrad(texture< char1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8960
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8965
::exit(___);}
#if 0
# 8960
{ 
# 8961
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8962
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8964
return make_float1(w.x); 
# 8965
} 
#endif
# 8967 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredGrad(texture< uchar1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8968
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8973
::exit(___);}
#if 0
# 8968
{ 
# 8969
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8970
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8972
return make_float1(w.x); 
# 8973
} 
#endif
# 8975 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredGrad(texture< char2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8976
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8981
::exit(___);}
#if 0
# 8976
{ 
# 8977
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8978
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8980
return make_float2(w.x, w.y); 
# 8981
} 
#endif
# 8983 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredGrad(texture< uchar2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8984
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8989
::exit(___);}
#if 0
# 8984
{ 
# 8985
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8986
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8988
return make_float2(w.x, w.y); 
# 8989
} 
#endif
# 8991 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredGrad(texture< char4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 8992
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 8997
::exit(___);}
#if 0
# 8992
{ 
# 8993
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 8994
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 8996
return make_float4(w.x, w.y, w.z, w.w); 
# 8997
} 
#endif
# 8999 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredGrad(texture< uchar4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 9000
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 9005
::exit(___);}
#if 0
# 9000
{ 
# 9001
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 9002
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9004
return make_float4(w.x, w.y, w.z, w.w); 
# 9005
} 
#endif
# 9013 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredGrad(texture< short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 9014
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 9019
::exit(___);}
#if 0
# 9014
{ 
# 9015
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 9016
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9018
return w.x; 
# 9019
} 
#endif
# 9021 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex2DLayeredGrad(texture< unsigned short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 9022
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 9027
::exit(___);}
#if 0
# 9022
{ 
# 9023
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 9024
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9026
return w.x; 
# 9027
} 
#endif
# 9029 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredGrad(texture< short1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 9030
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 9035
::exit(___);}
#if 0
# 9030
{ 
# 9031
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 9032
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9034
return make_float1(w.x); 
# 9035
} 
#endif
# 9037 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex2DLayeredGrad(texture< ushort1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 9038
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 9043
::exit(___);}
#if 0
# 9038
{ 
# 9039
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 9040
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9042
return make_float1(w.x); 
# 9043
} 
#endif
# 9045 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredGrad(texture< short2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 9046
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 9051
::exit(___);}
#if 0
# 9046
{ 
# 9047
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 9048
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9050
return make_float2(w.x, w.y); 
# 9051
} 
#endif
# 9053 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex2DLayeredGrad(texture< ushort2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 9054
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 9059
::exit(___);}
#if 0
# 9054
{ 
# 9055
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 9056
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9058
return make_float2(w.x, w.y); 
# 9059
} 
#endif
# 9061 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredGrad(texture< short4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 9062
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 9067
::exit(___);}
#if 0
# 9062
{ 
# 9063
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 9064
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9066
return make_float4(w.x, w.y, w.z, w.w); 
# 9067
} 
#endif
# 9069 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex2DLayeredGrad(texture< ushort4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 9070
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 9075
::exit(___);}
#if 0
# 9070
{ 
# 9071
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
# 9072
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9074
return make_float4(w.x, w.y, w.z, w.w); 
# 9075
} 
#endif
# 9083 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char tex3DGrad(texture< char, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9084
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9092
::exit(___);}
#if 0
# 9084
{ 
# 9088
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9091
return (char)(v.x); 
# 9092
} 
#endif
# 9094 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline signed char tex3DGrad(texture< signed char, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9095
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9099
::exit(___);}
#if 0
# 9095
{ 
# 9096
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9098
return (signed char)(v.x); 
# 9099
} 
#endif
# 9101 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned char tex3DGrad(texture< unsigned char, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9102
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9106
::exit(___);}
#if 0
# 9102
{ 
# 9103
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9105
return (unsigned char)(v.x); 
# 9106
} 
#endif
# 9108 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char1 tex3DGrad(texture< char1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9109
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9113
::exit(___);}
#if 0
# 9109
{ 
# 9110
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9112
return make_char1(v.x); 
# 9113
} 
#endif
# 9115 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar1 tex3DGrad(texture< uchar1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9116
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9120
::exit(___);}
#if 0
# 9116
{ 
# 9117
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9119
return make_uchar1(v.x); 
# 9120
} 
#endif
# 9122 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char2 tex3DGrad(texture< char2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9123
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9127
::exit(___);}
#if 0
# 9123
{ 
# 9124
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9126
return make_char2(v.x, v.y); 
# 9127
} 
#endif
# 9129 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar2 tex3DGrad(texture< uchar2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9130
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9134
::exit(___);}
#if 0
# 9130
{ 
# 9131
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9133
return make_uchar2(v.x, v.y); 
# 9134
} 
#endif
# 9136 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline char4 tex3DGrad(texture< char4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9137
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9141
::exit(___);}
#if 0
# 9137
{ 
# 9138
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9140
return make_char4(v.x, v.y, v.z, v.w); 
# 9141
} 
#endif
# 9143 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uchar4 tex3DGrad(texture< uchar4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9144
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9148
::exit(___);}
#if 0
# 9144
{ 
# 9145
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9147
return make_uchar4(v.x, v.y, v.z, v.w); 
# 9148
} 
#endif
# 9156 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short tex3DGrad(texture< short, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9157
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9161
::exit(___);}
#if 0
# 9157
{ 
# 9158
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9160
return (short)(v.x); 
# 9161
} 
#endif
# 9163 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned short tex3DGrad(texture< unsigned short, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9164
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9168
::exit(___);}
#if 0
# 9164
{ 
# 9165
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9167
return (unsigned short)(v.x); 
# 9168
} 
#endif
# 9170 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short1 tex3DGrad(texture< short1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9171
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9175
::exit(___);}
#if 0
# 9171
{ 
# 9172
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9174
return make_short1(v.x); 
# 9175
} 
#endif
# 9177 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort1 tex3DGrad(texture< ushort1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9178
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9182
::exit(___);}
#if 0
# 9178
{ 
# 9179
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9181
return make_ushort1(v.x); 
# 9182
} 
#endif
# 9184 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short2 tex3DGrad(texture< short2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9185
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9189
::exit(___);}
#if 0
# 9185
{ 
# 9186
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9188
return make_short2(v.x, v.y); 
# 9189
} 
#endif
# 9191 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort2 tex3DGrad(texture< ushort2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9192
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9196
::exit(___);}
#if 0
# 9192
{ 
# 9193
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9195
return make_ushort2(v.x, v.y); 
# 9196
} 
#endif
# 9198 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline short4 tex3DGrad(texture< short4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9199
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9203
::exit(___);}
#if 0
# 9199
{ 
# 9200
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9202
return make_short4(v.x, v.y, v.z, v.w); 
# 9203
} 
#endif
# 9205 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline ushort4 tex3DGrad(texture< ushort4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9206
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9210
::exit(___);}
#if 0
# 9206
{ 
# 9207
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9209
return make_ushort4(v.x, v.y, v.z, v.w); 
# 9210
} 
#endif
# 9218 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int tex3DGrad(texture< int, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9219
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9223
::exit(___);}
#if 0
# 9219
{ 
# 9220
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9222
return (int)(v.x); 
# 9223
} 
#endif
# 9225 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline unsigned tex3DGrad(texture< unsigned, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9226
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9230
::exit(___);}
#if 0
# 9226
{ 
# 9227
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9229
return (unsigned)(v.x); 
# 9230
} 
#endif
# 9232 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int1 tex3DGrad(texture< int1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9233
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9237
::exit(___);}
#if 0
# 9233
{ 
# 9234
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9236
return make_int1(v.x); 
# 9237
} 
#endif
# 9239 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint1 tex3DGrad(texture< uint1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9240
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9244
::exit(___);}
#if 0
# 9240
{ 
# 9241
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9243
return make_uint1(v.x); 
# 9244
} 
#endif
# 9246 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int2 tex3DGrad(texture< int2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9247
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9251
::exit(___);}
#if 0
# 9247
{ 
# 9248
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9250
return make_int2(v.x, v.y); 
# 9251
} 
#endif
# 9253 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint2 tex3DGrad(texture< uint2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9254
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9258
::exit(___);}
#if 0
# 9254
{ 
# 9255
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9257
return make_uint2(v.x, v.y); 
# 9258
} 
#endif
# 9260 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline int4 tex3DGrad(texture< int4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9261
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9265
::exit(___);}
#if 0
# 9261
{ 
# 9262
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9264
return make_int4(v.x, v.y, v.z, v.w); 
# 9265
} 
#endif
# 9267 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline uint4 tex3DGrad(texture< uint4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9268
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9272
::exit(___);}
#if 0
# 9268
{ 
# 9269
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9271
return make_uint4(v.x, v.y, v.z, v.w); 
# 9272
} 
#endif
# 9346 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DGrad(texture< float, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9347
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9351
::exit(___);}
#if 0
# 9347
{ 
# 9348
float4 v = __ftexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9350
return v.x; 
# 9351
} 
#endif
# 9353 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DGrad(texture< float1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9354
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9358
::exit(___);}
#if 0
# 9354
{ 
# 9355
float4 v = __ftexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9357
return make_float1(v.x); 
# 9358
} 
#endif
# 9360 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DGrad(texture< float2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9361
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9365
::exit(___);}
#if 0
# 9361
{ 
# 9362
float4 v = __ftexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9364
return make_float2(v.x, v.y); 
# 9365
} 
#endif
# 9367 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DGrad(texture< float4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9368
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9372
::exit(___);}
#if 0
# 9368
{ 
# 9369
float4 v = __ftexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9371
return make_float4(v.x, v.y, v.z, v.w); 
# 9372
} 
#endif
# 9380 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DGrad(texture< char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9381
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9390
::exit(___);}
#if 0
# 9381
{ 
# 9385
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9387
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9389
return w.x; 
# 9390
} 
#endif
# 9392 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DGrad(texture< signed char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9393
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9398
::exit(___);}
#if 0
# 9393
{ 
# 9394
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9395
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9397
return w.x; 
# 9398
} 
#endif
# 9400 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DGrad(texture< unsigned char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9401
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9406
::exit(___);}
#if 0
# 9401
{ 
# 9402
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9403
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9405
return w.x; 
# 9406
} 
#endif
# 9408 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DGrad(texture< char1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9409
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9414
::exit(___);}
#if 0
# 9409
{ 
# 9410
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9411
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9413
return make_float1(w.x); 
# 9414
} 
#endif
# 9416 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DGrad(texture< uchar1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9417
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9422
::exit(___);}
#if 0
# 9417
{ 
# 9418
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9419
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9421
return make_float1(w.x); 
# 9422
} 
#endif
# 9424 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DGrad(texture< char2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9425
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9430
::exit(___);}
#if 0
# 9425
{ 
# 9426
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9427
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9429
return make_float2(w.x, w.y); 
# 9430
} 
#endif
# 9432 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DGrad(texture< uchar2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9433
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9438
::exit(___);}
#if 0
# 9433
{ 
# 9434
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9435
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9437
return make_float2(w.x, w.y); 
# 9438
} 
#endif
# 9440 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DGrad(texture< char4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9441
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9446
::exit(___);}
#if 0
# 9441
{ 
# 9442
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9443
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9445
return make_float4(w.x, w.y, w.z, w.w); 
# 9446
} 
#endif
# 9448 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DGrad(texture< uchar4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9449
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9454
::exit(___);}
#if 0
# 9449
{ 
# 9450
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9451
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9453
return make_float4(w.x, w.y, w.z, w.w); 
# 9454
} 
#endif
# 9462 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DGrad(texture< short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9463
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9468
::exit(___);}
#if 0
# 9463
{ 
# 9464
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9465
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9467
return w.x; 
# 9468
} 
#endif
# 9470 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float tex3DGrad(texture< unsigned short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9471
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9476
::exit(___);}
#if 0
# 9471
{ 
# 9472
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9473
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9475
return w.x; 
# 9476
} 
#endif
# 9478 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DGrad(texture< short1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9479
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9484
::exit(___);}
#if 0
# 9479
{ 
# 9480
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9481
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9483
return make_float1(w.x); 
# 9484
} 
#endif
# 9486 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float1 tex3DGrad(texture< ushort1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9487
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9492
::exit(___);}
#if 0
# 9487
{ 
# 9488
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9489
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9491
return make_float1(w.x); 
# 9492
} 
#endif
# 9494 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DGrad(texture< short2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9495
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9500
::exit(___);}
#if 0
# 9495
{ 
# 9496
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9497
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9499
return make_float2(w.x, w.y); 
# 9500
} 
#endif
# 9502 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float2 tex3DGrad(texture< ushort2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9503
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9508
::exit(___);}
#if 0
# 9503
{ 
# 9504
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9505
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9507
return make_float2(w.x, w.y); 
# 9508
} 
#endif
# 9510 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DGrad(texture< short4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9511
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9516
::exit(___);}
#if 0
# 9511
{ 
# 9512
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9513
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9515
return make_float4(w.x, w.y, w.z, w.w); 
# 9516
} 
#endif
# 9518 "/usr/local/cuda-5.0/include/texture_fetch_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline float4 tex3DGrad(texture< ushort4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 9519
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 9524
::exit(___);}
#if 0
# 9519
{ 
# 9520
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
# 9521
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
# 9523
return make_float4(w.x, w.y, w.z, w.w); 
# 9524
} 
#endif
# 70 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(char *retVal, cudaTextureObject_t texObject, int x) 
# 71
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 80
::exit(___);}
#if 0
# 71
{ 
# 76
int4 tmp; 
# 77
__asm__ volatile("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (x)); 
# 79
(*retVal) = ((char)(tmp.x)); 
# 80
} 
#endif
# 81 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(signed char *retVal, cudaTextureObject_t texObject, int x) 
# 82
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 86
::exit(___);}
#if 0
# 82
{ 
# 83
int4 tmp; 
# 84
__asm__ volatile("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (x)); 
# 85
(*retVal) = ((signed char)(tmp.x)); 
# 86
} 
#endif
# 88 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(char1 *retVal, cudaTextureObject_t texObject, int x) 
# 89
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 93
::exit(___);}
#if 0
# 89
{ 
# 90
int4 tmp; 
# 91
__asm__ volatile("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (x)); 
# 92
(*retVal) = make_char1(tmp.x); 
# 93
} 
#endif
# 95 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(char2 *retVal, cudaTextureObject_t texObject, int x) 
# 96
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 100
::exit(___);}
#if 0
# 96
{ 
# 97
int4 tmp; 
# 98
__asm__ volatile("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (x)); 
# 99
(*retVal) = make_char2(tmp.x, tmp.y); 
# 100
} 
#endif
# 102 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(char4 *retVal, cudaTextureObject_t texObject, int x) 
# 103
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 107
::exit(___);}
#if 0
# 103
{ 
# 104
int4 tmp; 
# 105
__asm__ volatile("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (x)); 
# 106
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 107
} 
#endif
# 109 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(unsigned char *retVal, cudaTextureObject_t texObject, int x) 
# 110
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 114
::exit(___);}
#if 0
# 110
{ 
# 111
uint4 tmp; 
# 112
__asm__ volatile("tex.1d.v4.u32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (x)); 
# 113
(*retVal) = ((unsigned char)(tmp.x)); 
# 114
} 
#endif
# 116 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(uchar1 *retVal, cudaTextureObject_t texObject, int x) 
# 117
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 121
::exit(___);}
#if 0
# 117
{ 
# 118
uint4 tmp; 
# 119
__asm__ volatile("tex.1d.v4.u32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (x)); 
# 120
(*retVal) = make_uchar1(tmp.x); 
# 121
} 
#endif
# 123 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(uchar2 *retVal, cudaTextureObject_t texObject, int x) 
# 124
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 128
::exit(___);}
#if 0
# 124
{ 
# 125
uint4 tmp; 
# 126
__asm__ volatile("tex.1d.v4.u32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (x)); 
# 127
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 128
} 
#endif
# 130 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(uchar4 *retVal, cudaTextureObject_t texObject, int x) 
# 131
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 135
::exit(___);}
#if 0
# 131
{ 
# 132
uint4 tmp; 
# 133
__asm__ volatile("tex.1d.v4.u32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (x)); 
# 134
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 135
} 
#endif
# 143 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(short *retVal, cudaTextureObject_t texObject, int x) 
# 144
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 148
::exit(___);}
#if 0
# 144
{ 
# 145
int4 tmp; 
# 146
__asm__ volatile("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (x)); 
# 147
(*retVal) = ((short)(tmp.x)); 
# 148
} 
#endif
# 150 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(short1 *retVal, cudaTextureObject_t texObject, int x) 
# 151
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 155
::exit(___);}
#if 0
# 151
{ 
# 152
int4 tmp; 
# 153
__asm__ volatile("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (x)); 
# 154
(*retVal) = make_short1(tmp.x); 
# 155
} 
#endif
# 157 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(short2 *retVal, cudaTextureObject_t texObject, int x) 
# 158
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 162
::exit(___);}
#if 0
# 158
{ 
# 159
int4 tmp; 
# 160
__asm__ volatile("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (x)); 
# 161
(*retVal) = make_short2(tmp.x, tmp.y); 
# 162
} 
#endif
# 164 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(short4 *retVal, cudaTextureObject_t texObject, int x) 
# 165
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 169
::exit(___);}
#if 0
# 165
{ 
# 166
int4 tmp; 
# 167
__asm__ volatile("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (x)); 
# 168
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 169
} 
#endif
# 171 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(unsigned short *retVal, cudaTextureObject_t texObject, int x) 
# 172
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 176
::exit(___);}
#if 0
# 172
{ 
# 173
uint4 tmp; 
# 174
__asm__ volatile("tex.1d.v4.u32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (x)); 
# 175
(*retVal) = ((unsigned short)(tmp.x)); 
# 176
} 
#endif
# 178 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(ushort1 *retVal, cudaTextureObject_t texObject, int x) 
# 179
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 183
::exit(___);}
#if 0
# 179
{ 
# 180
uint4 tmp; 
# 181
__asm__ volatile("tex.1d.v4.u32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (x)); 
# 182
(*retVal) = make_ushort1(tmp.x); 
# 183
} 
#endif
# 185 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(ushort2 *retVal, cudaTextureObject_t texObject, int x) 
# 186
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 190
::exit(___);}
#if 0
# 186
{ 
# 187
uint4 tmp; 
# 188
__asm__ volatile("tex.1d.v4.u32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (x)); 
# 189
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 190
} 
#endif
# 192 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(ushort4 *retVal, cudaTextureObject_t texObject, int x) 
# 193
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 197
::exit(___);}
#if 0
# 193
{ 
# 194
uint4 tmp; 
# 195
__asm__ volatile("tex.1d.v4.u32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (x)); 
# 196
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 197
} 
#endif
# 205 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(int *retVal, cudaTextureObject_t texObject, int x) 
# 206
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 210
::exit(___);}
#if 0
# 206
{ 
# 207
int4 tmp; 
# 208
__asm__ volatile("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (x)); 
# 209
(*retVal) = ((int)(tmp.x)); 
# 210
} 
#endif
# 212 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(int1 *retVal, cudaTextureObject_t texObject, int x) 
# 213
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 217
::exit(___);}
#if 0
# 213
{ 
# 214
int4 tmp; 
# 215
__asm__ volatile("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (x)); 
# 216
(*retVal) = make_int1(tmp.x); 
# 217
} 
#endif
# 219 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(int2 *retVal, cudaTextureObject_t texObject, int x) 
# 220
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 224
::exit(___);}
#if 0
# 220
{ 
# 221
int4 tmp; 
# 222
__asm__ volatile("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (x)); 
# 223
(*retVal) = make_int2(tmp.x, tmp.y); 
# 224
} 
#endif
# 226 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(int4 *retVal, cudaTextureObject_t texObject, int x) 
# 227
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 231
::exit(___);}
#if 0
# 227
{ 
# 228
int4 tmp; 
# 229
__asm__ volatile("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (x)); 
# 230
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 231
} 
#endif
# 233 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(unsigned *retVal, cudaTextureObject_t texObject, int x) 
# 234
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 238
::exit(___);}
#if 0
# 234
{ 
# 235
uint4 tmp; 
# 236
__asm__ volatile("tex.1d.v4.u32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (x)); 
# 237
(*retVal) = ((unsigned)(tmp.x)); 
# 238
} 
#endif
# 240 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(uint1 *retVal, cudaTextureObject_t texObject, int x) 
# 241
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 245
::exit(___);}
#if 0
# 241
{ 
# 242
uint4 tmp; 
# 243
__asm__ volatile("tex.1d.v4.u32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (x)); 
# 244
(*retVal) = make_uint1(tmp.x); 
# 245
} 
#endif
# 247 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(uint2 *retVal, cudaTextureObject_t texObject, int x) 
# 248
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 252
::exit(___);}
#if 0
# 248
{ 
# 249
uint4 tmp; 
# 250
__asm__ volatile("tex.1d.v4.u32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (x)); 
# 251
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 252
} 
#endif
# 254 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(uint4 *retVal, cudaTextureObject_t texObject, int x) 
# 255
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 259
::exit(___);}
#if 0
# 255
{ 
# 256
uint4 tmp; 
# 257
__asm__ volatile("tex.1d.v4.u32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (x)); 
# 258
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 259
} 
#endif
# 334 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(float *retVal, cudaTextureObject_t texObject, int x) 
# 335
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 339
::exit(___);}
#if 0
# 335
{ 
# 336
float4 tmp; 
# 337
__asm__ volatile("tex.1d.v4.f32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (x)); 
# 338
(*retVal) = ((float)(tmp.x)); 
# 339
} 
#endif
# 341 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(float1 *retVal, cudaTextureObject_t texObject, int x) 
# 342
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 346
::exit(___);}
#if 0
# 342
{ 
# 343
float4 tmp; 
# 344
__asm__ volatile("tex.1d.v4.f32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (x)); 
# 345
(*retVal) = make_float1(tmp.x); 
# 346
} 
#endif
# 348 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(float2 *retVal, cudaTextureObject_t texObject, int x) 
# 349
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 353
::exit(___);}
#if 0
# 349
{ 
# 350
float4 tmp; 
# 351
__asm__ volatile("tex.1d.v4.f32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (x)); 
# 352
(*retVal) = make_float2(tmp.x, tmp.y); 
# 353
} 
#endif
# 355 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1Dfetch(float4 *retVal, cudaTextureObject_t texObject, int x) 
# 356
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 360
::exit(___);}
#if 0
# 356
{ 
# 357
float4 tmp; 
# 358
__asm__ volatile("tex.1d.v4.f32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (x)); 
# 359
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 360
} 
#endif
# 368 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
template< class T> 
# 369
__attribute((always_inline)) __attribute__((unused)) static inline T tex1Dfetch(cudaTextureObject_t texObject, int x) 
# 370
{int volatile ___ = 1;(void)texObject;(void)x;
# 374
::exit(___);}
#if 0
# 370
{ 
# 371
T ret; 
# 372
tex1Dfetch(&ret, texObject, x); 
# 373
return ret; 
# 374
} 
#endif
# 382 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(char *retVal, cudaTextureObject_t texObject, float x) 
# 383
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 392
::exit(___);}
#if 0
# 383
{ 
# 388
int4 tmp; 
# 389
__asm__ volatile("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x)); 
# 391
(*retVal) = ((char)(tmp.x)); 
# 392
} 
#endif
# 393 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(signed char *retVal, cudaTextureObject_t texObject, float x) 
# 394
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 398
::exit(___);}
#if 0
# 394
{ 
# 395
int4 tmp; 
# 396
__asm__ volatile("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x)); 
# 397
(*retVal) = ((signed char)(tmp.x)); 
# 398
} 
#endif
# 400 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(char1 *retVal, cudaTextureObject_t texObject, float x) 
# 401
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 405
::exit(___);}
#if 0
# 401
{ 
# 402
int4 tmp; 
# 403
__asm__ volatile("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x)); 
# 404
(*retVal) = make_char1(tmp.x); 
# 405
} 
#endif
# 407 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(char2 *retVal, cudaTextureObject_t texObject, float x) 
# 408
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 412
::exit(___);}
#if 0
# 408
{ 
# 409
int4 tmp; 
# 410
__asm__ volatile("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x)); 
# 411
(*retVal) = make_char2(tmp.x, tmp.y); 
# 412
} 
#endif
# 414 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(char4 *retVal, cudaTextureObject_t texObject, float x) 
# 415
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 419
::exit(___);}
#if 0
# 415
{ 
# 416
int4 tmp; 
# 417
__asm__ volatile("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x)); 
# 418
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 419
} 
#endif
# 421 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(unsigned char *retVal, cudaTextureObject_t texObject, float x) 
# 422
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 426
::exit(___);}
#if 0
# 422
{ 
# 423
uint4 tmp; 
# 424
__asm__ volatile("tex.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x)); 
# 425
(*retVal) = ((unsigned char)(tmp.x)); 
# 426
} 
#endif
# 428 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(uchar1 *retVal, cudaTextureObject_t texObject, float x) 
# 429
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 433
::exit(___);}
#if 0
# 429
{ 
# 430
uint4 tmp; 
# 431
__asm__ volatile("tex.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x)); 
# 432
(*retVal) = make_uchar1(tmp.x); 
# 433
} 
#endif
# 435 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(uchar2 *retVal, cudaTextureObject_t texObject, float x) 
# 436
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 440
::exit(___);}
#if 0
# 436
{ 
# 437
uint4 tmp; 
# 438
__asm__ volatile("tex.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x)); 
# 439
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 440
} 
#endif
# 442 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(uchar4 *retVal, cudaTextureObject_t texObject, float x) 
# 443
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 447
::exit(___);}
#if 0
# 443
{ 
# 444
uint4 tmp; 
# 445
__asm__ volatile("tex.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x)); 
# 446
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 447
} 
#endif
# 455 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(short *retVal, cudaTextureObject_t texObject, float x) 
# 456
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 460
::exit(___);}
#if 0
# 456
{ 
# 457
int4 tmp; 
# 458
__asm__ volatile("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x)); 
# 459
(*retVal) = ((short)(tmp.x)); 
# 460
} 
#endif
# 462 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(short1 *retVal, cudaTextureObject_t texObject, float x) 
# 463
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 467
::exit(___);}
#if 0
# 463
{ 
# 464
int4 tmp; 
# 465
__asm__ volatile("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x)); 
# 466
(*retVal) = make_short1(tmp.x); 
# 467
} 
#endif
# 469 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(short2 *retVal, cudaTextureObject_t texObject, float x) 
# 470
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 474
::exit(___);}
#if 0
# 470
{ 
# 471
int4 tmp; 
# 472
__asm__ volatile("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x)); 
# 473
(*retVal) = make_short2(tmp.x, tmp.y); 
# 474
} 
#endif
# 476 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(short4 *retVal, cudaTextureObject_t texObject, float x) 
# 477
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 481
::exit(___);}
#if 0
# 477
{ 
# 478
int4 tmp; 
# 479
__asm__ volatile("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x)); 
# 480
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 481
} 
#endif
# 483 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(unsigned short *retVal, cudaTextureObject_t texObject, float x) 
# 484
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 488
::exit(___);}
#if 0
# 484
{ 
# 485
uint4 tmp; 
# 486
__asm__ volatile("tex.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x)); 
# 487
(*retVal) = ((unsigned short)(tmp.x)); 
# 488
} 
#endif
# 490 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(ushort1 *retVal, cudaTextureObject_t texObject, float x) 
# 491
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 495
::exit(___);}
#if 0
# 491
{ 
# 492
uint4 tmp; 
# 493
__asm__ volatile("tex.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x)); 
# 494
(*retVal) = make_ushort1(tmp.x); 
# 495
} 
#endif
# 497 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(ushort2 *retVal, cudaTextureObject_t texObject, float x) 
# 498
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 502
::exit(___);}
#if 0
# 498
{ 
# 499
uint4 tmp; 
# 500
__asm__ volatile("tex.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x)); 
# 501
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 502
} 
#endif
# 504 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(ushort4 *retVal, cudaTextureObject_t texObject, float x) 
# 505
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 509
::exit(___);}
#if 0
# 505
{ 
# 506
uint4 tmp; 
# 507
__asm__ volatile("tex.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x)); 
# 508
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 509
} 
#endif
# 517 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(int *retVal, cudaTextureObject_t texObject, float x) 
# 518
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 522
::exit(___);}
#if 0
# 518
{ 
# 519
int4 tmp; 
# 520
__asm__ volatile("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x)); 
# 521
(*retVal) = ((int)(tmp.x)); 
# 522
} 
#endif
# 524 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(int1 *retVal, cudaTextureObject_t texObject, float x) 
# 525
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 529
::exit(___);}
#if 0
# 525
{ 
# 526
int4 tmp; 
# 527
__asm__ volatile("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x)); 
# 528
(*retVal) = make_int1(tmp.x); 
# 529
} 
#endif
# 531 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(int2 *retVal, cudaTextureObject_t texObject, float x) 
# 532
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 536
::exit(___);}
#if 0
# 532
{ 
# 533
int4 tmp; 
# 534
__asm__ volatile("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x)); 
# 535
(*retVal) = make_int2(tmp.x, tmp.y); 
# 536
} 
#endif
# 538 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(int4 *retVal, cudaTextureObject_t texObject, float x) 
# 539
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 543
::exit(___);}
#if 0
# 539
{ 
# 540
int4 tmp; 
# 541
__asm__ volatile("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x)); 
# 542
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 543
} 
#endif
# 545 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(unsigned *retVal, cudaTextureObject_t texObject, float x) 
# 546
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 550
::exit(___);}
#if 0
# 546
{ 
# 547
uint4 tmp; 
# 548
__asm__ volatile("tex.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x)); 
# 549
(*retVal) = ((unsigned)(tmp.x)); 
# 550
} 
#endif
# 552 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(uint1 *retVal, cudaTextureObject_t texObject, float x) 
# 553
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 557
::exit(___);}
#if 0
# 553
{ 
# 554
uint4 tmp; 
# 555
__asm__ volatile("tex.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x)); 
# 556
(*retVal) = make_uint1(tmp.x); 
# 557
} 
#endif
# 559 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(uint2 *retVal, cudaTextureObject_t texObject, float x) 
# 560
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 564
::exit(___);}
#if 0
# 560
{ 
# 561
uint4 tmp; 
# 562
__asm__ volatile("tex.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x)); 
# 563
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 564
} 
#endif
# 566 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(uint4 *retVal, cudaTextureObject_t texObject, float x) 
# 567
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 571
::exit(___);}
#if 0
# 567
{ 
# 568
uint4 tmp; 
# 569
__asm__ volatile("tex.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x)); 
# 570
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 571
} 
#endif
# 646 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(float *retVal, cudaTextureObject_t texObject, float x) 
# 647
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 651
::exit(___);}
#if 0
# 647
{ 
# 648
float4 tmp; 
# 649
__asm__ volatile("tex.1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x)); 
# 650
(*retVal) = ((float)(tmp.x)); 
# 651
} 
#endif
# 653 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(float1 *retVal, cudaTextureObject_t texObject, float x) 
# 654
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 658
::exit(___);}
#if 0
# 654
{ 
# 655
float4 tmp; 
# 656
__asm__ volatile("tex.1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x)); 
# 657
(*retVal) = make_float1(tmp.x); 
# 658
} 
#endif
# 660 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(float2 *retVal, cudaTextureObject_t texObject, float x) 
# 661
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 665
::exit(___);}
#if 0
# 661
{ 
# 662
float4 tmp; 
# 663
__asm__ volatile("tex.1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x)); 
# 664
(*retVal) = make_float2(tmp.x, tmp.y); 
# 665
} 
#endif
# 667 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1D(float4 *retVal, cudaTextureObject_t texObject, float x) 
# 668
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
# 672
::exit(___);}
#if 0
# 668
{ 
# 669
float4 tmp; 
# 670
__asm__ volatile("tex.1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x)); 
# 671
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 672
} 
#endif
# 680 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
template< class T> 
# 681
__attribute((always_inline)) __attribute__((unused)) static inline T tex1D(cudaTextureObject_t texObject, float x) 
# 682
{int volatile ___ = 1;(void)texObject;(void)x;
# 686
::exit(___);}
#if 0
# 682
{ 
# 683
T ret; 
# 684
tex1D(&ret, texObject, x); 
# 685
return ret; 
# 686
} 
#endif
# 694 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(char *retVal, cudaTextureObject_t texObject, float x, float y) 
# 695
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 704
::exit(___);}
#if 0
# 695
{ 
# 700
int4 tmp; 
# 701
__asm__ volatile("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 703
(*retVal) = ((char)(tmp.x)); 
# 704
} 
#endif
# 705 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(signed char *retVal, cudaTextureObject_t texObject, float x, float y) 
# 706
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 710
::exit(___);}
#if 0
# 706
{ 
# 707
int4 tmp; 
# 708
__asm__ volatile("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 709
(*retVal) = ((signed char)(tmp.x)); 
# 710
} 
#endif
# 712 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(char1 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 713
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 717
::exit(___);}
#if 0
# 713
{ 
# 714
int4 tmp; 
# 715
__asm__ volatile("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 716
(*retVal) = make_char1(tmp.x); 
# 717
} 
#endif
# 719 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(char2 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 720
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 724
::exit(___);}
#if 0
# 720
{ 
# 721
int4 tmp; 
# 722
__asm__ volatile("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 723
(*retVal) = make_char2(tmp.x, tmp.y); 
# 724
} 
#endif
# 726 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(char4 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 727
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 731
::exit(___);}
#if 0
# 727
{ 
# 728
int4 tmp; 
# 729
__asm__ volatile("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 730
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 731
} 
#endif
# 733 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y) 
# 734
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 738
::exit(___);}
#if 0
# 734
{ 
# 735
uint4 tmp; 
# 736
__asm__ volatile("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 737
(*retVal) = ((unsigned char)(tmp.x)); 
# 738
} 
#endif
# 740 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 741
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 745
::exit(___);}
#if 0
# 741
{ 
# 742
uint4 tmp; 
# 743
__asm__ volatile("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 744
(*retVal) = make_uchar1(tmp.x); 
# 745
} 
#endif
# 747 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 748
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 752
::exit(___);}
#if 0
# 748
{ 
# 749
uint4 tmp; 
# 750
__asm__ volatile("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 751
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 752
} 
#endif
# 754 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 755
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 759
::exit(___);}
#if 0
# 755
{ 
# 756
uint4 tmp; 
# 757
__asm__ volatile("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 758
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 759
} 
#endif
# 767 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(short *retVal, cudaTextureObject_t texObject, float x, float y) 
# 768
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 772
::exit(___);}
#if 0
# 768
{ 
# 769
int4 tmp; 
# 770
__asm__ volatile("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 771
(*retVal) = ((short)(tmp.x)); 
# 772
} 
#endif
# 774 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(short1 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 775
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 779
::exit(___);}
#if 0
# 775
{ 
# 776
int4 tmp; 
# 777
__asm__ volatile("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 778
(*retVal) = make_short1(tmp.x); 
# 779
} 
#endif
# 781 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(short2 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 782
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 786
::exit(___);}
#if 0
# 782
{ 
# 783
int4 tmp; 
# 784
__asm__ volatile("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 785
(*retVal) = make_short2(tmp.x, tmp.y); 
# 786
} 
#endif
# 788 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(short4 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 789
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 793
::exit(___);}
#if 0
# 789
{ 
# 790
int4 tmp; 
# 791
__asm__ volatile("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 792
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 793
} 
#endif
# 795 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y) 
# 796
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 800
::exit(___);}
#if 0
# 796
{ 
# 797
uint4 tmp; 
# 798
__asm__ volatile("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 799
(*retVal) = ((unsigned short)(tmp.x)); 
# 800
} 
#endif
# 802 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 803
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 807
::exit(___);}
#if 0
# 803
{ 
# 804
uint4 tmp; 
# 805
__asm__ volatile("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 806
(*retVal) = make_ushort1(tmp.x); 
# 807
} 
#endif
# 809 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 810
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 814
::exit(___);}
#if 0
# 810
{ 
# 811
uint4 tmp; 
# 812
__asm__ volatile("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 813
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 814
} 
#endif
# 816 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 817
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 821
::exit(___);}
#if 0
# 817
{ 
# 818
uint4 tmp; 
# 819
__asm__ volatile("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 820
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 821
} 
#endif
# 829 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(int *retVal, cudaTextureObject_t texObject, float x, float y) 
# 830
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 834
::exit(___);}
#if 0
# 830
{ 
# 831
int4 tmp; 
# 832
__asm__ volatile("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 833
(*retVal) = ((int)(tmp.x)); 
# 834
} 
#endif
# 836 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(int1 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 837
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 841
::exit(___);}
#if 0
# 837
{ 
# 838
int4 tmp; 
# 839
__asm__ volatile("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 840
(*retVal) = make_int1(tmp.x); 
# 841
} 
#endif
# 843 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(int2 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 844
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 848
::exit(___);}
#if 0
# 844
{ 
# 845
int4 tmp; 
# 846
__asm__ volatile("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 847
(*retVal) = make_int2(tmp.x, tmp.y); 
# 848
} 
#endif
# 850 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(int4 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 851
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 855
::exit(___);}
#if 0
# 851
{ 
# 852
int4 tmp; 
# 853
__asm__ volatile("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 854
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 855
} 
#endif
# 857 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(unsigned *retVal, cudaTextureObject_t texObject, float x, float y) 
# 858
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 862
::exit(___);}
#if 0
# 858
{ 
# 859
uint4 tmp; 
# 860
__asm__ volatile("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 861
(*retVal) = ((unsigned)(tmp.x)); 
# 862
} 
#endif
# 864 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(uint1 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 865
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 869
::exit(___);}
#if 0
# 865
{ 
# 866
uint4 tmp; 
# 867
__asm__ volatile("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 868
(*retVal) = make_uint1(tmp.x); 
# 869
} 
#endif
# 871 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(uint2 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 872
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 876
::exit(___);}
#if 0
# 872
{ 
# 873
uint4 tmp; 
# 874
__asm__ volatile("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 875
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 876
} 
#endif
# 878 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(uint4 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 879
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 883
::exit(___);}
#if 0
# 879
{ 
# 880
uint4 tmp; 
# 881
__asm__ volatile("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 882
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 883
} 
#endif
# 958 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(float *retVal, cudaTextureObject_t texObject, float x, float y) 
# 959
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 963
::exit(___);}
#if 0
# 959
{ 
# 960
float4 tmp; 
# 961
__asm__ volatile("tex.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 962
(*retVal) = ((float)(tmp.x)); 
# 963
} 
#endif
# 965 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(float1 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 966
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 970
::exit(___);}
#if 0
# 966
{ 
# 967
float4 tmp; 
# 968
__asm__ volatile("tex.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 969
(*retVal) = make_float1(tmp.x); 
# 970
} 
#endif
# 972 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(float2 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 973
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 977
::exit(___);}
#if 0
# 973
{ 
# 974
float4 tmp; 
# 975
__asm__ volatile("tex.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 976
(*retVal) = make_float2(tmp.x, tmp.y); 
# 977
} 
#endif
# 979 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2D(float4 *retVal, cudaTextureObject_t texObject, float x, float y) 
# 980
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
# 984
::exit(___);}
#if 0
# 980
{ 
# 981
float4 tmp; 
# 982
__asm__ volatile("tex.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 983
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 984
} 
#endif
# 992 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
template< class T> 
# 993
__attribute((always_inline)) __attribute__((unused)) static inline T tex2D(cudaTextureObject_t texObject, float x, float y) 
# 994
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;
# 998
::exit(___);}
#if 0
# 994
{ 
# 995
T ret; 
# 996
tex2D(&ret, texObject, x, y); 
# 997
return ret; 
# 998
} 
#endif
# 1006 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(char *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1007
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1016
::exit(___);}
#if 0
# 1007
{ 
# 1012
int4 tmp; 
# 1013
__asm__ volatile("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1015
(*retVal) = ((char)(tmp.x)); 
# 1016
} 
#endif
# 1017 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1018
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1022
::exit(___);}
#if 0
# 1018
{ 
# 1019
int4 tmp; 
# 1020
__asm__ volatile("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1021
(*retVal) = ((signed char)(tmp.x)); 
# 1022
} 
#endif
# 1024 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1025
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1029
::exit(___);}
#if 0
# 1025
{ 
# 1026
int4 tmp; 
# 1027
__asm__ volatile("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1028
(*retVal) = make_char1(tmp.x); 
# 1029
} 
#endif
# 1031 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1032
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1036
::exit(___);}
#if 0
# 1032
{ 
# 1033
int4 tmp; 
# 1034
__asm__ volatile("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1035
(*retVal) = make_char2(tmp.x, tmp.y); 
# 1036
} 
#endif
# 1038 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1039
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1043
::exit(___);}
#if 0
# 1039
{ 
# 1040
int4 tmp; 
# 1041
__asm__ volatile("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1042
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1043
} 
#endif
# 1045 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1046
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1050
::exit(___);}
#if 0
# 1046
{ 
# 1047
uint4 tmp; 
# 1048
__asm__ volatile("tex.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1049
(*retVal) = ((unsigned char)(tmp.x)); 
# 1050
} 
#endif
# 1052 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1053
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1057
::exit(___);}
#if 0
# 1053
{ 
# 1054
uint4 tmp; 
# 1055
__asm__ volatile("tex.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1056
(*retVal) = make_uchar1(tmp.x); 
# 1057
} 
#endif
# 1059 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1060
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1064
::exit(___);}
#if 0
# 1060
{ 
# 1061
uint4 tmp; 
# 1062
__asm__ volatile("tex.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1063
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 1064
} 
#endif
# 1066 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1067
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1071
::exit(___);}
#if 0
# 1067
{ 
# 1068
uint4 tmp; 
# 1069
__asm__ volatile("tex.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1070
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1071
} 
#endif
# 1079 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(short *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1080
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1084
::exit(___);}
#if 0
# 1080
{ 
# 1081
int4 tmp; 
# 1082
__asm__ volatile("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1083
(*retVal) = ((short)(tmp.x)); 
# 1084
} 
#endif
# 1086 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1087
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1091
::exit(___);}
#if 0
# 1087
{ 
# 1088
int4 tmp; 
# 1089
__asm__ volatile("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1090
(*retVal) = make_short1(tmp.x); 
# 1091
} 
#endif
# 1093 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1094
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1098
::exit(___);}
#if 0
# 1094
{ 
# 1095
int4 tmp; 
# 1096
__asm__ volatile("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1097
(*retVal) = make_short2(tmp.x, tmp.y); 
# 1098
} 
#endif
# 1100 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1101
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1105
::exit(___);}
#if 0
# 1101
{ 
# 1102
int4 tmp; 
# 1103
__asm__ volatile("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1104
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1105
} 
#endif
# 1107 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1108
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1112
::exit(___);}
#if 0
# 1108
{ 
# 1109
uint4 tmp; 
# 1110
__asm__ volatile("tex.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1111
(*retVal) = ((unsigned short)(tmp.x)); 
# 1112
} 
#endif
# 1114 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1115
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1119
::exit(___);}
#if 0
# 1115
{ 
# 1116
uint4 tmp; 
# 1117
__asm__ volatile("tex.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1118
(*retVal) = make_ushort1(tmp.x); 
# 1119
} 
#endif
# 1121 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1122
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1126
::exit(___);}
#if 0
# 1122
{ 
# 1123
uint4 tmp; 
# 1124
__asm__ volatile("tex.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1125
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 1126
} 
#endif
# 1128 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1129
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1133
::exit(___);}
#if 0
# 1129
{ 
# 1130
uint4 tmp; 
# 1131
__asm__ volatile("tex.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1132
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1133
} 
#endif
# 1141 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(int *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1142
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1146
::exit(___);}
#if 0
# 1142
{ 
# 1143
int4 tmp; 
# 1144
__asm__ volatile("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1145
(*retVal) = ((int)(tmp.x)); 
# 1146
} 
#endif
# 1148 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1149
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1153
::exit(___);}
#if 0
# 1149
{ 
# 1150
int4 tmp; 
# 1151
__asm__ volatile("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1152
(*retVal) = make_int1(tmp.x); 
# 1153
} 
#endif
# 1155 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1156
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1160
::exit(___);}
#if 0
# 1156
{ 
# 1157
int4 tmp; 
# 1158
__asm__ volatile("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1159
(*retVal) = make_int2(tmp.x, tmp.y); 
# 1160
} 
#endif
# 1162 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1163
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1167
::exit(___);}
#if 0
# 1163
{ 
# 1164
int4 tmp; 
# 1165
__asm__ volatile("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1166
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1167
} 
#endif
# 1169 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1170
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1174
::exit(___);}
#if 0
# 1170
{ 
# 1171
uint4 tmp; 
# 1172
__asm__ volatile("tex.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1173
(*retVal) = ((unsigned)(tmp.x)); 
# 1174
} 
#endif
# 1176 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1177
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1181
::exit(___);}
#if 0
# 1177
{ 
# 1178
uint4 tmp; 
# 1179
__asm__ volatile("tex.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1180
(*retVal) = make_uint1(tmp.x); 
# 1181
} 
#endif
# 1183 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1184
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1188
::exit(___);}
#if 0
# 1184
{ 
# 1185
uint4 tmp; 
# 1186
__asm__ volatile("tex.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1187
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 1188
} 
#endif
# 1190 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1191
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1195
::exit(___);}
#if 0
# 1191
{ 
# 1192
uint4 tmp; 
# 1193
__asm__ volatile("tex.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1194
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1195
} 
#endif
# 1270 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(float *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1271
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1275
::exit(___);}
#if 0
# 1271
{ 
# 1272
float4 tmp; 
# 1273
__asm__ volatile("tex.3d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1274
(*retVal) = ((float)(tmp.x)); 
# 1275
} 
#endif
# 1277 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1278
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1282
::exit(___);}
#if 0
# 1278
{ 
# 1279
float4 tmp; 
# 1280
__asm__ volatile("tex.3d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1281
(*retVal) = make_float1(tmp.x); 
# 1282
} 
#endif
# 1284 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1285
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1289
::exit(___);}
#if 0
# 1285
{ 
# 1286
float4 tmp; 
# 1287
__asm__ volatile("tex.3d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1288
(*retVal) = make_float2(tmp.x, tmp.y); 
# 1289
} 
#endif
# 1291 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3D(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1292
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1296
::exit(___);}
#if 0
# 1292
{ 
# 1293
float4 tmp; 
# 1294
__asm__ volatile("tex.3d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1295
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1296
} 
#endif
# 1304 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
template< class T> 
# 1305
__attribute((always_inline)) __attribute__((unused)) static inline T tex3D(cudaTextureObject_t texObject, float x, float y, float z) 
# 1306
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
# 1310
::exit(___);}
#if 0
# 1306
{ 
# 1307
T ret; 
# 1308
tex3D(&ret, texObject, x, y, z); 
# 1309
return ret; 
# 1310
} 
#endif
# 1318 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(char *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1319
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1328
::exit(___);}
#if 0
# 1319
{ 
# 1324
int4 tmp; 
# 1325
__asm__ volatile("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1327
(*retVal) = ((char)(tmp.x)); 
# 1328
} 
#endif
# 1329 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(signed char *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1330
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1334
::exit(___);}
#if 0
# 1330
{ 
# 1331
int4 tmp; 
# 1332
__asm__ volatile("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1333
(*retVal) = ((signed char)(tmp.x)); 
# 1334
} 
#endif
# 1336 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(char1 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1337
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1341
::exit(___);}
#if 0
# 1337
{ 
# 1338
int4 tmp; 
# 1339
__asm__ volatile("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1340
(*retVal) = make_char1(tmp.x); 
# 1341
} 
#endif
# 1343 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(char2 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1344
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1348
::exit(___);}
#if 0
# 1344
{ 
# 1345
int4 tmp; 
# 1346
__asm__ volatile("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1347
(*retVal) = make_char2(tmp.x, tmp.y); 
# 1348
} 
#endif
# 1350 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(char4 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1351
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1355
::exit(___);}
#if 0
# 1351
{ 
# 1352
int4 tmp; 
# 1353
__asm__ volatile("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1354
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1355
} 
#endif
# 1357 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(unsigned char *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1358
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1362
::exit(___);}
#if 0
# 1358
{ 
# 1359
uint4 tmp; 
# 1360
__asm__ volatile("tex.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1361
(*retVal) = ((unsigned char)(tmp.x)); 
# 1362
} 
#endif
# 1364 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(uchar1 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1365
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1369
::exit(___);}
#if 0
# 1365
{ 
# 1366
uint4 tmp; 
# 1367
__asm__ volatile("tex.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1368
(*retVal) = make_uchar1(tmp.x); 
# 1369
} 
#endif
# 1371 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(uchar2 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1372
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1376
::exit(___);}
#if 0
# 1372
{ 
# 1373
uint4 tmp; 
# 1374
__asm__ volatile("tex.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1375
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 1376
} 
#endif
# 1378 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(uchar4 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1379
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1383
::exit(___);}
#if 0
# 1379
{ 
# 1380
uint4 tmp; 
# 1381
__asm__ volatile("tex.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1382
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1383
} 
#endif
# 1391 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(short *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1392
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1396
::exit(___);}
#if 0
# 1392
{ 
# 1393
int4 tmp; 
# 1394
__asm__ volatile("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1395
(*retVal) = ((short)(tmp.x)); 
# 1396
} 
#endif
# 1398 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(short1 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1399
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1403
::exit(___);}
#if 0
# 1399
{ 
# 1400
int4 tmp; 
# 1401
__asm__ volatile("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1402
(*retVal) = make_short1(tmp.x); 
# 1403
} 
#endif
# 1405 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(short2 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1406
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1410
::exit(___);}
#if 0
# 1406
{ 
# 1407
int4 tmp; 
# 1408
__asm__ volatile("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1409
(*retVal) = make_short2(tmp.x, tmp.y); 
# 1410
} 
#endif
# 1412 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(short4 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1413
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1417
::exit(___);}
#if 0
# 1413
{ 
# 1414
int4 tmp; 
# 1415
__asm__ volatile("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1416
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1417
} 
#endif
# 1419 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(unsigned short *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1420
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1424
::exit(___);}
#if 0
# 1420
{ 
# 1421
uint4 tmp; 
# 1422
__asm__ volatile("tex.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1423
(*retVal) = ((unsigned short)(tmp.x)); 
# 1424
} 
#endif
# 1426 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(ushort1 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1427
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1431
::exit(___);}
#if 0
# 1427
{ 
# 1428
uint4 tmp; 
# 1429
__asm__ volatile("tex.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1430
(*retVal) = make_ushort1(tmp.x); 
# 1431
} 
#endif
# 1433 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(ushort2 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1434
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1438
::exit(___);}
#if 0
# 1434
{ 
# 1435
uint4 tmp; 
# 1436
__asm__ volatile("tex.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1437
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 1438
} 
#endif
# 1440 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(ushort4 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1441
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1445
::exit(___);}
#if 0
# 1441
{ 
# 1442
uint4 tmp; 
# 1443
__asm__ volatile("tex.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1444
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1445
} 
#endif
# 1453 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(int *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1454
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1458
::exit(___);}
#if 0
# 1454
{ 
# 1455
int4 tmp; 
# 1456
__asm__ volatile("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1457
(*retVal) = ((int)(tmp.x)); 
# 1458
} 
#endif
# 1460 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(int1 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1461
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1465
::exit(___);}
#if 0
# 1461
{ 
# 1462
int4 tmp; 
# 1463
__asm__ volatile("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1464
(*retVal) = make_int1(tmp.x); 
# 1465
} 
#endif
# 1467 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(int2 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1468
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1472
::exit(___);}
#if 0
# 1468
{ 
# 1469
int4 tmp; 
# 1470
__asm__ volatile("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1471
(*retVal) = make_int2(tmp.x, tmp.y); 
# 1472
} 
#endif
# 1474 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(int4 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1475
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1479
::exit(___);}
#if 0
# 1475
{ 
# 1476
int4 tmp; 
# 1477
__asm__ volatile("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1478
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1479
} 
#endif
# 1481 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(unsigned *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1482
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1486
::exit(___);}
#if 0
# 1482
{ 
# 1483
uint4 tmp; 
# 1484
__asm__ volatile("tex.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1485
(*retVal) = ((unsigned)(tmp.x)); 
# 1486
} 
#endif
# 1488 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(uint1 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1489
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1493
::exit(___);}
#if 0
# 1489
{ 
# 1490
uint4 tmp; 
# 1491
__asm__ volatile("tex.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1492
(*retVal) = make_uint1(tmp.x); 
# 1493
} 
#endif
# 1495 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(uint2 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1496
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1500
::exit(___);}
#if 0
# 1496
{ 
# 1497
uint4 tmp; 
# 1498
__asm__ volatile("tex.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1499
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 1500
} 
#endif
# 1502 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(uint4 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1503
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1507
::exit(___);}
#if 0
# 1503
{ 
# 1504
uint4 tmp; 
# 1505
__asm__ volatile("tex.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1506
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1507
} 
#endif
# 1582 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(float *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1583
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1587
::exit(___);}
#if 0
# 1583
{ 
# 1584
float4 tmp; 
# 1585
__asm__ volatile("tex.a1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1586
(*retVal) = ((float)(tmp.x)); 
# 1587
} 
#endif
# 1589 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(float1 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1590
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1594
::exit(___);}
#if 0
# 1590
{ 
# 1591
float4 tmp; 
# 1592
__asm__ volatile("tex.a1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1593
(*retVal) = make_float1(tmp.x); 
# 1594
} 
#endif
# 1596 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(float2 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1597
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1601
::exit(___);}
#if 0
# 1597
{ 
# 1598
float4 tmp; 
# 1599
__asm__ volatile("tex.a1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1600
(*retVal) = make_float2(tmp.x, tmp.y); 
# 1601
} 
#endif
# 1603 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayered(float4 *retVal, cudaTextureObject_t texObject, float x, int layer) 
# 1604
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
# 1608
::exit(___);}
#if 0
# 1604
{ 
# 1605
float4 tmp; 
# 1606
__asm__ volatile("tex.a1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x)); 
# 1607
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1608
} 
#endif
# 1616 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
template< class T> 
# 1617
__attribute((always_inline)) __attribute__((unused)) static inline T tex1DLayered(cudaTextureObject_t texObject, float x, int layer) 
# 1618
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;
# 1622
::exit(___);}
#if 0
# 1618
{ 
# 1619
T ret; 
# 1620
tex1DLayered(&ret, texObject, x, layer); 
# 1621
return ret; 
# 1622
} 
#endif
# 1630 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(char *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1631
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1640
::exit(___);}
#if 0
# 1631
{ 
# 1636
int4 tmp; 
# 1637
__asm__ volatile("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1639
(*retVal) = ((char)(tmp.x)); 
# 1640
} 
#endif
# 1641 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(signed char *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1642
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1646
::exit(___);}
#if 0
# 1642
{ 
# 1643
int4 tmp; 
# 1644
__asm__ volatile("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1645
(*retVal) = ((signed char)(tmp.x)); 
# 1646
} 
#endif
# 1648 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(char1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1649
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1653
::exit(___);}
#if 0
# 1649
{ 
# 1650
int4 tmp; 
# 1651
__asm__ volatile("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1652
(*retVal) = make_char1(tmp.x); 
# 1653
} 
#endif
# 1655 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(char2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1656
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1660
::exit(___);}
#if 0
# 1656
{ 
# 1657
int4 tmp; 
# 1658
__asm__ volatile("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1659
(*retVal) = make_char2(tmp.x, tmp.y); 
# 1660
} 
#endif
# 1662 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(char4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1663
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1667
::exit(___);}
#if 0
# 1663
{ 
# 1664
int4 tmp; 
# 1665
__asm__ volatile("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1666
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1667
} 
#endif
# 1669 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1670
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1674
::exit(___);}
#if 0
# 1670
{ 
# 1671
uint4 tmp; 
# 1672
__asm__ volatile("tex.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1673
(*retVal) = ((unsigned char)(tmp.x)); 
# 1674
} 
#endif
# 1676 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1677
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1681
::exit(___);}
#if 0
# 1677
{ 
# 1678
uint4 tmp; 
# 1679
__asm__ volatile("tex.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1680
(*retVal) = make_uchar1(tmp.x); 
# 1681
} 
#endif
# 1683 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1684
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1688
::exit(___);}
#if 0
# 1684
{ 
# 1685
uint4 tmp; 
# 1686
__asm__ volatile("tex.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1687
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 1688
} 
#endif
# 1690 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1691
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1695
::exit(___);}
#if 0
# 1691
{ 
# 1692
uint4 tmp; 
# 1693
__asm__ volatile("tex.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1694
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1695
} 
#endif
# 1703 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(short *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1704
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1708
::exit(___);}
#if 0
# 1704
{ 
# 1705
int4 tmp; 
# 1706
__asm__ volatile("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1707
(*retVal) = ((short)(tmp.x)); 
# 1708
} 
#endif
# 1710 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(short1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1711
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1715
::exit(___);}
#if 0
# 1711
{ 
# 1712
int4 tmp; 
# 1713
__asm__ volatile("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1714
(*retVal) = make_short1(tmp.x); 
# 1715
} 
#endif
# 1717 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(short2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1718
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1722
::exit(___);}
#if 0
# 1718
{ 
# 1719
int4 tmp; 
# 1720
__asm__ volatile("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1721
(*retVal) = make_short2(tmp.x, tmp.y); 
# 1722
} 
#endif
# 1724 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(short4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1725
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1729
::exit(___);}
#if 0
# 1725
{ 
# 1726
int4 tmp; 
# 1727
__asm__ volatile("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1728
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1729
} 
#endif
# 1731 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1732
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1736
::exit(___);}
#if 0
# 1732
{ 
# 1733
uint4 tmp; 
# 1734
__asm__ volatile("tex.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1735
(*retVal) = ((unsigned short)(tmp.x)); 
# 1736
} 
#endif
# 1738 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1739
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1743
::exit(___);}
#if 0
# 1739
{ 
# 1740
uint4 tmp; 
# 1741
__asm__ volatile("tex.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1742
(*retVal) = make_ushort1(tmp.x); 
# 1743
} 
#endif
# 1745 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1746
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1750
::exit(___);}
#if 0
# 1746
{ 
# 1747
uint4 tmp; 
# 1748
__asm__ volatile("tex.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1749
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 1750
} 
#endif
# 1752 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1753
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1757
::exit(___);}
#if 0
# 1753
{ 
# 1754
uint4 tmp; 
# 1755
__asm__ volatile("tex.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1756
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1757
} 
#endif
# 1765 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(int *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1766
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1770
::exit(___);}
#if 0
# 1766
{ 
# 1767
int4 tmp; 
# 1768
__asm__ volatile("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1769
(*retVal) = ((int)(tmp.x)); 
# 1770
} 
#endif
# 1772 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(int1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1773
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1777
::exit(___);}
#if 0
# 1773
{ 
# 1774
int4 tmp; 
# 1775
__asm__ volatile("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1776
(*retVal) = make_int1(tmp.x); 
# 1777
} 
#endif
# 1779 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(int2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1780
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1784
::exit(___);}
#if 0
# 1780
{ 
# 1781
int4 tmp; 
# 1782
__asm__ volatile("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1783
(*retVal) = make_int2(tmp.x, tmp.y); 
# 1784
} 
#endif
# 1786 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(int4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1787
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1791
::exit(___);}
#if 0
# 1787
{ 
# 1788
int4 tmp; 
# 1789
__asm__ volatile("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1790
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1791
} 
#endif
# 1793 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1794
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1798
::exit(___);}
#if 0
# 1794
{ 
# 1795
uint4 tmp; 
# 1796
__asm__ volatile("tex.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1797
(*retVal) = ((unsigned)(tmp.x)); 
# 1798
} 
#endif
# 1800 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1801
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1805
::exit(___);}
#if 0
# 1801
{ 
# 1802
uint4 tmp; 
# 1803
__asm__ volatile("tex.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1804
(*retVal) = make_uint1(tmp.x); 
# 1805
} 
#endif
# 1807 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1808
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1812
::exit(___);}
#if 0
# 1808
{ 
# 1809
uint4 tmp; 
# 1810
__asm__ volatile("tex.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1811
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 1812
} 
#endif
# 1814 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1815
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1819
::exit(___);}
#if 0
# 1815
{ 
# 1816
uint4 tmp; 
# 1817
__asm__ volatile("tex.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1818
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1819
} 
#endif
# 1894 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(float *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1895
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1899
::exit(___);}
#if 0
# 1895
{ 
# 1896
float4 tmp; 
# 1897
__asm__ volatile("tex.a2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1898
(*retVal) = ((float)(tmp.x)); 
# 1899
} 
#endif
# 1901 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(float1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1902
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1906
::exit(___);}
#if 0
# 1902
{ 
# 1903
float4 tmp; 
# 1904
__asm__ volatile("tex.a2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1905
(*retVal) = make_float1(tmp.x); 
# 1906
} 
#endif
# 1908 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(float2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1909
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1913
::exit(___);}
#if 0
# 1909
{ 
# 1910
float4 tmp; 
# 1911
__asm__ volatile("tex.a2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1912
(*retVal) = make_float2(tmp.x, tmp.y); 
# 1913
} 
#endif
# 1915 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayered(float4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
# 1916
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
# 1920
::exit(___);}
#if 0
# 1916
{ 
# 1917
float4 tmp; 
# 1918
__asm__ volatile("tex.a2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y)); 
# 1919
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1920
} 
#endif
# 1928 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
template< class T> 
# 1929
__attribute((always_inline)) __attribute__((unused)) static inline T tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer) 
# 1930
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;
# 1934
::exit(___);}
#if 0
# 1930
{ 
# 1931
T ret; 
# 1932
tex2DLayered(&ret, texObject, x, y, layer); 
# 1933
return ret; 
# 1934
} 
#endif
# 1942 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(char *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1943
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1952
::exit(___);}
#if 0
# 1943
{ 
# 1948
int4 tmp; 
# 1949
__asm__ volatile("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1951
(*retVal) = ((char)(tmp.x)); 
# 1952
} 
#endif
# 1953 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1954
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1958
::exit(___);}
#if 0
# 1954
{ 
# 1955
int4 tmp; 
# 1956
__asm__ volatile("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1957
(*retVal) = ((signed char)(tmp.x)); 
# 1958
} 
#endif
# 1960 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1961
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1965
::exit(___);}
#if 0
# 1961
{ 
# 1962
int4 tmp; 
# 1963
__asm__ volatile("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1964
(*retVal) = make_char1(tmp.x); 
# 1965
} 
#endif
# 1967 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1968
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1972
::exit(___);}
#if 0
# 1968
{ 
# 1969
int4 tmp; 
# 1970
__asm__ volatile("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1971
(*retVal) = make_char2(tmp.x, tmp.y); 
# 1972
} 
#endif
# 1974 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1975
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1979
::exit(___);}
#if 0
# 1975
{ 
# 1976
int4 tmp; 
# 1977
__asm__ volatile("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1978
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1979
} 
#endif
# 1981 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1982
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1986
::exit(___);}
#if 0
# 1982
{ 
# 1983
uint4 tmp; 
# 1984
__asm__ volatile("tex.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1985
(*retVal) = ((unsigned char)(tmp.x)); 
# 1986
} 
#endif
# 1988 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1989
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 1993
::exit(___);}
#if 0
# 1989
{ 
# 1990
uint4 tmp; 
# 1991
__asm__ volatile("tex.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1992
(*retVal) = make_uchar1(tmp.x); 
# 1993
} 
#endif
# 1995 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 1996
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2000
::exit(___);}
#if 0
# 1996
{ 
# 1997
uint4 tmp; 
# 1998
__asm__ volatile("tex.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 1999
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 2000
} 
#endif
# 2002 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2003
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2007
::exit(___);}
#if 0
# 2003
{ 
# 2004
uint4 tmp; 
# 2005
__asm__ volatile("tex.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 2006
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2007
} 
#endif
# 2015 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(short *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2016
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2020
::exit(___);}
#if 0
# 2016
{ 
# 2017
int4 tmp; 
# 2018
__asm__ volatile("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 2019
(*retVal) = ((short)(tmp.x)); 
# 2020
} 
#endif
# 2022 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2023
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2027
::exit(___);}
#if 0
# 2023
{ 
# 2024
int4 tmp; 
# 2025
__asm__ volatile("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 2026
(*retVal) = make_short1(tmp.x); 
# 2027
} 
#endif
# 2029 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2030
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2034
::exit(___);}
#if 0
# 2030
{ 
# 2031
int4 tmp; 
# 2032
__asm__ volatile("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 2033
(*retVal) = make_short2(tmp.x, tmp.y); 
# 2034
} 
#endif
# 2036 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2037
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2041
::exit(___);}
#if 0
# 2037
{ 
# 2038
int4 tmp; 
# 2039
__asm__ volatile("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 2040
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2041
} 
#endif
# 2043 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2044
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2048
::exit(___);}
#if 0
# 2044
{ 
# 2045
uint4 tmp; 
# 2046
__asm__ volatile("tex.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 2047
(*retVal) = ((unsigned short)(tmp.x)); 
# 2048
} 
#endif
# 2050 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2051
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2055
::exit(___);}
#if 0
# 2051
{ 
# 2052
uint4 tmp; 
# 2053
__asm__ volatile("tex.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 2054
(*retVal) = make_ushort1(tmp.x); 
# 2055
} 
#endif
# 2057 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2058
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2062
::exit(___);}
#if 0
# 2058
{ 
# 2059
uint4 tmp; 
# 2060
__asm__ volatile("tex.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 2061
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 2062
} 
#endif
# 2064 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2065
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2069
::exit(___);}
#if 0
# 2065
{ 
# 2066
uint4 tmp; 
# 2067
__asm__ volatile("tex.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 2068
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2069
} 
#endif
# 2077 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(int *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2078
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2082
::exit(___);}
#if 0
# 2078
{ 
# 2079
int4 tmp; 
# 2080
__asm__ volatile("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 2081
(*retVal) = ((int)(tmp.x)); 
# 2082
} 
#endif
# 2084 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2085
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2089
::exit(___);}
#if 0
# 2085
{ 
# 2086
int4 tmp; 
# 2087
__asm__ volatile("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 2088
(*retVal) = make_int1(tmp.x); 
# 2089
} 
#endif
# 2091 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2092
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2096
::exit(___);}
#if 0
# 2092
{ 
# 2093
int4 tmp; 
# 2094
__asm__ volatile("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 2095
(*retVal) = make_int2(tmp.x, tmp.y); 
# 2096
} 
#endif
# 2098 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2099
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2103
::exit(___);}
#if 0
# 2099
{ 
# 2100
int4 tmp; 
# 2101
__asm__ volatile("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 2102
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2103
} 
#endif
# 2105 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2106
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2110
::exit(___);}
#if 0
# 2106
{ 
# 2107
uint4 tmp; 
# 2108
__asm__ volatile("tex.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 2109
(*retVal) = ((unsigned)(tmp.x)); 
# 2110
} 
#endif
# 2112 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2113
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2117
::exit(___);}
#if 0
# 2113
{ 
# 2114
uint4 tmp; 
# 2115
__asm__ volatile("tex.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 2116
(*retVal) = make_uint1(tmp.x); 
# 2117
} 
#endif
# 2119 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2120
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2124
::exit(___);}
#if 0
# 2120
{ 
# 2121
uint4 tmp; 
# 2122
__asm__ volatile("tex.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 2123
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 2124
} 
#endif
# 2126 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2127
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2131
::exit(___);}
#if 0
# 2127
{ 
# 2128
uint4 tmp; 
# 2129
__asm__ volatile("tex.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 2130
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2131
} 
#endif
# 2206 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(float *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2207
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2211
::exit(___);}
#if 0
# 2207
{ 
# 2208
float4 tmp; 
# 2209
__asm__ volatile("tex.cube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 2210
(*retVal) = ((float)(tmp.x)); 
# 2211
} 
#endif
# 2213 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2214
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2218
::exit(___);}
#if 0
# 2214
{ 
# 2215
float4 tmp; 
# 2216
__asm__ volatile("tex.cube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 2217
(*retVal) = make_float1(tmp.x); 
# 2218
} 
#endif
# 2220 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2221
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2225
::exit(___);}
#if 0
# 2221
{ 
# 2222
float4 tmp; 
# 2223
__asm__ volatile("tex.cube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 2224
(*retVal) = make_float2(tmp.x, tmp.y); 
# 2225
} 
#endif
# 2227 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemap(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
# 2228
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
# 2232
::exit(___);}
#if 0
# 2228
{ 
# 2229
float4 tmp; 
# 2230
__asm__ volatile("tex.cube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z)); 
# 2231
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2232
} 
#endif
# 2240 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
template< class T> 
# 2241
__attribute((always_inline)) __attribute__((unused)) static inline T texCubemap(cudaTextureObject_t texObject, float x, float y, float z) 
# 2242
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
# 2246
::exit(___);}
#if 0
# 2242
{ 
# 2243
T ret; 
# 2244
texCubemap(&ret, texObject, x, y, z); 
# 2245
return ret; 
# 2246
} 
#endif
# 2254 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2255
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2264
::exit(___);}
#if 0
# 2255
{ 
# 2260
int4 tmp; 
# 2261
__asm__ volatile("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2263
(*retVal) = ((char)(tmp.x)); 
# 2264
} 
#endif
# 2265 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2266
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2270
::exit(___);}
#if 0
# 2266
{ 
# 2267
int4 tmp; 
# 2268
__asm__ volatile("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2269
(*retVal) = ((signed char)(tmp.x)); 
# 2270
} 
#endif
# 2272 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2273
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2277
::exit(___);}
#if 0
# 2273
{ 
# 2274
int4 tmp; 
# 2275
__asm__ volatile("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2276
(*retVal) = make_char1(tmp.x); 
# 2277
} 
#endif
# 2279 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2280
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2284
::exit(___);}
#if 0
# 2280
{ 
# 2281
int4 tmp; 
# 2282
__asm__ volatile("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2283
(*retVal) = make_char2(tmp.x, tmp.y); 
# 2284
} 
#endif
# 2286 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2287
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2291
::exit(___);}
#if 0
# 2287
{ 
# 2288
int4 tmp; 
# 2289
__asm__ volatile("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2290
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2291
} 
#endif
# 2293 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2294
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2298
::exit(___);}
#if 0
# 2294
{ 
# 2295
uint4 tmp; 
# 2296
__asm__ volatile("tex.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2297
(*retVal) = ((unsigned char)(tmp.x)); 
# 2298
} 
#endif
# 2300 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2301
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2305
::exit(___);}
#if 0
# 2301
{ 
# 2302
uint4 tmp; 
# 2303
__asm__ volatile("tex.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2304
(*retVal) = make_uchar1(tmp.x); 
# 2305
} 
#endif
# 2307 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2308
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2312
::exit(___);}
#if 0
# 2308
{ 
# 2309
uint4 tmp; 
# 2310
__asm__ volatile("tex.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2311
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 2312
} 
#endif
# 2314 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2315
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2319
::exit(___);}
#if 0
# 2315
{ 
# 2316
uint4 tmp; 
# 2317
__asm__ volatile("tex.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2318
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2319
} 
#endif
# 2327 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2328
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2332
::exit(___);}
#if 0
# 2328
{ 
# 2329
int4 tmp; 
# 2330
__asm__ volatile("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2331
(*retVal) = ((short)(tmp.x)); 
# 2332
} 
#endif
# 2334 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2335
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2339
::exit(___);}
#if 0
# 2335
{ 
# 2336
int4 tmp; 
# 2337
__asm__ volatile("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2338
(*retVal) = make_short1(tmp.x); 
# 2339
} 
#endif
# 2341 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2342
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2346
::exit(___);}
#if 0
# 2342
{ 
# 2343
int4 tmp; 
# 2344
__asm__ volatile("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2345
(*retVal) = make_short2(tmp.x, tmp.y); 
# 2346
} 
#endif
# 2348 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2349
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2353
::exit(___);}
#if 0
# 2349
{ 
# 2350
int4 tmp; 
# 2351
__asm__ volatile("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2352
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2353
} 
#endif
# 2355 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2356
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2360
::exit(___);}
#if 0
# 2356
{ 
# 2357
uint4 tmp; 
# 2358
__asm__ volatile("tex.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2359
(*retVal) = ((unsigned short)(tmp.x)); 
# 2360
} 
#endif
# 2362 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2363
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2367
::exit(___);}
#if 0
# 2363
{ 
# 2364
uint4 tmp; 
# 2365
__asm__ volatile("tex.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2366
(*retVal) = make_ushort1(tmp.x); 
# 2367
} 
#endif
# 2369 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2370
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2374
::exit(___);}
#if 0
# 2370
{ 
# 2371
uint4 tmp; 
# 2372
__asm__ volatile("tex.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2373
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 2374
} 
#endif
# 2376 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2377
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2381
::exit(___);}
#if 0
# 2377
{ 
# 2378
uint4 tmp; 
# 2379
__asm__ volatile("tex.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2380
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2381
} 
#endif
# 2389 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2390
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2394
::exit(___);}
#if 0
# 2390
{ 
# 2391
int4 tmp; 
# 2392
__asm__ volatile("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2393
(*retVal) = ((int)(tmp.x)); 
# 2394
} 
#endif
# 2396 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2397
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2401
::exit(___);}
#if 0
# 2397
{ 
# 2398
int4 tmp; 
# 2399
__asm__ volatile("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2400
(*retVal) = make_int1(tmp.x); 
# 2401
} 
#endif
# 2403 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2404
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2408
::exit(___);}
#if 0
# 2404
{ 
# 2405
int4 tmp; 
# 2406
__asm__ volatile("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2407
(*retVal) = make_int2(tmp.x, tmp.y); 
# 2408
} 
#endif
# 2410 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2411
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2415
::exit(___);}
#if 0
# 2411
{ 
# 2412
int4 tmp; 
# 2413
__asm__ volatile("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2414
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2415
} 
#endif
# 2417 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2418
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2422
::exit(___);}
#if 0
# 2418
{ 
# 2419
uint4 tmp; 
# 2420
__asm__ volatile("tex.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2421
(*retVal) = ((unsigned)(tmp.x)); 
# 2422
} 
#endif
# 2424 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2425
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2429
::exit(___);}
#if 0
# 2425
{ 
# 2426
uint4 tmp; 
# 2427
__asm__ volatile("tex.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2428
(*retVal) = make_uint1(tmp.x); 
# 2429
} 
#endif
# 2431 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2432
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2436
::exit(___);}
#if 0
# 2432
{ 
# 2433
uint4 tmp; 
# 2434
__asm__ volatile("tex.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2435
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 2436
} 
#endif
# 2438 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2439
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2443
::exit(___);}
#if 0
# 2439
{ 
# 2440
uint4 tmp; 
# 2441
__asm__ volatile("tex.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2442
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2443
} 
#endif
# 2518 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2519
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2523
::exit(___);}
#if 0
# 2519
{ 
# 2520
float4 tmp; 
# 2521
__asm__ volatile("tex.acube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2522
(*retVal) = ((float)(tmp.x)); 
# 2523
} 
#endif
# 2525 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2526
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2530
::exit(___);}
#if 0
# 2526
{ 
# 2527
float4 tmp; 
# 2528
__asm__ volatile("tex.acube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2529
(*retVal) = make_float1(tmp.x); 
# 2530
} 
#endif
# 2532 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2533
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2537
::exit(___);}
#if 0
# 2533
{ 
# 2534
float4 tmp; 
# 2535
__asm__ volatile("tex.acube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2536
(*retVal) = make_float2(tmp.x, tmp.y); 
# 2537
} 
#endif
# 2539 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayered(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2540
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2544
::exit(___);}
#if 0
# 2540
{ 
# 2541
float4 tmp; 
# 2542
__asm__ volatile("tex.acube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z)); 
# 2543
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2544
} 
#endif
# 2552 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
template< class T> 
# 2553
__attribute((always_inline)) __attribute__((unused)) static inline T texCubemapLayered(cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 2554
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 2558
::exit(___);}
#if 0
# 2554
{ 
# 2555
T ret; 
# 2556
texCubemapLayered(&ret, texObject, x, y, z, layer); 
# 2557
return ret; 
# 2558
} 
#endif
# 2566 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(char *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 2567
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2582
::exit(___);}
#if 0
# 2567
{ 
# 2568
int4 tmp; 
# 2569
if (comp == 0) { 
# 2570
__asm__ volatile("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2571
} else { 
# 2572
if (comp == 1) { 
# 2573
__asm__ volatile("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2574
} else { 
# 2575
if (comp == 2) { 
# 2576
__asm__ volatile("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2577
} else { 
# 2578
if (comp == 3) { 
# 2579
__asm__ volatile("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2580
}  }  }  }  
# 2581
(*retVal) = ((char)(tmp.x)); 
# 2582
} 
#endif
# 2584 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(signed char *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 2585
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2600
::exit(___);}
#if 0
# 2585
{ 
# 2586
int4 tmp; 
# 2587
if (comp == 0) { 
# 2588
__asm__ volatile("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2589
} else { 
# 2590
if (comp == 1) { 
# 2591
__asm__ volatile("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2592
} else { 
# 2593
if (comp == 2) { 
# 2594
__asm__ volatile("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2595
} else { 
# 2596
if (comp == 3) { 
# 2597
__asm__ volatile("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2598
}  }  }  }  
# 2599
(*retVal) = ((signed char)(tmp.x)); 
# 2600
} 
#endif
# 2602 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(char1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 2603
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2618
::exit(___);}
#if 0
# 2603
{ 
# 2604
int4 tmp; 
# 2605
if (comp == 0) { 
# 2606
__asm__ volatile("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2607
} else { 
# 2608
if (comp == 1) { 
# 2609
__asm__ volatile("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2610
} else { 
# 2611
if (comp == 2) { 
# 2612
__asm__ volatile("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2613
} else { 
# 2614
if (comp == 3) { 
# 2615
__asm__ volatile("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2616
}  }  }  }  
# 2617
(*retVal) = make_char1(tmp.x); 
# 2618
} 
#endif
# 2620 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(char2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 2621
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2636
::exit(___);}
#if 0
# 2621
{ 
# 2622
int4 tmp; 
# 2623
if (comp == 0) { 
# 2624
__asm__ volatile("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2625
} else { 
# 2626
if (comp == 1) { 
# 2627
__asm__ volatile("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2628
} else { 
# 2629
if (comp == 2) { 
# 2630
__asm__ volatile("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2631
} else { 
# 2632
if (comp == 3) { 
# 2633
__asm__ volatile("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2634
}  }  }  }  
# 2635
(*retVal) = make_char2(tmp.x, tmp.y); 
# 2636
} 
#endif
# 2638 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(char4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 2639
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2654
::exit(___);}
#if 0
# 2639
{ 
# 2640
int4 tmp; 
# 2641
if (comp == 0) { 
# 2642
__asm__ volatile("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2643
} else { 
# 2644
if (comp == 1) { 
# 2645
__asm__ volatile("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2646
} else { 
# 2647
if (comp == 2) { 
# 2648
__asm__ volatile("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2649
} else { 
# 2650
if (comp == 3) { 
# 2651
__asm__ volatile("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2652
}  }  }  }  
# 2653
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2654
} 
#endif
# 2656 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 2657
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2672
::exit(___);}
#if 0
# 2657
{ 
# 2658
uint4 tmp; 
# 2659
if (comp == 0) { 
# 2660
__asm__ volatile("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2661
} else { 
# 2662
if (comp == 1) { 
# 2663
__asm__ volatile("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2664
} else { 
# 2665
if (comp == 2) { 
# 2666
__asm__ volatile("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2667
} else { 
# 2668
if (comp == 3) { 
# 2669
__asm__ volatile("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2670
}  }  }  }  
# 2671
(*retVal) = ((unsigned char)(tmp.x)); 
# 2672
} 
#endif
# 2674 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 2675
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2690
::exit(___);}
#if 0
# 2675
{ 
# 2676
uint4 tmp; 
# 2677
if (comp == 0) { 
# 2678
__asm__ volatile("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2679
} else { 
# 2680
if (comp == 1) { 
# 2681
__asm__ volatile("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2682
} else { 
# 2683
if (comp == 2) { 
# 2684
__asm__ volatile("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2685
} else { 
# 2686
if (comp == 3) { 
# 2687
__asm__ volatile("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2688
}  }  }  }  
# 2689
(*retVal) = make_uchar1(tmp.x); 
# 2690
} 
#endif
# 2692 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 2693
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2708
::exit(___);}
#if 0
# 2693
{ 
# 2694
uint4 tmp; 
# 2695
if (comp == 0) { 
# 2696
__asm__ volatile("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2697
} else { 
# 2698
if (comp == 1) { 
# 2699
__asm__ volatile("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2700
} else { 
# 2701
if (comp == 2) { 
# 2702
__asm__ volatile("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2703
} else { 
# 2704
if (comp == 3) { 
# 2705
__asm__ volatile("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2706
}  }  }  }  
# 2707
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 2708
} 
#endif
# 2710 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 2711
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2726
::exit(___);}
#if 0
# 2711
{ 
# 2712
uint4 tmp; 
# 2713
if (comp == 0) { 
# 2714
__asm__ volatile("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2715
} else { 
# 2716
if (comp == 1) { 
# 2717
__asm__ volatile("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2718
} else { 
# 2719
if (comp == 2) { 
# 2720
__asm__ volatile("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2721
} else { 
# 2722
if (comp == 3) { 
# 2723
__asm__ volatile("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2724
}  }  }  }  
# 2725
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2726
} 
#endif
# 2734 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(short *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 2735
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2750
::exit(___);}
#if 0
# 2735
{ 
# 2736
int4 tmp; 
# 2737
if (comp == 0) { 
# 2738
__asm__ volatile("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2739
} else { 
# 2740
if (comp == 1) { 
# 2741
__asm__ volatile("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2742
} else { 
# 2743
if (comp == 2) { 
# 2744
__asm__ volatile("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2745
} else { 
# 2746
if (comp == 3) { 
# 2747
__asm__ volatile("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2748
}  }  }  }  
# 2749
(*retVal) = ((short)(tmp.x)); 
# 2750
} 
#endif
# 2752 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(short1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 2753
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2768
::exit(___);}
#if 0
# 2753
{ 
# 2754
int4 tmp; 
# 2755
if (comp == 0) { 
# 2756
__asm__ volatile("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2757
} else { 
# 2758
if (comp == 1) { 
# 2759
__asm__ volatile("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2760
} else { 
# 2761
if (comp == 2) { 
# 2762
__asm__ volatile("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2763
} else { 
# 2764
if (comp == 3) { 
# 2765
__asm__ volatile("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2766
}  }  }  }  
# 2767
(*retVal) = make_short1(tmp.x); 
# 2768
} 
#endif
# 2770 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(short2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 2771
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2786
::exit(___);}
#if 0
# 2771
{ 
# 2772
int4 tmp; 
# 2773
if (comp == 0) { 
# 2774
__asm__ volatile("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2775
} else { 
# 2776
if (comp == 1) { 
# 2777
__asm__ volatile("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2778
} else { 
# 2779
if (comp == 2) { 
# 2780
__asm__ volatile("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2781
} else { 
# 2782
if (comp == 3) { 
# 2783
__asm__ volatile("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2784
}  }  }  }  
# 2785
(*retVal) = make_short2(tmp.x, tmp.y); 
# 2786
} 
#endif
# 2788 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(short4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 2789
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2804
::exit(___);}
#if 0
# 2789
{ 
# 2790
int4 tmp; 
# 2791
if (comp == 0) { 
# 2792
__asm__ volatile("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2793
} else { 
# 2794
if (comp == 1) { 
# 2795
__asm__ volatile("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2796
} else { 
# 2797
if (comp == 2) { 
# 2798
__asm__ volatile("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2799
} else { 
# 2800
if (comp == 3) { 
# 2801
__asm__ volatile("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2802
}  }  }  }  
# 2803
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2804
} 
#endif
# 2806 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 2807
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2822
::exit(___);}
#if 0
# 2807
{ 
# 2808
uint4 tmp; 
# 2809
if (comp == 0) { 
# 2810
__asm__ volatile("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2811
} else { 
# 2812
if (comp == 1) { 
# 2813
__asm__ volatile("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2814
} else { 
# 2815
if (comp == 2) { 
# 2816
__asm__ volatile("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2817
} else { 
# 2818
if (comp == 3) { 
# 2819
__asm__ volatile("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2820
}  }  }  }  
# 2821
(*retVal) = ((unsigned short)(tmp.x)); 
# 2822
} 
#endif
# 2824 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 2825
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2840
::exit(___);}
#if 0
# 2825
{ 
# 2826
uint4 tmp; 
# 2827
if (comp == 0) { 
# 2828
__asm__ volatile("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2829
} else { 
# 2830
if (comp == 1) { 
# 2831
__asm__ volatile("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2832
} else { 
# 2833
if (comp == 2) { 
# 2834
__asm__ volatile("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2835
} else { 
# 2836
if (comp == 3) { 
# 2837
__asm__ volatile("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2838
}  }  }  }  
# 2839
(*retVal) = make_ushort1(tmp.x); 
# 2840
} 
#endif
# 2842 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 2843
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2858
::exit(___);}
#if 0
# 2843
{ 
# 2844
uint4 tmp; 
# 2845
if (comp == 0) { 
# 2846
__asm__ volatile("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2847
} else { 
# 2848
if (comp == 1) { 
# 2849
__asm__ volatile("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2850
} else { 
# 2851
if (comp == 2) { 
# 2852
__asm__ volatile("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2853
} else { 
# 2854
if (comp == 3) { 
# 2855
__asm__ volatile("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2856
}  }  }  }  
# 2857
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 2858
} 
#endif
# 2860 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 2861
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2876
::exit(___);}
#if 0
# 2861
{ 
# 2862
uint4 tmp; 
# 2863
if (comp == 0) { 
# 2864
__asm__ volatile("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2865
} else { 
# 2866
if (comp == 1) { 
# 2867
__asm__ volatile("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2868
} else { 
# 2869
if (comp == 2) { 
# 2870
__asm__ volatile("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2871
} else { 
# 2872
if (comp == 3) { 
# 2873
__asm__ volatile("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2874
}  }  }  }  
# 2875
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2876
} 
#endif
# 2884 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(int *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 2885
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2900
::exit(___);}
#if 0
# 2885
{ 
# 2886
int4 tmp; 
# 2887
if (comp == 0) { 
# 2888
__asm__ volatile("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2889
} else { 
# 2890
if (comp == 1) { 
# 2891
__asm__ volatile("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2892
} else { 
# 2893
if (comp == 2) { 
# 2894
__asm__ volatile("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2895
} else { 
# 2896
if (comp == 3) { 
# 2897
__asm__ volatile("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2898
}  }  }  }  
# 2899
(*retVal) = ((int)(tmp.x)); 
# 2900
} 
#endif
# 2902 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(int1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 2903
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2918
::exit(___);}
#if 0
# 2903
{ 
# 2904
int4 tmp; 
# 2905
if (comp == 0) { 
# 2906
__asm__ volatile("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2907
} else { 
# 2908
if (comp == 1) { 
# 2909
__asm__ volatile("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2910
} else { 
# 2911
if (comp == 2) { 
# 2912
__asm__ volatile("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2913
} else { 
# 2914
if (comp == 3) { 
# 2915
__asm__ volatile("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2916
}  }  }  }  
# 2917
(*retVal) = make_int1(tmp.x); 
# 2918
} 
#endif
# 2920 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(int2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 2921
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2936
::exit(___);}
#if 0
# 2921
{ 
# 2922
int4 tmp; 
# 2923
if (comp == 0) { 
# 2924
__asm__ volatile("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2925
} else { 
# 2926
if (comp == 1) { 
# 2927
__asm__ volatile("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2928
} else { 
# 2929
if (comp == 2) { 
# 2930
__asm__ volatile("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2931
} else { 
# 2932
if (comp == 3) { 
# 2933
__asm__ volatile("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2934
}  }  }  }  
# 2935
(*retVal) = make_int2(tmp.x, tmp.y); 
# 2936
} 
#endif
# 2938 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(int4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 2939
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2954
::exit(___);}
#if 0
# 2939
{ 
# 2940
int4 tmp; 
# 2941
if (comp == 0) { 
# 2942
__asm__ volatile("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2943
} else { 
# 2944
if (comp == 1) { 
# 2945
__asm__ volatile("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2946
} else { 
# 2947
if (comp == 2) { 
# 2948
__asm__ volatile("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2949
} else { 
# 2950
if (comp == 3) { 
# 2951
__asm__ volatile("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2952
}  }  }  }  
# 2953
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2954
} 
#endif
# 2956 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 2957
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2972
::exit(___);}
#if 0
# 2957
{ 
# 2958
uint4 tmp; 
# 2959
if (comp == 0) { 
# 2960
__asm__ volatile("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2961
} else { 
# 2962
if (comp == 1) { 
# 2963
__asm__ volatile("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2964
} else { 
# 2965
if (comp == 2) { 
# 2966
__asm__ volatile("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2967
} else { 
# 2968
if (comp == 3) { 
# 2969
__asm__ volatile("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2970
}  }  }  }  
# 2971
(*retVal) = ((unsigned)(tmp.x)); 
# 2972
} 
#endif
# 2974 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 2975
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 2990
::exit(___);}
#if 0
# 2975
{ 
# 2976
uint4 tmp; 
# 2977
if (comp == 0) { 
# 2978
__asm__ volatile("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2979
} else { 
# 2980
if (comp == 1) { 
# 2981
__asm__ volatile("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2982
} else { 
# 2983
if (comp == 2) { 
# 2984
__asm__ volatile("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2985
} else { 
# 2986
if (comp == 3) { 
# 2987
__asm__ volatile("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2988
}  }  }  }  
# 2989
(*retVal) = make_uint1(tmp.x); 
# 2990
} 
#endif
# 2992 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 2993
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 3008
::exit(___);}
#if 0
# 2993
{ 
# 2994
uint4 tmp; 
# 2995
if (comp == 0) { 
# 2996
__asm__ volatile("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 2997
} else { 
# 2998
if (comp == 1) { 
# 2999
__asm__ volatile("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3000
} else { 
# 3001
if (comp == 2) { 
# 3002
__asm__ volatile("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3003
} else { 
# 3004
if (comp == 3) { 
# 3005
__asm__ volatile("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3006
}  }  }  }  
# 3007
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 3008
} 
#endif
# 3010 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 3011
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 3026
::exit(___);}
#if 0
# 3011
{ 
# 3012
uint4 tmp; 
# 3013
if (comp == 0) { 
# 3014
__asm__ volatile("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3015
} else { 
# 3016
if (comp == 1) { 
# 3017
__asm__ volatile("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3018
} else { 
# 3019
if (comp == 2) { 
# 3020
__asm__ volatile("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3021
} else { 
# 3022
if (comp == 3) { 
# 3023
__asm__ volatile("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3024
}  }  }  }  
# 3025
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3026
} 
#endif
# 3034 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(long *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 3035
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 3050
::exit(___);}
#if 0
# 3035
{ 
# 3036
int4 tmp; 
# 3037
if (comp == 0) { 
# 3038
__asm__ volatile("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3039
} else { 
# 3040
if (comp == 1) { 
# 3041
__asm__ volatile("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3042
} else { 
# 3043
if (comp == 2) { 
# 3044
__asm__ volatile("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3045
} else { 
# 3046
if (comp == 3) { 
# 3047
__asm__ volatile("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3048
}  }  }  }  
# 3049
(*retVal) = ((long)(tmp.x)); 
# 3050
} 
#endif
# 3052 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(long1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 3053
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 3068
::exit(___);}
#if 0
# 3053
{ 
# 3054
int4 tmp; 
# 3055
if (comp == 0) { 
# 3056
__asm__ volatile("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3057
} else { 
# 3058
if (comp == 1) { 
# 3059
__asm__ volatile("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3060
} else { 
# 3061
if (comp == 2) { 
# 3062
__asm__ volatile("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3063
} else { 
# 3064
if (comp == 3) { 
# 3065
__asm__ volatile("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3066
}  }  }  }  
# 3067
(*retVal) = make_long1(tmp.x); 
# 3068
} 
#endif
# 3070 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(long2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 3071
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 3086
::exit(___);}
#if 0
# 3071
{ 
# 3072
int4 tmp; 
# 3073
if (comp == 0) { 
# 3074
__asm__ volatile("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3075
} else { 
# 3076
if (comp == 1) { 
# 3077
__asm__ volatile("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3078
} else { 
# 3079
if (comp == 2) { 
# 3080
__asm__ volatile("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3081
} else { 
# 3082
if (comp == 3) { 
# 3083
__asm__ volatile("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3084
}  }  }  }  
# 3085
(*retVal) = make_long2(tmp.x, tmp.y); 
# 3086
} 
#endif
# 3088 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(long4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 3089
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 3104
::exit(___);}
#if 0
# 3089
{ 
# 3090
int4 tmp; 
# 3091
if (comp == 0) { 
# 3092
__asm__ volatile("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3093
} else { 
# 3094
if (comp == 1) { 
# 3095
__asm__ volatile("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3096
} else { 
# 3097
if (comp == 2) { 
# 3098
__asm__ volatile("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3099
} else { 
# 3100
if (comp == 3) { 
# 3101
__asm__ volatile("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3102
}  }  }  }  
# 3103
(*retVal) = make_long4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3104
} 
#endif
# 3106 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 3107
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 3122
::exit(___);}
#if 0
# 3107
{ 
# 3108
uint4 tmp; 
# 3109
if (comp == 0) { 
# 3110
__asm__ volatile("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3111
} else { 
# 3112
if (comp == 1) { 
# 3113
__asm__ volatile("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3114
} else { 
# 3115
if (comp == 2) { 
# 3116
__asm__ volatile("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3117
} else { 
# 3118
if (comp == 3) { 
# 3119
__asm__ volatile("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3120
}  }  }  }  
# 3121
(*retVal) = ((unsigned long)(tmp.x)); 
# 3122
} 
#endif
# 3124 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 3125
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 3140
::exit(___);}
#if 0
# 3125
{ 
# 3126
uint4 tmp; 
# 3127
if (comp == 0) { 
# 3128
__asm__ volatile("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3129
} else { 
# 3130
if (comp == 1) { 
# 3131
__asm__ volatile("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3132
} else { 
# 3133
if (comp == 2) { 
# 3134
__asm__ volatile("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3135
} else { 
# 3136
if (comp == 3) { 
# 3137
__asm__ volatile("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3138
}  }  }  }  
# 3139
(*retVal) = make_ulong1(tmp.x); 
# 3140
} 
#endif
# 3142 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 3143
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 3158
::exit(___);}
#if 0
# 3143
{ 
# 3144
uint4 tmp; 
# 3145
if (comp == 0) { 
# 3146
__asm__ volatile("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3147
} else { 
# 3148
if (comp == 1) { 
# 3149
__asm__ volatile("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3150
} else { 
# 3151
if (comp == 2) { 
# 3152
__asm__ volatile("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3153
} else { 
# 3154
if (comp == 3) { 
# 3155
__asm__ volatile("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3156
}  }  }  }  
# 3157
(*retVal) = make_ulong2(tmp.x, tmp.y); 
# 3158
} 
#endif
# 3160 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 3161
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 3176
::exit(___);}
#if 0
# 3161
{ 
# 3162
uint4 tmp; 
# 3163
if (comp == 0) { 
# 3164
__asm__ volatile("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3165
} else { 
# 3166
if (comp == 1) { 
# 3167
__asm__ volatile("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3168
} else { 
# 3169
if (comp == 2) { 
# 3170
__asm__ volatile("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3171
} else { 
# 3172
if (comp == 3) { 
# 3173
__asm__ volatile("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3174
}  }  }  }  
# 3175
(*retVal) = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3176
} 
#endif
# 3184 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(float *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 3185
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 3200
::exit(___);}
#if 0
# 3185
{ 
# 3186
float4 tmp; 
# 3187
if (comp == 0) { 
# 3188
__asm__ volatile("tld4.r.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3189
} else { 
# 3190
if (comp == 1) { 
# 3191
__asm__ volatile("tld4.g.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3192
} else { 
# 3193
if (comp == 2) { 
# 3194
__asm__ volatile("tld4.b.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3195
} else { 
# 3196
if (comp == 3) { 
# 3197
__asm__ volatile("tld4.a.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3198
}  }  }  }  
# 3199
(*retVal) = ((float)(tmp.x)); 
# 3200
} 
#endif
# 3202 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(float1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 3203
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 3218
::exit(___);}
#if 0
# 3203
{ 
# 3204
float4 tmp; 
# 3205
if (comp == 0) { 
# 3206
__asm__ volatile("tld4.r.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3207
} else { 
# 3208
if (comp == 1) { 
# 3209
__asm__ volatile("tld4.g.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3210
} else { 
# 3211
if (comp == 2) { 
# 3212
__asm__ volatile("tld4.b.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3213
} else { 
# 3214
if (comp == 3) { 
# 3215
__asm__ volatile("tld4.a.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3216
}  }  }  }  
# 3217
(*retVal) = make_float1(tmp.x); 
# 3218
} 
#endif
# 3220 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(float2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 3221
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 3236
::exit(___);}
#if 0
# 3221
{ 
# 3222
float4 tmp; 
# 3223
if (comp == 0) { 
# 3224
__asm__ volatile("tld4.r.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3225
} else { 
# 3226
if (comp == 1) { 
# 3227
__asm__ volatile("tld4.g.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3228
} else { 
# 3229
if (comp == 2) { 
# 3230
__asm__ volatile("tld4.b.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3231
} else { 
# 3232
if (comp == 3) { 
# 3233
__asm__ volatile("tld4.a.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3234
}  }  }  }  
# 3235
(*retVal) = make_float2(tmp.x, tmp.y); 
# 3236
} 
#endif
# 3238 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2Dgather(float4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = (0)) 
# 3239
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
# 3254
::exit(___);}
#if 0
# 3239
{ 
# 3240
float4 tmp; 
# 3241
if (comp == 0) { 
# 3242
__asm__ volatile("tld4.r.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3243
} else { 
# 3244
if (comp == 1) { 
# 3245
__asm__ volatile("tld4.g.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3246
} else { 
# 3247
if (comp == 2) { 
# 3248
__asm__ volatile("tld4.b.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3249
} else { 
# 3250
if (comp == 3) { 
# 3251
__asm__ volatile("tld4.a.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y)); 
# 3252
}  }  }  }  
# 3253
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3254
} 
#endif
# 3262 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
template< class T> 
# 3263
__attribute((always_inline)) __attribute__((unused)) static inline T tex2Dgather(cudaTextureObject_t to, float x, float y, int comp = (0)) 
# 3264
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)comp;
# 3268
::exit(___);}
#if 0
# 3264
{ 
# 3265
T ret; 
# 3266
tex2Dgather(&ret, to, x, y, comp); 
# 3267
return ret; 
# 3268
} 
#endif
# 3276 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(char *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3277
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3286
::exit(___);}
#if 0
# 3277
{ 
# 3282
int4 tmp; 
# 3283
__asm__ volatile("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3285
(*retVal) = ((char)(tmp.x)); 
# 3286
} 
#endif
# 3287 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(signed char *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3288
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3292
::exit(___);}
#if 0
# 3288
{ 
# 3289
int4 tmp; 
# 3290
__asm__ volatile("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3291
(*retVal) = ((signed char)(tmp.x)); 
# 3292
} 
#endif
# 3294 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(char1 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3295
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3299
::exit(___);}
#if 0
# 3295
{ 
# 3296
int4 tmp; 
# 3297
__asm__ volatile("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3298
(*retVal) = make_char1(tmp.x); 
# 3299
} 
#endif
# 3301 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(char2 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3302
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3306
::exit(___);}
#if 0
# 3302
{ 
# 3303
int4 tmp; 
# 3304
__asm__ volatile("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3305
(*retVal) = make_char2(tmp.x, tmp.y); 
# 3306
} 
#endif
# 3308 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(char4 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3309
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3313
::exit(___);}
#if 0
# 3309
{ 
# 3310
int4 tmp; 
# 3311
__asm__ volatile("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3312
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3313
} 
#endif
# 3315 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3316
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3320
::exit(___);}
#if 0
# 3316
{ 
# 3317
uint4 tmp; 
# 3318
__asm__ volatile("tex.level.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3319
(*retVal) = ((unsigned char)(tmp.x)); 
# 3320
} 
#endif
# 3322 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3323
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3327
::exit(___);}
#if 0
# 3323
{ 
# 3324
uint4 tmp; 
# 3325
__asm__ volatile("tex.level.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3326
(*retVal) = make_uchar1(tmp.x); 
# 3327
} 
#endif
# 3329 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3330
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3334
::exit(___);}
#if 0
# 3330
{ 
# 3331
uint4 tmp; 
# 3332
__asm__ volatile("tex.level.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3333
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 3334
} 
#endif
# 3336 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3337
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3341
::exit(___);}
#if 0
# 3337
{ 
# 3338
uint4 tmp; 
# 3339
__asm__ volatile("tex.level.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3340
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3341
} 
#endif
# 3349 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(short *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3350
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3354
::exit(___);}
#if 0
# 3350
{ 
# 3351
int4 tmp; 
# 3352
__asm__ volatile("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3353
(*retVal) = ((short)(tmp.x)); 
# 3354
} 
#endif
# 3356 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(short1 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3357
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3361
::exit(___);}
#if 0
# 3357
{ 
# 3358
int4 tmp; 
# 3359
__asm__ volatile("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3360
(*retVal) = make_short1(tmp.x); 
# 3361
} 
#endif
# 3363 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(short2 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3364
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3368
::exit(___);}
#if 0
# 3364
{ 
# 3365
int4 tmp; 
# 3366
__asm__ volatile("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3367
(*retVal) = make_short2(tmp.x, tmp.y); 
# 3368
} 
#endif
# 3370 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(short4 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3371
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3375
::exit(___);}
#if 0
# 3371
{ 
# 3372
int4 tmp; 
# 3373
__asm__ volatile("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3374
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3375
} 
#endif
# 3377 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3378
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3382
::exit(___);}
#if 0
# 3378
{ 
# 3379
uint4 tmp; 
# 3380
__asm__ volatile("tex.level.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3381
(*retVal) = ((unsigned short)(tmp.x)); 
# 3382
} 
#endif
# 3384 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3385
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3389
::exit(___);}
#if 0
# 3385
{ 
# 3386
uint4 tmp; 
# 3387
__asm__ volatile("tex.level.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3388
(*retVal) = make_ushort1(tmp.x); 
# 3389
} 
#endif
# 3391 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3392
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3396
::exit(___);}
#if 0
# 3392
{ 
# 3393
uint4 tmp; 
# 3394
__asm__ volatile("tex.level.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3395
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 3396
} 
#endif
# 3398 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3399
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3403
::exit(___);}
#if 0
# 3399
{ 
# 3400
uint4 tmp; 
# 3401
__asm__ volatile("tex.level.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3402
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3403
} 
#endif
# 3411 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(int *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3412
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3416
::exit(___);}
#if 0
# 3412
{ 
# 3413
int4 tmp; 
# 3414
__asm__ volatile("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3415
(*retVal) = ((int)(tmp.x)); 
# 3416
} 
#endif
# 3418 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(int1 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3419
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3423
::exit(___);}
#if 0
# 3419
{ 
# 3420
int4 tmp; 
# 3421
__asm__ volatile("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3422
(*retVal) = make_int1(tmp.x); 
# 3423
} 
#endif
# 3425 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(int2 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3426
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3430
::exit(___);}
#if 0
# 3426
{ 
# 3427
int4 tmp; 
# 3428
__asm__ volatile("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3429
(*retVal) = make_int2(tmp.x, tmp.y); 
# 3430
} 
#endif
# 3432 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(int4 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3433
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3437
::exit(___);}
#if 0
# 3433
{ 
# 3434
int4 tmp; 
# 3435
__asm__ volatile("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3436
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3437
} 
#endif
# 3439 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(unsigned *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3440
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3444
::exit(___);}
#if 0
# 3440
{ 
# 3441
uint4 tmp; 
# 3442
__asm__ volatile("tex.level.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3443
(*retVal) = ((unsigned)(tmp.x)); 
# 3444
} 
#endif
# 3446 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3447
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3451
::exit(___);}
#if 0
# 3447
{ 
# 3448
uint4 tmp; 
# 3449
__asm__ volatile("tex.level.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3450
(*retVal) = make_uint1(tmp.x); 
# 3451
} 
#endif
# 3453 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3454
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3458
::exit(___);}
#if 0
# 3454
{ 
# 3455
uint4 tmp; 
# 3456
__asm__ volatile("tex.level.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3457
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 3458
} 
#endif
# 3460 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3461
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3465
::exit(___);}
#if 0
# 3461
{ 
# 3462
uint4 tmp; 
# 3463
__asm__ volatile("tex.level.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3464
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3465
} 
#endif
# 3540 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(float *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3541
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3545
::exit(___);}
#if 0
# 3541
{ 
# 3542
float4 tmp; 
# 3543
__asm__ volatile("tex.level.1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3544
(*retVal) = ((float)(tmp.x)); 
# 3545
} 
#endif
# 3547 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(float1 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3548
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3552
::exit(___);}
#if 0
# 3548
{ 
# 3549
float4 tmp; 
# 3550
__asm__ volatile("tex.level.1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3551
(*retVal) = make_float1(tmp.x); 
# 3552
} 
#endif
# 3554 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(float2 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3555
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3559
::exit(___);}
#if 0
# 3555
{ 
# 3556
float4 tmp; 
# 3557
__asm__ volatile("tex.level.1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3558
(*retVal) = make_float2(tmp.x, tmp.y); 
# 3559
} 
#endif
# 3561 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLod(float4 *retVal, cudaTextureObject_t texObject, float x, float level) 
# 3562
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
# 3566
::exit(___);}
#if 0
# 3562
{ 
# 3563
float4 tmp; 
# 3564
__asm__ volatile("tex.level.1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (level)); 
# 3565
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3566
} 
#endif
# 3574 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
template< class T> 
# 3575
__attribute((always_inline)) __attribute__((unused)) static inline T tex1DLod(cudaTextureObject_t texObject, float x, float level) 
# 3576
{int volatile ___ = 1;(void)texObject;(void)x;(void)level;
# 3580
::exit(___);}
#if 0
# 3576
{ 
# 3577
T ret; 
# 3578
tex1DLod(&ret, texObject, x, level); 
# 3579
return ret; 
# 3580
} 
#endif
# 3588 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(char *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3589
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3598
::exit(___);}
#if 0
# 3589
{ 
# 3594
int4 tmp; 
# 3595
__asm__ volatile("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3597
(*retVal) = ((char)(tmp.x)); 
# 3598
} 
#endif
# 3599 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3600
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3604
::exit(___);}
#if 0
# 3600
{ 
# 3601
int4 tmp; 
# 3602
__asm__ volatile("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3603
(*retVal) = ((signed char)(tmp.x)); 
# 3604
} 
#endif
# 3606 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3607
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3611
::exit(___);}
#if 0
# 3607
{ 
# 3608
int4 tmp; 
# 3609
__asm__ volatile("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3610
(*retVal) = make_char1(tmp.x); 
# 3611
} 
#endif
# 3613 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3614
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3618
::exit(___);}
#if 0
# 3614
{ 
# 3615
int4 tmp; 
# 3616
__asm__ volatile("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3617
(*retVal) = make_char2(tmp.x, tmp.y); 
# 3618
} 
#endif
# 3620 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3621
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3625
::exit(___);}
#if 0
# 3621
{ 
# 3622
int4 tmp; 
# 3623
__asm__ volatile("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3624
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3625
} 
#endif
# 3627 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3628
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3632
::exit(___);}
#if 0
# 3628
{ 
# 3629
uint4 tmp; 
# 3630
__asm__ volatile("tex.level.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3631
(*retVal) = ((unsigned char)(tmp.x)); 
# 3632
} 
#endif
# 3634 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3635
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3639
::exit(___);}
#if 0
# 3635
{ 
# 3636
uint4 tmp; 
# 3637
__asm__ volatile("tex.level.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3638
(*retVal) = make_uchar1(tmp.x); 
# 3639
} 
#endif
# 3641 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3642
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3646
::exit(___);}
#if 0
# 3642
{ 
# 3643
uint4 tmp; 
# 3644
__asm__ volatile("tex.level.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3645
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 3646
} 
#endif
# 3648 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3649
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3653
::exit(___);}
#if 0
# 3649
{ 
# 3650
uint4 tmp; 
# 3651
__asm__ volatile("tex.level.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3652
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3653
} 
#endif
# 3661 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(short *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3662
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3666
::exit(___);}
#if 0
# 3662
{ 
# 3663
int4 tmp; 
# 3664
__asm__ volatile("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3665
(*retVal) = ((short)(tmp.x)); 
# 3666
} 
#endif
# 3668 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3669
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3673
::exit(___);}
#if 0
# 3669
{ 
# 3670
int4 tmp; 
# 3671
__asm__ volatile("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3672
(*retVal) = make_short1(tmp.x); 
# 3673
} 
#endif
# 3675 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3676
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3680
::exit(___);}
#if 0
# 3676
{ 
# 3677
int4 tmp; 
# 3678
__asm__ volatile("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3679
(*retVal) = make_short2(tmp.x, tmp.y); 
# 3680
} 
#endif
# 3682 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3683
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3687
::exit(___);}
#if 0
# 3683
{ 
# 3684
int4 tmp; 
# 3685
__asm__ volatile("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3686
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3687
} 
#endif
# 3689 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3690
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3694
::exit(___);}
#if 0
# 3690
{ 
# 3691
uint4 tmp; 
# 3692
__asm__ volatile("tex.level.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3693
(*retVal) = ((unsigned short)(tmp.x)); 
# 3694
} 
#endif
# 3696 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3697
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3701
::exit(___);}
#if 0
# 3697
{ 
# 3698
uint4 tmp; 
# 3699
__asm__ volatile("tex.level.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3700
(*retVal) = make_ushort1(tmp.x); 
# 3701
} 
#endif
# 3703 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3704
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3708
::exit(___);}
#if 0
# 3704
{ 
# 3705
uint4 tmp; 
# 3706
__asm__ volatile("tex.level.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3707
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 3708
} 
#endif
# 3710 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3711
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3715
::exit(___);}
#if 0
# 3711
{ 
# 3712
uint4 tmp; 
# 3713
__asm__ volatile("tex.level.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3714
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3715
} 
#endif
# 3723 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(int *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3724
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3728
::exit(___);}
#if 0
# 3724
{ 
# 3725
int4 tmp; 
# 3726
__asm__ volatile("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3727
(*retVal) = ((int)(tmp.x)); 
# 3728
} 
#endif
# 3730 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3731
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3735
::exit(___);}
#if 0
# 3731
{ 
# 3732
int4 tmp; 
# 3733
__asm__ volatile("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3734
(*retVal) = make_int1(tmp.x); 
# 3735
} 
#endif
# 3737 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3738
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3742
::exit(___);}
#if 0
# 3738
{ 
# 3739
int4 tmp; 
# 3740
__asm__ volatile("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3741
(*retVal) = make_int2(tmp.x, tmp.y); 
# 3742
} 
#endif
# 3744 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3745
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3749
::exit(___);}
#if 0
# 3745
{ 
# 3746
int4 tmp; 
# 3747
__asm__ volatile("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3748
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3749
} 
#endif
# 3751 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3752
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3756
::exit(___);}
#if 0
# 3752
{ 
# 3753
uint4 tmp; 
# 3754
__asm__ volatile("tex.level.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3755
(*retVal) = ((unsigned)(tmp.x)); 
# 3756
} 
#endif
# 3758 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3759
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3763
::exit(___);}
#if 0
# 3759
{ 
# 3760
uint4 tmp; 
# 3761
__asm__ volatile("tex.level.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3762
(*retVal) = make_uint1(tmp.x); 
# 3763
} 
#endif
# 3765 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3766
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3770
::exit(___);}
#if 0
# 3766
{ 
# 3767
uint4 tmp; 
# 3768
__asm__ volatile("tex.level.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3769
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 3770
} 
#endif
# 3772 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3773
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3777
::exit(___);}
#if 0
# 3773
{ 
# 3774
uint4 tmp; 
# 3775
__asm__ volatile("tex.level.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3776
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3777
} 
#endif
# 3852 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(float *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3853
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3857
::exit(___);}
#if 0
# 3853
{ 
# 3854
float4 tmp; 
# 3855
__asm__ volatile("tex.level.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3856
(*retVal) = ((float)(tmp.x)); 
# 3857
} 
#endif
# 3859 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3860
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3864
::exit(___);}
#if 0
# 3860
{ 
# 3861
float4 tmp; 
# 3862
__asm__ volatile("tex.level.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3863
(*retVal) = make_float1(tmp.x); 
# 3864
} 
#endif
# 3866 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3867
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3871
::exit(___);}
#if 0
# 3867
{ 
# 3868
float4 tmp; 
# 3869
__asm__ volatile("tex.level.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3870
(*retVal) = make_float2(tmp.x, tmp.y); 
# 3871
} 
#endif
# 3873 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
# 3874
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
# 3878
::exit(___);}
#if 0
# 3874
{ 
# 3875
float4 tmp; 
# 3876
__asm__ volatile("tex.level.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (level)); 
# 3877
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3878
} 
#endif
# 3886 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
template< class T> 
# 3887
__attribute((always_inline)) __attribute__((unused)) static inline T tex2DLod(cudaTextureObject_t texObject, float x, float y, float level) 
# 3888
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;
# 3892
::exit(___);}
#if 0
# 3888
{ 
# 3889
T ret; 
# 3890
tex2DLod(&ret, texObject, x, y, level); 
# 3891
return ret; 
# 3892
} 
#endif
# 3900 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3901
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3910
::exit(___);}
#if 0
# 3901
{ 
# 3906
int4 tmp; 
# 3907
__asm__ volatile("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 3909
(*retVal) = ((char)(tmp.x)); 
# 3910
} 
#endif
# 3911 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3912
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3916
::exit(___);}
#if 0
# 3912
{ 
# 3913
int4 tmp; 
# 3914
__asm__ volatile("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 3915
(*retVal) = ((signed char)(tmp.x)); 
# 3916
} 
#endif
# 3918 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3919
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3923
::exit(___);}
#if 0
# 3919
{ 
# 3920
int4 tmp; 
# 3921
__asm__ volatile("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 3922
(*retVal) = make_char1(tmp.x); 
# 3923
} 
#endif
# 3925 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3926
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3930
::exit(___);}
#if 0
# 3926
{ 
# 3927
int4 tmp; 
# 3928
__asm__ volatile("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 3929
(*retVal) = make_char2(tmp.x, tmp.y); 
# 3930
} 
#endif
# 3932 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3933
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3937
::exit(___);}
#if 0
# 3933
{ 
# 3934
int4 tmp; 
# 3935
__asm__ volatile("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 3936
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3937
} 
#endif
# 3939 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3940
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3944
::exit(___);}
#if 0
# 3940
{ 
# 3941
uint4 tmp; 
# 3942
__asm__ volatile("tex.level.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 3943
(*retVal) = ((unsigned char)(tmp.x)); 
# 3944
} 
#endif
# 3946 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3947
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3951
::exit(___);}
#if 0
# 3947
{ 
# 3948
uint4 tmp; 
# 3949
__asm__ volatile("tex.level.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 3950
(*retVal) = make_uchar1(tmp.x); 
# 3951
} 
#endif
# 3953 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3954
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3958
::exit(___);}
#if 0
# 3954
{ 
# 3955
uint4 tmp; 
# 3956
__asm__ volatile("tex.level.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 3957
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 3958
} 
#endif
# 3960 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3961
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3965
::exit(___);}
#if 0
# 3961
{ 
# 3962
uint4 tmp; 
# 3963
__asm__ volatile("tex.level.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 3964
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3965
} 
#endif
# 3973 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3974
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3978
::exit(___);}
#if 0
# 3974
{ 
# 3975
int4 tmp; 
# 3976
__asm__ volatile("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 3977
(*retVal) = ((short)(tmp.x)); 
# 3978
} 
#endif
# 3980 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3981
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3985
::exit(___);}
#if 0
# 3981
{ 
# 3982
int4 tmp; 
# 3983
__asm__ volatile("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 3984
(*retVal) = make_short1(tmp.x); 
# 3985
} 
#endif
# 3987 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3988
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3992
::exit(___);}
#if 0
# 3988
{ 
# 3989
int4 tmp; 
# 3990
__asm__ volatile("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 3991
(*retVal) = make_short2(tmp.x, tmp.y); 
# 3992
} 
#endif
# 3994 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 3995
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 3999
::exit(___);}
#if 0
# 3995
{ 
# 3996
int4 tmp; 
# 3997
__asm__ volatile("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 3998
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3999
} 
#endif
# 4001 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4002
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4006
::exit(___);}
#if 0
# 4002
{ 
# 4003
uint4 tmp; 
# 4004
__asm__ volatile("tex.level.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4005
(*retVal) = ((unsigned short)(tmp.x)); 
# 4006
} 
#endif
# 4008 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4009
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4013
::exit(___);}
#if 0
# 4009
{ 
# 4010
uint4 tmp; 
# 4011
__asm__ volatile("tex.level.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4012
(*retVal) = make_ushort1(tmp.x); 
# 4013
} 
#endif
# 4015 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4016
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4020
::exit(___);}
#if 0
# 4016
{ 
# 4017
uint4 tmp; 
# 4018
__asm__ volatile("tex.level.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4019
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 4020
} 
#endif
# 4022 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4023
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4027
::exit(___);}
#if 0
# 4023
{ 
# 4024
uint4 tmp; 
# 4025
__asm__ volatile("tex.level.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4026
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4027
} 
#endif
# 4035 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4036
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4040
::exit(___);}
#if 0
# 4036
{ 
# 4037
int4 tmp; 
# 4038
__asm__ volatile("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4039
(*retVal) = ((int)(tmp.x)); 
# 4040
} 
#endif
# 4042 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4043
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4047
::exit(___);}
#if 0
# 4043
{ 
# 4044
int4 tmp; 
# 4045
__asm__ volatile("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4046
(*retVal) = make_int1(tmp.x); 
# 4047
} 
#endif
# 4049 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4050
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4054
::exit(___);}
#if 0
# 4050
{ 
# 4051
int4 tmp; 
# 4052
__asm__ volatile("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4053
(*retVal) = make_int2(tmp.x, tmp.y); 
# 4054
} 
#endif
# 4056 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4057
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4061
::exit(___);}
#if 0
# 4057
{ 
# 4058
int4 tmp; 
# 4059
__asm__ volatile("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4060
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4061
} 
#endif
# 4063 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4064
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4068
::exit(___);}
#if 0
# 4064
{ 
# 4065
uint4 tmp; 
# 4066
__asm__ volatile("tex.level.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4067
(*retVal) = ((unsigned)(tmp.x)); 
# 4068
} 
#endif
# 4070 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4071
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4075
::exit(___);}
#if 0
# 4071
{ 
# 4072
uint4 tmp; 
# 4073
__asm__ volatile("tex.level.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4074
(*retVal) = make_uint1(tmp.x); 
# 4075
} 
#endif
# 4077 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4078
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4082
::exit(___);}
#if 0
# 4078
{ 
# 4079
uint4 tmp; 
# 4080
__asm__ volatile("tex.level.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4081
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 4082
} 
#endif
# 4084 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4085
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4089
::exit(___);}
#if 0
# 4085
{ 
# 4086
uint4 tmp; 
# 4087
__asm__ volatile("tex.level.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4088
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4089
} 
#endif
# 4164 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4165
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4169
::exit(___);}
#if 0
# 4165
{ 
# 4166
float4 tmp; 
# 4167
__asm__ volatile("tex.level.3d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4168
(*retVal) = ((float)(tmp.x)); 
# 4169
} 
#endif
# 4171 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4172
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4176
::exit(___);}
#if 0
# 4172
{ 
# 4173
float4 tmp; 
# 4174
__asm__ volatile("tex.level.3d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4175
(*retVal) = make_float1(tmp.x); 
# 4176
} 
#endif
# 4178 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4179
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4183
::exit(___);}
#if 0
# 4179
{ 
# 4180
float4 tmp; 
# 4181
__asm__ volatile("tex.level.3d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4182
(*retVal) = make_float2(tmp.x, tmp.y); 
# 4183
} 
#endif
# 4185 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4186
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4190
::exit(___);}
#if 0
# 4186
{ 
# 4187
float4 tmp; 
# 4188
__asm__ volatile("tex.level.3d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4189
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4190
} 
#endif
# 4198 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
template< class T> 
# 4199
__attribute((always_inline)) __attribute__((unused)) static inline T tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4200
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4204
::exit(___);}
#if 0
# 4200
{ 
# 4201
T ret; 
# 4202
tex3DLod(&ret, texObject, x, y, z, level); 
# 4203
return ret; 
# 4204
} 
#endif
# 4212 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(char *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4213
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4222
::exit(___);}
#if 0
# 4213
{ 
# 4218
int4 tmp; 
# 4219
__asm__ volatile("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4221
(*retVal) = ((char)(tmp.x)); 
# 4222
} 
#endif
# 4223 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(signed char *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4224
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4228
::exit(___);}
#if 0
# 4224
{ 
# 4225
int4 tmp; 
# 4226
__asm__ volatile("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4227
(*retVal) = ((signed char)(tmp.x)); 
# 4228
} 
#endif
# 4230 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(char1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4231
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4235
::exit(___);}
#if 0
# 4231
{ 
# 4232
int4 tmp; 
# 4233
__asm__ volatile("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4234
(*retVal) = make_char1(tmp.x); 
# 4235
} 
#endif
# 4237 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(char2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4238
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4242
::exit(___);}
#if 0
# 4238
{ 
# 4239
int4 tmp; 
# 4240
__asm__ volatile("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4241
(*retVal) = make_char2(tmp.x, tmp.y); 
# 4242
} 
#endif
# 4244 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(char4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4245
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4249
::exit(___);}
#if 0
# 4245
{ 
# 4246
int4 tmp; 
# 4247
__asm__ volatile("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4248
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4249
} 
#endif
# 4251 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4252
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4256
::exit(___);}
#if 0
# 4252
{ 
# 4253
uint4 tmp; 
# 4254
__asm__ volatile("tex.level.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4255
(*retVal) = ((unsigned char)(tmp.x)); 
# 4256
} 
#endif
# 4258 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4259
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4263
::exit(___);}
#if 0
# 4259
{ 
# 4260
uint4 tmp; 
# 4261
__asm__ volatile("tex.level.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4262
(*retVal) = make_uchar1(tmp.x); 
# 4263
} 
#endif
# 4265 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4266
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4270
::exit(___);}
#if 0
# 4266
{ 
# 4267
uint4 tmp; 
# 4268
__asm__ volatile("tex.level.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4269
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 4270
} 
#endif
# 4272 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4273
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4277
::exit(___);}
#if 0
# 4273
{ 
# 4274
uint4 tmp; 
# 4275
__asm__ volatile("tex.level.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4276
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4277
} 
#endif
# 4285 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(short *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4286
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4290
::exit(___);}
#if 0
# 4286
{ 
# 4287
int4 tmp; 
# 4288
__asm__ volatile("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4289
(*retVal) = ((short)(tmp.x)); 
# 4290
} 
#endif
# 4292 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(short1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4293
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4297
::exit(___);}
#if 0
# 4293
{ 
# 4294
int4 tmp; 
# 4295
__asm__ volatile("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4296
(*retVal) = make_short1(tmp.x); 
# 4297
} 
#endif
# 4299 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(short2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4300
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4304
::exit(___);}
#if 0
# 4300
{ 
# 4301
int4 tmp; 
# 4302
__asm__ volatile("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4303
(*retVal) = make_short2(tmp.x, tmp.y); 
# 4304
} 
#endif
# 4306 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(short4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4307
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4311
::exit(___);}
#if 0
# 4307
{ 
# 4308
int4 tmp; 
# 4309
__asm__ volatile("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4310
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4311
} 
#endif
# 4313 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4314
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4318
::exit(___);}
#if 0
# 4314
{ 
# 4315
uint4 tmp; 
# 4316
__asm__ volatile("tex.level.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4317
(*retVal) = ((unsigned short)(tmp.x)); 
# 4318
} 
#endif
# 4320 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4321
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4325
::exit(___);}
#if 0
# 4321
{ 
# 4322
uint4 tmp; 
# 4323
__asm__ volatile("tex.level.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4324
(*retVal) = make_ushort1(tmp.x); 
# 4325
} 
#endif
# 4327 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4328
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4332
::exit(___);}
#if 0
# 4328
{ 
# 4329
uint4 tmp; 
# 4330
__asm__ volatile("tex.level.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4331
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 4332
} 
#endif
# 4334 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4335
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4339
::exit(___);}
#if 0
# 4335
{ 
# 4336
uint4 tmp; 
# 4337
__asm__ volatile("tex.level.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4338
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4339
} 
#endif
# 4347 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(int *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4348
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4352
::exit(___);}
#if 0
# 4348
{ 
# 4349
int4 tmp; 
# 4350
__asm__ volatile("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4351
(*retVal) = ((int)(tmp.x)); 
# 4352
} 
#endif
# 4354 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(int1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4355
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4359
::exit(___);}
#if 0
# 4355
{ 
# 4356
int4 tmp; 
# 4357
__asm__ volatile("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4358
(*retVal) = make_int1(tmp.x); 
# 4359
} 
#endif
# 4361 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(int2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4362
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4366
::exit(___);}
#if 0
# 4362
{ 
# 4363
int4 tmp; 
# 4364
__asm__ volatile("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4365
(*retVal) = make_int2(tmp.x, tmp.y); 
# 4366
} 
#endif
# 4368 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(int4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4369
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4373
::exit(___);}
#if 0
# 4369
{ 
# 4370
int4 tmp; 
# 4371
__asm__ volatile("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4372
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4373
} 
#endif
# 4375 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(unsigned *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4376
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4380
::exit(___);}
#if 0
# 4376
{ 
# 4377
uint4 tmp; 
# 4378
__asm__ volatile("tex.level.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4379
(*retVal) = ((unsigned)(tmp.x)); 
# 4380
} 
#endif
# 4382 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(uint1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4383
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4387
::exit(___);}
#if 0
# 4383
{ 
# 4384
uint4 tmp; 
# 4385
__asm__ volatile("tex.level.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4386
(*retVal) = make_uint1(tmp.x); 
# 4387
} 
#endif
# 4389 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(uint2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4390
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4394
::exit(___);}
#if 0
# 4390
{ 
# 4391
uint4 tmp; 
# 4392
__asm__ volatile("tex.level.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4393
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 4394
} 
#endif
# 4396 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(uint4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4397
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4401
::exit(___);}
#if 0
# 4397
{ 
# 4398
uint4 tmp; 
# 4399
__asm__ volatile("tex.level.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4400
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4401
} 
#endif
# 4476 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(float *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4477
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4481
::exit(___);}
#if 0
# 4477
{ 
# 4478
float4 tmp; 
# 4479
__asm__ volatile("tex.level.a1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4480
(*retVal) = ((float)(tmp.x)); 
# 4481
} 
#endif
# 4483 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(float1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4484
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4488
::exit(___);}
#if 0
# 4484
{ 
# 4485
float4 tmp; 
# 4486
__asm__ volatile("tex.level.a1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4487
(*retVal) = make_float1(tmp.x); 
# 4488
} 
#endif
# 4490 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(float2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4491
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4495
::exit(___);}
#if 0
# 4491
{ 
# 4492
float4 tmp; 
# 4493
__asm__ volatile("tex.level.a1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4494
(*retVal) = make_float2(tmp.x, tmp.y); 
# 4495
} 
#endif
# 4497 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredLod(float4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
# 4498
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
# 4502
::exit(___);}
#if 0
# 4498
{ 
# 4499
float4 tmp; 
# 4500
__asm__ volatile("tex.level.a1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (level)); 
# 4501
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4502
} 
#endif
# 4510 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
template< class T> 
# 4511
__attribute((always_inline)) __attribute__((unused)) static inline T tex1DLayeredLod(cudaTextureObject_t texObject, float x, int layer, float level) 
# 4512
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)level;
# 4516
::exit(___);}
#if 0
# 4512
{ 
# 4513
T ret; 
# 4514
tex1DLayeredLod(&ret, texObject, x, layer, level); 
# 4515
return ret; 
# 4516
} 
#endif
# 4524 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4525
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4534
::exit(___);}
#if 0
# 4525
{ 
# 4530
int4 tmp; 
# 4531
__asm__ volatile("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4533
(*retVal) = ((char)(tmp.x)); 
# 4534
} 
#endif
# 4535 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4536
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4540
::exit(___);}
#if 0
# 4536
{ 
# 4537
int4 tmp; 
# 4538
__asm__ volatile("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4539
(*retVal) = ((signed char)(tmp.x)); 
# 4540
} 
#endif
# 4542 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4543
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4547
::exit(___);}
#if 0
# 4543
{ 
# 4544
int4 tmp; 
# 4545
__asm__ volatile("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4546
(*retVal) = make_char1(tmp.x); 
# 4547
} 
#endif
# 4549 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4550
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4554
::exit(___);}
#if 0
# 4550
{ 
# 4551
int4 tmp; 
# 4552
__asm__ volatile("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4553
(*retVal) = make_char2(tmp.x, tmp.y); 
# 4554
} 
#endif
# 4556 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4557
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4561
::exit(___);}
#if 0
# 4557
{ 
# 4558
int4 tmp; 
# 4559
__asm__ volatile("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4560
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4561
} 
#endif
# 4563 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4564
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4568
::exit(___);}
#if 0
# 4564
{ 
# 4565
uint4 tmp; 
# 4566
__asm__ volatile("tex.level.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4567
(*retVal) = ((unsigned char)(tmp.x)); 
# 4568
} 
#endif
# 4570 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4571
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4575
::exit(___);}
#if 0
# 4571
{ 
# 4572
uint4 tmp; 
# 4573
__asm__ volatile("tex.level.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4574
(*retVal) = make_uchar1(tmp.x); 
# 4575
} 
#endif
# 4577 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4578
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4582
::exit(___);}
#if 0
# 4578
{ 
# 4579
uint4 tmp; 
# 4580
__asm__ volatile("tex.level.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4581
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 4582
} 
#endif
# 4584 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4585
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4589
::exit(___);}
#if 0
# 4585
{ 
# 4586
uint4 tmp; 
# 4587
__asm__ volatile("tex.level.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4588
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4589
} 
#endif
# 4597 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(short *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4598
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4602
::exit(___);}
#if 0
# 4598
{ 
# 4599
int4 tmp; 
# 4600
__asm__ volatile("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4601
(*retVal) = ((short)(tmp.x)); 
# 4602
} 
#endif
# 4604 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4605
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4609
::exit(___);}
#if 0
# 4605
{ 
# 4606
int4 tmp; 
# 4607
__asm__ volatile("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4608
(*retVal) = make_short1(tmp.x); 
# 4609
} 
#endif
# 4611 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4612
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4616
::exit(___);}
#if 0
# 4612
{ 
# 4613
int4 tmp; 
# 4614
__asm__ volatile("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4615
(*retVal) = make_short2(tmp.x, tmp.y); 
# 4616
} 
#endif
# 4618 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4619
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4623
::exit(___);}
#if 0
# 4619
{ 
# 4620
int4 tmp; 
# 4621
__asm__ volatile("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4622
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4623
} 
#endif
# 4625 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4626
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4630
::exit(___);}
#if 0
# 4626
{ 
# 4627
uint4 tmp; 
# 4628
__asm__ volatile("tex.level.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4629
(*retVal) = ((unsigned short)(tmp.x)); 
# 4630
} 
#endif
# 4632 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4633
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4637
::exit(___);}
#if 0
# 4633
{ 
# 4634
uint4 tmp; 
# 4635
__asm__ volatile("tex.level.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4636
(*retVal) = make_ushort1(tmp.x); 
# 4637
} 
#endif
# 4639 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4640
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4644
::exit(___);}
#if 0
# 4640
{ 
# 4641
uint4 tmp; 
# 4642
__asm__ volatile("tex.level.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4643
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 4644
} 
#endif
# 4646 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4647
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4651
::exit(___);}
#if 0
# 4647
{ 
# 4648
uint4 tmp; 
# 4649
__asm__ volatile("tex.level.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4650
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4651
} 
#endif
# 4659 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(int *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4660
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4664
::exit(___);}
#if 0
# 4660
{ 
# 4661
int4 tmp; 
# 4662
__asm__ volatile("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4663
(*retVal) = ((int)(tmp.x)); 
# 4664
} 
#endif
# 4666 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4667
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4671
::exit(___);}
#if 0
# 4667
{ 
# 4668
int4 tmp; 
# 4669
__asm__ volatile("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4670
(*retVal) = make_int1(tmp.x); 
# 4671
} 
#endif
# 4673 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4674
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4678
::exit(___);}
#if 0
# 4674
{ 
# 4675
int4 tmp; 
# 4676
__asm__ volatile("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4677
(*retVal) = make_int2(tmp.x, tmp.y); 
# 4678
} 
#endif
# 4680 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4681
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4685
::exit(___);}
#if 0
# 4681
{ 
# 4682
int4 tmp; 
# 4683
__asm__ volatile("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4684
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4685
} 
#endif
# 4687 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4688
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4692
::exit(___);}
#if 0
# 4688
{ 
# 4689
uint4 tmp; 
# 4690
__asm__ volatile("tex.level.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4691
(*retVal) = ((unsigned)(tmp.x)); 
# 4692
} 
#endif
# 4694 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4695
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4699
::exit(___);}
#if 0
# 4695
{ 
# 4696
uint4 tmp; 
# 4697
__asm__ volatile("tex.level.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4698
(*retVal) = make_uint1(tmp.x); 
# 4699
} 
#endif
# 4701 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4702
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4706
::exit(___);}
#if 0
# 4702
{ 
# 4703
uint4 tmp; 
# 4704
__asm__ volatile("tex.level.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4705
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 4706
} 
#endif
# 4708 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4709
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4713
::exit(___);}
#if 0
# 4709
{ 
# 4710
uint4 tmp; 
# 4711
__asm__ volatile("tex.level.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4712
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4713
} 
#endif
# 4788 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(float *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4789
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4793
::exit(___);}
#if 0
# 4789
{ 
# 4790
float4 tmp; 
# 4791
__asm__ volatile("tex.level.a2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4792
(*retVal) = ((float)(tmp.x)); 
# 4793
} 
#endif
# 4795 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4796
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4800
::exit(___);}
#if 0
# 4796
{ 
# 4797
float4 tmp; 
# 4798
__asm__ volatile("tex.level.a2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4799
(*retVal) = make_float1(tmp.x); 
# 4800
} 
#endif
# 4802 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4803
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4807
::exit(___);}
#if 0
# 4803
{ 
# 4804
float4 tmp; 
# 4805
__asm__ volatile("tex.level.a2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4806
(*retVal) = make_float2(tmp.x, tmp.y); 
# 4807
} 
#endif
# 4809 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4810
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4814
::exit(___);}
#if 0
# 4810
{ 
# 4811
float4 tmp; 
# 4812
__asm__ volatile("tex.level.a2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (level)); 
# 4813
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4814
} 
#endif
# 4822 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
template< class T> 
# 4823
__attribute((always_inline)) __attribute__((unused)) static inline T tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 4824
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 4828
::exit(___);}
#if 0
# 4824
{ 
# 4825
T ret; 
# 4826
tex2DLayeredLod(&ret, texObject, x, y, layer, level); 
# 4827
return ret; 
# 4828
} 
#endif
# 4836 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4837
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4846
::exit(___);}
#if 0
# 4837
{ 
# 4842
int4 tmp; 
# 4843
__asm__ volatile("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4845
(*retVal) = ((char)(tmp.x)); 
# 4846
} 
#endif
# 4847 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4848
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4852
::exit(___);}
#if 0
# 4848
{ 
# 4849
int4 tmp; 
# 4850
__asm__ volatile("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4851
(*retVal) = ((signed char)(tmp.x)); 
# 4852
} 
#endif
# 4854 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4855
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4859
::exit(___);}
#if 0
# 4855
{ 
# 4856
int4 tmp; 
# 4857
__asm__ volatile("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4858
(*retVal) = make_char1(tmp.x); 
# 4859
} 
#endif
# 4861 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4862
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4866
::exit(___);}
#if 0
# 4862
{ 
# 4863
int4 tmp; 
# 4864
__asm__ volatile("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4865
(*retVal) = make_char2(tmp.x, tmp.y); 
# 4866
} 
#endif
# 4868 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4869
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4873
::exit(___);}
#if 0
# 4869
{ 
# 4870
int4 tmp; 
# 4871
__asm__ volatile("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4872
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4873
} 
#endif
# 4875 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4876
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4880
::exit(___);}
#if 0
# 4876
{ 
# 4877
uint4 tmp; 
# 4878
__asm__ volatile("tex.level.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4879
(*retVal) = ((unsigned char)(tmp.x)); 
# 4880
} 
#endif
# 4882 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4883
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4887
::exit(___);}
#if 0
# 4883
{ 
# 4884
uint4 tmp; 
# 4885
__asm__ volatile("tex.level.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4886
(*retVal) = make_uchar1(tmp.x); 
# 4887
} 
#endif
# 4889 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4890
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4894
::exit(___);}
#if 0
# 4890
{ 
# 4891
uint4 tmp; 
# 4892
__asm__ volatile("tex.level.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4893
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 4894
} 
#endif
# 4896 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4897
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4901
::exit(___);}
#if 0
# 4897
{ 
# 4898
uint4 tmp; 
# 4899
__asm__ volatile("tex.level.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4900
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4901
} 
#endif
# 4909 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4910
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4914
::exit(___);}
#if 0
# 4910
{ 
# 4911
int4 tmp; 
# 4912
__asm__ volatile("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4913
(*retVal) = ((short)(tmp.x)); 
# 4914
} 
#endif
# 4916 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4917
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4921
::exit(___);}
#if 0
# 4917
{ 
# 4918
int4 tmp; 
# 4919
__asm__ volatile("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4920
(*retVal) = make_short1(tmp.x); 
# 4921
} 
#endif
# 4923 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4924
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4928
::exit(___);}
#if 0
# 4924
{ 
# 4925
int4 tmp; 
# 4926
__asm__ volatile("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4927
(*retVal) = make_short2(tmp.x, tmp.y); 
# 4928
} 
#endif
# 4930 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4931
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4935
::exit(___);}
#if 0
# 4931
{ 
# 4932
int4 tmp; 
# 4933
__asm__ volatile("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4934
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4935
} 
#endif
# 4937 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4938
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4942
::exit(___);}
#if 0
# 4938
{ 
# 4939
uint4 tmp; 
# 4940
__asm__ volatile("tex.level.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4941
(*retVal) = ((unsigned short)(tmp.x)); 
# 4942
} 
#endif
# 4944 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4945
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4949
::exit(___);}
#if 0
# 4945
{ 
# 4946
uint4 tmp; 
# 4947
__asm__ volatile("tex.level.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4948
(*retVal) = make_ushort1(tmp.x); 
# 4949
} 
#endif
# 4951 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4952
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4956
::exit(___);}
#if 0
# 4952
{ 
# 4953
uint4 tmp; 
# 4954
__asm__ volatile("tex.level.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4955
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 4956
} 
#endif
# 4958 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4959
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4963
::exit(___);}
#if 0
# 4959
{ 
# 4960
uint4 tmp; 
# 4961
__asm__ volatile("tex.level.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4962
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4963
} 
#endif
# 4971 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4972
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4976
::exit(___);}
#if 0
# 4972
{ 
# 4973
int4 tmp; 
# 4974
__asm__ volatile("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4975
(*retVal) = ((int)(tmp.x)); 
# 4976
} 
#endif
# 4978 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4979
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4983
::exit(___);}
#if 0
# 4979
{ 
# 4980
int4 tmp; 
# 4981
__asm__ volatile("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4982
(*retVal) = make_int1(tmp.x); 
# 4983
} 
#endif
# 4985 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4986
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4990
::exit(___);}
#if 0
# 4986
{ 
# 4987
int4 tmp; 
# 4988
__asm__ volatile("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4989
(*retVal) = make_int2(tmp.x, tmp.y); 
# 4990
} 
#endif
# 4992 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 4993
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 4997
::exit(___);}
#if 0
# 4993
{ 
# 4994
int4 tmp; 
# 4995
__asm__ volatile("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 4996
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 4997
} 
#endif
# 4999 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 5000
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 5004
::exit(___);}
#if 0
# 5000
{ 
# 5001
uint4 tmp; 
# 5002
__asm__ volatile("tex.level.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5003
(*retVal) = ((unsigned)(tmp.x)); 
# 5004
} 
#endif
# 5006 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 5007
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 5011
::exit(___);}
#if 0
# 5007
{ 
# 5008
uint4 tmp; 
# 5009
__asm__ volatile("tex.level.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5010
(*retVal) = make_uint1(tmp.x); 
# 5011
} 
#endif
# 5013 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 5014
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 5018
::exit(___);}
#if 0
# 5014
{ 
# 5015
uint4 tmp; 
# 5016
__asm__ volatile("tex.level.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5017
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 5018
} 
#endif
# 5020 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 5021
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 5025
::exit(___);}
#if 0
# 5021
{ 
# 5022
uint4 tmp; 
# 5023
__asm__ volatile("tex.level.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5024
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5025
} 
#endif
# 5100 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 5101
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 5105
::exit(___);}
#if 0
# 5101
{ 
# 5102
float4 tmp; 
# 5103
__asm__ volatile("tex.level.cube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5104
(*retVal) = ((float)(tmp.x)); 
# 5105
} 
#endif
# 5107 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 5108
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 5112
::exit(___);}
#if 0
# 5108
{ 
# 5109
float4 tmp; 
# 5110
__asm__ volatile("tex.level.cube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5111
(*retVal) = make_float1(tmp.x); 
# 5112
} 
#endif
# 5114 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 5115
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 5119
::exit(___);}
#if 0
# 5115
{ 
# 5116
float4 tmp; 
# 5117
__asm__ volatile("tex.level.cube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5118
(*retVal) = make_float2(tmp.x, tmp.y); 
# 5119
} 
#endif
# 5121 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 5122
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 5126
::exit(___);}
#if 0
# 5122
{ 
# 5123
float4 tmp; 
# 5124
__asm__ volatile("tex.level.cube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5125
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5126
} 
#endif
# 5134 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
template< class T> 
# 5135
__attribute((always_inline)) __attribute__((unused)) static inline T texCubemapLod(cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 5136
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 5140
::exit(___);}
#if 0
# 5136
{ 
# 5137
T ret; 
# 5138
texCubemapLod(&ret, texObject, x, y, z, level); 
# 5139
return ret; 
# 5140
} 
#endif
# 5148 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5149
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5158
::exit(___);}
#if 0
# 5149
{ 
# 5154
int4 tmp; 
# 5155
__asm__ volatile("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5157
(*retVal) = ((char)(tmp.x)); 
# 5158
} 
#endif
# 5159 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5160
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5164
::exit(___);}
#if 0
# 5160
{ 
# 5161
int4 tmp; 
# 5162
__asm__ volatile("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5163
(*retVal) = ((signed char)(tmp.x)); 
# 5164
} 
#endif
# 5166 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5167
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5171
::exit(___);}
#if 0
# 5167
{ 
# 5168
int4 tmp; 
# 5169
__asm__ volatile("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5170
(*retVal) = make_char1(tmp.x); 
# 5171
} 
#endif
# 5173 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5174
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5178
::exit(___);}
#if 0
# 5174
{ 
# 5175
int4 tmp; 
# 5176
__asm__ volatile("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5177
(*retVal) = make_char2(tmp.x, tmp.y); 
# 5178
} 
#endif
# 5180 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5181
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5185
::exit(___);}
#if 0
# 5181
{ 
# 5182
int4 tmp; 
# 5183
__asm__ volatile("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5184
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5185
} 
#endif
# 5187 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5188
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5192
::exit(___);}
#if 0
# 5188
{ 
# 5189
uint4 tmp; 
# 5190
__asm__ volatile("tex.level.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5191
(*retVal) = ((unsigned char)(tmp.x)); 
# 5192
} 
#endif
# 5194 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5195
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5199
::exit(___);}
#if 0
# 5195
{ 
# 5196
uint4 tmp; 
# 5197
__asm__ volatile("tex.level.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5198
(*retVal) = make_uchar1(tmp.x); 
# 5199
} 
#endif
# 5201 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5202
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5206
::exit(___);}
#if 0
# 5202
{ 
# 5203
uint4 tmp; 
# 5204
__asm__ volatile("tex.level.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5205
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 5206
} 
#endif
# 5208 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5209
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5213
::exit(___);}
#if 0
# 5209
{ 
# 5210
uint4 tmp; 
# 5211
__asm__ volatile("tex.level.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5212
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5213
} 
#endif
# 5221 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5222
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5226
::exit(___);}
#if 0
# 5222
{ 
# 5223
int4 tmp; 
# 5224
__asm__ volatile("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5225
(*retVal) = ((short)(tmp.x)); 
# 5226
} 
#endif
# 5228 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5229
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5233
::exit(___);}
#if 0
# 5229
{ 
# 5230
int4 tmp; 
# 5231
__asm__ volatile("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5232
(*retVal) = make_short1(tmp.x); 
# 5233
} 
#endif
# 5235 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5236
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5240
::exit(___);}
#if 0
# 5236
{ 
# 5237
int4 tmp; 
# 5238
__asm__ volatile("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5239
(*retVal) = make_short2(tmp.x, tmp.y); 
# 5240
} 
#endif
# 5242 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5243
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5247
::exit(___);}
#if 0
# 5243
{ 
# 5244
int4 tmp; 
# 5245
__asm__ volatile("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5246
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5247
} 
#endif
# 5249 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5250
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5254
::exit(___);}
#if 0
# 5250
{ 
# 5251
uint4 tmp; 
# 5252
__asm__ volatile("tex.level.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5253
(*retVal) = ((unsigned short)(tmp.x)); 
# 5254
} 
#endif
# 5256 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5257
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5261
::exit(___);}
#if 0
# 5257
{ 
# 5258
uint4 tmp; 
# 5259
__asm__ volatile("tex.level.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5260
(*retVal) = make_ushort1(tmp.x); 
# 5261
} 
#endif
# 5263 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5264
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5268
::exit(___);}
#if 0
# 5264
{ 
# 5265
uint4 tmp; 
# 5266
__asm__ volatile("tex.level.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5267
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 5268
} 
#endif
# 5270 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5271
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5275
::exit(___);}
#if 0
# 5271
{ 
# 5272
uint4 tmp; 
# 5273
__asm__ volatile("tex.level.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5274
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5275
} 
#endif
# 5283 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5284
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5288
::exit(___);}
#if 0
# 5284
{ 
# 5285
int4 tmp; 
# 5286
__asm__ volatile("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5287
(*retVal) = ((int)(tmp.x)); 
# 5288
} 
#endif
# 5290 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5291
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5295
::exit(___);}
#if 0
# 5291
{ 
# 5292
int4 tmp; 
# 5293
__asm__ volatile("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5294
(*retVal) = make_int1(tmp.x); 
# 5295
} 
#endif
# 5297 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5298
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5302
::exit(___);}
#if 0
# 5298
{ 
# 5299
int4 tmp; 
# 5300
__asm__ volatile("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5301
(*retVal) = make_int2(tmp.x, tmp.y); 
# 5302
} 
#endif
# 5304 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5305
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5309
::exit(___);}
#if 0
# 5305
{ 
# 5306
int4 tmp; 
# 5307
__asm__ volatile("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5308
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5309
} 
#endif
# 5311 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5312
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5316
::exit(___);}
#if 0
# 5312
{ 
# 5313
uint4 tmp; 
# 5314
__asm__ volatile("tex.level.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5315
(*retVal) = ((unsigned)(tmp.x)); 
# 5316
} 
#endif
# 5318 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5319
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5323
::exit(___);}
#if 0
# 5319
{ 
# 5320
uint4 tmp; 
# 5321
__asm__ volatile("tex.level.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5322
(*retVal) = make_uint1(tmp.x); 
# 5323
} 
#endif
# 5325 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5326
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5330
::exit(___);}
#if 0
# 5326
{ 
# 5327
uint4 tmp; 
# 5328
__asm__ volatile("tex.level.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5329
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 5330
} 
#endif
# 5332 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5333
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5337
::exit(___);}
#if 0
# 5333
{ 
# 5334
uint4 tmp; 
# 5335
__asm__ volatile("tex.level.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5336
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5337
} 
#endif
# 5412 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5413
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5417
::exit(___);}
#if 0
# 5413
{ 
# 5414
float4 tmp; 
# 5415
__asm__ volatile("tex.level.acube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5416
(*retVal) = ((float)(tmp.x)); 
# 5417
} 
#endif
# 5419 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5420
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5424
::exit(___);}
#if 0
# 5420
{ 
# 5421
float4 tmp; 
# 5422
__asm__ volatile("tex.level.acube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5423
(*retVal) = make_float1(tmp.x); 
# 5424
} 
#endif
# 5426 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5427
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5431
::exit(___);}
#if 0
# 5427
{ 
# 5428
float4 tmp; 
# 5429
__asm__ volatile("tex.level.acube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5430
(*retVal) = make_float2(tmp.x, tmp.y); 
# 5431
} 
#endif
# 5433 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void texCubemapLayeredLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5434
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5438
::exit(___);}
#if 0
# 5434
{ 
# 5435
float4 tmp; 
# 5436
__asm__ volatile("tex.level.acube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (z), "f" (level)); 
# 5437
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5438
} 
#endif
# 5446 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
template< class T> 
# 5447
__attribute((always_inline)) __attribute__((unused)) static inline T texCubemapLayeredLod(cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 5448
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 5452
::exit(___);}
#if 0
# 5448
{ 
# 5449
T ret; 
# 5450
texCubemapLayeredLod(&ret, texObject, x, y, z, layer, level); 
# 5451
return ret; 
# 5452
} 
#endif
# 5460 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(char *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5461
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5470
::exit(___);}
#if 0
# 5461
{ 
# 5466
int4 tmp; 
# 5467
__asm__ volatile("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5469
(*retVal) = ((char)(tmp.x)); 
# 5470
} 
#endif
# 5471 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(signed char *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5472
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5476
::exit(___);}
#if 0
# 5472
{ 
# 5473
int4 tmp; 
# 5474
__asm__ volatile("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5475
(*retVal) = ((signed char)(tmp.x)); 
# 5476
} 
#endif
# 5478 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(char1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5479
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5483
::exit(___);}
#if 0
# 5479
{ 
# 5480
int4 tmp; 
# 5481
__asm__ volatile("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5482
(*retVal) = make_char1(tmp.x); 
# 5483
} 
#endif
# 5485 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(char2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5486
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5490
::exit(___);}
#if 0
# 5486
{ 
# 5487
int4 tmp; 
# 5488
__asm__ volatile("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5489
(*retVal) = make_char2(tmp.x, tmp.y); 
# 5490
} 
#endif
# 5492 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(char4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5493
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5497
::exit(___);}
#if 0
# 5493
{ 
# 5494
int4 tmp; 
# 5495
__asm__ volatile("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5496
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5497
} 
#endif
# 5499 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5500
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5504
::exit(___);}
#if 0
# 5500
{ 
# 5501
uint4 tmp; 
# 5502
__asm__ volatile("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5503
(*retVal) = ((unsigned char)(tmp.x)); 
# 5504
} 
#endif
# 5506 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5507
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5511
::exit(___);}
#if 0
# 5507
{ 
# 5508
uint4 tmp; 
# 5509
__asm__ volatile("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5510
(*retVal) = make_uchar1(tmp.x); 
# 5511
} 
#endif
# 5513 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5514
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5518
::exit(___);}
#if 0
# 5514
{ 
# 5515
uint4 tmp; 
# 5516
__asm__ volatile("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5517
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 5518
} 
#endif
# 5520 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5521
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5525
::exit(___);}
#if 0
# 5521
{ 
# 5522
uint4 tmp; 
# 5523
__asm__ volatile("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5524
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5525
} 
#endif
# 5533 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(short *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5534
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5538
::exit(___);}
#if 0
# 5534
{ 
# 5535
int4 tmp; 
# 5536
__asm__ volatile("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5537
(*retVal) = ((short)(tmp.x)); 
# 5538
} 
#endif
# 5540 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(short1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5541
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5545
::exit(___);}
#if 0
# 5541
{ 
# 5542
int4 tmp; 
# 5543
__asm__ volatile("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5544
(*retVal) = make_short1(tmp.x); 
# 5545
} 
#endif
# 5547 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(short2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5548
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5552
::exit(___);}
#if 0
# 5548
{ 
# 5549
int4 tmp; 
# 5550
__asm__ volatile("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5551
(*retVal) = make_short2(tmp.x, tmp.y); 
# 5552
} 
#endif
# 5554 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(short4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5555
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5559
::exit(___);}
#if 0
# 5555
{ 
# 5556
int4 tmp; 
# 5557
__asm__ volatile("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5558
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5559
} 
#endif
# 5561 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5562
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5566
::exit(___);}
#if 0
# 5562
{ 
# 5563
uint4 tmp; 
# 5564
__asm__ volatile("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5565
(*retVal) = ((unsigned short)(tmp.x)); 
# 5566
} 
#endif
# 5568 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5569
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5573
::exit(___);}
#if 0
# 5569
{ 
# 5570
uint4 tmp; 
# 5571
__asm__ volatile("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5572
(*retVal) = make_ushort1(tmp.x); 
# 5573
} 
#endif
# 5575 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5576
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5580
::exit(___);}
#if 0
# 5576
{ 
# 5577
uint4 tmp; 
# 5578
__asm__ volatile("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5579
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 5580
} 
#endif
# 5582 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5583
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5587
::exit(___);}
#if 0
# 5583
{ 
# 5584
uint4 tmp; 
# 5585
__asm__ volatile("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5586
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5587
} 
#endif
# 5595 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(int *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5596
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5600
::exit(___);}
#if 0
# 5596
{ 
# 5597
int4 tmp; 
# 5598
__asm__ volatile("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5599
(*retVal) = ((int)(tmp.x)); 
# 5600
} 
#endif
# 5602 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(int1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5603
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5607
::exit(___);}
#if 0
# 5603
{ 
# 5604
int4 tmp; 
# 5605
__asm__ volatile("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5606
(*retVal) = make_int1(tmp.x); 
# 5607
} 
#endif
# 5609 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(int2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5610
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5614
::exit(___);}
#if 0
# 5610
{ 
# 5611
int4 tmp; 
# 5612
__asm__ volatile("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5613
(*retVal) = make_int2(tmp.x, tmp.y); 
# 5614
} 
#endif
# 5616 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(int4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5617
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5621
::exit(___);}
#if 0
# 5617
{ 
# 5618
int4 tmp; 
# 5619
__asm__ volatile("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5620
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5621
} 
#endif
# 5623 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(unsigned *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5624
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5628
::exit(___);}
#if 0
# 5624
{ 
# 5625
uint4 tmp; 
# 5626
__asm__ volatile("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5627
(*retVal) = ((unsigned)(tmp.x)); 
# 5628
} 
#endif
# 5630 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5631
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5635
::exit(___);}
#if 0
# 5631
{ 
# 5632
uint4 tmp; 
# 5633
__asm__ volatile("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5634
(*retVal) = make_uint1(tmp.x); 
# 5635
} 
#endif
# 5637 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5638
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5642
::exit(___);}
#if 0
# 5638
{ 
# 5639
uint4 tmp; 
# 5640
__asm__ volatile("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5641
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 5642
} 
#endif
# 5644 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5645
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5649
::exit(___);}
#if 0
# 5645
{ 
# 5646
uint4 tmp; 
# 5647
__asm__ volatile("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5648
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5649
} 
#endif
# 5724 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(float *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5725
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5729
::exit(___);}
#if 0
# 5725
{ 
# 5726
float4 tmp; 
# 5727
__asm__ volatile("tex.grad.1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5728
(*retVal) = ((float)(tmp.x)); 
# 5729
} 
#endif
# 5731 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(float1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5732
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5736
::exit(___);}
#if 0
# 5732
{ 
# 5733
float4 tmp; 
# 5734
__asm__ volatile("tex.grad.1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5735
(*retVal) = make_float1(tmp.x); 
# 5736
} 
#endif
# 5738 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(float2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5739
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5743
::exit(___);}
#if 0
# 5739
{ 
# 5740
float4 tmp; 
# 5741
__asm__ volatile("tex.grad.1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5742
(*retVal) = make_float2(tmp.x, tmp.y); 
# 5743
} 
#endif
# 5745 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DGrad(float4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5746
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5750
::exit(___);}
#if 0
# 5746
{ 
# 5747
float4 tmp; 
# 5748
__asm__ volatile("tex.grad.1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 5749
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5750
} 
#endif
# 5758 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
template< class T> 
# 5759
__attribute((always_inline)) __attribute__((unused)) static inline T tex1DGrad(cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 5760
{int volatile ___ = 1;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 5764
::exit(___);}
#if 0
# 5760
{ 
# 5761
T ret; 
# 5762
tex1DGrad(&ret, texObject, x, dPdx, dPdy); 
# 5763
return ret; 
# 5764
} 
#endif
# 5772 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(char *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5773
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5782
::exit(___);}
#if 0
# 5773
{ 
# 5778
int4 tmp; 
# 5779
__asm__ volatile("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 5781
(*retVal) = ((char)(tmp.x)); 
# 5782
} 
#endif
# 5783 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5784
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5788
::exit(___);}
#if 0
# 5784
{ 
# 5785
int4 tmp; 
# 5786
__asm__ volatile("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 5787
(*retVal) = ((signed char)(tmp.x)); 
# 5788
} 
#endif
# 5790 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5791
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5795
::exit(___);}
#if 0
# 5791
{ 
# 5792
int4 tmp; 
# 5793
__asm__ volatile("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 5794
(*retVal) = make_char1(tmp.x); 
# 5795
} 
#endif
# 5797 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5798
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5802
::exit(___);}
#if 0
# 5798
{ 
# 5799
int4 tmp; 
# 5800
__asm__ volatile("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 5801
(*retVal) = make_char2(tmp.x, tmp.y); 
# 5802
} 
#endif
# 5804 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5805
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5809
::exit(___);}
#if 0
# 5805
{ 
# 5806
int4 tmp; 
# 5807
__asm__ volatile("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 5808
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5809
} 
#endif
# 5811 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5812
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5816
::exit(___);}
#if 0
# 5812
{ 
# 5813
uint4 tmp; 
# 5814
__asm__ volatile("tex.grad.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 5815
(*retVal) = ((unsigned char)(tmp.x)); 
# 5816
} 
#endif
# 5818 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5819
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5823
::exit(___);}
#if 0
# 5819
{ 
# 5820
uint4 tmp; 
# 5821
__asm__ volatile("tex.grad.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 5822
(*retVal) = make_uchar1(tmp.x); 
# 5823
} 
#endif
# 5825 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5826
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5830
::exit(___);}
#if 0
# 5826
{ 
# 5827
uint4 tmp; 
# 5828
__asm__ volatile("tex.grad.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 5829
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 5830
} 
#endif
# 5832 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5833
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5837
::exit(___);}
#if 0
# 5833
{ 
# 5834
uint4 tmp; 
# 5835
__asm__ volatile("tex.grad.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 5836
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5837
} 
#endif
# 5845 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(short *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5846
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5850
::exit(___);}
#if 0
# 5846
{ 
# 5847
int4 tmp; 
# 5848
__asm__ volatile("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 5849
(*retVal) = ((short)(tmp.x)); 
# 5850
} 
#endif
# 5852 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5853
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5857
::exit(___);}
#if 0
# 5853
{ 
# 5854
int4 tmp; 
# 5855
__asm__ volatile("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 5856
(*retVal) = make_short1(tmp.x); 
# 5857
} 
#endif
# 5859 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5860
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5864
::exit(___);}
#if 0
# 5860
{ 
# 5861
int4 tmp; 
# 5862
__asm__ volatile("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 5863
(*retVal) = make_short2(tmp.x, tmp.y); 
# 5864
} 
#endif
# 5866 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5867
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5871
::exit(___);}
#if 0
# 5867
{ 
# 5868
int4 tmp; 
# 5869
__asm__ volatile("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 5870
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5871
} 
#endif
# 5873 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5874
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5878
::exit(___);}
#if 0
# 5874
{ 
# 5875
uint4 tmp; 
# 5876
__asm__ volatile("tex.grad.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 5877
(*retVal) = ((unsigned short)(tmp.x)); 
# 5878
} 
#endif
# 5880 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5881
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5885
::exit(___);}
#if 0
# 5881
{ 
# 5882
uint4 tmp; 
# 5883
__asm__ volatile("tex.grad.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 5884
(*retVal) = make_ushort1(tmp.x); 
# 5885
} 
#endif
# 5887 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5888
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5892
::exit(___);}
#if 0
# 5888
{ 
# 5889
uint4 tmp; 
# 5890
__asm__ volatile("tex.grad.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 5891
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 5892
} 
#endif
# 5894 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5895
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5899
::exit(___);}
#if 0
# 5895
{ 
# 5896
uint4 tmp; 
# 5897
__asm__ volatile("tex.grad.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 5898
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5899
} 
#endif
# 5907 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(int *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5908
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5912
::exit(___);}
#if 0
# 5908
{ 
# 5909
int4 tmp; 
# 5910
__asm__ volatile("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 5911
(*retVal) = ((int)(tmp.x)); 
# 5912
} 
#endif
# 5914 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5915
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5919
::exit(___);}
#if 0
# 5915
{ 
# 5916
int4 tmp; 
# 5917
__asm__ volatile("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 5918
(*retVal) = make_int1(tmp.x); 
# 5919
} 
#endif
# 5921 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5922
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5926
::exit(___);}
#if 0
# 5922
{ 
# 5923
int4 tmp; 
# 5924
__asm__ volatile("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 5925
(*retVal) = make_int2(tmp.x, tmp.y); 
# 5926
} 
#endif
# 5928 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5929
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5933
::exit(___);}
#if 0
# 5929
{ 
# 5930
int4 tmp; 
# 5931
__asm__ volatile("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 5932
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5933
} 
#endif
# 5935 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5936
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5940
::exit(___);}
#if 0
# 5936
{ 
# 5937
uint4 tmp; 
# 5938
__asm__ volatile("tex.grad.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 5939
(*retVal) = ((unsigned)(tmp.x)); 
# 5940
} 
#endif
# 5942 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5943
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5947
::exit(___);}
#if 0
# 5943
{ 
# 5944
uint4 tmp; 
# 5945
__asm__ volatile("tex.grad.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 5946
(*retVal) = make_uint1(tmp.x); 
# 5947
} 
#endif
# 5949 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5950
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5954
::exit(___);}
#if 0
# 5950
{ 
# 5951
uint4 tmp; 
# 5952
__asm__ volatile("tex.grad.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 5953
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 5954
} 
#endif
# 5956 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 5957
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 5961
::exit(___);}
#if 0
# 5957
{ 
# 5958
uint4 tmp; 
# 5959
__asm__ volatile("tex.grad.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 5960
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 5961
} 
#endif
# 6036 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(float *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 6037
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 6041
::exit(___);}
#if 0
# 6037
{ 
# 6038
float4 tmp; 
# 6039
__asm__ volatile("tex.grad.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6040
(*retVal) = ((float)(tmp.x)); 
# 6041
} 
#endif
# 6043 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 6044
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 6048
::exit(___);}
#if 0
# 6044
{ 
# 6045
float4 tmp; 
# 6046
__asm__ volatile("tex.grad.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6047
(*retVal) = make_float1(tmp.x); 
# 6048
} 
#endif
# 6050 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 6051
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 6055
::exit(___);}
#if 0
# 6051
{ 
# 6052
float4 tmp; 
# 6053
__asm__ volatile("tex.grad.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6054
(*retVal) = make_float2(tmp.x, tmp.y); 
# 6055
} 
#endif
# 6057 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DGrad(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 6058
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 6062
::exit(___);}
#if 0
# 6058
{ 
# 6059
float4 tmp; 
# 6060
__asm__ volatile("tex.grad.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6061
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6062
} 
#endif
# 6070 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
template< class T> 
# 6071
__attribute((always_inline)) __attribute__((unused)) static inline T tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 6072
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 6076
::exit(___);}
#if 0
# 6072
{ 
# 6073
T ret; 
# 6074
tex2DGrad(&ret, texObject, x, y, dPdx, dPdy); 
# 6075
return ret; 
# 6076
} 
#endif
# 6084 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6085
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6094
::exit(___);}
#if 0
# 6085
{ 
# 6090
int4 tmp; 
# 6091
__asm__ volatile("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6093
(*retVal) = ((char)(tmp.x)); 
# 6094
} 
#endif
# 6095 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6096
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6100
::exit(___);}
#if 0
# 6096
{ 
# 6097
int4 tmp; 
# 6098
__asm__ volatile("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6099
(*retVal) = ((signed char)(tmp.x)); 
# 6100
} 
#endif
# 6102 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6103
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6107
::exit(___);}
#if 0
# 6103
{ 
# 6104
int4 tmp; 
# 6105
__asm__ volatile("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6106
(*retVal) = make_char1(tmp.x); 
# 6107
} 
#endif
# 6109 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6110
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6114
::exit(___);}
#if 0
# 6110
{ 
# 6111
int4 tmp; 
# 6112
__asm__ volatile("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6113
(*retVal) = make_char2(tmp.x, tmp.y); 
# 6114
} 
#endif
# 6116 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6117
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6121
::exit(___);}
#if 0
# 6117
{ 
# 6118
int4 tmp; 
# 6119
__asm__ volatile("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6120
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6121
} 
#endif
# 6123 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6124
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6128
::exit(___);}
#if 0
# 6124
{ 
# 6125
uint4 tmp; 
# 6126
__asm__ volatile("tex.grad.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6127
(*retVal) = ((unsigned char)(tmp.x)); 
# 6128
} 
#endif
# 6130 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6131
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6135
::exit(___);}
#if 0
# 6131
{ 
# 6132
uint4 tmp; 
# 6133
__asm__ volatile("tex.grad.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6134
(*retVal) = make_uchar1(tmp.x); 
# 6135
} 
#endif
# 6137 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6138
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6142
::exit(___);}
#if 0
# 6138
{ 
# 6139
uint4 tmp; 
# 6140
__asm__ volatile("tex.grad.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6141
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 6142
} 
#endif
# 6144 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6145
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6149
::exit(___);}
#if 0
# 6145
{ 
# 6146
uint4 tmp; 
# 6147
__asm__ volatile("tex.grad.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6148
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6149
} 
#endif
# 6157 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6158
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6162
::exit(___);}
#if 0
# 6158
{ 
# 6159
int4 tmp; 
# 6160
__asm__ volatile("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6161
(*retVal) = ((short)(tmp.x)); 
# 6162
} 
#endif
# 6164 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6165
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6169
::exit(___);}
#if 0
# 6165
{ 
# 6166
int4 tmp; 
# 6167
__asm__ volatile("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6168
(*retVal) = make_short1(tmp.x); 
# 6169
} 
#endif
# 6171 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6172
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6176
::exit(___);}
#if 0
# 6172
{ 
# 6173
int4 tmp; 
# 6174
__asm__ volatile("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6175
(*retVal) = make_short2(tmp.x, tmp.y); 
# 6176
} 
#endif
# 6178 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6179
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6183
::exit(___);}
#if 0
# 6179
{ 
# 6180
int4 tmp; 
# 6181
__asm__ volatile("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6182
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6183
} 
#endif
# 6185 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6186
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6190
::exit(___);}
#if 0
# 6186
{ 
# 6187
uint4 tmp; 
# 6188
__asm__ volatile("tex.grad.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6189
(*retVal) = ((unsigned short)(tmp.x)); 
# 6190
} 
#endif
# 6192 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6193
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6197
::exit(___);}
#if 0
# 6193
{ 
# 6194
uint4 tmp; 
# 6195
__asm__ volatile("tex.grad.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6196
(*retVal) = make_ushort1(tmp.x); 
# 6197
} 
#endif
# 6199 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6200
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6204
::exit(___);}
#if 0
# 6200
{ 
# 6201
uint4 tmp; 
# 6202
__asm__ volatile("tex.grad.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6203
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 6204
} 
#endif
# 6206 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6207
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6211
::exit(___);}
#if 0
# 6207
{ 
# 6208
uint4 tmp; 
# 6209
__asm__ volatile("tex.grad.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6210
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6211
} 
#endif
# 6219 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6220
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6224
::exit(___);}
#if 0
# 6220
{ 
# 6221
int4 tmp; 
# 6222
__asm__ volatile("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6223
(*retVal) = ((int)(tmp.x)); 
# 6224
} 
#endif
# 6226 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6227
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6231
::exit(___);}
#if 0
# 6227
{ 
# 6228
int4 tmp; 
# 6229
__asm__ volatile("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6230
(*retVal) = make_int1(tmp.x); 
# 6231
} 
#endif
# 6233 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6234
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6238
::exit(___);}
#if 0
# 6234
{ 
# 6235
int4 tmp; 
# 6236
__asm__ volatile("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6237
(*retVal) = make_int2(tmp.x, tmp.y); 
# 6238
} 
#endif
# 6240 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6241
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6245
::exit(___);}
#if 0
# 6241
{ 
# 6242
int4 tmp; 
# 6243
__asm__ volatile("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6244
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6245
} 
#endif
# 6247 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6248
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6252
::exit(___);}
#if 0
# 6248
{ 
# 6249
uint4 tmp; 
# 6250
__asm__ volatile("tex.grad.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6251
(*retVal) = ((unsigned)(tmp.x)); 
# 6252
} 
#endif
# 6254 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6255
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6259
::exit(___);}
#if 0
# 6255
{ 
# 6256
uint4 tmp; 
# 6257
__asm__ volatile("tex.grad.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6258
(*retVal) = make_uint1(tmp.x); 
# 6259
} 
#endif
# 6261 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6262
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6266
::exit(___);}
#if 0
# 6262
{ 
# 6263
uint4 tmp; 
# 6264
__asm__ volatile("tex.grad.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6265
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 6266
} 
#endif
# 6268 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6269
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6273
::exit(___);}
#if 0
# 6269
{ 
# 6270
uint4 tmp; 
# 6271
__asm__ volatile("tex.grad.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6272
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6273
} 
#endif
# 6348 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6349
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6353
::exit(___);}
#if 0
# 6349
{ 
# 6350
float4 tmp; 
# 6351
__asm__ volatile("tex.grad.3d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6352
(*retVal) = ((float)(tmp.x)); 
# 6353
} 
#endif
# 6355 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6356
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6360
::exit(___);}
#if 0
# 6356
{ 
# 6357
float4 tmp; 
# 6358
__asm__ volatile("tex.grad.3d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6359
(*retVal) = make_float1(tmp.x); 
# 6360
} 
#endif
# 6362 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6363
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6367
::exit(___);}
#if 0
# 6363
{ 
# 6364
float4 tmp; 
# 6365
__asm__ volatile("tex.grad.3d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6366
(*retVal) = make_float2(tmp.x, tmp.y); 
# 6367
} 
#endif
# 6369 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex3DGrad(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6370
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6374
::exit(___);}
#if 0
# 6370
{ 
# 6371
float4 tmp; 
# 6372
__asm__ volatile("tex.grad.3d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "f" (x), "f" (y), "f" (z), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdx.z), "f" (dPdy.x), "f" (dPdy.y), "f" (dPdy.z)); 
# 6373
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6374
} 
#endif
# 6382 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
template< class T> 
# 6383
__attribute((always_inline)) __attribute__((unused)) static inline T tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 6384
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 6388
::exit(___);}
#if 0
# 6384
{ 
# 6385
T ret; 
# 6386
tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy); 
# 6387
return ret; 
# 6388
} 
#endif
# 6396 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(char *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6397
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6406
::exit(___);}
#if 0
# 6397
{ 
# 6402
int4 tmp; 
# 6403
__asm__ volatile("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6405
(*retVal) = ((char)(tmp.x)); 
# 6406
} 
#endif
# 6407 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(signed char *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6408
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6412
::exit(___);}
#if 0
# 6408
{ 
# 6409
int4 tmp; 
# 6410
__asm__ volatile("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6411
(*retVal) = ((signed char)(tmp.x)); 
# 6412
} 
#endif
# 6414 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(char1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6415
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6419
::exit(___);}
#if 0
# 6415
{ 
# 6416
int4 tmp; 
# 6417
__asm__ volatile("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6418
(*retVal) = make_char1(tmp.x); 
# 6419
} 
#endif
# 6421 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(char2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6422
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6426
::exit(___);}
#if 0
# 6422
{ 
# 6423
int4 tmp; 
# 6424
__asm__ volatile("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6425
(*retVal) = make_char2(tmp.x, tmp.y); 
# 6426
} 
#endif
# 6428 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(char4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6429
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6433
::exit(___);}
#if 0
# 6429
{ 
# 6430
int4 tmp; 
# 6431
__asm__ volatile("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6432
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6433
} 
#endif
# 6435 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6436
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6440
::exit(___);}
#if 0
# 6436
{ 
# 6437
uint4 tmp; 
# 6438
__asm__ volatile("tex.grad.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6439
(*retVal) = ((unsigned char)(tmp.x)); 
# 6440
} 
#endif
# 6442 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6443
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6447
::exit(___);}
#if 0
# 6443
{ 
# 6444
uint4 tmp; 
# 6445
__asm__ volatile("tex.grad.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6446
(*retVal) = make_uchar1(tmp.x); 
# 6447
} 
#endif
# 6449 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6450
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6454
::exit(___);}
#if 0
# 6450
{ 
# 6451
uint4 tmp; 
# 6452
__asm__ volatile("tex.grad.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6453
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 6454
} 
#endif
# 6456 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6457
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6461
::exit(___);}
#if 0
# 6457
{ 
# 6458
uint4 tmp; 
# 6459
__asm__ volatile("tex.grad.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6460
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6461
} 
#endif
# 6469 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(short *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6470
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6474
::exit(___);}
#if 0
# 6470
{ 
# 6471
int4 tmp; 
# 6472
__asm__ volatile("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6473
(*retVal) = ((short)(tmp.x)); 
# 6474
} 
#endif
# 6476 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(short1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6477
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6481
::exit(___);}
#if 0
# 6477
{ 
# 6478
int4 tmp; 
# 6479
__asm__ volatile("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6480
(*retVal) = make_short1(tmp.x); 
# 6481
} 
#endif
# 6483 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(short2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6484
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6488
::exit(___);}
#if 0
# 6484
{ 
# 6485
int4 tmp; 
# 6486
__asm__ volatile("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6487
(*retVal) = make_short2(tmp.x, tmp.y); 
# 6488
} 
#endif
# 6490 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(short4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6491
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6495
::exit(___);}
#if 0
# 6491
{ 
# 6492
int4 tmp; 
# 6493
__asm__ volatile("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6494
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6495
} 
#endif
# 6497 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6498
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6502
::exit(___);}
#if 0
# 6498
{ 
# 6499
uint4 tmp; 
# 6500
__asm__ volatile("tex.grad.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6501
(*retVal) = ((unsigned short)(tmp.x)); 
# 6502
} 
#endif
# 6504 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6505
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6509
::exit(___);}
#if 0
# 6505
{ 
# 6506
uint4 tmp; 
# 6507
__asm__ volatile("tex.grad.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6508
(*retVal) = make_ushort1(tmp.x); 
# 6509
} 
#endif
# 6511 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6512
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6516
::exit(___);}
#if 0
# 6512
{ 
# 6513
uint4 tmp; 
# 6514
__asm__ volatile("tex.grad.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6515
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 6516
} 
#endif
# 6518 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6519
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6523
::exit(___);}
#if 0
# 6519
{ 
# 6520
uint4 tmp; 
# 6521
__asm__ volatile("tex.grad.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6522
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6523
} 
#endif
# 6531 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(int *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6532
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6536
::exit(___);}
#if 0
# 6532
{ 
# 6533
int4 tmp; 
# 6534
__asm__ volatile("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6535
(*retVal) = ((int)(tmp.x)); 
# 6536
} 
#endif
# 6538 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(int1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6539
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6543
::exit(___);}
#if 0
# 6539
{ 
# 6540
int4 tmp; 
# 6541
__asm__ volatile("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6542
(*retVal) = make_int1(tmp.x); 
# 6543
} 
#endif
# 6545 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(int2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6546
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6550
::exit(___);}
#if 0
# 6546
{ 
# 6547
int4 tmp; 
# 6548
__asm__ volatile("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6549
(*retVal) = make_int2(tmp.x, tmp.y); 
# 6550
} 
#endif
# 6552 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(int4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6553
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6557
::exit(___);}
#if 0
# 6553
{ 
# 6554
int4 tmp; 
# 6555
__asm__ volatile("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6556
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6557
} 
#endif
# 6559 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(unsigned *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6560
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6564
::exit(___);}
#if 0
# 6560
{ 
# 6561
uint4 tmp; 
# 6562
__asm__ volatile("tex.grad.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6563
(*retVal) = ((unsigned)(tmp.x)); 
# 6564
} 
#endif
# 6566 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6567
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6571
::exit(___);}
#if 0
# 6567
{ 
# 6568
uint4 tmp; 
# 6569
__asm__ volatile("tex.grad.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6570
(*retVal) = make_uint1(tmp.x); 
# 6571
} 
#endif
# 6573 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6574
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6578
::exit(___);}
#if 0
# 6574
{ 
# 6575
uint4 tmp; 
# 6576
__asm__ volatile("tex.grad.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6577
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 6578
} 
#endif
# 6580 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6581
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6585
::exit(___);}
#if 0
# 6581
{ 
# 6582
uint4 tmp; 
# 6583
__asm__ volatile("tex.grad.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6584
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6585
} 
#endif
# 6660 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(float *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6661
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6665
::exit(___);}
#if 0
# 6661
{ 
# 6662
float4 tmp; 
# 6663
__asm__ volatile("tex.grad.a1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6664
(*retVal) = ((float)(tmp.x)); 
# 6665
} 
#endif
# 6667 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(float1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6668
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6672
::exit(___);}
#if 0
# 6668
{ 
# 6669
float4 tmp; 
# 6670
__asm__ volatile("tex.grad.a1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6671
(*retVal) = make_float1(tmp.x); 
# 6672
} 
#endif
# 6674 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(float2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6675
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6679
::exit(___);}
#if 0
# 6675
{ 
# 6676
float4 tmp; 
# 6677
__asm__ volatile("tex.grad.a1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6678
(*retVal) = make_float2(tmp.x, tmp.y); 
# 6679
} 
#endif
# 6681 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex1DLayeredGrad(float4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6682
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6686
::exit(___);}
#if 0
# 6682
{ 
# 6683
float4 tmp; 
# 6684
__asm__ volatile("tex.grad.a1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (dPdx), "f" (dPdy)); 
# 6685
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6686
} 
#endif
# 6694 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
template< class T> 
# 6695
__attribute((always_inline)) __attribute__((unused)) static inline T tex1DLayeredGrad(cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 6696
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 6700
::exit(___);}
#if 0
# 6696
{ 
# 6697
T ret; 
# 6698
tex1DLayeredGrad(&ret, texObject, x, layer, dPdx, dPdy); 
# 6699
return ret; 
# 6700
} 
#endif
# 6708 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6709
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6718
::exit(___);}
#if 0
# 6709
{ 
# 6714
int4 tmp; 
# 6715
__asm__ volatile("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6717
(*retVal) = ((char)(tmp.x)); 
# 6718
} 
#endif
# 6719 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(signed char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6720
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6724
::exit(___);}
#if 0
# 6720
{ 
# 6721
int4 tmp; 
# 6722
__asm__ volatile("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6723
(*retVal) = ((signed char)(tmp.x)); 
# 6724
} 
#endif
# 6726 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(char1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6727
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6731
::exit(___);}
#if 0
# 6727
{ 
# 6728
int4 tmp; 
# 6729
__asm__ volatile("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6730
(*retVal) = make_char1(tmp.x); 
# 6731
} 
#endif
# 6733 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(char2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6734
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6738
::exit(___);}
#if 0
# 6734
{ 
# 6735
int4 tmp; 
# 6736
__asm__ volatile("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6737
(*retVal) = make_char2(tmp.x, tmp.y); 
# 6738
} 
#endif
# 6740 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(char4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6741
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6745
::exit(___);}
#if 0
# 6741
{ 
# 6742
int4 tmp; 
# 6743
__asm__ volatile("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6744
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6745
} 
#endif
# 6747 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6748
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6752
::exit(___);}
#if 0
# 6748
{ 
# 6749
uint4 tmp; 
# 6750
__asm__ volatile("tex.grad.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6751
(*retVal) = ((unsigned char)(tmp.x)); 
# 6752
} 
#endif
# 6754 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6755
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6759
::exit(___);}
#if 0
# 6755
{ 
# 6756
uint4 tmp; 
# 6757
__asm__ volatile("tex.grad.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6758
(*retVal) = make_uchar1(tmp.x); 
# 6759
} 
#endif
# 6761 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6762
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6766
::exit(___);}
#if 0
# 6762
{ 
# 6763
uint4 tmp; 
# 6764
__asm__ volatile("tex.grad.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6765
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 6766
} 
#endif
# 6768 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6769
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6773
::exit(___);}
#if 0
# 6769
{ 
# 6770
uint4 tmp; 
# 6771
__asm__ volatile("tex.grad.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6772
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6773
} 
#endif
# 6781 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(short *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6782
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6786
::exit(___);}
#if 0
# 6782
{ 
# 6783
int4 tmp; 
# 6784
__asm__ volatile("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6785
(*retVal) = ((short)(tmp.x)); 
# 6786
} 
#endif
# 6788 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(short1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6789
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6793
::exit(___);}
#if 0
# 6789
{ 
# 6790
int4 tmp; 
# 6791
__asm__ volatile("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6792
(*retVal) = make_short1(tmp.x); 
# 6793
} 
#endif
# 6795 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(short2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6796
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6800
::exit(___);}
#if 0
# 6796
{ 
# 6797
int4 tmp; 
# 6798
__asm__ volatile("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6799
(*retVal) = make_short2(tmp.x, tmp.y); 
# 6800
} 
#endif
# 6802 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(short4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6803
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6807
::exit(___);}
#if 0
# 6803
{ 
# 6804
int4 tmp; 
# 6805
__asm__ volatile("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6806
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6807
} 
#endif
# 6809 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6810
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6814
::exit(___);}
#if 0
# 6810
{ 
# 6811
uint4 tmp; 
# 6812
__asm__ volatile("tex.grad.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6813
(*retVal) = ((unsigned short)(tmp.x)); 
# 6814
} 
#endif
# 6816 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6817
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6821
::exit(___);}
#if 0
# 6817
{ 
# 6818
uint4 tmp; 
# 6819
__asm__ volatile("tex.grad.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6820
(*retVal) = make_ushort1(tmp.x); 
# 6821
} 
#endif
# 6823 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6824
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6828
::exit(___);}
#if 0
# 6824
{ 
# 6825
uint4 tmp; 
# 6826
__asm__ volatile("tex.grad.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6827
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 6828
} 
#endif
# 6830 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6831
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6835
::exit(___);}
#if 0
# 6831
{ 
# 6832
uint4 tmp; 
# 6833
__asm__ volatile("tex.grad.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6834
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6835
} 
#endif
# 6843 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(int *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6844
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6848
::exit(___);}
#if 0
# 6844
{ 
# 6845
int4 tmp; 
# 6846
__asm__ volatile("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6847
(*retVal) = ((int)(tmp.x)); 
# 6848
} 
#endif
# 6850 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(int1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6851
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6855
::exit(___);}
#if 0
# 6851
{ 
# 6852
int4 tmp; 
# 6853
__asm__ volatile("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6854
(*retVal) = make_int1(tmp.x); 
# 6855
} 
#endif
# 6857 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(int2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6858
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6862
::exit(___);}
#if 0
# 6858
{ 
# 6859
int4 tmp; 
# 6860
__asm__ volatile("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6861
(*retVal) = make_int2(tmp.x, tmp.y); 
# 6862
} 
#endif
# 6864 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(int4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6865
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6869
::exit(___);}
#if 0
# 6865
{ 
# 6866
int4 tmp; 
# 6867
__asm__ volatile("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6868
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6869
} 
#endif
# 6871 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6872
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6876
::exit(___);}
#if 0
# 6872
{ 
# 6873
uint4 tmp; 
# 6874
__asm__ volatile("tex.grad.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6875
(*retVal) = ((unsigned)(tmp.x)); 
# 6876
} 
#endif
# 6878 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6879
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6883
::exit(___);}
#if 0
# 6879
{ 
# 6880
uint4 tmp; 
# 6881
__asm__ volatile("tex.grad.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6882
(*retVal) = make_uint1(tmp.x); 
# 6883
} 
#endif
# 6885 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6886
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6890
::exit(___);}
#if 0
# 6886
{ 
# 6887
uint4 tmp; 
# 6888
__asm__ volatile("tex.grad.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6889
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 6890
} 
#endif
# 6892 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6893
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6897
::exit(___);}
#if 0
# 6893
{ 
# 6894
uint4 tmp; 
# 6895
__asm__ volatile("tex.grad.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6896
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6897
} 
#endif
# 6972 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(float *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6973
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6977
::exit(___);}
#if 0
# 6973
{ 
# 6974
float4 tmp; 
# 6975
__asm__ volatile("tex.grad.a2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6976
(*retVal) = ((float)(tmp.x)); 
# 6977
} 
#endif
# 6979 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(float1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6980
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6984
::exit(___);}
#if 0
# 6980
{ 
# 6981
float4 tmp; 
# 6982
__asm__ volatile("tex.grad.a2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6983
(*retVal) = make_float1(tmp.x); 
# 6984
} 
#endif
# 6986 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(float2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6987
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6991
::exit(___);}
#if 0
# 6987
{ 
# 6988
float4 tmp; 
# 6989
__asm__ volatile("tex.grad.a2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6990
(*retVal) = make_float2(tmp.x, tmp.y); 
# 6991
} 
#endif
# 6993 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void tex2DLayeredGrad(float4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 6994
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 6998
::exit(___);}
#if 0
# 6994
{ 
# 6995
float4 tmp; 
# 6996
__asm__ volatile("tex.grad.a2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (texObject), "r" (layer), "f" (x), "f" (y), "f" (dPdx.x), "f" (dPdx.y), "f" (dPdy.x), "f" (dPdy.y)); 
# 6997
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 6998
} 
#endif
# 7006 "/usr/local/cuda-5.0/include/texture_indirect_functions.h"
template< class T> 
# 7007
__attribute((always_inline)) __attribute__((unused)) static inline T tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 7008
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 7012
::exit(___);}
#if 0
# 7008
{ 
# 7009
T ret; 
# 7010
tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy); 
# 7011
return ret; 
# 7012
} 
#endif
# 70 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(char *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 71
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 83
::exit(___);}
#if 0
# 71
{ 
# 72
int tmp; 
# 73
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 74
__asm__ volatile("suld.b.1d.b8.trap  {%0}, [%1, {%2}];" : "=r" (tmp) : "l" (surfObject), "r" (x)); 
# 75
} else { 
# 76
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 77
__asm__ volatile("suld.b.1d.b8.clamp {%0}, [%1, {%2}];" : "=r" (tmp) : "l" (surfObject), "r" (x)); 
# 78
} else { 
# 79
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 80
__asm__ volatile("suld.b.1d.b8.zero  {%0}, [%1, {%2}];" : "=r" (tmp) : "l" (surfObject), "r" (x)); 
# 81
}  }  }  
# 82
(*retVal) = ((char)tmp); 
# 83
} 
#endif
# 85 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 86
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 98
::exit(___);}
#if 0
# 86
{ 
# 87
int tmp; 
# 88
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 89
__asm__ volatile("suld.b.1d.b8.trap  {%0}, [%1, {%2}];" : "=r" (tmp) : "l" (surfObject), "r" (x)); 
# 90
} else { 
# 91
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 92
__asm__ volatile("suld.b.1d.b8.clamp {%0}, [%1, {%2}];" : "=r" (tmp) : "l" (surfObject), "r" (x)); 
# 93
} else { 
# 94
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 95
__asm__ volatile("suld.b.1d.b8.zero  {%0}, [%1, {%2}];" : "=r" (tmp) : "l" (surfObject), "r" (x)); 
# 96
}  }  }  
# 97
(*retVal) = ((signed char)tmp); 
# 98
} 
#endif
# 100 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 101
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 113
::exit(___);}
#if 0
# 101
{ 
# 102
int1 tmp; 
# 103
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 104
__asm__ volatile("suld.b.1d.b8.trap  {%0}, [%1, {%2}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x)); 
# 105
} else { 
# 106
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 107
__asm__ volatile("suld.b.1d.b8.clamp {%0}, [%1, {%2}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x)); 
# 108
} else { 
# 109
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 110
__asm__ volatile("suld.b.1d.b8.zero  {%0}, [%1, {%2}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x)); 
# 111
}  }  }  
# 112
(*retVal) = make_char1(tmp.x); 
# 113
} 
#endif
# 115 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 116
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 128
::exit(___);}
#if 0
# 116
{ 
# 117
unsigned tmp; 
# 118
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 119
__asm__ volatile("suld.b.1d.b8.trap  {%0}, [%1, {%2}];" : "=r" (tmp) : "l" (surfObject), "r" (x)); 
# 120
} else { 
# 121
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 122
__asm__ volatile("suld.b.1d.b8.clamp {%0}, [%1, {%2}];" : "=r" (tmp) : "l" (surfObject), "r" (x)); 
# 123
} else { 
# 124
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 125
__asm__ volatile("suld.b.1d.b8.zero  {%0}, [%1, {%2}];" : "=r" (tmp) : "l" (surfObject), "r" (x)); 
# 126
}  }  }  
# 127
(*retVal) = ((unsigned char)tmp); 
# 128
} 
#endif
# 130 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 131
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 143
::exit(___);}
#if 0
# 131
{ 
# 132
uint1 tmp; 
# 133
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 134
__asm__ volatile("suld.b.1d.b8.trap  {%0}, [%1, {%2}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x)); 
# 135
} else { 
# 136
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 137
__asm__ volatile("suld.b.1d.b8.clamp {%0}, [%1, {%2}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x)); 
# 138
} else { 
# 139
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 140
__asm__ volatile("suld.b.1d.b8.zero  {%0}, [%1, {%2}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x)); 
# 141
}  }  }  
# 142
(*retVal) = make_uchar1(tmp.x); 
# 143
} 
#endif
# 145 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(short *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 146
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 158
::exit(___);}
#if 0
# 146
{ 
# 147
short tmp; 
# 148
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 149
__asm__ volatile("suld.b.1d.b16.trap  {%0}, [%1, {%2}];" : "=h" (tmp) : "l" (surfObject), "r" (x)); 
# 150
} else { 
# 151
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 152
__asm__ volatile("suld.b.1d.b16.clamp {%0}, [%1, {%2}];" : "=h" (tmp) : "l" (surfObject), "r" (x)); 
# 153
} else { 
# 154
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 155
__asm__ volatile("suld.b.1d.b16.zero  {%0}, [%1, {%2}];" : "=h" (tmp) : "l" (surfObject), "r" (x)); 
# 156
}  }  }  
# 157
(*retVal) = ((short)tmp); 
# 158
} 
#endif
# 160 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 161
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 173
::exit(___);}
#if 0
# 161
{ 
# 162
short1 tmp; 
# 163
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 164
__asm__ volatile("suld.b.1d.b16.trap  {%0}, [%1, {%2}];" : "=h" (tmp.x) : "l" (surfObject), "r" (x)); 
# 165
} else { 
# 166
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 167
__asm__ volatile("suld.b.1d.b16.clamp {%0}, [%1, {%2}];" : "=h" (tmp.x) : "l" (surfObject), "r" (x)); 
# 168
} else { 
# 169
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 170
__asm__ volatile("suld.b.1d.b16.zero  {%0}, [%1, {%2}];" : "=h" (tmp.x) : "l" (surfObject), "r" (x)); 
# 171
}  }  }  
# 172
(*retVal) = make_short1(tmp.x); 
# 173
} 
#endif
# 175 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 176
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 188
::exit(___);}
#if 0
# 176
{ 
# 177
unsigned short tmp; 
# 178
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 179
__asm__ volatile("suld.b.1d.b16.trap  {%0}, [%1, {%2}];" : "=h" (tmp) : "l" (surfObject), "r" (x)); 
# 180
} else { 
# 181
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 182
__asm__ volatile("suld.b.1d.b16.clamp {%0}, [%1, {%2}];" : "=h" (tmp) : "l" (surfObject), "r" (x)); 
# 183
} else { 
# 184
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 185
__asm__ volatile("suld.b.1d.b16.zero  {%0}, [%1, {%2}];" : "=h" (tmp) : "l" (surfObject), "r" (x)); 
# 186
}  }  }  
# 187
(*retVal) = ((unsigned short)tmp); 
# 188
} 
#endif
# 190 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 191
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 203
::exit(___);}
#if 0
# 191
{ 
# 192
ushort1 tmp; 
# 193
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 194
__asm__ volatile("suld.b.1d.b16.trap  {%0}, [%1, {%2}];" : "=h" (tmp.x) : "l" (surfObject), "r" (x)); 
# 195
} else { 
# 196
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 197
__asm__ volatile("suld.b.1d.b16.clamp {%0}, [%1, {%2}];" : "=h" (tmp.x) : "l" (surfObject), "r" (x)); 
# 198
} else { 
# 199
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 200
__asm__ volatile("suld.b.1d.b16.zero  {%0}, [%1, {%2}];" : "=h" (tmp.x) : "l" (surfObject), "r" (x)); 
# 201
}  }  }  
# 202
(*retVal) = make_ushort1(tmp.x); 
# 203
} 
#endif
# 205 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(int *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 206
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 218
::exit(___);}
#if 0
# 206
{ 
# 207
int tmp; 
# 208
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 209
__asm__ volatile("suld.b.1d.b32.trap  {%0}, [%1, {%2}];" : "=r" (tmp) : "l" (surfObject), "r" (x)); 
# 210
} else { 
# 211
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 212
__asm__ volatile("suld.b.1d.b32.clamp {%0}, [%1, {%2}];" : "=r" (tmp) : "l" (surfObject), "r" (x)); 
# 213
} else { 
# 214
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 215
__asm__ volatile("suld.b.1d.b32.zero  {%0}, [%1, {%2}];" : "=r" (tmp) : "l" (surfObject), "r" (x)); 
# 216
}  }  }  
# 217
(*retVal) = ((int)tmp); 
# 218
} 
#endif
# 220 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 221
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 233
::exit(___);}
#if 0
# 221
{ 
# 222
int1 tmp; 
# 223
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 224
__asm__ volatile("suld.b.1d.b32.trap  {%0}, [%1, {%2}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x)); 
# 225
} else { 
# 226
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 227
__asm__ volatile("suld.b.1d.b32.clamp {%0}, [%1, {%2}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x)); 
# 228
} else { 
# 229
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 230
__asm__ volatile("suld.b.1d.b32.zero  {%0}, [%1, {%2}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x)); 
# 231
}  }  }  
# 232
(*retVal) = make_int1(tmp.x); 
# 233
} 
#endif
# 235 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(unsigned *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 236
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 248
::exit(___);}
#if 0
# 236
{ 
# 237
unsigned tmp; 
# 238
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 239
__asm__ volatile("suld.b.1d.b32.trap  {%0}, [%1, {%2}];" : "=r" (tmp) : "l" (surfObject), "r" (x)); 
# 240
} else { 
# 241
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 242
__asm__ volatile("suld.b.1d.b32.clamp {%0}, [%1, {%2}];" : "=r" (tmp) : "l" (surfObject), "r" (x)); 
# 243
} else { 
# 244
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 245
__asm__ volatile("suld.b.1d.b32.zero  {%0}, [%1, {%2}];" : "=r" (tmp) : "l" (surfObject), "r" (x)); 
# 246
}  }  }  
# 247
(*retVal) = ((unsigned)tmp); 
# 248
} 
#endif
# 250 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 251
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 263
::exit(___);}
#if 0
# 251
{ 
# 252
uint1 tmp; 
# 253
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 254
__asm__ volatile("suld.b.1d.b32.trap  {%0}, [%1, {%2}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x)); 
# 255
} else { 
# 256
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 257
__asm__ volatile("suld.b.1d.b32.clamp {%0}, [%1, {%2}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x)); 
# 258
} else { 
# 259
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 260
__asm__ volatile("suld.b.1d.b32.zero  {%0}, [%1, {%2}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x)); 
# 261
}  }  }  
# 262
(*retVal) = make_uint1(tmp.x); 
# 263
} 
#endif
# 265 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(long long *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 266
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 278
::exit(___);}
#if 0
# 266
{ 
# 267
long long tmp; 
# 268
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 269
__asm__ volatile("suld.b.1d.b64.trap  {%0}, [%1, {%2}];" : "=l" (tmp) : "l" (surfObject), "r" (x)); 
# 270
} else { 
# 271
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 272
__asm__ volatile("suld.b.1d.b64.clamp {%0}, [%1, {%2}];" : "=l" (tmp) : "l" (surfObject), "r" (x)); 
# 273
} else { 
# 274
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 275
__asm__ volatile("suld.b.1d.b64.zero  {%0}, [%1, {%2}];" : "=l" (tmp) : "l" (surfObject), "r" (x)); 
# 276
}  }  }  
# 277
(*retVal) = ((long long)tmp); 
# 278
} 
#endif
# 280 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 281
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 293
::exit(___);}
#if 0
# 281
{ 
# 282
longlong1 tmp; 
# 283
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 284
__asm__ volatile("suld.b.1d.b64.trap  {%0}, [%1, {%2}];" : "=l" (tmp.x) : "l" (surfObject), "r" (x)); 
# 285
} else { 
# 286
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 287
__asm__ volatile("suld.b.1d.b64.clamp {%0}, [%1, {%2}];" : "=l" (tmp.x) : "l" (surfObject), "r" (x)); 
# 288
} else { 
# 289
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 290
__asm__ volatile("suld.b.1d.b64.zero  {%0}, [%1, {%2}];" : "=l" (tmp.x) : "l" (surfObject), "r" (x)); 
# 291
}  }  }  
# 292
(*retVal) = make_longlong1(tmp.x); 
# 293
} 
#endif
# 295 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 296
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 308
::exit(___);}
#if 0
# 296
{ 
# 297
unsigned long long tmp; 
# 298
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 299
__asm__ volatile("suld.b.1d.b64.trap  {%0}, [%1, {%2}];" : "=l" (tmp) : "l" (surfObject), "r" (x)); 
# 300
} else { 
# 301
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 302
__asm__ volatile("suld.b.1d.b64.clamp {%0}, [%1, {%2}];" : "=l" (tmp) : "l" (surfObject), "r" (x)); 
# 303
} else { 
# 304
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 305
__asm__ volatile("suld.b.1d.b64.zero  {%0}, [%1, {%2}];" : "=l" (tmp) : "l" (surfObject), "r" (x)); 
# 306
}  }  }  
# 307
(*retVal) = ((unsigned long long)tmp); 
# 308
} 
#endif
# 310 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 311
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 323
::exit(___);}
#if 0
# 311
{ 
# 312
ulonglong1 tmp; 
# 313
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 314
__asm__ volatile("suld.b.1d.b64.trap  {%0}, [%1, {%2}];" : "=l" (tmp.x) : "l" (surfObject), "r" (x)); 
# 315
} else { 
# 316
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 317
__asm__ volatile("suld.b.1d.b64.clamp {%0}, [%1, {%2}];" : "=l" (tmp.x) : "l" (surfObject), "r" (x)); 
# 318
} else { 
# 319
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 320
__asm__ volatile("suld.b.1d.b64.zero  {%0}, [%1, {%2}];" : "=l" (tmp.x) : "l" (surfObject), "r" (x)); 
# 321
}  }  }  
# 322
(*retVal) = make_ulonglong1(tmp.x); 
# 323
} 
#endif
# 325 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(float *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 326
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 338
::exit(___);}
#if 0
# 326
{ 
# 327
float tmp; 
# 328
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 329
__asm__ volatile("suld.b.1d.b32.trap  {%0}, [%1, {%2}];" : "=f" (tmp) : "l" (surfObject), "r" (x)); 
# 330
} else { 
# 331
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 332
__asm__ volatile("suld.b.1d.b32.clamp {%0}, [%1, {%2}];" : "=f" (tmp) : "l" (surfObject), "r" (x)); 
# 333
} else { 
# 334
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 335
__asm__ volatile("suld.b.1d.b32.zero  {%0}, [%1, {%2}];" : "=f" (tmp) : "l" (surfObject), "r" (x)); 
# 336
}  }  }  
# 337
(*retVal) = ((float)tmp); 
# 338
} 
#endif
# 340 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 341
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 353
::exit(___);}
#if 0
# 341
{ 
# 342
float1 tmp; 
# 343
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 344
__asm__ volatile("suld.b.1d.b32.trap  {%0}, [%1, {%2}];" : "=f" (tmp.x) : "l" (surfObject), "r" (x)); 
# 345
} else { 
# 346
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 347
__asm__ volatile("suld.b.1d.b32.clamp {%0}, [%1, {%2}];" : "=f" (tmp.x) : "l" (surfObject), "r" (x)); 
# 348
} else { 
# 349
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 350
__asm__ volatile("suld.b.1d.b32.zero  {%0}, [%1, {%2}];" : "=f" (tmp.x) : "l" (surfObject), "r" (x)); 
# 351
}  }  }  
# 352
(*retVal) = make_float1(tmp.x); 
# 353
} 
#endif
# 361 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 362
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 374
::exit(___);}
#if 0
# 362
{ 
# 363
int2 tmp; 
# 364
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 365
__asm__ volatile("suld.b.1d.v2.b8.trap  {%0, %1}, [%2, {%3}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x)); 
# 366
} else { 
# 367
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 368
__asm__ volatile("suld.b.1d.v2.b8.clamp {%0, %1}, [%2, {%3}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x)); 
# 369
} else { 
# 370
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 371
__asm__ volatile("suld.b.1d.v2.b8.zero  {%0, %1}, [%2, {%3}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x)); 
# 372
}  }  }  
# 373
(*retVal) = make_char2(tmp.x, tmp.y); 
# 374
} 
#endif
# 376 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 377
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 389
::exit(___);}
#if 0
# 377
{ 
# 378
uint2 tmp; 
# 379
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 380
__asm__ volatile("suld.b.1d.v2.b8.trap  {%0, %1}, [%2, {%3}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x)); 
# 381
} else { 
# 382
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 383
__asm__ volatile("suld.b.1d.v2.b8.clamp {%0, %1}, [%2, {%3}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x)); 
# 384
} else { 
# 385
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 386
__asm__ volatile("suld.b.1d.v2.b8.zero  {%0, %1}, [%2, {%3}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x)); 
# 387
}  }  }  
# 388
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 389
} 
#endif
# 391 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 392
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 404
::exit(___);}
#if 0
# 392
{ 
# 393
short2 tmp; 
# 394
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 395
__asm__ volatile("suld.b.1d.v2.b16.trap  {%0, %1}, [%2, {%3}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (x)); 
# 396
} else { 
# 397
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 398
__asm__ volatile("suld.b.1d.v2.b16.clamp {%0, %1}, [%2, {%3}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (x)); 
# 399
} else { 
# 400
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 401
__asm__ volatile("suld.b.1d.v2.b16.zero  {%0, %1}, [%2, {%3}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (x)); 
# 402
}  }  }  
# 403
(*retVal) = make_short2(tmp.x, tmp.y); 
# 404
} 
#endif
# 406 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 407
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 419
::exit(___);}
#if 0
# 407
{ 
# 408
ushort2 tmp; 
# 409
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 410
__asm__ volatile("suld.b.1d.v2.b16.trap  {%0, %1}, [%2, {%3}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (x)); 
# 411
} else { 
# 412
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 413
__asm__ volatile("suld.b.1d.v2.b16.clamp {%0, %1}, [%2, {%3}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (x)); 
# 414
} else { 
# 415
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 416
__asm__ volatile("suld.b.1d.v2.b16.zero  {%0, %1}, [%2, {%3}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (x)); 
# 417
}  }  }  
# 418
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 419
} 
#endif
# 421 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 422
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 434
::exit(___);}
#if 0
# 422
{ 
# 423
int2 tmp; 
# 424
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 425
__asm__ volatile("suld.b.1d.v2.b32.trap  {%0, %1}, [%2, {%3}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x)); 
# 426
} else { 
# 427
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 428
__asm__ volatile("suld.b.1d.v2.b32.clamp {%0, %1}, [%2, {%3}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x)); 
# 429
} else { 
# 430
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 431
__asm__ volatile("suld.b.1d.v2.b32.zero  {%0, %1}, [%2, {%3}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x)); 
# 432
}  }  }  
# 433
(*retVal) = make_int2(tmp.x, tmp.y); 
# 434
} 
#endif
# 436 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 437
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 449
::exit(___);}
#if 0
# 437
{ 
# 438
uint2 tmp; 
# 439
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 440
__asm__ volatile("suld.b.1d.v2.b32.trap  {%0, %1}, [%2, {%3}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x)); 
# 441
} else { 
# 442
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 443
__asm__ volatile("suld.b.1d.v2.b32.clamp {%0, %1}, [%2, {%3}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x)); 
# 444
} else { 
# 445
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 446
__asm__ volatile("suld.b.1d.v2.b32.zero  {%0, %1}, [%2, {%3}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x)); 
# 447
}  }  }  
# 448
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 449
} 
#endif
# 451 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 452
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 464
::exit(___);}
#if 0
# 452
{ 
# 453
longlong2 tmp; 
# 454
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 455
__asm__ volatile("suld.b.1d.v2.b64.trap  {%0, %1}, [%2, {%3}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (x)); 
# 456
} else { 
# 457
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 458
__asm__ volatile("suld.b.1d.v2.b64.clamp {%0, %1}, [%2, {%3}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (x)); 
# 459
} else { 
# 460
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 461
__asm__ volatile("suld.b.1d.v2.b64.zero  {%0, %1}, [%2, {%3}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (x)); 
# 462
}  }  }  
# 463
(*retVal) = make_longlong2(tmp.x, tmp.y); 
# 464
} 
#endif
# 466 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 467
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 479
::exit(___);}
#if 0
# 467
{ 
# 468
ulonglong2 tmp; 
# 469
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 470
__asm__ volatile("suld.b.1d.v2.b64.trap  {%0, %1}, [%2, {%3}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (x)); 
# 471
} else { 
# 472
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 473
__asm__ volatile("suld.b.1d.v2.b64.clamp {%0, %1}, [%2, {%3}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (x)); 
# 474
} else { 
# 475
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 476
__asm__ volatile("suld.b.1d.v2.b64.zero  {%0, %1}, [%2, {%3}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (x)); 
# 477
}  }  }  
# 478
(*retVal) = make_ulonglong2(tmp.x, tmp.y); 
# 479
} 
#endif
# 481 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 482
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 494
::exit(___);}
#if 0
# 482
{ 
# 483
float2 tmp; 
# 484
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 485
__asm__ volatile("suld.b.1d.v2.b32.trap  {%0, %1}, [%2, {%3}];" : "=f" (tmp.x), "=f" (tmp.y) : "l" (surfObject), "r" (x)); 
# 486
} else { 
# 487
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 488
__asm__ volatile("suld.b.1d.v2.b32.clamp {%0, %1}, [%2, {%3}];" : "=f" (tmp.x), "=f" (tmp.y) : "l" (surfObject), "r" (x)); 
# 489
} else { 
# 490
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 491
__asm__ volatile("suld.b.1d.v2.b32.zero  {%0, %1}, [%2, {%3}];" : "=f" (tmp.x), "=f" (tmp.y) : "l" (surfObject), "r" (x)); 
# 492
}  }  }  
# 493
(*retVal) = make_float2(tmp.x, tmp.y); 
# 494
} 
#endif
# 502 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 503
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 515
::exit(___);}
#if 0
# 503
{ 
# 504
int4 tmp; 
# 505
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 506
__asm__ volatile("suld.b.1d.v4.b8.trap  {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x)); 
# 507
} else { 
# 508
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 509
__asm__ volatile("suld.b.1d.v4.b8.clamp {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x)); 
# 510
} else { 
# 511
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 512
__asm__ volatile("suld.b.1d.v4.b8.zero  {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x)); 
# 513
}  }  }  
# 514
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 515
} 
#endif
# 517 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 518
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 530
::exit(___);}
#if 0
# 518
{ 
# 519
uint4 tmp; 
# 520
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 521
__asm__ volatile("suld.b.1d.v4.b8.trap  {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x)); 
# 522
} else { 
# 523
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 524
__asm__ volatile("suld.b.1d.v4.b8.clamp {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x)); 
# 525
} else { 
# 526
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 527
__asm__ volatile("suld.b.1d.v4.b8.zero  {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x)); 
# 528
}  }  }  
# 529
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 530
} 
#endif
# 532 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 533
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 545
::exit(___);}
#if 0
# 533
{ 
# 534
short4 tmp; 
# 535
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 536
__asm__ volatile("suld.b.1d.v4.b16.trap  {%0, %1, %2, %3}, [%4, {%5}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (x)); 
# 537
} else { 
# 538
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 539
__asm__ volatile("suld.b.1d.v4.b16.clamp {%0, %1, %2, %3}, [%4, {%5}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (x)); 
# 540
} else { 
# 541
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 542
__asm__ volatile("suld.b.1d.v4.b16.zero  {%0, %1, %2, %3}, [%4, {%5}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (x)); 
# 543
}  }  }  
# 544
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 545
} 
#endif
# 547 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 548
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 560
::exit(___);}
#if 0
# 548
{ 
# 549
ushort4 tmp; 
# 550
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 551
__asm__ volatile("suld.b.1d.v4.b16.trap  {%0, %1, %2, %3}, [%4, {%5}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (x)); 
# 552
} else { 
# 553
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 554
__asm__ volatile("suld.b.1d.v4.b16.clamp {%0, %1, %2, %3}, [%4, {%5}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (x)); 
# 555
} else { 
# 556
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 557
__asm__ volatile("suld.b.1d.v4.b16.zero  {%0, %1, %2, %3}, [%4, {%5}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (x)); 
# 558
}  }  }  
# 559
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 560
} 
#endif
# 562 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 563
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 575
::exit(___);}
#if 0
# 563
{ 
# 564
int4 tmp; 
# 565
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 566
__asm__ volatile("suld.b.1d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x)); 
# 567
} else { 
# 568
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 569
__asm__ volatile("suld.b.1d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x)); 
# 570
} else { 
# 571
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 572
__asm__ volatile("suld.b.1d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x)); 
# 573
}  }  }  
# 574
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 575
} 
#endif
# 577 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 578
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 590
::exit(___);}
#if 0
# 578
{ 
# 579
uint4 tmp; 
# 580
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 581
__asm__ volatile("suld.b.1d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x)); 
# 582
} else { 
# 583
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 584
__asm__ volatile("suld.b.1d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x)); 
# 585
} else { 
# 586
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 587
__asm__ volatile("suld.b.1d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x)); 
# 588
}  }  }  
# 589
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 590
} 
#endif
# 592 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 593
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
# 605
::exit(___);}
#if 0
# 593
{ 
# 594
float4 tmp; 
# 595
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 596
__asm__ volatile("suld.b.1d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (surfObject), "r" (x)); 
# 597
} else { 
# 598
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 599
__asm__ volatile("suld.b.1d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (surfObject), "r" (x)); 
# 600
} else { 
# 601
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 602
__asm__ volatile("suld.b.1d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (surfObject), "r" (x)); 
# 603
}  }  }  
# 604
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 605
} 
#endif
# 613 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
template< class T> 
# 614
__attribute((always_inline)) __attribute__((unused)) static inline T surf1Dread(cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 615
{int volatile ___ = 1;(void)surfObject;(void)x;(void)boundaryMode;
# 619
::exit(___);}
#if 0
# 615
{ 
# 616
T ret; 
# 617
surf1Dread(&ret, surfObject, x, boundaryMode); 
# 618
return ret; 
# 619
} 
#endif
# 627 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 628
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 640
::exit(___);}
#if 0
# 628
{ 
# 629
int tmp; 
# 630
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 631
__asm__ volatile("suld.b.2d.b8.trap  {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 632
} else { 
# 633
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 634
__asm__ volatile("suld.b.2d.b8.clamp {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 635
} else { 
# 636
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 637
__asm__ volatile("suld.b.2d.b8.zero  {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 638
}  }  }  
# 639
(*retVal) = ((char)tmp); 
# 640
} 
#endif
# 642 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 643
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 655
::exit(___);}
#if 0
# 643
{ 
# 644
int tmp; 
# 645
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 646
__asm__ volatile("suld.b.2d.b8.trap  {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 647
} else { 
# 648
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 649
__asm__ volatile("suld.b.2d.b8.clamp {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 650
} else { 
# 651
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 652
__asm__ volatile("suld.b.2d.b8.zero  {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 653
}  }  }  
# 654
(*retVal) = ((signed char)tmp); 
# 655
} 
#endif
# 657 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 658
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 670
::exit(___);}
#if 0
# 658
{ 
# 659
int1 tmp; 
# 660
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 661
__asm__ volatile("suld.b.2d.b8.trap  {%0}, [%1, {%2, %3}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x), "r" (y)); 
# 662
} else { 
# 663
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 664
__asm__ volatile("suld.b.2d.b8.clamp {%0}, [%1, {%2, %3}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x), "r" (y)); 
# 665
} else { 
# 666
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 667
__asm__ volatile("suld.b.2d.b8.zero  {%0}, [%1, {%2, %3}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x), "r" (y)); 
# 668
}  }  }  
# 669
(*retVal) = make_char1(tmp.x); 
# 670
} 
#endif
# 672 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 673
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 685
::exit(___);}
#if 0
# 673
{ 
# 674
unsigned tmp; 
# 675
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 676
__asm__ volatile("suld.b.2d.b8.trap  {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 677
} else { 
# 678
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 679
__asm__ volatile("suld.b.2d.b8.clamp {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 680
} else { 
# 681
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 682
__asm__ volatile("suld.b.2d.b8.zero  {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 683
}  }  }  
# 684
(*retVal) = ((unsigned char)tmp); 
# 685
} 
#endif
# 687 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 688
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 700
::exit(___);}
#if 0
# 688
{ 
# 689
uint1 tmp; 
# 690
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 691
__asm__ volatile("suld.b.2d.b8.trap  {%0}, [%1, {%2, %3}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x), "r" (y)); 
# 692
} else { 
# 693
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 694
__asm__ volatile("suld.b.2d.b8.clamp {%0}, [%1, {%2, %3}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x), "r" (y)); 
# 695
} else { 
# 696
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 697
__asm__ volatile("suld.b.2d.b8.zero  {%0}, [%1, {%2, %3}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x), "r" (y)); 
# 698
}  }  }  
# 699
(*retVal) = make_uchar1(tmp.x); 
# 700
} 
#endif
# 702 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 703
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 715
::exit(___);}
#if 0
# 703
{ 
# 704
short tmp; 
# 705
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 706
__asm__ volatile("suld.b.2d.b16.trap  {%0}, [%1, {%2, %3}];" : "=h" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 707
} else { 
# 708
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 709
__asm__ volatile("suld.b.2d.b16.clamp {%0}, [%1, {%2, %3}];" : "=h" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 710
} else { 
# 711
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 712
__asm__ volatile("suld.b.2d.b16.zero  {%0}, [%1, {%2, %3}];" : "=h" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 713
}  }  }  
# 714
(*retVal) = ((short)tmp); 
# 715
} 
#endif
# 717 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 718
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 730
::exit(___);}
#if 0
# 718
{ 
# 719
short1 tmp; 
# 720
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 721
__asm__ volatile("suld.b.2d.b16.trap  {%0}, [%1, {%2, %3}];" : "=h" (tmp.x) : "l" (surfObject), "r" (x), "r" (y)); 
# 722
} else { 
# 723
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 724
__asm__ volatile("suld.b.2d.b16.clamp {%0}, [%1, {%2, %3}];" : "=h" (tmp.x) : "l" (surfObject), "r" (x), "r" (y)); 
# 725
} else { 
# 726
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 727
__asm__ volatile("suld.b.2d.b16.zero  {%0}, [%1, {%2, %3}];" : "=h" (tmp.x) : "l" (surfObject), "r" (x), "r" (y)); 
# 728
}  }  }  
# 729
(*retVal) = make_short1(tmp.x); 
# 730
} 
#endif
# 732 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 733
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 745
::exit(___);}
#if 0
# 733
{ 
# 734
unsigned short tmp; 
# 735
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 736
__asm__ volatile("suld.b.2d.b16.trap  {%0}, [%1, {%2, %3}];" : "=h" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 737
} else { 
# 738
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 739
__asm__ volatile("suld.b.2d.b16.clamp {%0}, [%1, {%2, %3}];" : "=h" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 740
} else { 
# 741
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 742
__asm__ volatile("suld.b.2d.b16.zero  {%0}, [%1, {%2, %3}];" : "=h" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 743
}  }  }  
# 744
(*retVal) = ((unsigned short)tmp); 
# 745
} 
#endif
# 747 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 748
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 760
::exit(___);}
#if 0
# 748
{ 
# 749
ushort1 tmp; 
# 750
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 751
__asm__ volatile("suld.b.2d.b16.trap  {%0}, [%1, {%2, %3}];" : "=h" (tmp.x) : "l" (surfObject), "r" (x), "r" (y)); 
# 752
} else { 
# 753
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 754
__asm__ volatile("suld.b.2d.b16.clamp {%0}, [%1, {%2, %3}];" : "=h" (tmp.x) : "l" (surfObject), "r" (x), "r" (y)); 
# 755
} else { 
# 756
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 757
__asm__ volatile("suld.b.2d.b16.zero  {%0}, [%1, {%2, %3}];" : "=h" (tmp.x) : "l" (surfObject), "r" (x), "r" (y)); 
# 758
}  }  }  
# 759
(*retVal) = make_ushort1(tmp.x); 
# 760
} 
#endif
# 762 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 763
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 775
::exit(___);}
#if 0
# 763
{ 
# 764
int tmp; 
# 765
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 766
__asm__ volatile("suld.b.2d.b32.trap  {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 767
} else { 
# 768
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 769
__asm__ volatile("suld.b.2d.b32.clamp {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 770
} else { 
# 771
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 772
__asm__ volatile("suld.b.2d.b32.zero  {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 773
}  }  }  
# 774
(*retVal) = ((int)tmp); 
# 775
} 
#endif
# 777 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 778
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 790
::exit(___);}
#if 0
# 778
{ 
# 779
int1 tmp; 
# 780
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 781
__asm__ volatile("suld.b.2d.b32.trap  {%0}, [%1, {%2, %3}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x), "r" (y)); 
# 782
} else { 
# 783
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 784
__asm__ volatile("suld.b.2d.b32.clamp {%0}, [%1, {%2, %3}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x), "r" (y)); 
# 785
} else { 
# 786
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 787
__asm__ volatile("suld.b.2d.b32.zero  {%0}, [%1, {%2, %3}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x), "r" (y)); 
# 788
}  }  }  
# 789
(*retVal) = make_int1(tmp.x); 
# 790
} 
#endif
# 792 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(unsigned *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 793
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 805
::exit(___);}
#if 0
# 793
{ 
# 794
unsigned tmp; 
# 795
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 796
__asm__ volatile("suld.b.2d.b32.trap  {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 797
} else { 
# 798
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 799
__asm__ volatile("suld.b.2d.b32.clamp {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 800
} else { 
# 801
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 802
__asm__ volatile("suld.b.2d.b32.zero  {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 803
}  }  }  
# 804
(*retVal) = ((unsigned)tmp); 
# 805
} 
#endif
# 807 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 808
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 820
::exit(___);}
#if 0
# 808
{ 
# 809
uint1 tmp; 
# 810
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 811
__asm__ volatile("suld.b.2d.b32.trap  {%0}, [%1, {%2, %3}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x), "r" (y)); 
# 812
} else { 
# 813
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 814
__asm__ volatile("suld.b.2d.b32.clamp {%0}, [%1, {%2, %3}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x), "r" (y)); 
# 815
} else { 
# 816
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 817
__asm__ volatile("suld.b.2d.b32.zero  {%0}, [%1, {%2, %3}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x), "r" (y)); 
# 818
}  }  }  
# 819
(*retVal) = make_uint1(tmp.x); 
# 820
} 
#endif
# 822 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 823
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 835
::exit(___);}
#if 0
# 823
{ 
# 824
long long tmp; 
# 825
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 826
__asm__ volatile("suld.b.2d.b64.trap  {%0}, [%1, {%2, %3}];" : "=l" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 827
} else { 
# 828
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 829
__asm__ volatile("suld.b.2d.b64.clamp {%0}, [%1, {%2, %3}];" : "=l" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 830
} else { 
# 831
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 832
__asm__ volatile("suld.b.2d.b64.zero  {%0}, [%1, {%2, %3}];" : "=l" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 833
}  }  }  
# 834
(*retVal) = ((long long)tmp); 
# 835
} 
#endif
# 837 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 838
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 850
::exit(___);}
#if 0
# 838
{ 
# 839
longlong1 tmp; 
# 840
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 841
__asm__ volatile("suld.b.2d.b64.trap  {%0}, [%1, {%2, %3}];" : "=l" (tmp.x) : "l" (surfObject), "r" (x), "r" (y)); 
# 842
} else { 
# 843
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 844
__asm__ volatile("suld.b.2d.b64.clamp {%0}, [%1, {%2, %3}];" : "=l" (tmp.x) : "l" (surfObject), "r" (x), "r" (y)); 
# 845
} else { 
# 846
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 847
__asm__ volatile("suld.b.2d.b64.zero  {%0}, [%1, {%2, %3}];" : "=l" (tmp.x) : "l" (surfObject), "r" (x), "r" (y)); 
# 848
}  }  }  
# 849
(*retVal) = make_longlong1(tmp.x); 
# 850
} 
#endif
# 852 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 853
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 865
::exit(___);}
#if 0
# 853
{ 
# 854
unsigned long long tmp; 
# 855
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 856
__asm__ volatile("suld.b.2d.b64.trap  {%0}, [%1, {%2, %3}];" : "=l" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 857
} else { 
# 858
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 859
__asm__ volatile("suld.b.2d.b64.clamp {%0}, [%1, {%2, %3}];" : "=l" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 860
} else { 
# 861
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 862
__asm__ volatile("suld.b.2d.b64.zero  {%0}, [%1, {%2, %3}];" : "=l" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 863
}  }  }  
# 864
(*retVal) = ((unsigned long long)tmp); 
# 865
} 
#endif
# 867 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 868
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 880
::exit(___);}
#if 0
# 868
{ 
# 869
ulonglong1 tmp; 
# 870
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 871
__asm__ volatile("suld.b.2d.b64.trap  {%0}, [%1, {%2, %3}];" : "=l" (tmp.x) : "l" (surfObject), "r" (x), "r" (y)); 
# 872
} else { 
# 873
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 874
__asm__ volatile("suld.b.2d.b64.clamp {%0}, [%1, {%2, %3}];" : "=l" (tmp.x) : "l" (surfObject), "r" (x), "r" (y)); 
# 875
} else { 
# 876
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 877
__asm__ volatile("suld.b.2d.b64.zero  {%0}, [%1, {%2, %3}];" : "=l" (tmp.x) : "l" (surfObject), "r" (x), "r" (y)); 
# 878
}  }  }  
# 879
(*retVal) = make_ulonglong1(tmp.x); 
# 880
} 
#endif
# 882 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 883
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 895
::exit(___);}
#if 0
# 883
{ 
# 884
float tmp; 
# 885
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 886
__asm__ volatile("suld.b.2d.b32.trap  {%0}, [%1, {%2, %3}];" : "=f" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 887
} else { 
# 888
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 889
__asm__ volatile("suld.b.2d.b32.clamp {%0}, [%1, {%2, %3}];" : "=f" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 890
} else { 
# 891
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 892
__asm__ volatile("suld.b.2d.b32.zero  {%0}, [%1, {%2, %3}];" : "=f" (tmp) : "l" (surfObject), "r" (x), "r" (y)); 
# 893
}  }  }  
# 894
(*retVal) = ((float)tmp); 
# 895
} 
#endif
# 897 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 898
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 910
::exit(___);}
#if 0
# 898
{ 
# 899
float1 tmp; 
# 900
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 901
__asm__ volatile("suld.b.2d.b32.trap  {%0}, [%1, {%2, %3}];" : "=f" (tmp.x) : "l" (surfObject), "r" (x), "r" (y)); 
# 902
} else { 
# 903
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 904
__asm__ volatile("suld.b.2d.b32.clamp {%0}, [%1, {%2, %3}];" : "=f" (tmp.x) : "l" (surfObject), "r" (x), "r" (y)); 
# 905
} else { 
# 906
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 907
__asm__ volatile("suld.b.2d.b32.zero  {%0}, [%1, {%2, %3}];" : "=f" (tmp.x) : "l" (surfObject), "r" (x), "r" (y)); 
# 908
}  }  }  
# 909
(*retVal) = make_float1(tmp.x); 
# 910
} 
#endif
# 918 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 919
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 931
::exit(___);}
#if 0
# 919
{ 
# 920
int2 tmp; 
# 921
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 922
__asm__ volatile("suld.b.2d.v2.b8.trap  {%0, %1}, [%2, {%3, %4}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x), "r" (y)); 
# 923
} else { 
# 924
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 925
__asm__ volatile("suld.b.2d.v2.b8.clamp {%0, %1}, [%2, {%3, %4}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x), "r" (y)); 
# 926
} else { 
# 927
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 928
__asm__ volatile("suld.b.2d.v2.b8.zero  {%0, %1}, [%2, {%3, %4}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x), "r" (y)); 
# 929
}  }  }  
# 930
(*retVal) = make_char2(tmp.x, tmp.y); 
# 931
} 
#endif
# 933 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 934
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 946
::exit(___);}
#if 0
# 934
{ 
# 935
uint2 tmp; 
# 936
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 937
__asm__ volatile("suld.b.2d.v2.b8.trap  {%0, %1}, [%2, {%3, %4}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x), "r" (y)); 
# 938
} else { 
# 939
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 940
__asm__ volatile("suld.b.2d.v2.b8.clamp {%0, %1}, [%2, {%3, %4}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x), "r" (y)); 
# 941
} else { 
# 942
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 943
__asm__ volatile("suld.b.2d.v2.b8.zero  {%0, %1}, [%2, {%3, %4}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x), "r" (y)); 
# 944
}  }  }  
# 945
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 946
} 
#endif
# 948 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 949
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 961
::exit(___);}
#if 0
# 949
{ 
# 950
short2 tmp; 
# 951
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 952
__asm__ volatile("suld.b.2d.v2.b16.trap  {%0, %1}, [%2, {%3, %4}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (x), "r" (y)); 
# 953
} else { 
# 954
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 955
__asm__ volatile("suld.b.2d.v2.b16.clamp {%0, %1}, [%2, {%3, %4}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (x), "r" (y)); 
# 956
} else { 
# 957
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 958
__asm__ volatile("suld.b.2d.v2.b16.zero  {%0, %1}, [%2, {%3, %4}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (x), "r" (y)); 
# 959
}  }  }  
# 960
(*retVal) = make_short2(tmp.x, tmp.y); 
# 961
} 
#endif
# 963 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 964
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 976
::exit(___);}
#if 0
# 964
{ 
# 965
ushort2 tmp; 
# 966
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 967
__asm__ volatile("suld.b.2d.v2.b16.trap  {%0, %1}, [%2, {%3, %4}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (x), "r" (y)); 
# 968
} else { 
# 969
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 970
__asm__ volatile("suld.b.2d.v2.b16.clamp {%0, %1}, [%2, {%3, %4}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (x), "r" (y)); 
# 971
} else { 
# 972
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 973
__asm__ volatile("suld.b.2d.v2.b16.zero  {%0, %1}, [%2, {%3, %4}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (x), "r" (y)); 
# 974
}  }  }  
# 975
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 976
} 
#endif
# 978 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 979
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 991
::exit(___);}
#if 0
# 979
{ 
# 980
int2 tmp; 
# 981
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 982
__asm__ volatile("suld.b.2d.v2.b32.trap  {%0, %1}, [%2, {%3, %4}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x), "r" (y)); 
# 983
} else { 
# 984
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 985
__asm__ volatile("suld.b.2d.v2.b32.clamp {%0, %1}, [%2, {%3, %4}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x), "r" (y)); 
# 986
} else { 
# 987
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 988
__asm__ volatile("suld.b.2d.v2.b32.zero  {%0, %1}, [%2, {%3, %4}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x), "r" (y)); 
# 989
}  }  }  
# 990
(*retVal) = make_int2(tmp.x, tmp.y); 
# 991
} 
#endif
# 993 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 994
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 1006
::exit(___);}
#if 0
# 994
{ 
# 995
uint2 tmp; 
# 996
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 997
__asm__ volatile("suld.b.2d.v2.b32.trap  {%0, %1}, [%2, {%3, %4}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x), "r" (y)); 
# 998
} else { 
# 999
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1000
__asm__ volatile("suld.b.2d.v2.b32.clamp {%0, %1}, [%2, {%3, %4}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x), "r" (y)); 
# 1001
} else { 
# 1002
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1003
__asm__ volatile("suld.b.2d.v2.b32.zero  {%0, %1}, [%2, {%3, %4}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x), "r" (y)); 
# 1004
}  }  }  
# 1005
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 1006
} 
#endif
# 1008 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1009
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 1021
::exit(___);}
#if 0
# 1009
{ 
# 1010
longlong2 tmp; 
# 1011
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1012
__asm__ volatile("suld.b.2d.v2.b64.trap  {%0, %1}, [%2, {%3, %4}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (x), "r" (y)); 
# 1013
} else { 
# 1014
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1015
__asm__ volatile("suld.b.2d.v2.b64.clamp {%0, %1}, [%2, {%3, %4}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (x), "r" (y)); 
# 1016
} else { 
# 1017
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1018
__asm__ volatile("suld.b.2d.v2.b64.zero  {%0, %1}, [%2, {%3, %4}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (x), "r" (y)); 
# 1019
}  }  }  
# 1020
(*retVal) = make_longlong2(tmp.x, tmp.y); 
# 1021
} 
#endif
# 1023 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1024
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 1036
::exit(___);}
#if 0
# 1024
{ 
# 1025
ulonglong2 tmp; 
# 1026
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1027
__asm__ volatile("suld.b.2d.v2.b64.trap  {%0, %1}, [%2, {%3, %4}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (x), "r" (y)); 
# 1028
} else { 
# 1029
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1030
__asm__ volatile("suld.b.2d.v2.b64.clamp {%0, %1}, [%2, {%3, %4}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (x), "r" (y)); 
# 1031
} else { 
# 1032
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1033
__asm__ volatile("suld.b.2d.v2.b64.zero  {%0, %1}, [%2, {%3, %4}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (x), "r" (y)); 
# 1034
}  }  }  
# 1035
(*retVal) = make_ulonglong2(tmp.x, tmp.y); 
# 1036
} 
#endif
# 1038 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1039
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 1051
::exit(___);}
#if 0
# 1039
{ 
# 1040
float2 tmp; 
# 1041
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1042
__asm__ volatile("suld.b.2d.v2.b32.trap  {%0, %1}, [%2, {%3, %4}];" : "=f" (tmp.x), "=f" (tmp.y) : "l" (surfObject), "r" (x), "r" (y)); 
# 1043
} else { 
# 1044
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1045
__asm__ volatile("suld.b.2d.v2.b32.clamp {%0, %1}, [%2, {%3, %4}];" : "=f" (tmp.x), "=f" (tmp.y) : "l" (surfObject), "r" (x), "r" (y)); 
# 1046
} else { 
# 1047
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1048
__asm__ volatile("suld.b.2d.v2.b32.zero  {%0, %1}, [%2, {%3, %4}];" : "=f" (tmp.x), "=f" (tmp.y) : "l" (surfObject), "r" (x), "r" (y)); 
# 1049
}  }  }  
# 1050
(*retVal) = make_float2(tmp.x, tmp.y); 
# 1051
} 
#endif
# 1059 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1060
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 1072
::exit(___);}
#if 0
# 1060
{ 
# 1061
int4 tmp; 
# 1062
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1063
__asm__ volatile("suld.b.2d.v4.b8.trap  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x), "r" (y)); 
# 1064
} else { 
# 1065
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1066
__asm__ volatile("suld.b.2d.v4.b8.clamp {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x), "r" (y)); 
# 1067
} else { 
# 1068
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1069
__asm__ volatile("suld.b.2d.v4.b8.zero  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x), "r" (y)); 
# 1070
}  }  }  
# 1071
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1072
} 
#endif
# 1074 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1075
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 1087
::exit(___);}
#if 0
# 1075
{ 
# 1076
uint4 tmp; 
# 1077
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1078
__asm__ volatile("suld.b.2d.v4.b8.trap  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x), "r" (y)); 
# 1079
} else { 
# 1080
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1081
__asm__ volatile("suld.b.2d.v4.b8.clamp {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x), "r" (y)); 
# 1082
} else { 
# 1083
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1084
__asm__ volatile("suld.b.2d.v4.b8.zero  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x), "r" (y)); 
# 1085
}  }  }  
# 1086
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1087
} 
#endif
# 1089 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1090
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 1102
::exit(___);}
#if 0
# 1090
{ 
# 1091
short4 tmp; 
# 1092
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1093
__asm__ volatile("suld.b.2d.v4.b16.trap  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (x), "r" (y)); 
# 1094
} else { 
# 1095
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1096
__asm__ volatile("suld.b.2d.v4.b16.clamp {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (x), "r" (y)); 
# 1097
} else { 
# 1098
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1099
__asm__ volatile("suld.b.2d.v4.b16.zero  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (x), "r" (y)); 
# 1100
}  }  }  
# 1101
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1102
} 
#endif
# 1104 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1105
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 1117
::exit(___);}
#if 0
# 1105
{ 
# 1106
ushort4 tmp; 
# 1107
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1108
__asm__ volatile("suld.b.2d.v4.b16.trap  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (x), "r" (y)); 
# 1109
} else { 
# 1110
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1111
__asm__ volatile("suld.b.2d.v4.b16.clamp {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (x), "r" (y)); 
# 1112
} else { 
# 1113
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1114
__asm__ volatile("suld.b.2d.v4.b16.zero  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (x), "r" (y)); 
# 1115
}  }  }  
# 1116
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1117
} 
#endif
# 1119 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1120
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 1132
::exit(___);}
#if 0
# 1120
{ 
# 1121
int4 tmp; 
# 1122
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1123
__asm__ volatile("suld.b.2d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x), "r" (y)); 
# 1124
} else { 
# 1125
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1126
__asm__ volatile("suld.b.2d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x), "r" (y)); 
# 1127
} else { 
# 1128
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1129
__asm__ volatile("suld.b.2d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x), "r" (y)); 
# 1130
}  }  }  
# 1131
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1132
} 
#endif
# 1134 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1135
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 1147
::exit(___);}
#if 0
# 1135
{ 
# 1136
uint4 tmp; 
# 1137
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1138
__asm__ volatile("suld.b.2d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x), "r" (y)); 
# 1139
} else { 
# 1140
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1141
__asm__ volatile("suld.b.2d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x), "r" (y)); 
# 1142
} else { 
# 1143
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1144
__asm__ volatile("suld.b.2d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x), "r" (y)); 
# 1145
}  }  }  
# 1146
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1147
} 
#endif
# 1149 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1150
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 1162
::exit(___);}
#if 0
# 1150
{ 
# 1151
float4 tmp; 
# 1152
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1153
__asm__ volatile("suld.b.2d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (surfObject), "r" (x), "r" (y)); 
# 1154
} else { 
# 1155
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1156
__asm__ volatile("suld.b.2d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (surfObject), "r" (x), "r" (y)); 
# 1157
} else { 
# 1158
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1159
__asm__ volatile("suld.b.2d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (surfObject), "r" (x), "r" (y)); 
# 1160
}  }  }  
# 1161
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1162
} 
#endif
# 1170 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
template< class T> 
# 1171
__attribute((always_inline)) __attribute__((unused)) static inline T surf2Dread(cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1172
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 1176
::exit(___);}
#if 0
# 1172
{ 
# 1173
T ret; 
# 1174
surf2Dread(&ret, surfObject, x, y, boundaryMode); 
# 1175
return ret; 
# 1176
} 
#endif
# 1184 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1185
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1197
::exit(___);}
#if 0
# 1185
{ 
# 1186
int tmp; 
# 1187
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1188
__asm__ volatile("suld.b.3d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1189
} else { 
# 1190
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1191
__asm__ volatile("suld.b.3d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1192
} else { 
# 1193
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1194
__asm__ volatile("suld.b.3d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1195
}  }  }  
# 1196
(*retVal) = ((char)tmp); 
# 1197
} 
#endif
# 1199 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1200
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1212
::exit(___);}
#if 0
# 1200
{ 
# 1201
int tmp; 
# 1202
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1203
__asm__ volatile("suld.b.3d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1204
} else { 
# 1205
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1206
__asm__ volatile("suld.b.3d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1207
} else { 
# 1208
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1209
__asm__ volatile("suld.b.3d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1210
}  }  }  
# 1211
(*retVal) = ((signed char)tmp); 
# 1212
} 
#endif
# 1214 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1215
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1227
::exit(___);}
#if 0
# 1215
{ 
# 1216
int1 tmp; 
# 1217
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1218
__asm__ volatile("suld.b.3d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1219
} else { 
# 1220
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1221
__asm__ volatile("suld.b.3d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1222
} else { 
# 1223
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1224
__asm__ volatile("suld.b.3d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1225
}  }  }  
# 1226
(*retVal) = make_char1(tmp.x); 
# 1227
} 
#endif
# 1229 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1230
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1242
::exit(___);}
#if 0
# 1230
{ 
# 1231
unsigned tmp; 
# 1232
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1233
__asm__ volatile("suld.b.3d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1234
} else { 
# 1235
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1236
__asm__ volatile("suld.b.3d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1237
} else { 
# 1238
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1239
__asm__ volatile("suld.b.3d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1240
}  }  }  
# 1241
(*retVal) = ((unsigned char)tmp); 
# 1242
} 
#endif
# 1244 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1245
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1257
::exit(___);}
#if 0
# 1245
{ 
# 1246
uint1 tmp; 
# 1247
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1248
__asm__ volatile("suld.b.3d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1249
} else { 
# 1250
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1251
__asm__ volatile("suld.b.3d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1252
} else { 
# 1253
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1254
__asm__ volatile("suld.b.3d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1255
}  }  }  
# 1256
(*retVal) = make_uchar1(tmp.x); 
# 1257
} 
#endif
# 1259 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1260
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1272
::exit(___);}
#if 0
# 1260
{ 
# 1261
short tmp; 
# 1262
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1263
__asm__ volatile("suld.b.3d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1264
} else { 
# 1265
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1266
__asm__ volatile("suld.b.3d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1267
} else { 
# 1268
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1269
__asm__ volatile("suld.b.3d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1270
}  }  }  
# 1271
(*retVal) = ((short)tmp); 
# 1272
} 
#endif
# 1274 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1275
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1287
::exit(___);}
#if 0
# 1275
{ 
# 1276
short1 tmp; 
# 1277
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1278
__asm__ volatile("suld.b.3d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp.x) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1279
} else { 
# 1280
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1281
__asm__ volatile("suld.b.3d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp.x) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1282
} else { 
# 1283
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1284
__asm__ volatile("suld.b.3d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp.x) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1285
}  }  }  
# 1286
(*retVal) = make_short1(tmp.x); 
# 1287
} 
#endif
# 1289 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1290
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1302
::exit(___);}
#if 0
# 1290
{ 
# 1291
unsigned short tmp; 
# 1292
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1293
__asm__ volatile("suld.b.3d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1294
} else { 
# 1295
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1296
__asm__ volatile("suld.b.3d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1297
} else { 
# 1298
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1299
__asm__ volatile("suld.b.3d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1300
}  }  }  
# 1301
(*retVal) = ((unsigned short)tmp); 
# 1302
} 
#endif
# 1304 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1305
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1317
::exit(___);}
#if 0
# 1305
{ 
# 1306
ushort1 tmp; 
# 1307
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1308
__asm__ volatile("suld.b.3d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp.x) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1309
} else { 
# 1310
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1311
__asm__ volatile("suld.b.3d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp.x) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1312
} else { 
# 1313
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1314
__asm__ volatile("suld.b.3d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp.x) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1315
}  }  }  
# 1316
(*retVal) = make_ushort1(tmp.x); 
# 1317
} 
#endif
# 1319 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1320
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1332
::exit(___);}
#if 0
# 1320
{ 
# 1321
int tmp; 
# 1322
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1323
__asm__ volatile("suld.b.3d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1324
} else { 
# 1325
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1326
__asm__ volatile("suld.b.3d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1327
} else { 
# 1328
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1329
__asm__ volatile("suld.b.3d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1330
}  }  }  
# 1331
(*retVal) = ((int)tmp); 
# 1332
} 
#endif
# 1334 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1335
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1347
::exit(___);}
#if 0
# 1335
{ 
# 1336
int1 tmp; 
# 1337
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1338
__asm__ volatile("suld.b.3d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1339
} else { 
# 1340
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1341
__asm__ volatile("suld.b.3d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1342
} else { 
# 1343
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1344
__asm__ volatile("suld.b.3d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1345
}  }  }  
# 1346
(*retVal) = make_int1(tmp.x); 
# 1347
} 
#endif
# 1349 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(unsigned *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1350
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1362
::exit(___);}
#if 0
# 1350
{ 
# 1351
unsigned tmp; 
# 1352
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1353
__asm__ volatile("suld.b.3d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1354
} else { 
# 1355
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1356
__asm__ volatile("suld.b.3d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1357
} else { 
# 1358
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1359
__asm__ volatile("suld.b.3d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1360
}  }  }  
# 1361
(*retVal) = ((unsigned)tmp); 
# 1362
} 
#endif
# 1364 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1365
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1377
::exit(___);}
#if 0
# 1365
{ 
# 1366
uint1 tmp; 
# 1367
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1368
__asm__ volatile("suld.b.3d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1369
} else { 
# 1370
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1371
__asm__ volatile("suld.b.3d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1372
} else { 
# 1373
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1374
__asm__ volatile("suld.b.3d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1375
}  }  }  
# 1376
(*retVal) = make_uint1(tmp.x); 
# 1377
} 
#endif
# 1379 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1380
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1392
::exit(___);}
#if 0
# 1380
{ 
# 1381
long long tmp; 
# 1382
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1383
__asm__ volatile("suld.b.3d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1384
} else { 
# 1385
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1386
__asm__ volatile("suld.b.3d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1387
} else { 
# 1388
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1389
__asm__ volatile("suld.b.3d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1390
}  }  }  
# 1391
(*retVal) = ((long long)tmp); 
# 1392
} 
#endif
# 1394 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1395
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1407
::exit(___);}
#if 0
# 1395
{ 
# 1396
longlong1 tmp; 
# 1397
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1398
__asm__ volatile("suld.b.3d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp.x) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1399
} else { 
# 1400
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1401
__asm__ volatile("suld.b.3d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp.x) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1402
} else { 
# 1403
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1404
__asm__ volatile("suld.b.3d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp.x) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1405
}  }  }  
# 1406
(*retVal) = make_longlong1(tmp.x); 
# 1407
} 
#endif
# 1409 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1410
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1422
::exit(___);}
#if 0
# 1410
{ 
# 1411
unsigned long long tmp; 
# 1412
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1413
__asm__ volatile("suld.b.3d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1414
} else { 
# 1415
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1416
__asm__ volatile("suld.b.3d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1417
} else { 
# 1418
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1419
__asm__ volatile("suld.b.3d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1420
}  }  }  
# 1421
(*retVal) = ((unsigned long long)tmp); 
# 1422
} 
#endif
# 1424 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1425
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1437
::exit(___);}
#if 0
# 1425
{ 
# 1426
ulonglong1 tmp; 
# 1427
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1428
__asm__ volatile("suld.b.3d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp.x) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1429
} else { 
# 1430
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1431
__asm__ volatile("suld.b.3d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp.x) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1432
} else { 
# 1433
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1434
__asm__ volatile("suld.b.3d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp.x) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1435
}  }  }  
# 1436
(*retVal) = make_ulonglong1(tmp.x); 
# 1437
} 
#endif
# 1439 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1440
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1452
::exit(___);}
#if 0
# 1440
{ 
# 1441
float tmp; 
# 1442
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1443
__asm__ volatile("suld.b.3d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=f" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1444
} else { 
# 1445
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1446
__asm__ volatile("suld.b.3d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=f" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1447
} else { 
# 1448
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1449
__asm__ volatile("suld.b.3d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=f" (tmp) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1450
}  }  }  
# 1451
(*retVal) = ((float)tmp); 
# 1452
} 
#endif
# 1454 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1455
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1467
::exit(___);}
#if 0
# 1455
{ 
# 1456
float1 tmp; 
# 1457
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1458
__asm__ volatile("suld.b.3d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=f" (tmp.x) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1459
} else { 
# 1460
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1461
__asm__ volatile("suld.b.3d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=f" (tmp.x) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1462
} else { 
# 1463
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1464
__asm__ volatile("suld.b.3d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=f" (tmp.x) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1465
}  }  }  
# 1466
(*retVal) = make_float1(tmp.x); 
# 1467
} 
#endif
# 1475 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1476
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1488
::exit(___);}
#if 0
# 1476
{ 
# 1477
int2 tmp; 
# 1478
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1479
__asm__ volatile("suld.b.3d.v2.b8.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1480
} else { 
# 1481
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1482
__asm__ volatile("suld.b.3d.v2.b8.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1483
} else { 
# 1484
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1485
__asm__ volatile("suld.b.3d.v2.b8.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1486
}  }  }  
# 1487
(*retVal) = make_char2(tmp.x, tmp.y); 
# 1488
} 
#endif
# 1490 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1491
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1503
::exit(___);}
#if 0
# 1491
{ 
# 1492
uint2 tmp; 
# 1493
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1494
__asm__ volatile("suld.b.3d.v2.b8.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1495
} else { 
# 1496
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1497
__asm__ volatile("suld.b.3d.v2.b8.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1498
} else { 
# 1499
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1500
__asm__ volatile("suld.b.3d.v2.b8.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1501
}  }  }  
# 1502
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 1503
} 
#endif
# 1505 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1506
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1518
::exit(___);}
#if 0
# 1506
{ 
# 1507
short2 tmp; 
# 1508
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1509
__asm__ volatile("suld.b.3d.v2.b16.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1510
} else { 
# 1511
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1512
__asm__ volatile("suld.b.3d.v2.b16.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1513
} else { 
# 1514
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1515
__asm__ volatile("suld.b.3d.v2.b16.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1516
}  }  }  
# 1517
(*retVal) = make_short2(tmp.x, tmp.y); 
# 1518
} 
#endif
# 1520 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1521
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1533
::exit(___);}
#if 0
# 1521
{ 
# 1522
ushort2 tmp; 
# 1523
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1524
__asm__ volatile("suld.b.3d.v2.b16.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1525
} else { 
# 1526
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1527
__asm__ volatile("suld.b.3d.v2.b16.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1528
} else { 
# 1529
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1530
__asm__ volatile("suld.b.3d.v2.b16.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1531
}  }  }  
# 1532
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 1533
} 
#endif
# 1535 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1536
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1548
::exit(___);}
#if 0
# 1536
{ 
# 1537
int2 tmp; 
# 1538
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1539
__asm__ volatile("suld.b.3d.v2.b32.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1540
} else { 
# 1541
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1542
__asm__ volatile("suld.b.3d.v2.b32.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1543
} else { 
# 1544
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1545
__asm__ volatile("suld.b.3d.v2.b32.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1546
}  }  }  
# 1547
(*retVal) = make_int2(tmp.x, tmp.y); 
# 1548
} 
#endif
# 1550 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1551
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1563
::exit(___);}
#if 0
# 1551
{ 
# 1552
uint2 tmp; 
# 1553
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1554
__asm__ volatile("suld.b.3d.v2.b32.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1555
} else { 
# 1556
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1557
__asm__ volatile("suld.b.3d.v2.b32.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1558
} else { 
# 1559
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1560
__asm__ volatile("suld.b.3d.v2.b32.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1561
}  }  }  
# 1562
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 1563
} 
#endif
# 1565 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1566
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1578
::exit(___);}
#if 0
# 1566
{ 
# 1567
longlong2 tmp; 
# 1568
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1569
__asm__ volatile("suld.b.3d.v2.b64.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1570
} else { 
# 1571
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1572
__asm__ volatile("suld.b.3d.v2.b64.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1573
} else { 
# 1574
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1575
__asm__ volatile("suld.b.3d.v2.b64.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1576
}  }  }  
# 1577
(*retVal) = make_longlong2(tmp.x, tmp.y); 
# 1578
} 
#endif
# 1580 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1581
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1593
::exit(___);}
#if 0
# 1581
{ 
# 1582
ulonglong2 tmp; 
# 1583
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1584
__asm__ volatile("suld.b.3d.v2.b64.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1585
} else { 
# 1586
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1587
__asm__ volatile("suld.b.3d.v2.b64.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1588
} else { 
# 1589
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1590
__asm__ volatile("suld.b.3d.v2.b64.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1591
}  }  }  
# 1592
(*retVal) = make_ulonglong2(tmp.x, tmp.y); 
# 1593
} 
#endif
# 1595 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1596
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1608
::exit(___);}
#if 0
# 1596
{ 
# 1597
float2 tmp; 
# 1598
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1599
__asm__ volatile("suld.b.3d.v2.b32.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=f" (tmp.x), "=f" (tmp.y) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1600
} else { 
# 1601
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1602
__asm__ volatile("suld.b.3d.v2.b32.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=f" (tmp.x), "=f" (tmp.y) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1603
} else { 
# 1604
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1605
__asm__ volatile("suld.b.3d.v2.b32.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=f" (tmp.x), "=f" (tmp.y) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1606
}  }  }  
# 1607
(*retVal) = make_float2(tmp.x, tmp.y); 
# 1608
} 
#endif
# 1616 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1617
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1629
::exit(___);}
#if 0
# 1617
{ 
# 1618
int4 tmp; 
# 1619
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1620
__asm__ volatile("suld.b.3d.v4.b8.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1621
} else { 
# 1622
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1623
__asm__ volatile("suld.b.3d.v4.b8.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1624
} else { 
# 1625
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1626
__asm__ volatile("suld.b.3d.v4.b8.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1627
}  }  }  
# 1628
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1629
} 
#endif
# 1631 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1632
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1644
::exit(___);}
#if 0
# 1632
{ 
# 1633
uint4 tmp; 
# 1634
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1635
__asm__ volatile("suld.b.3d.v4.b8.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1636
} else { 
# 1637
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1638
__asm__ volatile("suld.b.3d.v4.b8.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1639
} else { 
# 1640
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1641
__asm__ volatile("suld.b.3d.v4.b8.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1642
}  }  }  
# 1643
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1644
} 
#endif
# 1646 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1647
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1659
::exit(___);}
#if 0
# 1647
{ 
# 1648
short4 tmp; 
# 1649
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1650
__asm__ volatile("suld.b.3d.v4.b16.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1651
} else { 
# 1652
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1653
__asm__ volatile("suld.b.3d.v4.b16.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1654
} else { 
# 1655
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1656
__asm__ volatile("suld.b.3d.v4.b16.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1657
}  }  }  
# 1658
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1659
} 
#endif
# 1661 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1662
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1674
::exit(___);}
#if 0
# 1662
{ 
# 1663
ushort4 tmp; 
# 1664
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1665
__asm__ volatile("suld.b.3d.v4.b16.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1666
} else { 
# 1667
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1668
__asm__ volatile("suld.b.3d.v4.b16.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1669
} else { 
# 1670
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1671
__asm__ volatile("suld.b.3d.v4.b16.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1672
}  }  }  
# 1673
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1674
} 
#endif
# 1676 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1677
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1689
::exit(___);}
#if 0
# 1677
{ 
# 1678
int4 tmp; 
# 1679
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1680
__asm__ volatile("suld.b.3d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1681
} else { 
# 1682
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1683
__asm__ volatile("suld.b.3d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1684
} else { 
# 1685
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1686
__asm__ volatile("suld.b.3d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1687
}  }  }  
# 1688
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1689
} 
#endif
# 1691 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1692
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1704
::exit(___);}
#if 0
# 1692
{ 
# 1693
uint4 tmp; 
# 1694
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1695
__asm__ volatile("suld.b.3d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1696
} else { 
# 1697
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1698
__asm__ volatile("suld.b.3d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1699
} else { 
# 1700
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1701
__asm__ volatile("suld.b.3d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1702
}  }  }  
# 1703
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1704
} 
#endif
# 1706 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1707
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1719
::exit(___);}
#if 0
# 1707
{ 
# 1708
float4 tmp; 
# 1709
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1710
__asm__ volatile("suld.b.3d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1711
} else { 
# 1712
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1713
__asm__ volatile("suld.b.3d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1714
} else { 
# 1715
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1716
__asm__ volatile("suld.b.3d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (surfObject), "r" (x), "r" (y), "r" (z)); 
# 1717
}  }  }  
# 1718
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 1719
} 
#endif
# 1727 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
template< class T> 
# 1728
__attribute((always_inline)) __attribute__((unused)) static inline T surf3Dread(cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1729
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 1733
::exit(___);}
#if 0
# 1729
{ 
# 1730
T ret; 
# 1731
surf3Dread(&ret, surfObject, x, y, z, boundaryMode); 
# 1732
return ret; 
# 1733
} 
#endif
# 1741 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(char *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1742
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1754
::exit(___);}
#if 0
# 1742
{ 
# 1743
int tmp; 
# 1744
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1745
__asm__ volatile("suld.b.a1d.b8.trap  {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1746
} else { 
# 1747
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1748
__asm__ volatile("suld.b.a1d.b8.clamp {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1749
} else { 
# 1750
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1751
__asm__ volatile("suld.b.a1d.b8.zero  {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1752
}  }  }  
# 1753
(*retVal) = ((char)tmp); 
# 1754
} 
#endif
# 1756 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1757
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1769
::exit(___);}
#if 0
# 1757
{ 
# 1758
int tmp; 
# 1759
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1760
__asm__ volatile("suld.b.a1d.b8.trap  {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1761
} else { 
# 1762
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1763
__asm__ volatile("suld.b.a1d.b8.clamp {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1764
} else { 
# 1765
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1766
__asm__ volatile("suld.b.a1d.b8.zero  {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1767
}  }  }  
# 1768
(*retVal) = ((signed char)tmp); 
# 1769
} 
#endif
# 1771 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1772
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1784
::exit(___);}
#if 0
# 1772
{ 
# 1773
int1 tmp; 
# 1774
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1775
__asm__ volatile("suld.b.a1d.b8.trap  {%0}, [%1, {%2, %3}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1776
} else { 
# 1777
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1778
__asm__ volatile("suld.b.a1d.b8.clamp {%0}, [%1, {%2, %3}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1779
} else { 
# 1780
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1781
__asm__ volatile("suld.b.a1d.b8.zero  {%0}, [%1, {%2, %3}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1782
}  }  }  
# 1783
(*retVal) = make_char1(tmp.x); 
# 1784
} 
#endif
# 1786 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1787
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1799
::exit(___);}
#if 0
# 1787
{ 
# 1788
unsigned tmp; 
# 1789
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1790
__asm__ volatile("suld.b.a1d.b8.trap  {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1791
} else { 
# 1792
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1793
__asm__ volatile("suld.b.a1d.b8.clamp {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1794
} else { 
# 1795
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1796
__asm__ volatile("suld.b.a1d.b8.zero  {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1797
}  }  }  
# 1798
(*retVal) = ((unsigned char)tmp); 
# 1799
} 
#endif
# 1801 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1802
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1814
::exit(___);}
#if 0
# 1802
{ 
# 1803
uint1 tmp; 
# 1804
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1805
__asm__ volatile("suld.b.a1d.b8.trap  {%0}, [%1, {%2, %3}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1806
} else { 
# 1807
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1808
__asm__ volatile("suld.b.a1d.b8.clamp {%0}, [%1, {%2, %3}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1809
} else { 
# 1810
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1811
__asm__ volatile("suld.b.a1d.b8.zero  {%0}, [%1, {%2, %3}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1812
}  }  }  
# 1813
(*retVal) = make_uchar1(tmp.x); 
# 1814
} 
#endif
# 1816 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(short *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1817
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1829
::exit(___);}
#if 0
# 1817
{ 
# 1818
short tmp; 
# 1819
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1820
__asm__ volatile("suld.b.a1d.b16.trap  {%0}, [%1, {%2, %3}];" : "=h" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1821
} else { 
# 1822
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1823
__asm__ volatile("suld.b.a1d.b16.clamp {%0}, [%1, {%2, %3}];" : "=h" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1824
} else { 
# 1825
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1826
__asm__ volatile("suld.b.a1d.b16.zero  {%0}, [%1, {%2, %3}];" : "=h" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1827
}  }  }  
# 1828
(*retVal) = ((short)tmp); 
# 1829
} 
#endif
# 1831 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1832
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1844
::exit(___);}
#if 0
# 1832
{ 
# 1833
short1 tmp; 
# 1834
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1835
__asm__ volatile("suld.b.a1d.b16.trap  {%0}, [%1, {%2, %3}];" : "=h" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1836
} else { 
# 1837
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1838
__asm__ volatile("suld.b.a1d.b16.clamp {%0}, [%1, {%2, %3}];" : "=h" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1839
} else { 
# 1840
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1841
__asm__ volatile("suld.b.a1d.b16.zero  {%0}, [%1, {%2, %3}];" : "=h" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1842
}  }  }  
# 1843
(*retVal) = make_short1(tmp.x); 
# 1844
} 
#endif
# 1846 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1847
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1859
::exit(___);}
#if 0
# 1847
{ 
# 1848
unsigned short tmp; 
# 1849
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1850
__asm__ volatile("suld.b.a1d.b16.trap  {%0}, [%1, {%2, %3}];" : "=h" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1851
} else { 
# 1852
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1853
__asm__ volatile("suld.b.a1d.b16.clamp {%0}, [%1, {%2, %3}];" : "=h" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1854
} else { 
# 1855
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1856
__asm__ volatile("suld.b.a1d.b16.zero  {%0}, [%1, {%2, %3}];" : "=h" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1857
}  }  }  
# 1858
(*retVal) = ((unsigned short)tmp); 
# 1859
} 
#endif
# 1861 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1862
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1874
::exit(___);}
#if 0
# 1862
{ 
# 1863
ushort1 tmp; 
# 1864
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1865
__asm__ volatile("suld.b.a1d.b16.trap  {%0}, [%1, {%2, %3}];" : "=h" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1866
} else { 
# 1867
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1868
__asm__ volatile("suld.b.a1d.b16.clamp {%0}, [%1, {%2, %3}];" : "=h" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1869
} else { 
# 1870
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1871
__asm__ volatile("suld.b.a1d.b16.zero  {%0}, [%1, {%2, %3}];" : "=h" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1872
}  }  }  
# 1873
(*retVal) = make_ushort1(tmp.x); 
# 1874
} 
#endif
# 1876 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(int *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1877
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1889
::exit(___);}
#if 0
# 1877
{ 
# 1878
int tmp; 
# 1879
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1880
__asm__ volatile("suld.b.a1d.b32.trap  {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1881
} else { 
# 1882
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1883
__asm__ volatile("suld.b.a1d.b32.clamp {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1884
} else { 
# 1885
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1886
__asm__ volatile("suld.b.a1d.b32.zero  {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1887
}  }  }  
# 1888
(*retVal) = ((int)tmp); 
# 1889
} 
#endif
# 1891 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1892
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1904
::exit(___);}
#if 0
# 1892
{ 
# 1893
int1 tmp; 
# 1894
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1895
__asm__ volatile("suld.b.a1d.b32.trap  {%0}, [%1, {%2, %3}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1896
} else { 
# 1897
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1898
__asm__ volatile("suld.b.a1d.b32.clamp {%0}, [%1, {%2, %3}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1899
} else { 
# 1900
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1901
__asm__ volatile("suld.b.a1d.b32.zero  {%0}, [%1, {%2, %3}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1902
}  }  }  
# 1903
(*retVal) = make_int1(tmp.x); 
# 1904
} 
#endif
# 1906 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(unsigned *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1907
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1919
::exit(___);}
#if 0
# 1907
{ 
# 1908
unsigned tmp; 
# 1909
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1910
__asm__ volatile("suld.b.a1d.b32.trap  {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1911
} else { 
# 1912
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1913
__asm__ volatile("suld.b.a1d.b32.clamp {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1914
} else { 
# 1915
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1916
__asm__ volatile("suld.b.a1d.b32.zero  {%0}, [%1, {%2, %3}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1917
}  }  }  
# 1918
(*retVal) = ((unsigned)tmp); 
# 1919
} 
#endif
# 1921 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1922
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1934
::exit(___);}
#if 0
# 1922
{ 
# 1923
uint1 tmp; 
# 1924
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1925
__asm__ volatile("suld.b.a1d.b32.trap  {%0}, [%1, {%2, %3}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1926
} else { 
# 1927
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1928
__asm__ volatile("suld.b.a1d.b32.clamp {%0}, [%1, {%2, %3}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1929
} else { 
# 1930
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1931
__asm__ volatile("suld.b.a1d.b32.zero  {%0}, [%1, {%2, %3}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1932
}  }  }  
# 1933
(*retVal) = make_uint1(tmp.x); 
# 1934
} 
#endif
# 1936 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1937
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1949
::exit(___);}
#if 0
# 1937
{ 
# 1938
long long tmp; 
# 1939
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1940
__asm__ volatile("suld.b.a1d.b64.trap  {%0}, [%1, {%2, %3}];" : "=l" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1941
} else { 
# 1942
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1943
__asm__ volatile("suld.b.a1d.b64.clamp {%0}, [%1, {%2, %3}];" : "=l" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1944
} else { 
# 1945
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1946
__asm__ volatile("suld.b.a1d.b64.zero  {%0}, [%1, {%2, %3}];" : "=l" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1947
}  }  }  
# 1948
(*retVal) = ((long long)tmp); 
# 1949
} 
#endif
# 1951 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1952
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1964
::exit(___);}
#if 0
# 1952
{ 
# 1953
longlong1 tmp; 
# 1954
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1955
__asm__ volatile("suld.b.a1d.b64.trap  {%0}, [%1, {%2, %3}];" : "=l" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1956
} else { 
# 1957
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1958
__asm__ volatile("suld.b.a1d.b64.clamp {%0}, [%1, {%2, %3}];" : "=l" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1959
} else { 
# 1960
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1961
__asm__ volatile("suld.b.a1d.b64.zero  {%0}, [%1, {%2, %3}];" : "=l" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1962
}  }  }  
# 1963
(*retVal) = make_longlong1(tmp.x); 
# 1964
} 
#endif
# 1966 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1967
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1979
::exit(___);}
#if 0
# 1967
{ 
# 1968
unsigned long long tmp; 
# 1969
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1970
__asm__ volatile("suld.b.a1d.b64.trap  {%0}, [%1, {%2, %3}];" : "=l" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1971
} else { 
# 1972
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1973
__asm__ volatile("suld.b.a1d.b64.clamp {%0}, [%1, {%2, %3}];" : "=l" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1974
} else { 
# 1975
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1976
__asm__ volatile("suld.b.a1d.b64.zero  {%0}, [%1, {%2, %3}];" : "=l" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1977
}  }  }  
# 1978
(*retVal) = ((unsigned long long)tmp); 
# 1979
} 
#endif
# 1981 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1982
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 1994
::exit(___);}
#if 0
# 1982
{ 
# 1983
ulonglong1 tmp; 
# 1984
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 1985
__asm__ volatile("suld.b.a1d.b64.trap  {%0}, [%1, {%2, %3}];" : "=l" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1986
} else { 
# 1987
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 1988
__asm__ volatile("suld.b.a1d.b64.clamp {%0}, [%1, {%2, %3}];" : "=l" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1989
} else { 
# 1990
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 1991
__asm__ volatile("suld.b.a1d.b64.zero  {%0}, [%1, {%2, %3}];" : "=l" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x)); 
# 1992
}  }  }  
# 1993
(*retVal) = make_ulonglong1(tmp.x); 
# 1994
} 
#endif
# 1996 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(float *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 1997
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2009
::exit(___);}
#if 0
# 1997
{ 
# 1998
float tmp; 
# 1999
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2000
__asm__ volatile("suld.b.a1d.b32.trap  {%0}, [%1, {%2, %3}];" : "=f" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2001
} else { 
# 2002
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2003
__asm__ volatile("suld.b.a1d.b32.clamp {%0}, [%1, {%2, %3}];" : "=f" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2004
} else { 
# 2005
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2006
__asm__ volatile("suld.b.a1d.b32.zero  {%0}, [%1, {%2, %3}];" : "=f" (tmp) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2007
}  }  }  
# 2008
(*retVal) = ((float)tmp); 
# 2009
} 
#endif
# 2011 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2012
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2024
::exit(___);}
#if 0
# 2012
{ 
# 2013
float1 tmp; 
# 2014
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2015
__asm__ volatile("suld.b.a1d.b32.trap  {%0}, [%1, {%2, %3}];" : "=f" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2016
} else { 
# 2017
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2018
__asm__ volatile("suld.b.a1d.b32.clamp {%0}, [%1, {%2, %3}];" : "=f" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2019
} else { 
# 2020
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2021
__asm__ volatile("suld.b.a1d.b32.zero  {%0}, [%1, {%2, %3}];" : "=f" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2022
}  }  }  
# 2023
(*retVal) = make_float1(tmp.x); 
# 2024
} 
#endif
# 2032 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2033
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2045
::exit(___);}
#if 0
# 2033
{ 
# 2034
int2 tmp; 
# 2035
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2036
__asm__ volatile("suld.b.a1d.v2.b8.trap  {%0, %1}, [%2, {%3, %4}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2037
} else { 
# 2038
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2039
__asm__ volatile("suld.b.a1d.v2.b8.clamp {%0, %1}, [%2, {%3, %4}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2040
} else { 
# 2041
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2042
__asm__ volatile("suld.b.a1d.v2.b8.zero  {%0, %1}, [%2, {%3, %4}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2043
}  }  }  
# 2044
(*retVal) = make_char2(tmp.x, tmp.y); 
# 2045
} 
#endif
# 2047 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2048
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2060
::exit(___);}
#if 0
# 2048
{ 
# 2049
uint2 tmp; 
# 2050
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2051
__asm__ volatile("suld.b.a1d.v2.b8.trap  {%0, %1}, [%2, {%3, %4}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2052
} else { 
# 2053
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2054
__asm__ volatile("suld.b.a1d.v2.b8.clamp {%0, %1}, [%2, {%3, %4}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2055
} else { 
# 2056
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2057
__asm__ volatile("suld.b.a1d.v2.b8.zero  {%0, %1}, [%2, {%3, %4}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2058
}  }  }  
# 2059
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 2060
} 
#endif
# 2062 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2063
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2075
::exit(___);}
#if 0
# 2063
{ 
# 2064
short2 tmp; 
# 2065
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2066
__asm__ volatile("suld.b.a1d.v2.b16.trap  {%0, %1}, [%2, {%3, %4}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2067
} else { 
# 2068
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2069
__asm__ volatile("suld.b.a1d.v2.b16.clamp {%0, %1}, [%2, {%3, %4}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2070
} else { 
# 2071
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2072
__asm__ volatile("suld.b.a1d.v2.b16.zero  {%0, %1}, [%2, {%3, %4}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2073
}  }  }  
# 2074
(*retVal) = make_short2(tmp.x, tmp.y); 
# 2075
} 
#endif
# 2077 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2078
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2090
::exit(___);}
#if 0
# 2078
{ 
# 2079
ushort2 tmp; 
# 2080
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2081
__asm__ volatile("suld.b.a1d.v2.b16.trap  {%0, %1}, [%2, {%3, %4}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2082
} else { 
# 2083
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2084
__asm__ volatile("suld.b.a1d.v2.b16.clamp {%0, %1}, [%2, {%3, %4}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2085
} else { 
# 2086
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2087
__asm__ volatile("suld.b.a1d.v2.b16.zero  {%0, %1}, [%2, {%3, %4}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2088
}  }  }  
# 2089
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 2090
} 
#endif
# 2092 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2093
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2105
::exit(___);}
#if 0
# 2093
{ 
# 2094
int2 tmp; 
# 2095
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2096
__asm__ volatile("suld.b.a1d.v2.b32.trap  {%0, %1}, [%2, {%3, %4}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2097
} else { 
# 2098
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2099
__asm__ volatile("suld.b.a1d.v2.b32.clamp {%0, %1}, [%2, {%3, %4}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2100
} else { 
# 2101
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2102
__asm__ volatile("suld.b.a1d.v2.b32.zero  {%0, %1}, [%2, {%3, %4}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2103
}  }  }  
# 2104
(*retVal) = make_int2(tmp.x, tmp.y); 
# 2105
} 
#endif
# 2107 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2108
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2120
::exit(___);}
#if 0
# 2108
{ 
# 2109
uint2 tmp; 
# 2110
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2111
__asm__ volatile("suld.b.a1d.v2.b32.trap  {%0, %1}, [%2, {%3, %4}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2112
} else { 
# 2113
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2114
__asm__ volatile("suld.b.a1d.v2.b32.clamp {%0, %1}, [%2, {%3, %4}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2115
} else { 
# 2116
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2117
__asm__ volatile("suld.b.a1d.v2.b32.zero  {%0, %1}, [%2, {%3, %4}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2118
}  }  }  
# 2119
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 2120
} 
#endif
# 2122 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2123
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2135
::exit(___);}
#if 0
# 2123
{ 
# 2124
longlong2 tmp; 
# 2125
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2126
__asm__ volatile("suld.b.a1d.v2.b64.trap  {%0, %1}, [%2, {%3, %4}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2127
} else { 
# 2128
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2129
__asm__ volatile("suld.b.a1d.v2.b64.clamp {%0, %1}, [%2, {%3, %4}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2130
} else { 
# 2131
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2132
__asm__ volatile("suld.b.a1d.v2.b64.zero  {%0, %1}, [%2, {%3, %4}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2133
}  }  }  
# 2134
(*retVal) = make_longlong2(tmp.x, tmp.y); 
# 2135
} 
#endif
# 2137 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2138
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2150
::exit(___);}
#if 0
# 2138
{ 
# 2139
ulonglong2 tmp; 
# 2140
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2141
__asm__ volatile("suld.b.a1d.v2.b64.trap  {%0, %1}, [%2, {%3, %4}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2142
} else { 
# 2143
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2144
__asm__ volatile("suld.b.a1d.v2.b64.clamp {%0, %1}, [%2, {%3, %4}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2145
} else { 
# 2146
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2147
__asm__ volatile("suld.b.a1d.v2.b64.zero  {%0, %1}, [%2, {%3, %4}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2148
}  }  }  
# 2149
(*retVal) = make_ulonglong2(tmp.x, tmp.y); 
# 2150
} 
#endif
# 2152 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2153
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2165
::exit(___);}
#if 0
# 2153
{ 
# 2154
float2 tmp; 
# 2155
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2156
__asm__ volatile("suld.b.a1d.v2.b32.trap  {%0, %1}, [%2, {%3, %4}];" : "=f" (tmp.x), "=f" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2157
} else { 
# 2158
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2159
__asm__ volatile("suld.b.a1d.v2.b32.clamp {%0, %1}, [%2, {%3, %4}];" : "=f" (tmp.x), "=f" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2160
} else { 
# 2161
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2162
__asm__ volatile("suld.b.a1d.v2.b32.zero  {%0, %1}, [%2, {%3, %4}];" : "=f" (tmp.x), "=f" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2163
}  }  }  
# 2164
(*retVal) = make_float2(tmp.x, tmp.y); 
# 2165
} 
#endif
# 2173 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2174
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2186
::exit(___);}
#if 0
# 2174
{ 
# 2175
int4 tmp; 
# 2176
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2177
__asm__ volatile("suld.b.a1d.v4.b8.trap  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2178
} else { 
# 2179
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2180
__asm__ volatile("suld.b.a1d.v4.b8.clamp {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2181
} else { 
# 2182
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2183
__asm__ volatile("suld.b.a1d.v4.b8.zero  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2184
}  }  }  
# 2185
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2186
} 
#endif
# 2188 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2189
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2201
::exit(___);}
#if 0
# 2189
{ 
# 2190
uint4 tmp; 
# 2191
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2192
__asm__ volatile("suld.b.a1d.v4.b8.trap  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2193
} else { 
# 2194
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2195
__asm__ volatile("suld.b.a1d.v4.b8.clamp {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2196
} else { 
# 2197
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2198
__asm__ volatile("suld.b.a1d.v4.b8.zero  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2199
}  }  }  
# 2200
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2201
} 
#endif
# 2203 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2204
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2216
::exit(___);}
#if 0
# 2204
{ 
# 2205
short4 tmp; 
# 2206
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2207
__asm__ volatile("suld.b.a1d.v4.b16.trap  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2208
} else { 
# 2209
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2210
__asm__ volatile("suld.b.a1d.v4.b16.clamp {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2211
} else { 
# 2212
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2213
__asm__ volatile("suld.b.a1d.v4.b16.zero  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2214
}  }  }  
# 2215
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2216
} 
#endif
# 2218 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2219
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2231
::exit(___);}
#if 0
# 2219
{ 
# 2220
ushort4 tmp; 
# 2221
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2222
__asm__ volatile("suld.b.a1d.v4.b16.trap  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2223
} else { 
# 2224
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2225
__asm__ volatile("suld.b.a1d.v4.b16.clamp {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2226
} else { 
# 2227
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2228
__asm__ volatile("suld.b.a1d.v4.b16.zero  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2229
}  }  }  
# 2230
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2231
} 
#endif
# 2233 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2234
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2246
::exit(___);}
#if 0
# 2234
{ 
# 2235
int4 tmp; 
# 2236
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2237
__asm__ volatile("suld.b.a1d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2238
} else { 
# 2239
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2240
__asm__ volatile("suld.b.a1d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2241
} else { 
# 2242
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2243
__asm__ volatile("suld.b.a1d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2244
}  }  }  
# 2245
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2246
} 
#endif
# 2248 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2249
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2261
::exit(___);}
#if 0
# 2249
{ 
# 2250
uint4 tmp; 
# 2251
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2252
__asm__ volatile("suld.b.a1d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2253
} else { 
# 2254
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2255
__asm__ volatile("suld.b.a1d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2256
} else { 
# 2257
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2258
__asm__ volatile("suld.b.a1d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2259
}  }  }  
# 2260
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2261
} 
#endif
# 2263 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2264
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2276
::exit(___);}
#if 0
# 2264
{ 
# 2265
float4 tmp; 
# 2266
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2267
__asm__ volatile("suld.b.a1d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2268
} else { 
# 2269
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2270
__asm__ volatile("suld.b.a1d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2271
} else { 
# 2272
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2273
__asm__ volatile("suld.b.a1d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x)); 
# 2274
}  }  }  
# 2275
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2276
} 
#endif
# 2284 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
template< class T> 
# 2285
__attribute((always_inline)) __attribute__((unused)) static inline T surf1DLayeredread(cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2286
{int volatile ___ = 1;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 2290
::exit(___);}
#if 0
# 2286
{ 
# 2287
T ret; 
# 2288
surf1DLayeredread(&ret, surfObject, x, layer, boundaryMode); 
# 2289
return ret; 
# 2290
} 
#endif
# 2298 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2299
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2311
::exit(___);}
#if 0
# 2299
{ 
# 2300
int tmp; 
# 2301
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2302
__asm__ volatile("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2303
} else { 
# 2304
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2305
__asm__ volatile("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2306
} else { 
# 2307
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2308
__asm__ volatile("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2309
}  }  }  
# 2310
(*retVal) = ((char)tmp); 
# 2311
} 
#endif
# 2313 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2314
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2326
::exit(___);}
#if 0
# 2314
{ 
# 2315
int tmp; 
# 2316
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2317
__asm__ volatile("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2318
} else { 
# 2319
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2320
__asm__ volatile("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2321
} else { 
# 2322
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2323
__asm__ volatile("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2324
}  }  }  
# 2325
(*retVal) = ((signed char)tmp); 
# 2326
} 
#endif
# 2328 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2329
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2341
::exit(___);}
#if 0
# 2329
{ 
# 2330
int1 tmp; 
# 2331
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2332
__asm__ volatile("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2333
} else { 
# 2334
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2335
__asm__ volatile("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2336
} else { 
# 2337
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2338
__asm__ volatile("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2339
}  }  }  
# 2340
(*retVal) = make_char1(tmp.x); 
# 2341
} 
#endif
# 2343 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2344
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2356
::exit(___);}
#if 0
# 2344
{ 
# 2345
unsigned tmp; 
# 2346
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2347
__asm__ volatile("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2348
} else { 
# 2349
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2350
__asm__ volatile("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2351
} else { 
# 2352
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2353
__asm__ volatile("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2354
}  }  }  
# 2355
(*retVal) = ((unsigned char)tmp); 
# 2356
} 
#endif
# 2358 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2359
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2371
::exit(___);}
#if 0
# 2359
{ 
# 2360
uint1 tmp; 
# 2361
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2362
__asm__ volatile("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2363
} else { 
# 2364
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2365
__asm__ volatile("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2366
} else { 
# 2367
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2368
__asm__ volatile("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2369
}  }  }  
# 2370
(*retVal) = make_uchar1(tmp.x); 
# 2371
} 
#endif
# 2373 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2374
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2386
::exit(___);}
#if 0
# 2374
{ 
# 2375
short tmp; 
# 2376
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2377
__asm__ volatile("suld.b.a2d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2378
} else { 
# 2379
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2380
__asm__ volatile("suld.b.a2d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2381
} else { 
# 2382
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2383
__asm__ volatile("suld.b.a2d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2384
}  }  }  
# 2385
(*retVal) = ((short)tmp); 
# 2386
} 
#endif
# 2388 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2389
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2401
::exit(___);}
#if 0
# 2389
{ 
# 2390
short1 tmp; 
# 2391
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2392
__asm__ volatile("suld.b.a2d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2393
} else { 
# 2394
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2395
__asm__ volatile("suld.b.a2d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2396
} else { 
# 2397
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2398
__asm__ volatile("suld.b.a2d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2399
}  }  }  
# 2400
(*retVal) = make_short1(tmp.x); 
# 2401
} 
#endif
# 2403 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2404
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2416
::exit(___);}
#if 0
# 2404
{ 
# 2405
unsigned short tmp; 
# 2406
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2407
__asm__ volatile("suld.b.a2d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2408
} else { 
# 2409
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2410
__asm__ volatile("suld.b.a2d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2411
} else { 
# 2412
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2413
__asm__ volatile("suld.b.a2d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2414
}  }  }  
# 2415
(*retVal) = ((unsigned short)tmp); 
# 2416
} 
#endif
# 2418 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2419
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2431
::exit(___);}
#if 0
# 2419
{ 
# 2420
ushort1 tmp; 
# 2421
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2422
__asm__ volatile("suld.b.a2d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2423
} else { 
# 2424
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2425
__asm__ volatile("suld.b.a2d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2426
} else { 
# 2427
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2428
__asm__ volatile("suld.b.a2d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2429
}  }  }  
# 2430
(*retVal) = make_ushort1(tmp.x); 
# 2431
} 
#endif
# 2433 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2434
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2446
::exit(___);}
#if 0
# 2434
{ 
# 2435
int tmp; 
# 2436
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2437
__asm__ volatile("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2438
} else { 
# 2439
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2440
__asm__ volatile("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2441
} else { 
# 2442
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2443
__asm__ volatile("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2444
}  }  }  
# 2445
(*retVal) = ((int)tmp); 
# 2446
} 
#endif
# 2448 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2449
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2461
::exit(___);}
#if 0
# 2449
{ 
# 2450
int1 tmp; 
# 2451
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2452
__asm__ volatile("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2453
} else { 
# 2454
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2455
__asm__ volatile("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2456
} else { 
# 2457
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2458
__asm__ volatile("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2459
}  }  }  
# 2460
(*retVal) = make_int1(tmp.x); 
# 2461
} 
#endif
# 2463 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(unsigned *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2464
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2476
::exit(___);}
#if 0
# 2464
{ 
# 2465
unsigned tmp; 
# 2466
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2467
__asm__ volatile("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2468
} else { 
# 2469
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2470
__asm__ volatile("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2471
} else { 
# 2472
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2473
__asm__ volatile("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2474
}  }  }  
# 2475
(*retVal) = ((unsigned)tmp); 
# 2476
} 
#endif
# 2478 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2479
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2491
::exit(___);}
#if 0
# 2479
{ 
# 2480
uint1 tmp; 
# 2481
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2482
__asm__ volatile("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2483
} else { 
# 2484
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2485
__asm__ volatile("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2486
} else { 
# 2487
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2488
__asm__ volatile("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2489
}  }  }  
# 2490
(*retVal) = make_uint1(tmp.x); 
# 2491
} 
#endif
# 2493 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2494
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2506
::exit(___);}
#if 0
# 2494
{ 
# 2495
long long tmp; 
# 2496
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2497
__asm__ volatile("suld.b.a2d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2498
} else { 
# 2499
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2500
__asm__ volatile("suld.b.a2d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2501
} else { 
# 2502
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2503
__asm__ volatile("suld.b.a2d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2504
}  }  }  
# 2505
(*retVal) = ((long long)tmp); 
# 2506
} 
#endif
# 2508 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2509
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2521
::exit(___);}
#if 0
# 2509
{ 
# 2510
longlong1 tmp; 
# 2511
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2512
__asm__ volatile("suld.b.a2d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2513
} else { 
# 2514
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2515
__asm__ volatile("suld.b.a2d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2516
} else { 
# 2517
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2518
__asm__ volatile("suld.b.a2d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2519
}  }  }  
# 2520
(*retVal) = make_longlong1(tmp.x); 
# 2521
} 
#endif
# 2523 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2524
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2536
::exit(___);}
#if 0
# 2524
{ 
# 2525
unsigned long long tmp; 
# 2526
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2527
__asm__ volatile("suld.b.a2d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2528
} else { 
# 2529
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2530
__asm__ volatile("suld.b.a2d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2531
} else { 
# 2532
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2533
__asm__ volatile("suld.b.a2d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2534
}  }  }  
# 2535
(*retVal) = ((unsigned long long)tmp); 
# 2536
} 
#endif
# 2538 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2539
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2551
::exit(___);}
#if 0
# 2539
{ 
# 2540
ulonglong1 tmp; 
# 2541
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2542
__asm__ volatile("suld.b.a2d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2543
} else { 
# 2544
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2545
__asm__ volatile("suld.b.a2d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2546
} else { 
# 2547
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2548
__asm__ volatile("suld.b.a2d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2549
}  }  }  
# 2550
(*retVal) = make_ulonglong1(tmp.x); 
# 2551
} 
#endif
# 2553 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2554
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2566
::exit(___);}
#if 0
# 2554
{ 
# 2555
float tmp; 
# 2556
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2557
__asm__ volatile("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=f" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2558
} else { 
# 2559
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2560
__asm__ volatile("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=f" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2561
} else { 
# 2562
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2563
__asm__ volatile("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=f" (tmp) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2564
}  }  }  
# 2565
(*retVal) = ((float)tmp); 
# 2566
} 
#endif
# 2568 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2569
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2581
::exit(___);}
#if 0
# 2569
{ 
# 2570
float1 tmp; 
# 2571
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2572
__asm__ volatile("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=f" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2573
} else { 
# 2574
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2575
__asm__ volatile("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=f" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2576
} else { 
# 2577
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2578
__asm__ volatile("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=f" (tmp.x) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2579
}  }  }  
# 2580
(*retVal) = make_float1(tmp.x); 
# 2581
} 
#endif
# 2589 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2590
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2602
::exit(___);}
#if 0
# 2590
{ 
# 2591
int2 tmp; 
# 2592
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2593
__asm__ volatile("suld.b.a2d.v2.b8.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2594
} else { 
# 2595
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2596
__asm__ volatile("suld.b.a2d.v2.b8.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2597
} else { 
# 2598
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2599
__asm__ volatile("suld.b.a2d.v2.b8.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2600
}  }  }  
# 2601
(*retVal) = make_char2(tmp.x, tmp.y); 
# 2602
} 
#endif
# 2604 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2605
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2617
::exit(___);}
#if 0
# 2605
{ 
# 2606
uint2 tmp; 
# 2607
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2608
__asm__ volatile("suld.b.a2d.v2.b8.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2609
} else { 
# 2610
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2611
__asm__ volatile("suld.b.a2d.v2.b8.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2612
} else { 
# 2613
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2614
__asm__ volatile("suld.b.a2d.v2.b8.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2615
}  }  }  
# 2616
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 2617
} 
#endif
# 2619 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2620
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2632
::exit(___);}
#if 0
# 2620
{ 
# 2621
short2 tmp; 
# 2622
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2623
__asm__ volatile("suld.b.a2d.v2.b16.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2624
} else { 
# 2625
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2626
__asm__ volatile("suld.b.a2d.v2.b16.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2627
} else { 
# 2628
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2629
__asm__ volatile("suld.b.a2d.v2.b16.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2630
}  }  }  
# 2631
(*retVal) = make_short2(tmp.x, tmp.y); 
# 2632
} 
#endif
# 2634 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2635
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2647
::exit(___);}
#if 0
# 2635
{ 
# 2636
ushort2 tmp; 
# 2637
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2638
__asm__ volatile("suld.b.a2d.v2.b16.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2639
} else { 
# 2640
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2641
__asm__ volatile("suld.b.a2d.v2.b16.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2642
} else { 
# 2643
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2644
__asm__ volatile("suld.b.a2d.v2.b16.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2645
}  }  }  
# 2646
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 2647
} 
#endif
# 2649 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2650
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2662
::exit(___);}
#if 0
# 2650
{ 
# 2651
int2 tmp; 
# 2652
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2653
__asm__ volatile("suld.b.a2d.v2.b32.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2654
} else { 
# 2655
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2656
__asm__ volatile("suld.b.a2d.v2.b32.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2657
} else { 
# 2658
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2659
__asm__ volatile("suld.b.a2d.v2.b32.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2660
}  }  }  
# 2661
(*retVal) = make_int2(tmp.x, tmp.y); 
# 2662
} 
#endif
# 2664 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2665
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2677
::exit(___);}
#if 0
# 2665
{ 
# 2666
uint2 tmp; 
# 2667
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2668
__asm__ volatile("suld.b.a2d.v2.b32.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2669
} else { 
# 2670
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2671
__asm__ volatile("suld.b.a2d.v2.b32.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2672
} else { 
# 2673
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2674
__asm__ volatile("suld.b.a2d.v2.b32.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2675
}  }  }  
# 2676
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 2677
} 
#endif
# 2679 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2680
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2692
::exit(___);}
#if 0
# 2680
{ 
# 2681
longlong2 tmp; 
# 2682
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2683
__asm__ volatile("suld.b.a2d.v2.b64.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2684
} else { 
# 2685
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2686
__asm__ volatile("suld.b.a2d.v2.b64.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2687
} else { 
# 2688
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2689
__asm__ volatile("suld.b.a2d.v2.b64.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2690
}  }  }  
# 2691
(*retVal) = make_longlong2(tmp.x, tmp.y); 
# 2692
} 
#endif
# 2694 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2695
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2707
::exit(___);}
#if 0
# 2695
{ 
# 2696
ulonglong2 tmp; 
# 2697
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2698
__asm__ volatile("suld.b.a2d.v2.b64.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2699
} else { 
# 2700
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2701
__asm__ volatile("suld.b.a2d.v2.b64.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2702
} else { 
# 2703
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2704
__asm__ volatile("suld.b.a2d.v2.b64.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2705
}  }  }  
# 2706
(*retVal) = make_ulonglong2(tmp.x, tmp.y); 
# 2707
} 
#endif
# 2709 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2710
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2722
::exit(___);}
#if 0
# 2710
{ 
# 2711
float2 tmp; 
# 2712
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2713
__asm__ volatile("suld.b.a2d.v2.b32.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=f" (tmp.x), "=f" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2714
} else { 
# 2715
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2716
__asm__ volatile("suld.b.a2d.v2.b32.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=f" (tmp.x), "=f" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2717
} else { 
# 2718
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2719
__asm__ volatile("suld.b.a2d.v2.b32.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=f" (tmp.x), "=f" (tmp.y) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2720
}  }  }  
# 2721
(*retVal) = make_float2(tmp.x, tmp.y); 
# 2722
} 
#endif
# 2730 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2731
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2743
::exit(___);}
#if 0
# 2731
{ 
# 2732
int4 tmp; 
# 2733
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2734
__asm__ volatile("suld.b.a2d.v4.b8.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2735
} else { 
# 2736
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2737
__asm__ volatile("suld.b.a2d.v4.b8.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2738
} else { 
# 2739
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2740
__asm__ volatile("suld.b.a2d.v4.b8.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2741
}  }  }  
# 2742
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2743
} 
#endif
# 2745 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2746
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2758
::exit(___);}
#if 0
# 2746
{ 
# 2747
uint4 tmp; 
# 2748
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2749
__asm__ volatile("suld.b.a2d.v4.b8.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2750
} else { 
# 2751
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2752
__asm__ volatile("suld.b.a2d.v4.b8.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2753
} else { 
# 2754
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2755
__asm__ volatile("suld.b.a2d.v4.b8.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2756
}  }  }  
# 2757
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2758
} 
#endif
# 2760 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2761
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2773
::exit(___);}
#if 0
# 2761
{ 
# 2762
short4 tmp; 
# 2763
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2764
__asm__ volatile("suld.b.a2d.v4.b16.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2765
} else { 
# 2766
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2767
__asm__ volatile("suld.b.a2d.v4.b16.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2768
} else { 
# 2769
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2770
__asm__ volatile("suld.b.a2d.v4.b16.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2771
}  }  }  
# 2772
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2773
} 
#endif
# 2775 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2776
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2788
::exit(___);}
#if 0
# 2776
{ 
# 2777
ushort4 tmp; 
# 2778
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2779
__asm__ volatile("suld.b.a2d.v4.b16.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2780
} else { 
# 2781
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2782
__asm__ volatile("suld.b.a2d.v4.b16.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2783
} else { 
# 2784
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2785
__asm__ volatile("suld.b.a2d.v4.b16.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2786
}  }  }  
# 2787
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2788
} 
#endif
# 2790 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2791
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2803
::exit(___);}
#if 0
# 2791
{ 
# 2792
int4 tmp; 
# 2793
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2794
__asm__ volatile("suld.b.a2d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2795
} else { 
# 2796
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2797
__asm__ volatile("suld.b.a2d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2798
} else { 
# 2799
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2800
__asm__ volatile("suld.b.a2d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2801
}  }  }  
# 2802
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2803
} 
#endif
# 2805 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2806
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2818
::exit(___);}
#if 0
# 2806
{ 
# 2807
uint4 tmp; 
# 2808
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2809
__asm__ volatile("suld.b.a2d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2810
} else { 
# 2811
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2812
__asm__ volatile("suld.b.a2d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2813
} else { 
# 2814
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2815
__asm__ volatile("suld.b.a2d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2816
}  }  }  
# 2817
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2818
} 
#endif
# 2820 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2821
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2833
::exit(___);}
#if 0
# 2821
{ 
# 2822
float4 tmp; 
# 2823
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2824
__asm__ volatile("suld.b.a2d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2825
} else { 
# 2826
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2827
__asm__ volatile("suld.b.a2d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2828
} else { 
# 2829
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2830
__asm__ volatile("suld.b.a2d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (surfObject), "r" (layer), "r" (x), "r" (y)); 
# 2831
}  }  }  
# 2832
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 2833
} 
#endif
# 2841 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
template< class T> 
# 2842
__attribute((always_inline)) __attribute__((unused)) static inline T surf2DLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2843
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 2847
::exit(___);}
#if 0
# 2843
{ 
# 2844
T ret; 
# 2845
surf2DLayeredread(&ret, surfObject, x, y, layer, boundaryMode); 
# 2846
return ret; 
# 2847
} 
#endif
# 2855 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2856
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 2868
::exit(___);}
#if 0
# 2856
{ 
# 2857
int tmp; 
# 2858
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2859
__asm__ volatile("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2860
} else { 
# 2861
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2862
__asm__ volatile("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2863
} else { 
# 2864
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2865
__asm__ volatile("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2866
}  }  }  
# 2867
(*retVal) = ((char)tmp); 
# 2868
} 
#endif
# 2870 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2871
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 2883
::exit(___);}
#if 0
# 2871
{ 
# 2872
int tmp; 
# 2873
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2874
__asm__ volatile("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2875
} else { 
# 2876
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2877
__asm__ volatile("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2878
} else { 
# 2879
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2880
__asm__ volatile("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2881
}  }  }  
# 2882
(*retVal) = ((signed char)tmp); 
# 2883
} 
#endif
# 2885 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2886
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 2898
::exit(___);}
#if 0
# 2886
{ 
# 2887
int1 tmp; 
# 2888
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2889
__asm__ volatile("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2890
} else { 
# 2891
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2892
__asm__ volatile("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2893
} else { 
# 2894
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2895
__asm__ volatile("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2896
}  }  }  
# 2897
(*retVal) = make_char1(tmp.x); 
# 2898
} 
#endif
# 2900 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2901
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 2913
::exit(___);}
#if 0
# 2901
{ 
# 2902
unsigned tmp; 
# 2903
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2904
__asm__ volatile("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2905
} else { 
# 2906
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2907
__asm__ volatile("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2908
} else { 
# 2909
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2910
__asm__ volatile("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2911
}  }  }  
# 2912
(*retVal) = ((unsigned char)tmp); 
# 2913
} 
#endif
# 2915 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2916
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 2928
::exit(___);}
#if 0
# 2916
{ 
# 2917
uint1 tmp; 
# 2918
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2919
__asm__ volatile("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2920
} else { 
# 2921
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2922
__asm__ volatile("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2923
} else { 
# 2924
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2925
__asm__ volatile("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2926
}  }  }  
# 2927
(*retVal) = make_uchar1(tmp.x); 
# 2928
} 
#endif
# 2930 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2931
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 2943
::exit(___);}
#if 0
# 2931
{ 
# 2932
short tmp; 
# 2933
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2934
__asm__ volatile("suld.b.a2d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2935
} else { 
# 2936
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2937
__asm__ volatile("suld.b.a2d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2938
} else { 
# 2939
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2940
__asm__ volatile("suld.b.a2d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2941
}  }  }  
# 2942
(*retVal) = ((short)tmp); 
# 2943
} 
#endif
# 2945 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2946
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 2958
::exit(___);}
#if 0
# 2946
{ 
# 2947
short1 tmp; 
# 2948
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2949
__asm__ volatile("suld.b.a2d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp.x) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2950
} else { 
# 2951
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2952
__asm__ volatile("suld.b.a2d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp.x) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2953
} else { 
# 2954
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2955
__asm__ volatile("suld.b.a2d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp.x) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2956
}  }  }  
# 2957
(*retVal) = make_short1(tmp.x); 
# 2958
} 
#endif
# 2960 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2961
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 2973
::exit(___);}
#if 0
# 2961
{ 
# 2962
unsigned short tmp; 
# 2963
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2964
__asm__ volatile("suld.b.a2d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2965
} else { 
# 2966
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2967
__asm__ volatile("suld.b.a2d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2968
} else { 
# 2969
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2970
__asm__ volatile("suld.b.a2d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2971
}  }  }  
# 2972
(*retVal) = ((unsigned short)tmp); 
# 2973
} 
#endif
# 2975 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2976
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 2988
::exit(___);}
#if 0
# 2976
{ 
# 2977
ushort1 tmp; 
# 2978
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2979
__asm__ volatile("suld.b.a2d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp.x) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2980
} else { 
# 2981
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2982
__asm__ volatile("suld.b.a2d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp.x) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2983
} else { 
# 2984
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 2985
__asm__ volatile("suld.b.a2d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp.x) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2986
}  }  }  
# 2987
(*retVal) = make_ushort1(tmp.x); 
# 2988
} 
#endif
# 2990 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 2991
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3003
::exit(___);}
#if 0
# 2991
{ 
# 2992
int tmp; 
# 2993
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 2994
__asm__ volatile("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2995
} else { 
# 2996
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 2997
__asm__ volatile("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 2998
} else { 
# 2999
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3000
__asm__ volatile("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3001
}  }  }  
# 3002
(*retVal) = ((int)tmp); 
# 3003
} 
#endif
# 3005 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3006
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3018
::exit(___);}
#if 0
# 3006
{ 
# 3007
int1 tmp; 
# 3008
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3009
__asm__ volatile("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3010
} else { 
# 3011
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3012
__asm__ volatile("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3013
} else { 
# 3014
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3015
__asm__ volatile("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3016
}  }  }  
# 3017
(*retVal) = make_int1(tmp.x); 
# 3018
} 
#endif
# 3020 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(unsigned *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3021
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3033
::exit(___);}
#if 0
# 3021
{ 
# 3022
unsigned tmp; 
# 3023
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3024
__asm__ volatile("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3025
} else { 
# 3026
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3027
__asm__ volatile("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3028
} else { 
# 3029
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3030
__asm__ volatile("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3031
}  }  }  
# 3032
(*retVal) = ((unsigned)tmp); 
# 3033
} 
#endif
# 3035 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3036
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3048
::exit(___);}
#if 0
# 3036
{ 
# 3037
uint1 tmp; 
# 3038
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3039
__asm__ volatile("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3040
} else { 
# 3041
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3042
__asm__ volatile("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3043
} else { 
# 3044
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3045
__asm__ volatile("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3046
}  }  }  
# 3047
(*retVal) = make_uint1(tmp.x); 
# 3048
} 
#endif
# 3050 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3051
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3063
::exit(___);}
#if 0
# 3051
{ 
# 3052
long long tmp; 
# 3053
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3054
__asm__ volatile("suld.b.a2d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3055
} else { 
# 3056
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3057
__asm__ volatile("suld.b.a2d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3058
} else { 
# 3059
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3060
__asm__ volatile("suld.b.a2d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3061
}  }  }  
# 3062
(*retVal) = ((long long)tmp); 
# 3063
} 
#endif
# 3065 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3066
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3078
::exit(___);}
#if 0
# 3066
{ 
# 3067
longlong1 tmp; 
# 3068
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3069
__asm__ volatile("suld.b.a2d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp.x) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3070
} else { 
# 3071
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3072
__asm__ volatile("suld.b.a2d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp.x) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3073
} else { 
# 3074
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3075
__asm__ volatile("suld.b.a2d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp.x) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3076
}  }  }  
# 3077
(*retVal) = make_longlong1(tmp.x); 
# 3078
} 
#endif
# 3080 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3081
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3093
::exit(___);}
#if 0
# 3081
{ 
# 3082
unsigned long long tmp; 
# 3083
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3084
__asm__ volatile("suld.b.a2d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3085
} else { 
# 3086
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3087
__asm__ volatile("suld.b.a2d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3088
} else { 
# 3089
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3090
__asm__ volatile("suld.b.a2d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3091
}  }  }  
# 3092
(*retVal) = ((unsigned long long)tmp); 
# 3093
} 
#endif
# 3095 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3096
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3108
::exit(___);}
#if 0
# 3096
{ 
# 3097
ulonglong1 tmp; 
# 3098
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3099
__asm__ volatile("suld.b.a2d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp.x) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3100
} else { 
# 3101
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3102
__asm__ volatile("suld.b.a2d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp.x) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3103
} else { 
# 3104
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3105
__asm__ volatile("suld.b.a2d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp.x) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3106
}  }  }  
# 3107
(*retVal) = make_ulonglong1(tmp.x); 
# 3108
} 
#endif
# 3110 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3111
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3123
::exit(___);}
#if 0
# 3111
{ 
# 3112
float tmp; 
# 3113
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3114
__asm__ volatile("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=f" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3115
} else { 
# 3116
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3117
__asm__ volatile("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=f" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3118
} else { 
# 3119
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3120
__asm__ volatile("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=f" (tmp) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3121
}  }  }  
# 3122
(*retVal) = ((float)tmp); 
# 3123
} 
#endif
# 3125 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3126
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3138
::exit(___);}
#if 0
# 3126
{ 
# 3127
float1 tmp; 
# 3128
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3129
__asm__ volatile("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=f" (tmp.x) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3130
} else { 
# 3131
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3132
__asm__ volatile("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=f" (tmp.x) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3133
} else { 
# 3134
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3135
__asm__ volatile("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=f" (tmp.x) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3136
}  }  }  
# 3137
(*retVal) = make_float1(tmp.x); 
# 3138
} 
#endif
# 3146 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3147
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3159
::exit(___);}
#if 0
# 3147
{ 
# 3148
int2 tmp; 
# 3149
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3150
__asm__ volatile("suld.b.a2d.v2.b8.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3151
} else { 
# 3152
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3153
__asm__ volatile("suld.b.a2d.v2.b8.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3154
} else { 
# 3155
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3156
__asm__ volatile("suld.b.a2d.v2.b8.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3157
}  }  }  
# 3158
(*retVal) = make_char2(tmp.x, tmp.y); 
# 3159
} 
#endif
# 3161 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3162
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3174
::exit(___);}
#if 0
# 3162
{ 
# 3163
uint2 tmp; 
# 3164
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3165
__asm__ volatile("suld.b.a2d.v2.b8.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3166
} else { 
# 3167
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3168
__asm__ volatile("suld.b.a2d.v2.b8.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3169
} else { 
# 3170
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3171
__asm__ volatile("suld.b.a2d.v2.b8.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3172
}  }  }  
# 3173
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 3174
} 
#endif
# 3176 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3177
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3189
::exit(___);}
#if 0
# 3177
{ 
# 3178
short2 tmp; 
# 3179
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3180
__asm__ volatile("suld.b.a2d.v2.b16.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3181
} else { 
# 3182
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3183
__asm__ volatile("suld.b.a2d.v2.b16.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3184
} else { 
# 3185
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3186
__asm__ volatile("suld.b.a2d.v2.b16.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3187
}  }  }  
# 3188
(*retVal) = make_short2(tmp.x, tmp.y); 
# 3189
} 
#endif
# 3191 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3192
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3204
::exit(___);}
#if 0
# 3192
{ 
# 3193
ushort2 tmp; 
# 3194
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3195
__asm__ volatile("suld.b.a2d.v2.b16.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3196
} else { 
# 3197
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3198
__asm__ volatile("suld.b.a2d.v2.b16.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3199
} else { 
# 3200
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3201
__asm__ volatile("suld.b.a2d.v2.b16.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3202
}  }  }  
# 3203
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 3204
} 
#endif
# 3206 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3207
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3219
::exit(___);}
#if 0
# 3207
{ 
# 3208
int2 tmp; 
# 3209
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3210
__asm__ volatile("suld.b.a2d.v2.b32.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3211
} else { 
# 3212
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3213
__asm__ volatile("suld.b.a2d.v2.b32.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3214
} else { 
# 3215
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3216
__asm__ volatile("suld.b.a2d.v2.b32.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3217
}  }  }  
# 3218
(*retVal) = make_int2(tmp.x, tmp.y); 
# 3219
} 
#endif
# 3221 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3222
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3234
::exit(___);}
#if 0
# 3222
{ 
# 3223
uint2 tmp; 
# 3224
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3225
__asm__ volatile("suld.b.a2d.v2.b32.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3226
} else { 
# 3227
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3228
__asm__ volatile("suld.b.a2d.v2.b32.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3229
} else { 
# 3230
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3231
__asm__ volatile("suld.b.a2d.v2.b32.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3232
}  }  }  
# 3233
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 3234
} 
#endif
# 3236 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3237
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3249
::exit(___);}
#if 0
# 3237
{ 
# 3238
longlong2 tmp; 
# 3239
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3240
__asm__ volatile("suld.b.a2d.v2.b64.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3241
} else { 
# 3242
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3243
__asm__ volatile("suld.b.a2d.v2.b64.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3244
} else { 
# 3245
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3246
__asm__ volatile("suld.b.a2d.v2.b64.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3247
}  }  }  
# 3248
(*retVal) = make_longlong2(tmp.x, tmp.y); 
# 3249
} 
#endif
# 3251 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3252
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3264
::exit(___);}
#if 0
# 3252
{ 
# 3253
ulonglong2 tmp; 
# 3254
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3255
__asm__ volatile("suld.b.a2d.v2.b64.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3256
} else { 
# 3257
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3258
__asm__ volatile("suld.b.a2d.v2.b64.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3259
} else { 
# 3260
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3261
__asm__ volatile("suld.b.a2d.v2.b64.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3262
}  }  }  
# 3263
(*retVal) = make_ulonglong2(tmp.x, tmp.y); 
# 3264
} 
#endif
# 3266 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3267
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3279
::exit(___);}
#if 0
# 3267
{ 
# 3268
float2 tmp; 
# 3269
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3270
__asm__ volatile("suld.b.a2d.v2.b32.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=f" (tmp.x), "=f" (tmp.y) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3271
} else { 
# 3272
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3273
__asm__ volatile("suld.b.a2d.v2.b32.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=f" (tmp.x), "=f" (tmp.y) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3274
} else { 
# 3275
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3276
__asm__ volatile("suld.b.a2d.v2.b32.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=f" (tmp.x), "=f" (tmp.y) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3277
}  }  }  
# 3278
(*retVal) = make_float2(tmp.x, tmp.y); 
# 3279
} 
#endif
# 3287 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3288
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3300
::exit(___);}
#if 0
# 3288
{ 
# 3289
int4 tmp; 
# 3290
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3291
__asm__ volatile("suld.b.a2d.v4.b8.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3292
} else { 
# 3293
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3294
__asm__ volatile("suld.b.a2d.v4.b8.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3295
} else { 
# 3296
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3297
__asm__ volatile("suld.b.a2d.v4.b8.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3298
}  }  }  
# 3299
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3300
} 
#endif
# 3302 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3303
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3315
::exit(___);}
#if 0
# 3303
{ 
# 3304
uint4 tmp; 
# 3305
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3306
__asm__ volatile("suld.b.a2d.v4.b8.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3307
} else { 
# 3308
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3309
__asm__ volatile("suld.b.a2d.v4.b8.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3310
} else { 
# 3311
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3312
__asm__ volatile("suld.b.a2d.v4.b8.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3313
}  }  }  
# 3314
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3315
} 
#endif
# 3317 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3318
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3330
::exit(___);}
#if 0
# 3318
{ 
# 3319
short4 tmp; 
# 3320
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3321
__asm__ volatile("suld.b.a2d.v4.b16.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3322
} else { 
# 3323
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3324
__asm__ volatile("suld.b.a2d.v4.b16.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3325
} else { 
# 3326
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3327
__asm__ volatile("suld.b.a2d.v4.b16.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3328
}  }  }  
# 3329
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3330
} 
#endif
# 3332 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3333
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3345
::exit(___);}
#if 0
# 3333
{ 
# 3334
ushort4 tmp; 
# 3335
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3336
__asm__ volatile("suld.b.a2d.v4.b16.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3337
} else { 
# 3338
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3339
__asm__ volatile("suld.b.a2d.v4.b16.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3340
} else { 
# 3341
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3342
__asm__ volatile("suld.b.a2d.v4.b16.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3343
}  }  }  
# 3344
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3345
} 
#endif
# 3347 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3348
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3360
::exit(___);}
#if 0
# 3348
{ 
# 3349
int4 tmp; 
# 3350
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3351
__asm__ volatile("suld.b.a2d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3352
} else { 
# 3353
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3354
__asm__ volatile("suld.b.a2d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3355
} else { 
# 3356
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3357
__asm__ volatile("suld.b.a2d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3358
}  }  }  
# 3359
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3360
} 
#endif
# 3362 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3363
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3375
::exit(___);}
#if 0
# 3363
{ 
# 3364
uint4 tmp; 
# 3365
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3366
__asm__ volatile("suld.b.a2d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3367
} else { 
# 3368
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3369
__asm__ volatile("suld.b.a2d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3370
} else { 
# 3371
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3372
__asm__ volatile("suld.b.a2d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3373
}  }  }  
# 3374
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3375
} 
#endif
# 3377 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3378
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3390
::exit(___);}
#if 0
# 3378
{ 
# 3379
float4 tmp; 
# 3380
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3381
__asm__ volatile("suld.b.a2d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3382
} else { 
# 3383
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3384
__asm__ volatile("suld.b.a2d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3385
} else { 
# 3386
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3387
__asm__ volatile("suld.b.a2d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (surfObject), "r" (face), "r" (x), "r" (y)); 
# 3388
}  }  }  
# 3389
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3390
} 
#endif
# 3398 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
template< class T> 
# 3399
__attribute((always_inline)) __attribute__((unused)) static inline T surfCubemapread(cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3400
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 3404
::exit(___);}
#if 0
# 3400
{ 
# 3401
T ret; 
# 3402
surfCubemapread(&ret, surfObject, face, x, y, boundaryMode); 
# 3403
return ret; 
# 3404
} 
#endif
# 3412 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3413
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3425
::exit(___);}
#if 0
# 3413
{ 
# 3414
int tmp; 
# 3415
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3416
__asm__ volatile("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3417
} else { 
# 3418
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3419
__asm__ volatile("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3420
} else { 
# 3421
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3422
__asm__ volatile("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3423
}  }  }  
# 3424
(*retVal) = ((char)tmp); 
# 3425
} 
#endif
# 3427 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3428
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3440
::exit(___);}
#if 0
# 3428
{ 
# 3429
int tmp; 
# 3430
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3431
__asm__ volatile("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3432
} else { 
# 3433
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3434
__asm__ volatile("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3435
} else { 
# 3436
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3437
__asm__ volatile("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3438
}  }  }  
# 3439
(*retVal) = ((signed char)tmp); 
# 3440
} 
#endif
# 3442 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3443
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3455
::exit(___);}
#if 0
# 3443
{ 
# 3444
int1 tmp; 
# 3445
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3446
__asm__ volatile("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3447
} else { 
# 3448
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3449
__asm__ volatile("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3450
} else { 
# 3451
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3452
__asm__ volatile("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3453
}  }  }  
# 3454
(*retVal) = make_char1(tmp.x); 
# 3455
} 
#endif
# 3457 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3458
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3470
::exit(___);}
#if 0
# 3458
{ 
# 3459
unsigned tmp; 
# 3460
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3461
__asm__ volatile("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3462
} else { 
# 3463
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3464
__asm__ volatile("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3465
} else { 
# 3466
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3467
__asm__ volatile("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3468
}  }  }  
# 3469
(*retVal) = ((unsigned char)tmp); 
# 3470
} 
#endif
# 3472 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3473
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3485
::exit(___);}
#if 0
# 3473
{ 
# 3474
uint1 tmp; 
# 3475
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3476
__asm__ volatile("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3477
} else { 
# 3478
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3479
__asm__ volatile("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3480
} else { 
# 3481
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3482
__asm__ volatile("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3483
}  }  }  
# 3484
(*retVal) = make_uchar1(tmp.x); 
# 3485
} 
#endif
# 3487 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3488
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3500
::exit(___);}
#if 0
# 3488
{ 
# 3489
short tmp; 
# 3490
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3491
__asm__ volatile("suld.b.a2d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3492
} else { 
# 3493
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3494
__asm__ volatile("suld.b.a2d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3495
} else { 
# 3496
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3497
__asm__ volatile("suld.b.a2d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3498
}  }  }  
# 3499
(*retVal) = ((short)tmp); 
# 3500
} 
#endif
# 3502 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3503
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3515
::exit(___);}
#if 0
# 3503
{ 
# 3504
short1 tmp; 
# 3505
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3506
__asm__ volatile("suld.b.a2d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp.x) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3507
} else { 
# 3508
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3509
__asm__ volatile("suld.b.a2d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp.x) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3510
} else { 
# 3511
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3512
__asm__ volatile("suld.b.a2d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp.x) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3513
}  }  }  
# 3514
(*retVal) = make_short1(tmp.x); 
# 3515
} 
#endif
# 3517 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3518
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3530
::exit(___);}
#if 0
# 3518
{ 
# 3519
unsigned short tmp; 
# 3520
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3521
__asm__ volatile("suld.b.a2d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3522
} else { 
# 3523
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3524
__asm__ volatile("suld.b.a2d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3525
} else { 
# 3526
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3527
__asm__ volatile("suld.b.a2d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3528
}  }  }  
# 3529
(*retVal) = ((unsigned short)tmp); 
# 3530
} 
#endif
# 3532 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3533
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3545
::exit(___);}
#if 0
# 3533
{ 
# 3534
ushort1 tmp; 
# 3535
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3536
__asm__ volatile("suld.b.a2d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp.x) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3537
} else { 
# 3538
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3539
__asm__ volatile("suld.b.a2d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp.x) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3540
} else { 
# 3541
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3542
__asm__ volatile("suld.b.a2d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h" (tmp.x) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3543
}  }  }  
# 3544
(*retVal) = make_ushort1(tmp.x); 
# 3545
} 
#endif
# 3547 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3548
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3560
::exit(___);}
#if 0
# 3548
{ 
# 3549
int tmp; 
# 3550
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3551
__asm__ volatile("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3552
} else { 
# 3553
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3554
__asm__ volatile("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3555
} else { 
# 3556
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3557
__asm__ volatile("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3558
}  }  }  
# 3559
(*retVal) = ((int)tmp); 
# 3560
} 
#endif
# 3562 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3563
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3575
::exit(___);}
#if 0
# 3563
{ 
# 3564
int1 tmp; 
# 3565
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3566
__asm__ volatile("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3567
} else { 
# 3568
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3569
__asm__ volatile("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3570
} else { 
# 3571
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3572
__asm__ volatile("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3573
}  }  }  
# 3574
(*retVal) = make_int1(tmp.x); 
# 3575
} 
#endif
# 3577 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(unsigned *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3578
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3590
::exit(___);}
#if 0
# 3578
{ 
# 3579
unsigned tmp; 
# 3580
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3581
__asm__ volatile("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3582
} else { 
# 3583
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3584
__asm__ volatile("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3585
} else { 
# 3586
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3587
__asm__ volatile("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3588
}  }  }  
# 3589
(*retVal) = ((unsigned)tmp); 
# 3590
} 
#endif
# 3592 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3593
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3605
::exit(___);}
#if 0
# 3593
{ 
# 3594
uint1 tmp; 
# 3595
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3596
__asm__ volatile("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3597
} else { 
# 3598
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3599
__asm__ volatile("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3600
} else { 
# 3601
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3602
__asm__ volatile("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r" (tmp.x) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3603
}  }  }  
# 3604
(*retVal) = make_uint1(tmp.x); 
# 3605
} 
#endif
# 3607 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3608
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3620
::exit(___);}
#if 0
# 3608
{ 
# 3609
long long tmp; 
# 3610
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3611
__asm__ volatile("suld.b.a2d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3612
} else { 
# 3613
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3614
__asm__ volatile("suld.b.a2d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3615
} else { 
# 3616
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3617
__asm__ volatile("suld.b.a2d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3618
}  }  }  
# 3619
(*retVal) = ((long long)tmp); 
# 3620
} 
#endif
# 3622 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3623
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3635
::exit(___);}
#if 0
# 3623
{ 
# 3624
longlong1 tmp; 
# 3625
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3626
__asm__ volatile("suld.b.a2d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp.x) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3627
} else { 
# 3628
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3629
__asm__ volatile("suld.b.a2d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp.x) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3630
} else { 
# 3631
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3632
__asm__ volatile("suld.b.a2d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp.x) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3633
}  }  }  
# 3634
(*retVal) = make_longlong1(tmp.x); 
# 3635
} 
#endif
# 3637 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3638
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3650
::exit(___);}
#if 0
# 3638
{ 
# 3639
unsigned long long tmp; 
# 3640
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3641
__asm__ volatile("suld.b.a2d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3642
} else { 
# 3643
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3644
__asm__ volatile("suld.b.a2d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3645
} else { 
# 3646
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3647
__asm__ volatile("suld.b.a2d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3648
}  }  }  
# 3649
(*retVal) = ((unsigned long long)tmp); 
# 3650
} 
#endif
# 3652 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3653
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3665
::exit(___);}
#if 0
# 3653
{ 
# 3654
ulonglong1 tmp; 
# 3655
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3656
__asm__ volatile("suld.b.a2d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp.x) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3657
} else { 
# 3658
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3659
__asm__ volatile("suld.b.a2d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp.x) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3660
} else { 
# 3661
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3662
__asm__ volatile("suld.b.a2d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l" (tmp.x) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3663
}  }  }  
# 3664
(*retVal) = make_ulonglong1(tmp.x); 
# 3665
} 
#endif
# 3667 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3668
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3680
::exit(___);}
#if 0
# 3668
{ 
# 3669
float tmp; 
# 3670
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3671
__asm__ volatile("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=f" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3672
} else { 
# 3673
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3674
__asm__ volatile("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=f" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3675
} else { 
# 3676
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3677
__asm__ volatile("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=f" (tmp) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3678
}  }  }  
# 3679
(*retVal) = ((float)tmp); 
# 3680
} 
#endif
# 3682 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3683
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3695
::exit(___);}
#if 0
# 3683
{ 
# 3684
float1 tmp; 
# 3685
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3686
__asm__ volatile("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=f" (tmp.x) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3687
} else { 
# 3688
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3689
__asm__ volatile("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=f" (tmp.x) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3690
} else { 
# 3691
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3692
__asm__ volatile("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=f" (tmp.x) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3693
}  }  }  
# 3694
(*retVal) = make_float1(tmp.x); 
# 3695
} 
#endif
# 3703 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3704
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3716
::exit(___);}
#if 0
# 3704
{ 
# 3705
int2 tmp; 
# 3706
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3707
__asm__ volatile("suld.b.a2d.v2.b8.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3708
} else { 
# 3709
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3710
__asm__ volatile("suld.b.a2d.v2.b8.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3711
} else { 
# 3712
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3713
__asm__ volatile("suld.b.a2d.v2.b8.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3714
}  }  }  
# 3715
(*retVal) = make_char2(tmp.x, tmp.y); 
# 3716
} 
#endif
# 3718 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3719
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3731
::exit(___);}
#if 0
# 3719
{ 
# 3720
uint2 tmp; 
# 3721
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3722
__asm__ volatile("suld.b.a2d.v2.b8.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3723
} else { 
# 3724
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3725
__asm__ volatile("suld.b.a2d.v2.b8.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3726
} else { 
# 3727
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3728
__asm__ volatile("suld.b.a2d.v2.b8.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3729
}  }  }  
# 3730
(*retVal) = make_uchar2(tmp.x, tmp.y); 
# 3731
} 
#endif
# 3733 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3734
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3746
::exit(___);}
#if 0
# 3734
{ 
# 3735
short2 tmp; 
# 3736
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3737
__asm__ volatile("suld.b.a2d.v2.b16.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3738
} else { 
# 3739
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3740
__asm__ volatile("suld.b.a2d.v2.b16.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3741
} else { 
# 3742
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3743
__asm__ volatile("suld.b.a2d.v2.b16.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3744
}  }  }  
# 3745
(*retVal) = make_short2(tmp.x, tmp.y); 
# 3746
} 
#endif
# 3748 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3749
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3761
::exit(___);}
#if 0
# 3749
{ 
# 3750
ushort2 tmp; 
# 3751
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3752
__asm__ volatile("suld.b.a2d.v2.b16.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3753
} else { 
# 3754
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3755
__asm__ volatile("suld.b.a2d.v2.b16.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3756
} else { 
# 3757
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3758
__asm__ volatile("suld.b.a2d.v2.b16.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h" (tmp.x), "=h" (tmp.y) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3759
}  }  }  
# 3760
(*retVal) = make_ushort2(tmp.x, tmp.y); 
# 3761
} 
#endif
# 3763 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3764
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3776
::exit(___);}
#if 0
# 3764
{ 
# 3765
int2 tmp; 
# 3766
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3767
__asm__ volatile("suld.b.a2d.v2.b32.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3768
} else { 
# 3769
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3770
__asm__ volatile("suld.b.a2d.v2.b32.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3771
} else { 
# 3772
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3773
__asm__ volatile("suld.b.a2d.v2.b32.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3774
}  }  }  
# 3775
(*retVal) = make_int2(tmp.x, tmp.y); 
# 3776
} 
#endif
# 3778 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3779
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3791
::exit(___);}
#if 0
# 3779
{ 
# 3780
uint2 tmp; 
# 3781
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3782
__asm__ volatile("suld.b.a2d.v2.b32.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3783
} else { 
# 3784
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3785
__asm__ volatile("suld.b.a2d.v2.b32.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3786
} else { 
# 3787
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3788
__asm__ volatile("suld.b.a2d.v2.b32.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r" (tmp.x), "=r" (tmp.y) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3789
}  }  }  
# 3790
(*retVal) = make_uint2(tmp.x, tmp.y); 
# 3791
} 
#endif
# 3793 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3794
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3806
::exit(___);}
#if 0
# 3794
{ 
# 3795
longlong2 tmp; 
# 3796
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3797
__asm__ volatile("suld.b.a2d.v2.b64.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3798
} else { 
# 3799
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3800
__asm__ volatile("suld.b.a2d.v2.b64.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3801
} else { 
# 3802
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3803
__asm__ volatile("suld.b.a2d.v2.b64.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3804
}  }  }  
# 3805
(*retVal) = make_longlong2(tmp.x, tmp.y); 
# 3806
} 
#endif
# 3808 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3809
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3821
::exit(___);}
#if 0
# 3809
{ 
# 3810
ulonglong2 tmp; 
# 3811
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3812
__asm__ volatile("suld.b.a2d.v2.b64.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3813
} else { 
# 3814
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3815
__asm__ volatile("suld.b.a2d.v2.b64.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3816
} else { 
# 3817
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3818
__asm__ volatile("suld.b.a2d.v2.b64.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l" (tmp.x), "=l" (tmp.y) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3819
}  }  }  
# 3820
(*retVal) = make_ulonglong2(tmp.x, tmp.y); 
# 3821
} 
#endif
# 3823 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3824
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3836
::exit(___);}
#if 0
# 3824
{ 
# 3825
float2 tmp; 
# 3826
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3827
__asm__ volatile("suld.b.a2d.v2.b32.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=f" (tmp.x), "=f" (tmp.y) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3828
} else { 
# 3829
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3830
__asm__ volatile("suld.b.a2d.v2.b32.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=f" (tmp.x), "=f" (tmp.y) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3831
} else { 
# 3832
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3833
__asm__ volatile("suld.b.a2d.v2.b32.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=f" (tmp.x), "=f" (tmp.y) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3834
}  }  }  
# 3835
(*retVal) = make_float2(tmp.x, tmp.y); 
# 3836
} 
#endif
# 3844 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3845
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3857
::exit(___);}
#if 0
# 3845
{ 
# 3846
int4 tmp; 
# 3847
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3848
__asm__ volatile("suld.b.a2d.v4.b8.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3849
} else { 
# 3850
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3851
__asm__ volatile("suld.b.a2d.v4.b8.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3852
} else { 
# 3853
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3854
__asm__ volatile("suld.b.a2d.v4.b8.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3855
}  }  }  
# 3856
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3857
} 
#endif
# 3859 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3860
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3872
::exit(___);}
#if 0
# 3860
{ 
# 3861
uint4 tmp; 
# 3862
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3863
__asm__ volatile("suld.b.a2d.v4.b8.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3864
} else { 
# 3865
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3866
__asm__ volatile("suld.b.a2d.v4.b8.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3867
} else { 
# 3868
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3869
__asm__ volatile("suld.b.a2d.v4.b8.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3870
}  }  }  
# 3871
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3872
} 
#endif
# 3874 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3875
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3887
::exit(___);}
#if 0
# 3875
{ 
# 3876
short4 tmp; 
# 3877
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3878
__asm__ volatile("suld.b.a2d.v4.b16.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3879
} else { 
# 3880
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3881
__asm__ volatile("suld.b.a2d.v4.b16.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3882
} else { 
# 3883
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3884
__asm__ volatile("suld.b.a2d.v4.b16.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3885
}  }  }  
# 3886
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3887
} 
#endif
# 3889 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3890
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3902
::exit(___);}
#if 0
# 3890
{ 
# 3891
ushort4 tmp; 
# 3892
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3893
__asm__ volatile("suld.b.a2d.v4.b16.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3894
} else { 
# 3895
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3896
__asm__ volatile("suld.b.a2d.v4.b16.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3897
} else { 
# 3898
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3899
__asm__ volatile("suld.b.a2d.v4.b16.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h" (tmp.x), "=h" (tmp.y), "=h" (tmp.z), "=h" (tmp.w) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3900
}  }  }  
# 3901
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3902
} 
#endif
# 3904 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3905
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3917
::exit(___);}
#if 0
# 3905
{ 
# 3906
int4 tmp; 
# 3907
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3908
__asm__ volatile("suld.b.a2d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3909
} else { 
# 3910
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3911
__asm__ volatile("suld.b.a2d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3912
} else { 
# 3913
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3914
__asm__ volatile("suld.b.a2d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3915
}  }  }  
# 3916
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3917
} 
#endif
# 3919 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3920
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3932
::exit(___);}
#if 0
# 3920
{ 
# 3921
uint4 tmp; 
# 3922
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3923
__asm__ volatile("suld.b.a2d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3924
} else { 
# 3925
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3926
__asm__ volatile("suld.b.a2d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3927
} else { 
# 3928
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3929
__asm__ volatile("suld.b.a2d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r" (tmp.x), "=r" (tmp.y), "=r" (tmp.z), "=r" (tmp.w) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3930
}  }  }  
# 3931
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3932
} 
#endif
# 3934 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3935
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3947
::exit(___);}
#if 0
# 3935
{ 
# 3936
float4 tmp; 
# 3937
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3938
__asm__ volatile("suld.b.a2d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3939
} else { 
# 3940
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3941
__asm__ volatile("suld.b.a2d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3942
} else { 
# 3943
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3944
__asm__ volatile("suld.b.a2d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f" (tmp.x), "=f" (tmp.y), "=f" (tmp.z), "=f" (tmp.w) : "l" (surfObject), "r" (layerface), "r" (x), "r" (y)); 
# 3945
}  }  }  
# 3946
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
# 3947
} 
#endif
# 3955 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
template< class T> 
# 3956
__attribute((always_inline)) __attribute__((unused)) static inline T surfCubemapLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3957
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 3961
::exit(___);}
#if 0
# 3957
{ 
# 3958
T ret; 
# 3959
surfCubemapLayeredread(&ret, surfObject, x, y, z, layerface, boundaryMode); 
# 3960
return ret; 
# 3961
} 
#endif
# 3969 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(char data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3970
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 3980
::exit(___);}
#if 0
# 3970
{ 
# 3971
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3972
__asm__ volatile("sust.b.1d.b8.trap  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "r" ((int)data)); 
# 3973
} else { 
# 3974
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3975
__asm__ volatile("sust.b.1d.b8.clamp [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "r" ((int)data)); 
# 3976
} else { 
# 3977
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3978
__asm__ volatile("sust.b.1d.b8.zero  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "r" ((int)data)); 
# 3979
}  }  }  
# 3980
} 
#endif
# 3982 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(signed char data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3983
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 3993
::exit(___);}
#if 0
# 3983
{ 
# 3984
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3985
__asm__ volatile("sust.b.1d.b8.trap  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "r" ((int)data)); 
# 3986
} else { 
# 3987
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 3988
__asm__ volatile("sust.b.1d.b8.clamp [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "r" ((int)data)); 
# 3989
} else { 
# 3990
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 3991
__asm__ volatile("sust.b.1d.b8.zero  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "r" ((int)data)); 
# 3992
}  }  }  
# 3993
} 
#endif
# 3995 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(char1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 3996
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4006
::exit(___);}
#if 0
# 3996
{ 
# 3997
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 3998
__asm__ volatile("sust.b.1d.b8.trap  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "r" ((int)(data.x))); 
# 3999
} else { 
# 4000
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4001
__asm__ volatile("sust.b.1d.b8.clamp [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "r" ((int)(data.x))); 
# 4002
} else { 
# 4003
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4004
__asm__ volatile("sust.b.1d.b8.zero  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "r" ((int)(data.x))); 
# 4005
}  }  }  
# 4006
} 
#endif
# 4008 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4009
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4019
::exit(___);}
#if 0
# 4009
{ 
# 4010
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4011
__asm__ volatile("sust.b.1d.b8.trap  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "r" ((unsigned)data)); 
# 4012
} else { 
# 4013
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4014
__asm__ volatile("sust.b.1d.b8.clamp [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "r" ((unsigned)data)); 
# 4015
} else { 
# 4016
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4017
__asm__ volatile("sust.b.1d.b8.zero  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "r" ((unsigned)data)); 
# 4018
}  }  }  
# 4019
} 
#endif
# 4021 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4022
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4032
::exit(___);}
#if 0
# 4022
{ 
# 4023
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4024
__asm__ volatile("sust.b.1d.b8.trap  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "r" ((unsigned)(data.x))); 
# 4025
} else { 
# 4026
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4027
__asm__ volatile("sust.b.1d.b8.clamp [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "r" ((unsigned)(data.x))); 
# 4028
} else { 
# 4029
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4030
__asm__ volatile("sust.b.1d.b8.zero  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "r" ((unsigned)(data.x))); 
# 4031
}  }  }  
# 4032
} 
#endif
# 4034 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(short data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4035
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4045
::exit(___);}
#if 0
# 4035
{ 
# 4036
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4037
__asm__ volatile("sust.b.1d.b16.trap  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "h" (data)); 
# 4038
} else { 
# 4039
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4040
__asm__ volatile("sust.b.1d.b16.clamp [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "h" (data)); 
# 4041
} else { 
# 4042
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4043
__asm__ volatile("sust.b.1d.b16.zero  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "h" (data)); 
# 4044
}  }  }  
# 4045
} 
#endif
# 4047 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(short1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4048
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4058
::exit(___);}
#if 0
# 4048
{ 
# 4049
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4050
__asm__ volatile("sust.b.1d.b16.trap  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "h" (data.x)); 
# 4051
} else { 
# 4052
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4053
__asm__ volatile("sust.b.1d.b16.clamp [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "h" (data.x)); 
# 4054
} else { 
# 4055
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4056
__asm__ volatile("sust.b.1d.b16.zero  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "h" (data.x)); 
# 4057
}  }  }  
# 4058
} 
#endif
# 4060 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4061
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4071
::exit(___);}
#if 0
# 4061
{ 
# 4062
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4063
__asm__ volatile("sust.b.1d.b16.trap  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "h" (data)); 
# 4064
} else { 
# 4065
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4066
__asm__ volatile("sust.b.1d.b16.clamp [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "h" (data)); 
# 4067
} else { 
# 4068
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4069
__asm__ volatile("sust.b.1d.b16.zero  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "h" (data)); 
# 4070
}  }  }  
# 4071
} 
#endif
# 4073 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4074
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4084
::exit(___);}
#if 0
# 4074
{ 
# 4075
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4076
__asm__ volatile("sust.b.1d.b16.trap  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "h" (data.x)); 
# 4077
} else { 
# 4078
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4079
__asm__ volatile("sust.b.1d.b16.clamp [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "h" (data.x)); 
# 4080
} else { 
# 4081
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4082
__asm__ volatile("sust.b.1d.b16.zero  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "h" (data.x)); 
# 4083
}  }  }  
# 4084
} 
#endif
# 4086 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(int data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4087
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4097
::exit(___);}
#if 0
# 4087
{ 
# 4088
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4089
__asm__ volatile("sust.b.1d.b32.trap  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "r" (data)); 
# 4090
} else { 
# 4091
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4092
__asm__ volatile("sust.b.1d.b32.clamp [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "r" (data)); 
# 4093
} else { 
# 4094
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4095
__asm__ volatile("sust.b.1d.b32.zero  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "r" (data)); 
# 4096
}  }  }  
# 4097
} 
#endif
# 4099 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(int1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4100
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4110
::exit(___);}
#if 0
# 4100
{ 
# 4101
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4102
__asm__ volatile("sust.b.1d.b32.trap  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "r" (data.x)); 
# 4103
} else { 
# 4104
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4105
__asm__ volatile("sust.b.1d.b32.clamp [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "r" (data.x)); 
# 4106
} else { 
# 4107
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4108
__asm__ volatile("sust.b.1d.b32.zero  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "r" (data.x)); 
# 4109
}  }  }  
# 4110
} 
#endif
# 4112 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4113
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4123
::exit(___);}
#if 0
# 4113
{ 
# 4114
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4115
__asm__ volatile("sust.b.1d.b32.trap  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "r" (data)); 
# 4116
} else { 
# 4117
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4118
__asm__ volatile("sust.b.1d.b32.clamp [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "r" (data)); 
# 4119
} else { 
# 4120
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4121
__asm__ volatile("sust.b.1d.b32.zero  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "r" (data)); 
# 4122
}  }  }  
# 4123
} 
#endif
# 4125 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4126
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4136
::exit(___);}
#if 0
# 4126
{ 
# 4127
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4128
__asm__ volatile("sust.b.1d.b32.trap  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "r" (data.x)); 
# 4129
} else { 
# 4130
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4131
__asm__ volatile("sust.b.1d.b32.clamp [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "r" (data.x)); 
# 4132
} else { 
# 4133
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4134
__asm__ volatile("sust.b.1d.b32.zero  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "r" (data.x)); 
# 4135
}  }  }  
# 4136
} 
#endif
# 4138 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(long long data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4139
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4149
::exit(___);}
#if 0
# 4139
{ 
# 4140
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4141
__asm__ volatile("sust.b.1d.b64.trap  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "l" (data)); 
# 4142
} else { 
# 4143
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4144
__asm__ volatile("sust.b.1d.b64.clamp [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "l" (data)); 
# 4145
} else { 
# 4146
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4147
__asm__ volatile("sust.b.1d.b64.zero  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "l" (data)); 
# 4148
}  }  }  
# 4149
} 
#endif
# 4151 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4152
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4162
::exit(___);}
#if 0
# 4152
{ 
# 4153
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4154
__asm__ volatile("sust.b.1d.b64.trap  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "l" (data.x)); 
# 4155
} else { 
# 4156
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4157
__asm__ volatile("sust.b.1d.b64.clamp [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "l" (data.x)); 
# 4158
} else { 
# 4159
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4160
__asm__ volatile("sust.b.1d.b64.zero  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "l" (data.x)); 
# 4161
}  }  }  
# 4162
} 
#endif
# 4164 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4165
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4175
::exit(___);}
#if 0
# 4165
{ 
# 4166
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4167
__asm__ volatile("sust.b.1d.b64.trap  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "l" (data)); 
# 4168
} else { 
# 4169
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4170
__asm__ volatile("sust.b.1d.b64.clamp [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "l" (data)); 
# 4171
} else { 
# 4172
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4173
__asm__ volatile("sust.b.1d.b64.zero  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "l" (data)); 
# 4174
}  }  }  
# 4175
} 
#endif
# 4177 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4178
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4188
::exit(___);}
#if 0
# 4178
{ 
# 4179
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4180
__asm__ volatile("sust.b.1d.b64.trap  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "l" (data.x)); 
# 4181
} else { 
# 4182
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4183
__asm__ volatile("sust.b.1d.b64.clamp [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "l" (data.x)); 
# 4184
} else { 
# 4185
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4186
__asm__ volatile("sust.b.1d.b64.zero  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "l" (data.x)); 
# 4187
}  }  }  
# 4188
} 
#endif
# 4190 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(float data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4191
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4201
::exit(___);}
#if 0
# 4191
{ 
# 4192
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4193
__asm__ volatile("sust.b.1d.b32.trap  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "f" (data)); 
# 4194
} else { 
# 4195
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4196
__asm__ volatile("sust.b.1d.b32.clamp [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "f" (data)); 
# 4197
} else { 
# 4198
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4199
__asm__ volatile("sust.b.1d.b32.zero  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "f" (data)); 
# 4200
}  }  }  
# 4201
} 
#endif
# 4203 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(float1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4204
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4214
::exit(___);}
#if 0
# 4204
{ 
# 4205
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4206
__asm__ volatile("sust.b.1d.b32.trap  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "f" (data.x)); 
# 4207
} else { 
# 4208
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4209
__asm__ volatile("sust.b.1d.b32.clamp [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "f" (data.x)); 
# 4210
} else { 
# 4211
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4212
__asm__ volatile("sust.b.1d.b32.zero  [%0, {%1}], {%2};" : : "l" (surfObject), "r" (x), "f" (data.x)); 
# 4213
}  }  }  
# 4214
} 
#endif
# 4222 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(char2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4223
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4233
::exit(___);}
#if 0
# 4223
{ 
# 4224
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4225
__asm__ volatile("sust.b.1d.v2.b8.trap  [%0, {%1}], {%2, %3};" : : "l" (surfObject), "r" (x), "r" ((int)(data.x)), "r" ((int)(data.y))); 
# 4226
} else { 
# 4227
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4228
__asm__ volatile("sust.b.1d.v2.b8.clamp [%0, {%1}], {%2, %3};" : : "l" (surfObject), "r" (x), "r" ((int)(data.x)), "r" ((int)(data.y))); 
# 4229
} else { 
# 4230
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4231
__asm__ volatile("sust.b.1d.v2.b8.zero  [%0, {%1}], {%2, %3};" : : "l" (surfObject), "r" (x), "r" ((int)(data.x)), "r" ((int)(data.y))); 
# 4232
}  }  }  
# 4233
} 
#endif
# 4235 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4236
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4246
::exit(___);}
#if 0
# 4236
{ 
# 4237
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4238
__asm__ volatile("sust.b.1d.v2.b8.trap  [%0, {%1}], {%2, %3};" : : "l" (surfObject), "r" (x), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y))); 
# 4239
} else { 
# 4240
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4241
__asm__ volatile("sust.b.1d.v2.b8.clamp [%0, {%1}], {%2, %3};" : : "l" (surfObject), "r" (x), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y))); 
# 4242
} else { 
# 4243
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4244
__asm__ volatile("sust.b.1d.v2.b8.zero  [%0, {%1}], {%2, %3};" : : "l" (surfObject), "r" (x), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y))); 
# 4245
}  }  }  
# 4246
} 
#endif
# 4248 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(short2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4249
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4259
::exit(___);}
#if 0
# 4249
{ 
# 4250
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4251
__asm__ volatile("sust.b.1d.v2.b16.trap  [%0, {%1}], {%2, %3};" : : "l" (surfObject), "r" (x), "h" (data.x), "h" (data.y)); 
# 4252
} else { 
# 4253
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4254
__asm__ volatile("sust.b.1d.v2.b16.clamp [%0, {%1}], {%2, %3};" : : "l" (surfObject), "r" (x), "h" (data.x), "h" (data.y)); 
# 4255
} else { 
# 4256
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4257
__asm__ volatile("sust.b.1d.v2.b16.zero  [%0, {%1}], {%2, %3};" : : "l" (surfObject), "r" (x), "h" (data.x), "h" (data.y)); 
# 4258
}  }  }  
# 4259
} 
#endif
# 4261 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4262
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4272
::exit(___);}
#if 0
# 4262
{ 
# 4263
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4264
__asm__ volatile("sust.b.1d.v2.b16.trap  [%0, {%1}], {%2, %3};" : : "l" (surfObject), "r" (x), "h" (data.x), "h" (data.y)); 
# 4265
} else { 
# 4266
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4267
__asm__ volatile("sust.b.1d.v2.b16.clamp [%0, {%1}], {%2, %3};" : : "l" (surfObject), "r" (x), "h" (data.x), "h" (data.y)); 
# 4268
} else { 
# 4269
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4270
__asm__ volatile("sust.b.1d.v2.b16.zero  [%0, {%1}], {%2, %3};" : : "l" (surfObject), "r" (x), "h" (data.x), "h" (data.y)); 
# 4271
}  }  }  
# 4272
} 
#endif
# 4274 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(int2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4275
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4285
::exit(___);}
#if 0
# 4275
{ 
# 4276
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4277
__asm__ volatile("sust.b.1d.v2.b32.trap  [%0, {%1}], {%2, %3};" : : "l" (surfObject), "r" (x), "r" (data.x), "r" (data.y)); 
# 4278
} else { 
# 4279
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4280
__asm__ volatile("sust.b.1d.v2.b32.clamp [%0, {%1}], {%2, %3};" : : "l" (surfObject), "r" (x), "r" (data.x), "r" (data.y)); 
# 4281
} else { 
# 4282
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4283
__asm__ volatile("sust.b.1d.v2.b32.zero  [%0, {%1}], {%2, %3};" : : "l" (surfObject), "r" (x), "r" (data.x), "r" (data.y)); 
# 4284
}  }  }  
# 4285
} 
#endif
# 4287 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4288
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4298
::exit(___);}
#if 0
# 4288
{ 
# 4289
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4290
__asm__ volatile("sust.b.1d.v2.b32.trap  [%0, {%1}], {%2, %3};" : : "l" (surfObject), "r" (x), "r" (data.x), "r" (data.y)); 
# 4291
} else { 
# 4292
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4293
__asm__ volatile("sust.b.1d.v2.b32.clamp [%0, {%1}], {%2, %3};" : : "l" (surfObject), "r" (x), "r" (data.x), "r" (data.y)); 
# 4294
} else { 
# 4295
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4296
__asm__ volatile("sust.b.1d.v2.b32.zero  [%0, {%1}], {%2, %3};" : : "l" (surfObject), "r" (x), "r" (data.x), "r" (data.y)); 
# 4297
}  }  }  
# 4298
} 
#endif
# 4300 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4301
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4311
::exit(___);}
#if 0
# 4301
{ 
# 4302
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4303
__asm__ volatile("sust.b.1d.v2.b64.trap  [%0, {%1}], {%2, %3};" : : "l" (surfObject), "r" (x), "l" (data.x), "l" (data.y)); 
# 4304
} else { 
# 4305
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4306
__asm__ volatile("sust.b.1d.v2.b64.clamp [%0, {%1}], {%2, %3};" : : "l" (surfObject), "r" (x), "l" (data.x), "l" (data.y)); 
# 4307
} else { 
# 4308
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4309
__asm__ volatile("sust.b.1d.v2.b64.zero  [%0, {%1}], {%2, %3};" : : "l" (surfObject), "r" (x), "l" (data.x), "l" (data.y)); 
# 4310
}  }  }  
# 4311
} 
#endif
# 4313 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4314
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4324
::exit(___);}
#if 0
# 4314
{ 
# 4315
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4316
__asm__ volatile("sust.b.1d.v2.b64.trap  [%0, {%1}], {%2, %3};" : : "l" (surfObject), "r" (x), "l" (data.x), "l" (data.y)); 
# 4317
} else { 
# 4318
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4319
__asm__ volatile("sust.b.1d.v2.b64.clamp [%0, {%1}], {%2, %3};" : : "l" (surfObject), "r" (x), "l" (data.x), "l" (data.y)); 
# 4320
} else { 
# 4321
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4322
__asm__ volatile("sust.b.1d.v2.b64.zero  [%0, {%1}], {%2, %3};" : : "l" (surfObject), "r" (x), "l" (data.x), "l" (data.y)); 
# 4323
}  }  }  
# 4324
} 
#endif
# 4326 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(float2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4327
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4337
::exit(___);}
#if 0
# 4327
{ 
# 4328
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4329
__asm__ volatile("sust.b.1d.v2.b32.trap  [%0, {%1}], {%2, %3};" : : "l" (surfObject), "r" (x), "f" (data.x), "f" (data.y)); 
# 4330
} else { 
# 4331
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4332
__asm__ volatile("sust.b.1d.v2.b32.clamp [%0, {%1}], {%2, %3};" : : "l" (surfObject), "r" (x), "f" (data.x), "f" (data.y)); 
# 4333
} else { 
# 4334
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4335
__asm__ volatile("sust.b.1d.v2.b32.zero  [%0, {%1}], {%2, %3};" : : "l" (surfObject), "r" (x), "f" (data.x), "f" (data.y)); 
# 4336
}  }  }  
# 4337
} 
#endif
# 4345 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(char4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4346
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4356
::exit(___);}
#if 0
# 4346
{ 
# 4347
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4348
__asm__ volatile("sust.b.1d.v4.b8.trap  [%0, {%1}], {%2, %3, %4, %5};" : : "l" (surfObject), "r" (x), "r" ((int)(data.x)), "r" ((int)(data.y)), "r" ((int)(data.z)), "r" ((int)(data.w))); 
# 4349
} else { 
# 4350
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4351
__asm__ volatile("sust.b.1d.v4.b8.clamp [%0, {%1}], {%2, %3, %4, %5};" : : "l" (surfObject), "r" (x), "r" ((int)(data.x)), "r" ((int)(data.y)), "r" ((int)(data.z)), "r" ((int)(data.w))); 
# 4352
} else { 
# 4353
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4354
__asm__ volatile("sust.b.1d.v4.b8.zero  [%0, {%1}], {%2, %3, %4, %5};" : : "l" (surfObject), "r" (x), "r" ((int)(data.x)), "r" ((int)(data.y)), "r" ((int)(data.z)), "r" ((int)(data.w))); 
# 4355
}  }  }  
# 4356
} 
#endif
# 4358 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4359
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4369
::exit(___);}
#if 0
# 4359
{ 
# 4360
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4361
__asm__ volatile("sust.b.1d.v4.b8.trap  [%0, {%1}], {%2, %3, %4, %5};" : : "l" (surfObject), "r" (x), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y)), "r" ((unsigned)(data.z)), "r" ((unsigned)(data.w))); 
# 4362
} else { 
# 4363
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4364
__asm__ volatile("sust.b.1d.v4.b8.clamp [%0, {%1}], {%2, %3, %4, %5};" : : "l" (surfObject), "r" (x), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y)), "r" ((unsigned)(data.z)), "r" ((unsigned)(data.w))); 
# 4365
} else { 
# 4366
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4367
__asm__ volatile("sust.b.1d.v4.b8.zero  [%0, {%1}], {%2, %3, %4, %5};" : : "l" (surfObject), "r" (x), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y)), "r" ((unsigned)(data.z)), "r" ((unsigned)(data.w))); 
# 4368
}  }  }  
# 4369
} 
#endif
# 4371 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(short4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4372
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4382
::exit(___);}
#if 0
# 4372
{ 
# 4373
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4374
__asm__ volatile("sust.b.1d.v4.b16.trap  [%0, {%1}], {%2, %3, %4, %5};" : : "l" (surfObject), "r" (x), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 4375
} else { 
# 4376
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4377
__asm__ volatile("sust.b.1d.v4.b16.clamp [%0, {%1}], {%2, %3, %4, %5};" : : "l" (surfObject), "r" (x), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 4378
} else { 
# 4379
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4380
__asm__ volatile("sust.b.1d.v4.b16.zero  [%0, {%1}], {%2, %3, %4, %5};" : : "l" (surfObject), "r" (x), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 4381
}  }  }  
# 4382
} 
#endif
# 4384 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4385
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4395
::exit(___);}
#if 0
# 4385
{ 
# 4386
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4387
__asm__ volatile("sust.b.1d.v4.b16.trap  [%0, {%1}], {%2, %3, %4, %5};" : : "l" (surfObject), "r" (x), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 4388
} else { 
# 4389
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4390
__asm__ volatile("sust.b.1d.v4.b16.clamp [%0, {%1}], {%2, %3, %4, %5};" : : "l" (surfObject), "r" (x), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 4391
} else { 
# 4392
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4393
__asm__ volatile("sust.b.1d.v4.b16.zero  [%0, {%1}], {%2, %3, %4, %5};" : : "l" (surfObject), "r" (x), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 4394
}  }  }  
# 4395
} 
#endif
# 4397 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(int4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4398
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4408
::exit(___);}
#if 0
# 4398
{ 
# 4399
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4400
__asm__ volatile("sust.b.1d.v4.b32.trap  [%0, {%1}], {%2, %3, %4, %5};" : : "l" (surfObject), "r" (x), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 4401
} else { 
# 4402
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4403
__asm__ volatile("sust.b.1d.v4.b32.clamp [%0, {%1}], {%2, %3, %4, %5};" : : "l" (surfObject), "r" (x), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 4404
} else { 
# 4405
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4406
__asm__ volatile("sust.b.1d.v4.b32.zero  [%0, {%1}], {%2, %3, %4, %5};" : : "l" (surfObject), "r" (x), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 4407
}  }  }  
# 4408
} 
#endif
# 4410 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4411
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4421
::exit(___);}
#if 0
# 4411
{ 
# 4412
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4413
__asm__ volatile("sust.b.1d.v4.b32.trap  [%0, {%1}], {%2, %3, %4, %5};" : : "l" (surfObject), "r" (x), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 4414
} else { 
# 4415
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4416
__asm__ volatile("sust.b.1d.v4.b32.clamp [%0, {%1}], {%2, %3, %4, %5};" : : "l" (surfObject), "r" (x), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 4417
} else { 
# 4418
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4419
__asm__ volatile("sust.b.1d.v4.b32.zero  [%0, {%1}], {%2, %3, %4, %5};" : : "l" (surfObject), "r" (x), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 4420
}  }  }  
# 4421
} 
#endif
# 4423 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(float4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4424
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
# 4434
::exit(___);}
#if 0
# 4424
{ 
# 4425
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4426
__asm__ volatile("sust.b.1d.v4.b32.trap  [%0, {%1}], {%2, %3, %4, %5};" : : "l" (surfObject), "r" (x), "f" (data.x), "f" (data.y), "f" (data.z), "f" (data.w)); 
# 4427
} else { 
# 4428
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4429
__asm__ volatile("sust.b.1d.v4.b32.clamp [%0, {%1}], {%2, %3, %4, %5};" : : "l" (surfObject), "r" (x), "f" (data.x), "f" (data.y), "f" (data.z), "f" (data.w)); 
# 4430
} else { 
# 4431
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4432
__asm__ volatile("sust.b.1d.v4.b32.zero  [%0, {%1}], {%2, %3, %4, %5};" : : "l" (surfObject), "r" (x), "f" (data.x), "f" (data.y), "f" (data.z), "f" (data.w)); 
# 4433
}  }  }  
# 4434
} 
#endif
# 4442 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4443
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4453
::exit(___);}
#if 0
# 4443
{ 
# 4444
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4445
__asm__ volatile("sust.b.2d.b8.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "r" ((int)data)); 
# 4446
} else { 
# 4447
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4448
__asm__ volatile("sust.b.2d.b8.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "r" ((int)data)); 
# 4449
} else { 
# 4450
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4451
__asm__ volatile("sust.b.2d.b8.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "r" ((int)data)); 
# 4452
}  }  }  
# 4453
} 
#endif
# 4455 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4456
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4466
::exit(___);}
#if 0
# 4456
{ 
# 4457
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4458
__asm__ volatile("sust.b.2d.b8.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "r" ((int)data)); 
# 4459
} else { 
# 4460
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4461
__asm__ volatile("sust.b.2d.b8.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "r" ((int)data)); 
# 4462
} else { 
# 4463
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4464
__asm__ volatile("sust.b.2d.b8.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "r" ((int)data)); 
# 4465
}  }  }  
# 4466
} 
#endif
# 4468 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4469
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4479
::exit(___);}
#if 0
# 4469
{ 
# 4470
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4471
__asm__ volatile("sust.b.2d.b8.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "r" ((int)(data.x))); 
# 4472
} else { 
# 4473
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4474
__asm__ volatile("sust.b.2d.b8.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "r" ((int)(data.x))); 
# 4475
} else { 
# 4476
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4477
__asm__ volatile("sust.b.2d.b8.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "r" ((int)(data.x))); 
# 4478
}  }  }  
# 4479
} 
#endif
# 4481 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4482
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4492
::exit(___);}
#if 0
# 4482
{ 
# 4483
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4484
__asm__ volatile("sust.b.2d.b8.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "r" ((unsigned)data)); 
# 4485
} else { 
# 4486
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4487
__asm__ volatile("sust.b.2d.b8.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "r" ((unsigned)data)); 
# 4488
} else { 
# 4489
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4490
__asm__ volatile("sust.b.2d.b8.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "r" ((unsigned)data)); 
# 4491
}  }  }  
# 4492
} 
#endif
# 4494 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4495
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4505
::exit(___);}
#if 0
# 4495
{ 
# 4496
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4497
__asm__ volatile("sust.b.2d.b8.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "r" ((unsigned)(data.x))); 
# 4498
} else { 
# 4499
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4500
__asm__ volatile("sust.b.2d.b8.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "r" ((unsigned)(data.x))); 
# 4501
} else { 
# 4502
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4503
__asm__ volatile("sust.b.2d.b8.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "r" ((unsigned)(data.x))); 
# 4504
}  }  }  
# 4505
} 
#endif
# 4507 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4508
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4518
::exit(___);}
#if 0
# 4508
{ 
# 4509
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4510
__asm__ volatile("sust.b.2d.b16.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "h" (data)); 
# 4511
} else { 
# 4512
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4513
__asm__ volatile("sust.b.2d.b16.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "h" (data)); 
# 4514
} else { 
# 4515
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4516
__asm__ volatile("sust.b.2d.b16.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "h" (data)); 
# 4517
}  }  }  
# 4518
} 
#endif
# 4520 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4521
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4531
::exit(___);}
#if 0
# 4521
{ 
# 4522
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4523
__asm__ volatile("sust.b.2d.b16.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "h" (data.x)); 
# 4524
} else { 
# 4525
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4526
__asm__ volatile("sust.b.2d.b16.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "h" (data.x)); 
# 4527
} else { 
# 4528
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4529
__asm__ volatile("sust.b.2d.b16.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "h" (data.x)); 
# 4530
}  }  }  
# 4531
} 
#endif
# 4533 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4534
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4544
::exit(___);}
#if 0
# 4534
{ 
# 4535
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4536
__asm__ volatile("sust.b.2d.b16.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "h" (data)); 
# 4537
} else { 
# 4538
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4539
__asm__ volatile("sust.b.2d.b16.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "h" (data)); 
# 4540
} else { 
# 4541
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4542
__asm__ volatile("sust.b.2d.b16.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "h" (data)); 
# 4543
}  }  }  
# 4544
} 
#endif
# 4546 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4547
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4557
::exit(___);}
#if 0
# 4547
{ 
# 4548
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4549
__asm__ volatile("sust.b.2d.b16.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "h" (data.x)); 
# 4550
} else { 
# 4551
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4552
__asm__ volatile("sust.b.2d.b16.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "h" (data.x)); 
# 4553
} else { 
# 4554
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4555
__asm__ volatile("sust.b.2d.b16.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "h" (data.x)); 
# 4556
}  }  }  
# 4557
} 
#endif
# 4559 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4560
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4570
::exit(___);}
#if 0
# 4560
{ 
# 4561
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4562
__asm__ volatile("sust.b.2d.b32.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "r" (data)); 
# 4563
} else { 
# 4564
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4565
__asm__ volatile("sust.b.2d.b32.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "r" (data)); 
# 4566
} else { 
# 4567
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4568
__asm__ volatile("sust.b.2d.b32.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "r" (data)); 
# 4569
}  }  }  
# 4570
} 
#endif
# 4572 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4573
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4583
::exit(___);}
#if 0
# 4573
{ 
# 4574
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4575
__asm__ volatile("sust.b.2d.b32.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "r" (data.x)); 
# 4576
} else { 
# 4577
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4578
__asm__ volatile("sust.b.2d.b32.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "r" (data.x)); 
# 4579
} else { 
# 4580
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4581
__asm__ volatile("sust.b.2d.b32.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "r" (data.x)); 
# 4582
}  }  }  
# 4583
} 
#endif
# 4585 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4586
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4596
::exit(___);}
#if 0
# 4586
{ 
# 4587
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4588
__asm__ volatile("sust.b.2d.b32.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "r" (data)); 
# 4589
} else { 
# 4590
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4591
__asm__ volatile("sust.b.2d.b32.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "r" (data)); 
# 4592
} else { 
# 4593
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4594
__asm__ volatile("sust.b.2d.b32.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "r" (data)); 
# 4595
}  }  }  
# 4596
} 
#endif
# 4598 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4599
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4609
::exit(___);}
#if 0
# 4599
{ 
# 4600
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4601
__asm__ volatile("sust.b.2d.b32.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "r" (data.x)); 
# 4602
} else { 
# 4603
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4604
__asm__ volatile("sust.b.2d.b32.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "r" (data.x)); 
# 4605
} else { 
# 4606
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4607
__asm__ volatile("sust.b.2d.b32.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "r" (data.x)); 
# 4608
}  }  }  
# 4609
} 
#endif
# 4611 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4612
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4622
::exit(___);}
#if 0
# 4612
{ 
# 4613
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4614
__asm__ volatile("sust.b.2d.b64.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "l" (data)); 
# 4615
} else { 
# 4616
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4617
__asm__ volatile("sust.b.2d.b64.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "l" (data)); 
# 4618
} else { 
# 4619
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4620
__asm__ volatile("sust.b.2d.b64.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "l" (data)); 
# 4621
}  }  }  
# 4622
} 
#endif
# 4624 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4625
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4635
::exit(___);}
#if 0
# 4625
{ 
# 4626
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4627
__asm__ volatile("sust.b.2d.b64.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "l" (data.x)); 
# 4628
} else { 
# 4629
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4630
__asm__ volatile("sust.b.2d.b64.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "l" (data.x)); 
# 4631
} else { 
# 4632
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4633
__asm__ volatile("sust.b.2d.b64.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "l" (data.x)); 
# 4634
}  }  }  
# 4635
} 
#endif
# 4637 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4638
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4648
::exit(___);}
#if 0
# 4638
{ 
# 4639
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4640
__asm__ volatile("sust.b.2d.b64.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "l" (data)); 
# 4641
} else { 
# 4642
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4643
__asm__ volatile("sust.b.2d.b64.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "l" (data)); 
# 4644
} else { 
# 4645
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4646
__asm__ volatile("sust.b.2d.b64.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "l" (data)); 
# 4647
}  }  }  
# 4648
} 
#endif
# 4650 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4651
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4661
::exit(___);}
#if 0
# 4651
{ 
# 4652
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4653
__asm__ volatile("sust.b.2d.b64.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "l" (data.x)); 
# 4654
} else { 
# 4655
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4656
__asm__ volatile("sust.b.2d.b64.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "l" (data.x)); 
# 4657
} else { 
# 4658
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4659
__asm__ volatile("sust.b.2d.b64.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "l" (data.x)); 
# 4660
}  }  }  
# 4661
} 
#endif
# 4663 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4664
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4674
::exit(___);}
#if 0
# 4664
{ 
# 4665
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4666
__asm__ volatile("sust.b.2d.b32.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "f" (data)); 
# 4667
} else { 
# 4668
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4669
__asm__ volatile("sust.b.2d.b32.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "f" (data)); 
# 4670
} else { 
# 4671
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4672
__asm__ volatile("sust.b.2d.b32.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "f" (data)); 
# 4673
}  }  }  
# 4674
} 
#endif
# 4676 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4677
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4687
::exit(___);}
#if 0
# 4677
{ 
# 4678
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4679
__asm__ volatile("sust.b.2d.b32.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "f" (data.x)); 
# 4680
} else { 
# 4681
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4682
__asm__ volatile("sust.b.2d.b32.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "f" (data.x)); 
# 4683
} else { 
# 4684
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4685
__asm__ volatile("sust.b.2d.b32.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (x), "r" (y), "f" (data.x)); 
# 4686
}  }  }  
# 4687
} 
#endif
# 4695 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4696
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4706
::exit(___);}
#if 0
# 4696
{ 
# 4697
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4698
__asm__ volatile("sust.b.2d.v2.b8.trap  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (x), "r" (y), "r" ((int)(data.x)), "r" ((int)(data.y))); 
# 4699
} else { 
# 4700
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4701
__asm__ volatile("sust.b.2d.v2.b8.clamp [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (x), "r" (y), "r" ((int)(data.x)), "r" ((int)(data.y))); 
# 4702
} else { 
# 4703
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4704
__asm__ volatile("sust.b.2d.v2.b8.zero  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (x), "r" (y), "r" ((int)(data.x)), "r" ((int)(data.y))); 
# 4705
}  }  }  
# 4706
} 
#endif
# 4708 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4709
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4719
::exit(___);}
#if 0
# 4709
{ 
# 4710
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4711
__asm__ volatile("sust.b.2d.v2.b8.trap  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (x), "r" (y), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y))); 
# 4712
} else { 
# 4713
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4714
__asm__ volatile("sust.b.2d.v2.b8.clamp [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (x), "r" (y), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y))); 
# 4715
} else { 
# 4716
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4717
__asm__ volatile("sust.b.2d.v2.b8.zero  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (x), "r" (y), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y))); 
# 4718
}  }  }  
# 4719
} 
#endif
# 4721 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4722
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4732
::exit(___);}
#if 0
# 4722
{ 
# 4723
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4724
__asm__ volatile("sust.b.2d.v2.b16.trap  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (x), "r" (y), "h" (data.x), "h" (data.y)); 
# 4725
} else { 
# 4726
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4727
__asm__ volatile("sust.b.2d.v2.b16.clamp [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (x), "r" (y), "h" (data.x), "h" (data.y)); 
# 4728
} else { 
# 4729
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4730
__asm__ volatile("sust.b.2d.v2.b16.zero  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (x), "r" (y), "h" (data.x), "h" (data.y)); 
# 4731
}  }  }  
# 4732
} 
#endif
# 4734 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4735
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4745
::exit(___);}
#if 0
# 4735
{ 
# 4736
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4737
__asm__ volatile("sust.b.2d.v2.b16.trap  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (x), "r" (y), "h" (data.x), "h" (data.y)); 
# 4738
} else { 
# 4739
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4740
__asm__ volatile("sust.b.2d.v2.b16.clamp [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (x), "r" (y), "h" (data.x), "h" (data.y)); 
# 4741
} else { 
# 4742
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4743
__asm__ volatile("sust.b.2d.v2.b16.zero  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (x), "r" (y), "h" (data.x), "h" (data.y)); 
# 4744
}  }  }  
# 4745
} 
#endif
# 4747 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4748
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4758
::exit(___);}
#if 0
# 4748
{ 
# 4749
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4750
__asm__ volatile("sust.b.2d.v2.b32.trap  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (data.x), "r" (data.y)); 
# 4751
} else { 
# 4752
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4753
__asm__ volatile("sust.b.2d.v2.b32.clamp [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (data.x), "r" (data.y)); 
# 4754
} else { 
# 4755
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4756
__asm__ volatile("sust.b.2d.v2.b32.zero  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (data.x), "r" (data.y)); 
# 4757
}  }  }  
# 4758
} 
#endif
# 4760 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4761
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4771
::exit(___);}
#if 0
# 4761
{ 
# 4762
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4763
__asm__ volatile("sust.b.2d.v2.b32.trap  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (data.x), "r" (data.y)); 
# 4764
} else { 
# 4765
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4766
__asm__ volatile("sust.b.2d.v2.b32.clamp [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (data.x), "r" (data.y)); 
# 4767
} else { 
# 4768
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4769
__asm__ volatile("sust.b.2d.v2.b32.zero  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (data.x), "r" (data.y)); 
# 4770
}  }  }  
# 4771
} 
#endif
# 4773 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4774
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4784
::exit(___);}
#if 0
# 4774
{ 
# 4775
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4776
__asm__ volatile("sust.b.2d.v2.b64.trap  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (x), "r" (y), "l" (data.x), "l" (data.y)); 
# 4777
} else { 
# 4778
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4779
__asm__ volatile("sust.b.2d.v2.b64.clamp [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (x), "r" (y), "l" (data.x), "l" (data.y)); 
# 4780
} else { 
# 4781
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4782
__asm__ volatile("sust.b.2d.v2.b64.zero  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (x), "r" (y), "l" (data.x), "l" (data.y)); 
# 4783
}  }  }  
# 4784
} 
#endif
# 4786 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4787
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4797
::exit(___);}
#if 0
# 4787
{ 
# 4788
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4789
__asm__ volatile("sust.b.2d.v2.b64.trap  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (x), "r" (y), "l" (data.x), "l" (data.y)); 
# 4790
} else { 
# 4791
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4792
__asm__ volatile("sust.b.2d.v2.b64.clamp [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (x), "r" (y), "l" (data.x), "l" (data.y)); 
# 4793
} else { 
# 4794
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4795
__asm__ volatile("sust.b.2d.v2.b64.zero  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (x), "r" (y), "l" (data.x), "l" (data.y)); 
# 4796
}  }  }  
# 4797
} 
#endif
# 4799 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4800
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4810
::exit(___);}
#if 0
# 4800
{ 
# 4801
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4802
__asm__ volatile("sust.b.2d.v2.b32.trap  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (x), "r" (y), "f" (data.x), "f" (data.y)); 
# 4803
} else { 
# 4804
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4805
__asm__ volatile("sust.b.2d.v2.b32.clamp [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (x), "r" (y), "f" (data.x), "f" (data.y)); 
# 4806
} else { 
# 4807
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4808
__asm__ volatile("sust.b.2d.v2.b32.zero  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (x), "r" (y), "f" (data.x), "f" (data.y)); 
# 4809
}  }  }  
# 4810
} 
#endif
# 4818 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4819
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4829
::exit(___);}
#if 0
# 4819
{ 
# 4820
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4821
__asm__ volatile("sust.b.2d.v4.b8.trap  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (x), "r" (y), "r" ((int)(data.x)), "r" ((int)(data.y)), "r" ((int)(data.z)), "r" ((int)(data.w))); 
# 4822
} else { 
# 4823
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4824
__asm__ volatile("sust.b.2d.v4.b8.clamp [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (x), "r" (y), "r" ((int)(data.x)), "r" ((int)(data.y)), "r" ((int)(data.z)), "r" ((int)(data.w))); 
# 4825
} else { 
# 4826
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4827
__asm__ volatile("sust.b.2d.v4.b8.zero  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (x), "r" (y), "r" ((int)(data.x)), "r" ((int)(data.y)), "r" ((int)(data.z)), "r" ((int)(data.w))); 
# 4828
}  }  }  
# 4829
} 
#endif
# 4831 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4832
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4842
::exit(___);}
#if 0
# 4832
{ 
# 4833
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4834
__asm__ volatile("sust.b.2d.v4.b8.trap  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (x), "r" (y), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y)), "r" ((unsigned)(data.z)), "r" ((unsigned)(data.w))); 
# 4835
} else { 
# 4836
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4837
__asm__ volatile("sust.b.2d.v4.b8.clamp [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (x), "r" (y), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y)), "r" ((unsigned)(data.z)), "r" ((unsigned)(data.w))); 
# 4838
} else { 
# 4839
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4840
__asm__ volatile("sust.b.2d.v4.b8.zero  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (x), "r" (y), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y)), "r" ((unsigned)(data.z)), "r" ((unsigned)(data.w))); 
# 4841
}  }  }  
# 4842
} 
#endif
# 4844 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4845
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4855
::exit(___);}
#if 0
# 4845
{ 
# 4846
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4847
__asm__ volatile("sust.b.2d.v4.b16.trap  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (x), "r" (y), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 4848
} else { 
# 4849
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4850
__asm__ volatile("sust.b.2d.v4.b16.clamp [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (x), "r" (y), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 4851
} else { 
# 4852
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4853
__asm__ volatile("sust.b.2d.v4.b16.zero  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (x), "r" (y), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 4854
}  }  }  
# 4855
} 
#endif
# 4857 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4858
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4868
::exit(___);}
#if 0
# 4858
{ 
# 4859
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4860
__asm__ volatile("sust.b.2d.v4.b16.trap  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (x), "r" (y), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 4861
} else { 
# 4862
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4863
__asm__ volatile("sust.b.2d.v4.b16.clamp [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (x), "r" (y), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 4864
} else { 
# 4865
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4866
__asm__ volatile("sust.b.2d.v4.b16.zero  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (x), "r" (y), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 4867
}  }  }  
# 4868
} 
#endif
# 4870 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4871
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4881
::exit(___);}
#if 0
# 4871
{ 
# 4872
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4873
__asm__ volatile("sust.b.2d.v4.b32.trap  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (x), "r" (y), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 4874
} else { 
# 4875
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4876
__asm__ volatile("sust.b.2d.v4.b32.clamp [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (x), "r" (y), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 4877
} else { 
# 4878
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4879
__asm__ volatile("sust.b.2d.v4.b32.zero  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (x), "r" (y), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 4880
}  }  }  
# 4881
} 
#endif
# 4883 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4884
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4894
::exit(___);}
#if 0
# 4884
{ 
# 4885
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4886
__asm__ volatile("sust.b.2d.v4.b32.trap  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (x), "r" (y), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 4887
} else { 
# 4888
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4889
__asm__ volatile("sust.b.2d.v4.b32.clamp [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (x), "r" (y), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 4890
} else { 
# 4891
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4892
__asm__ volatile("sust.b.2d.v4.b32.zero  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (x), "r" (y), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 4893
}  }  }  
# 4894
} 
#endif
# 4896 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4897
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 4907
::exit(___);}
#if 0
# 4897
{ 
# 4898
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4899
__asm__ volatile("sust.b.2d.v4.b32.trap  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (x), "r" (y), "f" (data.x), "f" (data.y), "f" (data.z), "f" (data.w)); 
# 4900
} else { 
# 4901
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4902
__asm__ volatile("sust.b.2d.v4.b32.clamp [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (x), "r" (y), "f" (data.x), "f" (data.y), "f" (data.z), "f" (data.w)); 
# 4903
} else { 
# 4904
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4905
__asm__ volatile("sust.b.2d.v4.b32.zero  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (x), "r" (y), "f" (data.x), "f" (data.y), "f" (data.z), "f" (data.w)); 
# 4906
}  }  }  
# 4907
} 
#endif
# 4915 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4916
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 4926
::exit(___);}
#if 0
# 4916
{ 
# 4917
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4918
__asm__ volatile("sust.b.3d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" ((int)data)); 
# 4919
} else { 
# 4920
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4921
__asm__ volatile("sust.b.3d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" ((int)data)); 
# 4922
} else { 
# 4923
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4924
__asm__ volatile("sust.b.3d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" ((int)data)); 
# 4925
}  }  }  
# 4926
} 
#endif
# 4928 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4929
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 4939
::exit(___);}
#if 0
# 4929
{ 
# 4930
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4931
__asm__ volatile("sust.b.3d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" ((int)data)); 
# 4932
} else { 
# 4933
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4934
__asm__ volatile("sust.b.3d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" ((int)data)); 
# 4935
} else { 
# 4936
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4937
__asm__ volatile("sust.b.3d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" ((int)data)); 
# 4938
}  }  }  
# 4939
} 
#endif
# 4941 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4942
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 4952
::exit(___);}
#if 0
# 4942
{ 
# 4943
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4944
__asm__ volatile("sust.b.3d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" ((int)(data.x))); 
# 4945
} else { 
# 4946
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4947
__asm__ volatile("sust.b.3d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" ((int)(data.x))); 
# 4948
} else { 
# 4949
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4950
__asm__ volatile("sust.b.3d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" ((int)(data.x))); 
# 4951
}  }  }  
# 4952
} 
#endif
# 4954 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4955
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 4965
::exit(___);}
#if 0
# 4955
{ 
# 4956
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4957
__asm__ volatile("sust.b.3d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" ((unsigned)data)); 
# 4958
} else { 
# 4959
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4960
__asm__ volatile("sust.b.3d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" ((unsigned)data)); 
# 4961
} else { 
# 4962
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4963
__asm__ volatile("sust.b.3d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" ((unsigned)data)); 
# 4964
}  }  }  
# 4965
} 
#endif
# 4967 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4968
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 4978
::exit(___);}
#if 0
# 4968
{ 
# 4969
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4970
__asm__ volatile("sust.b.3d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" ((unsigned)(data.x))); 
# 4971
} else { 
# 4972
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4973
__asm__ volatile("sust.b.3d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" ((unsigned)(data.x))); 
# 4974
} else { 
# 4975
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4976
__asm__ volatile("sust.b.3d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" ((unsigned)(data.x))); 
# 4977
}  }  }  
# 4978
} 
#endif
# 4980 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4981
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 4991
::exit(___);}
#if 0
# 4981
{ 
# 4982
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4983
__asm__ volatile("sust.b.3d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "h" (data)); 
# 4984
} else { 
# 4985
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4986
__asm__ volatile("sust.b.3d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "h" (data)); 
# 4987
} else { 
# 4988
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 4989
__asm__ volatile("sust.b.3d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "h" (data)); 
# 4990
}  }  }  
# 4991
} 
#endif
# 4993 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 4994
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5004
::exit(___);}
#if 0
# 4994
{ 
# 4995
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 4996
__asm__ volatile("sust.b.3d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "h" (data.x)); 
# 4997
} else { 
# 4998
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 4999
__asm__ volatile("sust.b.3d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "h" (data.x)); 
# 5000
} else { 
# 5001
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5002
__asm__ volatile("sust.b.3d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "h" (data.x)); 
# 5003
}  }  }  
# 5004
} 
#endif
# 5006 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5007
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5017
::exit(___);}
#if 0
# 5007
{ 
# 5008
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5009
__asm__ volatile("sust.b.3d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "h" (data)); 
# 5010
} else { 
# 5011
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5012
__asm__ volatile("sust.b.3d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "h" (data)); 
# 5013
} else { 
# 5014
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5015
__asm__ volatile("sust.b.3d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "h" (data)); 
# 5016
}  }  }  
# 5017
} 
#endif
# 5019 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5020
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5030
::exit(___);}
#if 0
# 5020
{ 
# 5021
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5022
__asm__ volatile("sust.b.3d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "h" (data.x)); 
# 5023
} else { 
# 5024
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5025
__asm__ volatile("sust.b.3d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "h" (data.x)); 
# 5026
} else { 
# 5027
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5028
__asm__ volatile("sust.b.3d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "h" (data.x)); 
# 5029
}  }  }  
# 5030
} 
#endif
# 5032 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5033
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5043
::exit(___);}
#if 0
# 5033
{ 
# 5034
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5035
__asm__ volatile("sust.b.3d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" (data)); 
# 5036
} else { 
# 5037
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5038
__asm__ volatile("sust.b.3d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" (data)); 
# 5039
} else { 
# 5040
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5041
__asm__ volatile("sust.b.3d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" (data)); 
# 5042
}  }  }  
# 5043
} 
#endif
# 5045 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5046
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5056
::exit(___);}
#if 0
# 5046
{ 
# 5047
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5048
__asm__ volatile("sust.b.3d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" (data.x)); 
# 5049
} else { 
# 5050
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5051
__asm__ volatile("sust.b.3d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" (data.x)); 
# 5052
} else { 
# 5053
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5054
__asm__ volatile("sust.b.3d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" (data.x)); 
# 5055
}  }  }  
# 5056
} 
#endif
# 5058 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5059
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5069
::exit(___);}
#if 0
# 5059
{ 
# 5060
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5061
__asm__ volatile("sust.b.3d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" (data)); 
# 5062
} else { 
# 5063
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5064
__asm__ volatile("sust.b.3d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" (data)); 
# 5065
} else { 
# 5066
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5067
__asm__ volatile("sust.b.3d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" (data)); 
# 5068
}  }  }  
# 5069
} 
#endif
# 5071 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5072
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5082
::exit(___);}
#if 0
# 5072
{ 
# 5073
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5074
__asm__ volatile("sust.b.3d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" (data.x)); 
# 5075
} else { 
# 5076
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5077
__asm__ volatile("sust.b.3d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" (data.x)); 
# 5078
} else { 
# 5079
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5080
__asm__ volatile("sust.b.3d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" (data.x)); 
# 5081
}  }  }  
# 5082
} 
#endif
# 5084 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5085
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5095
::exit(___);}
#if 0
# 5085
{ 
# 5086
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5087
__asm__ volatile("sust.b.3d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "l" (data)); 
# 5088
} else { 
# 5089
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5090
__asm__ volatile("sust.b.3d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "l" (data)); 
# 5091
} else { 
# 5092
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5093
__asm__ volatile("sust.b.3d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "l" (data)); 
# 5094
}  }  }  
# 5095
} 
#endif
# 5097 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5098
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5108
::exit(___);}
#if 0
# 5098
{ 
# 5099
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5100
__asm__ volatile("sust.b.3d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "l" (data.x)); 
# 5101
} else { 
# 5102
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5103
__asm__ volatile("sust.b.3d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "l" (data.x)); 
# 5104
} else { 
# 5105
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5106
__asm__ volatile("sust.b.3d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "l" (data.x)); 
# 5107
}  }  }  
# 5108
} 
#endif
# 5110 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5111
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5121
::exit(___);}
#if 0
# 5111
{ 
# 5112
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5113
__asm__ volatile("sust.b.3d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "l" (data)); 
# 5114
} else { 
# 5115
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5116
__asm__ volatile("sust.b.3d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "l" (data)); 
# 5117
} else { 
# 5118
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5119
__asm__ volatile("sust.b.3d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "l" (data)); 
# 5120
}  }  }  
# 5121
} 
#endif
# 5123 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5124
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5134
::exit(___);}
#if 0
# 5124
{ 
# 5125
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5126
__asm__ volatile("sust.b.3d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "l" (data.x)); 
# 5127
} else { 
# 5128
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5129
__asm__ volatile("sust.b.3d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "l" (data.x)); 
# 5130
} else { 
# 5131
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5132
__asm__ volatile("sust.b.3d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "l" (data.x)); 
# 5133
}  }  }  
# 5134
} 
#endif
# 5136 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5137
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5147
::exit(___);}
#if 0
# 5137
{ 
# 5138
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5139
__asm__ volatile("sust.b.3d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "f" (data)); 
# 5140
} else { 
# 5141
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5142
__asm__ volatile("sust.b.3d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "f" (data)); 
# 5143
} else { 
# 5144
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5145
__asm__ volatile("sust.b.3d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "f" (data)); 
# 5146
}  }  }  
# 5147
} 
#endif
# 5149 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5150
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5160
::exit(___);}
#if 0
# 5150
{ 
# 5151
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5152
__asm__ volatile("sust.b.3d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "f" (data.x)); 
# 5153
} else { 
# 5154
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5155
__asm__ volatile("sust.b.3d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "f" (data.x)); 
# 5156
} else { 
# 5157
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5158
__asm__ volatile("sust.b.3d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "f" (data.x)); 
# 5159
}  }  }  
# 5160
} 
#endif
# 5168 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5169
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5179
::exit(___);}
#if 0
# 5169
{ 
# 5170
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5171
__asm__ volatile("sust.b.3d.v2.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" ((int)(data.x)), "r" ((int)(data.y))); 
# 5172
} else { 
# 5173
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5174
__asm__ volatile("sust.b.3d.v2.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" ((int)(data.x)), "r" ((int)(data.y))); 
# 5175
} else { 
# 5176
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5177
__asm__ volatile("sust.b.3d.v2.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" ((int)(data.x)), "r" ((int)(data.y))); 
# 5178
}  }  }  
# 5179
} 
#endif
# 5181 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5182
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5192
::exit(___);}
#if 0
# 5182
{ 
# 5183
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5184
__asm__ volatile("sust.b.3d.v2.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y))); 
# 5185
} else { 
# 5186
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5187
__asm__ volatile("sust.b.3d.v2.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y))); 
# 5188
} else { 
# 5189
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5190
__asm__ volatile("sust.b.3d.v2.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y))); 
# 5191
}  }  }  
# 5192
} 
#endif
# 5194 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5195
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5205
::exit(___);}
#if 0
# 5195
{ 
# 5196
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5197
__asm__ volatile("sust.b.3d.v2.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "h" (data.x), "h" (data.y)); 
# 5198
} else { 
# 5199
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5200
__asm__ volatile("sust.b.3d.v2.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "h" (data.x), "h" (data.y)); 
# 5201
} else { 
# 5202
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5203
__asm__ volatile("sust.b.3d.v2.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "h" (data.x), "h" (data.y)); 
# 5204
}  }  }  
# 5205
} 
#endif
# 5207 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5208
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5218
::exit(___);}
#if 0
# 5208
{ 
# 5209
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5210
__asm__ volatile("sust.b.3d.v2.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "h" (data.x), "h" (data.y)); 
# 5211
} else { 
# 5212
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5213
__asm__ volatile("sust.b.3d.v2.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "h" (data.x), "h" (data.y)); 
# 5214
} else { 
# 5215
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5216
__asm__ volatile("sust.b.3d.v2.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "h" (data.x), "h" (data.y)); 
# 5217
}  }  }  
# 5218
} 
#endif
# 5220 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5221
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5231
::exit(___);}
#if 0
# 5221
{ 
# 5222
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5223
__asm__ volatile("sust.b.3d.v2.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" (data.x), "r" (data.y)); 
# 5224
} else { 
# 5225
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5226
__asm__ volatile("sust.b.3d.v2.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" (data.x), "r" (data.y)); 
# 5227
} else { 
# 5228
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5229
__asm__ volatile("sust.b.3d.v2.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" (data.x), "r" (data.y)); 
# 5230
}  }  }  
# 5231
} 
#endif
# 5233 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5234
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5244
::exit(___);}
#if 0
# 5234
{ 
# 5235
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5236
__asm__ volatile("sust.b.3d.v2.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" (data.x), "r" (data.y)); 
# 5237
} else { 
# 5238
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5239
__asm__ volatile("sust.b.3d.v2.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" (data.x), "r" (data.y)); 
# 5240
} else { 
# 5241
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5242
__asm__ volatile("sust.b.3d.v2.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" (data.x), "r" (data.y)); 
# 5243
}  }  }  
# 5244
} 
#endif
# 5246 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5247
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5257
::exit(___);}
#if 0
# 5247
{ 
# 5248
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5249
__asm__ volatile("sust.b.3d.v2.b64.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "l" (data.x), "l" (data.y)); 
# 5250
} else { 
# 5251
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5252
__asm__ volatile("sust.b.3d.v2.b64.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "l" (data.x), "l" (data.y)); 
# 5253
} else { 
# 5254
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5255
__asm__ volatile("sust.b.3d.v2.b64.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "l" (data.x), "l" (data.y)); 
# 5256
}  }  }  
# 5257
} 
#endif
# 5259 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5260
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5270
::exit(___);}
#if 0
# 5260
{ 
# 5261
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5262
__asm__ volatile("sust.b.3d.v2.b64.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "l" (data.x), "l" (data.y)); 
# 5263
} else { 
# 5264
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5265
__asm__ volatile("sust.b.3d.v2.b64.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "l" (data.x), "l" (data.y)); 
# 5266
} else { 
# 5267
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5268
__asm__ volatile("sust.b.3d.v2.b64.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "l" (data.x), "l" (data.y)); 
# 5269
}  }  }  
# 5270
} 
#endif
# 5272 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5273
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5283
::exit(___);}
#if 0
# 5273
{ 
# 5274
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5275
__asm__ volatile("sust.b.3d.v2.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "f" (data.x), "f" (data.y)); 
# 5276
} else { 
# 5277
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5278
__asm__ volatile("sust.b.3d.v2.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "f" (data.x), "f" (data.y)); 
# 5279
} else { 
# 5280
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5281
__asm__ volatile("sust.b.3d.v2.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "f" (data.x), "f" (data.y)); 
# 5282
}  }  }  
# 5283
} 
#endif
# 5291 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5292
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5302
::exit(___);}
#if 0
# 5292
{ 
# 5293
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5294
__asm__ volatile("sust.b.3d.v4.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" ((int)(data.x)), "r" ((int)(data.y)), "r" ((int)(data.z)), "r" ((int)(data.w))); 
# 5295
} else { 
# 5296
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5297
__asm__ volatile("sust.b.3d.v4.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" ((int)(data.x)), "r" ((int)(data.y)), "r" ((int)(data.z)), "r" ((int)(data.w))); 
# 5298
} else { 
# 5299
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5300
__asm__ volatile("sust.b.3d.v4.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" ((int)(data.x)), "r" ((int)(data.y)), "r" ((int)(data.z)), "r" ((int)(data.w))); 
# 5301
}  }  }  
# 5302
} 
#endif
# 5304 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5305
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5315
::exit(___);}
#if 0
# 5305
{ 
# 5306
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5307
__asm__ volatile("sust.b.3d.v4.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y)), "r" ((unsigned)(data.z)), "r" ((unsigned)(data.w))); 
# 5308
} else { 
# 5309
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5310
__asm__ volatile("sust.b.3d.v4.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y)), "r" ((unsigned)(data.z)), "r" ((unsigned)(data.w))); 
# 5311
} else { 
# 5312
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5313
__asm__ volatile("sust.b.3d.v4.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y)), "r" ((unsigned)(data.z)), "r" ((unsigned)(data.w))); 
# 5314
}  }  }  
# 5315
} 
#endif
# 5317 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5318
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5328
::exit(___);}
#if 0
# 5318
{ 
# 5319
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5320
__asm__ volatile("sust.b.3d.v4.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 5321
} else { 
# 5322
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5323
__asm__ volatile("sust.b.3d.v4.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 5324
} else { 
# 5325
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5326
__asm__ volatile("sust.b.3d.v4.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 5327
}  }  }  
# 5328
} 
#endif
# 5330 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5331
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5341
::exit(___);}
#if 0
# 5331
{ 
# 5332
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5333
__asm__ volatile("sust.b.3d.v4.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 5334
} else { 
# 5335
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5336
__asm__ volatile("sust.b.3d.v4.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 5337
} else { 
# 5338
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5339
__asm__ volatile("sust.b.3d.v4.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 5340
}  }  }  
# 5341
} 
#endif
# 5343 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5344
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5354
::exit(___);}
#if 0
# 5344
{ 
# 5345
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5346
__asm__ volatile("sust.b.3d.v4.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 5347
} else { 
# 5348
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5349
__asm__ volatile("sust.b.3d.v4.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 5350
} else { 
# 5351
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5352
__asm__ volatile("sust.b.3d.v4.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 5353
}  }  }  
# 5354
} 
#endif
# 5356 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5357
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5367
::exit(___);}
#if 0
# 5357
{ 
# 5358
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5359
__asm__ volatile("sust.b.3d.v4.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 5360
} else { 
# 5361
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5362
__asm__ volatile("sust.b.3d.v4.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 5363
} else { 
# 5364
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5365
__asm__ volatile("sust.b.3d.v4.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 5366
}  }  }  
# 5367
} 
#endif
# 5369 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5370
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 5380
::exit(___);}
#if 0
# 5370
{ 
# 5371
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5372
__asm__ volatile("sust.b.3d.v4.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "f" (data.x), "f" (data.y), "f" (data.z), "f" (data.w)); 
# 5373
} else { 
# 5374
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5375
__asm__ volatile("sust.b.3d.v4.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "f" (data.x), "f" (data.y), "f" (data.z), "f" (data.w)); 
# 5376
} else { 
# 5377
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5378
__asm__ volatile("sust.b.3d.v4.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (x), "r" (y), "r" (z), "f" (data.x), "f" (data.y), "f" (data.z), "f" (data.w)); 
# 5379
}  }  }  
# 5380
} 
#endif
# 5388 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(char data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5389
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5399
::exit(___);}
#if 0
# 5389
{ 
# 5390
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5391
__asm__ volatile("sust.b.a1d.b8.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "r" ((int)data)); 
# 5392
} else { 
# 5393
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5394
__asm__ volatile("sust.b.a1d.b8.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "r" ((int)data)); 
# 5395
} else { 
# 5396
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5397
__asm__ volatile("sust.b.a1d.b8.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "r" ((int)data)); 
# 5398
}  }  }  
# 5399
} 
#endif
# 5401 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5402
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5412
::exit(___);}
#if 0
# 5402
{ 
# 5403
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5404
__asm__ volatile("sust.b.a1d.b8.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "r" ((int)data)); 
# 5405
} else { 
# 5406
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5407
__asm__ volatile("sust.b.a1d.b8.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "r" ((int)data)); 
# 5408
} else { 
# 5409
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5410
__asm__ volatile("sust.b.a1d.b8.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "r" ((int)data)); 
# 5411
}  }  }  
# 5412
} 
#endif
# 5414 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5415
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5425
::exit(___);}
#if 0
# 5415
{ 
# 5416
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5417
__asm__ volatile("sust.b.a1d.b8.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "r" ((int)(data.x))); 
# 5418
} else { 
# 5419
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5420
__asm__ volatile("sust.b.a1d.b8.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "r" ((int)(data.x))); 
# 5421
} else { 
# 5422
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5423
__asm__ volatile("sust.b.a1d.b8.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "r" ((int)(data.x))); 
# 5424
}  }  }  
# 5425
} 
#endif
# 5427 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5428
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5438
::exit(___);}
#if 0
# 5428
{ 
# 5429
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5430
__asm__ volatile("sust.b.a1d.b8.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "r" ((unsigned)data)); 
# 5431
} else { 
# 5432
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5433
__asm__ volatile("sust.b.a1d.b8.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "r" ((unsigned)data)); 
# 5434
} else { 
# 5435
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5436
__asm__ volatile("sust.b.a1d.b8.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "r" ((unsigned)data)); 
# 5437
}  }  }  
# 5438
} 
#endif
# 5440 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5441
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5451
::exit(___);}
#if 0
# 5441
{ 
# 5442
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5443
__asm__ volatile("sust.b.a1d.b8.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "r" ((unsigned)(data.x))); 
# 5444
} else { 
# 5445
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5446
__asm__ volatile("sust.b.a1d.b8.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "r" ((unsigned)(data.x))); 
# 5447
} else { 
# 5448
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5449
__asm__ volatile("sust.b.a1d.b8.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "r" ((unsigned)(data.x))); 
# 5450
}  }  }  
# 5451
} 
#endif
# 5453 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(short data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5454
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5464
::exit(___);}
#if 0
# 5454
{ 
# 5455
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5456
__asm__ volatile("sust.b.a1d.b16.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "h" (data)); 
# 5457
} else { 
# 5458
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5459
__asm__ volatile("sust.b.a1d.b16.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "h" (data)); 
# 5460
} else { 
# 5461
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5462
__asm__ volatile("sust.b.a1d.b16.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "h" (data)); 
# 5463
}  }  }  
# 5464
} 
#endif
# 5466 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5467
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5477
::exit(___);}
#if 0
# 5467
{ 
# 5468
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5469
__asm__ volatile("sust.b.a1d.b16.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "h" (data.x)); 
# 5470
} else { 
# 5471
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5472
__asm__ volatile("sust.b.a1d.b16.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "h" (data.x)); 
# 5473
} else { 
# 5474
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5475
__asm__ volatile("sust.b.a1d.b16.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "h" (data.x)); 
# 5476
}  }  }  
# 5477
} 
#endif
# 5479 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5480
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5490
::exit(___);}
#if 0
# 5480
{ 
# 5481
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5482
__asm__ volatile("sust.b.a1d.b16.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "h" (data)); 
# 5483
} else { 
# 5484
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5485
__asm__ volatile("sust.b.a1d.b16.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "h" (data)); 
# 5486
} else { 
# 5487
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5488
__asm__ volatile("sust.b.a1d.b16.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "h" (data)); 
# 5489
}  }  }  
# 5490
} 
#endif
# 5492 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5493
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5503
::exit(___);}
#if 0
# 5493
{ 
# 5494
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5495
__asm__ volatile("sust.b.a1d.b16.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "h" (data.x)); 
# 5496
} else { 
# 5497
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5498
__asm__ volatile("sust.b.a1d.b16.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "h" (data.x)); 
# 5499
} else { 
# 5500
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5501
__asm__ volatile("sust.b.a1d.b16.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "h" (data.x)); 
# 5502
}  }  }  
# 5503
} 
#endif
# 5505 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(int data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5506
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5516
::exit(___);}
#if 0
# 5506
{ 
# 5507
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5508
__asm__ volatile("sust.b.a1d.b32.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (data)); 
# 5509
} else { 
# 5510
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5511
__asm__ volatile("sust.b.a1d.b32.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (data)); 
# 5512
} else { 
# 5513
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5514
__asm__ volatile("sust.b.a1d.b32.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (data)); 
# 5515
}  }  }  
# 5516
} 
#endif
# 5518 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5519
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5529
::exit(___);}
#if 0
# 5519
{ 
# 5520
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5521
__asm__ volatile("sust.b.a1d.b32.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (data.x)); 
# 5522
} else { 
# 5523
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5524
__asm__ volatile("sust.b.a1d.b32.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (data.x)); 
# 5525
} else { 
# 5526
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5527
__asm__ volatile("sust.b.a1d.b32.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (data.x)); 
# 5528
}  }  }  
# 5529
} 
#endif
# 5531 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5532
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5542
::exit(___);}
#if 0
# 5532
{ 
# 5533
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5534
__asm__ volatile("sust.b.a1d.b32.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (data)); 
# 5535
} else { 
# 5536
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5537
__asm__ volatile("sust.b.a1d.b32.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (data)); 
# 5538
} else { 
# 5539
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5540
__asm__ volatile("sust.b.a1d.b32.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (data)); 
# 5541
}  }  }  
# 5542
} 
#endif
# 5544 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5545
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5555
::exit(___);}
#if 0
# 5545
{ 
# 5546
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5547
__asm__ volatile("sust.b.a1d.b32.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (data.x)); 
# 5548
} else { 
# 5549
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5550
__asm__ volatile("sust.b.a1d.b32.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (data.x)); 
# 5551
} else { 
# 5552
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5553
__asm__ volatile("sust.b.a1d.b32.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (data.x)); 
# 5554
}  }  }  
# 5555
} 
#endif
# 5557 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(long long data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5558
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5568
::exit(___);}
#if 0
# 5558
{ 
# 5559
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5560
__asm__ volatile("sust.b.a1d.b64.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "l" (data)); 
# 5561
} else { 
# 5562
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5563
__asm__ volatile("sust.b.a1d.b64.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "l" (data)); 
# 5564
} else { 
# 5565
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5566
__asm__ volatile("sust.b.a1d.b64.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "l" (data)); 
# 5567
}  }  }  
# 5568
} 
#endif
# 5570 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5571
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5581
::exit(___);}
#if 0
# 5571
{ 
# 5572
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5573
__asm__ volatile("sust.b.a1d.b64.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "l" (data.x)); 
# 5574
} else { 
# 5575
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5576
__asm__ volatile("sust.b.a1d.b64.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "l" (data.x)); 
# 5577
} else { 
# 5578
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5579
__asm__ volatile("sust.b.a1d.b64.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "l" (data.x)); 
# 5580
}  }  }  
# 5581
} 
#endif
# 5583 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5584
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5594
::exit(___);}
#if 0
# 5584
{ 
# 5585
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5586
__asm__ volatile("sust.b.a1d.b64.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "l" (data)); 
# 5587
} else { 
# 5588
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5589
__asm__ volatile("sust.b.a1d.b64.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "l" (data)); 
# 5590
} else { 
# 5591
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5592
__asm__ volatile("sust.b.a1d.b64.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "l" (data)); 
# 5593
}  }  }  
# 5594
} 
#endif
# 5596 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5597
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5607
::exit(___);}
#if 0
# 5597
{ 
# 5598
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5599
__asm__ volatile("sust.b.a1d.b64.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "l" (data.x)); 
# 5600
} else { 
# 5601
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5602
__asm__ volatile("sust.b.a1d.b64.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "l" (data.x)); 
# 5603
} else { 
# 5604
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5605
__asm__ volatile("sust.b.a1d.b64.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "l" (data.x)); 
# 5606
}  }  }  
# 5607
} 
#endif
# 5609 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(float data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5610
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5620
::exit(___);}
#if 0
# 5610
{ 
# 5611
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5612
__asm__ volatile("sust.b.a1d.b32.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "f" (data)); 
# 5613
} else { 
# 5614
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5615
__asm__ volatile("sust.b.a1d.b32.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "f" (data)); 
# 5616
} else { 
# 5617
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5618
__asm__ volatile("sust.b.a1d.b32.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "f" (data)); 
# 5619
}  }  }  
# 5620
} 
#endif
# 5622 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5623
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5633
::exit(___);}
#if 0
# 5623
{ 
# 5624
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5625
__asm__ volatile("sust.b.a1d.b32.trap  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "f" (data.x)); 
# 5626
} else { 
# 5627
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5628
__asm__ volatile("sust.b.a1d.b32.clamp [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "f" (data.x)); 
# 5629
} else { 
# 5630
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5631
__asm__ volatile("sust.b.a1d.b32.zero  [%0, {%1, %2}], {%3};" : : "l" (surfObject), "r" (layer), "r" (x), "f" (data.x)); 
# 5632
}  }  }  
# 5633
} 
#endif
# 5641 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5642
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5652
::exit(___);}
#if 0
# 5642
{ 
# 5643
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5644
__asm__ volatile("sust.b.a1d.v2.b8.trap  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" ((int)(data.x)), "r" ((int)(data.y))); 
# 5645
} else { 
# 5646
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5647
__asm__ volatile("sust.b.a1d.v2.b8.clamp [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" ((int)(data.x)), "r" ((int)(data.y))); 
# 5648
} else { 
# 5649
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5650
__asm__ volatile("sust.b.a1d.v2.b8.zero  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" ((int)(data.x)), "r" ((int)(data.y))); 
# 5651
}  }  }  
# 5652
} 
#endif
# 5654 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5655
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5665
::exit(___);}
#if 0
# 5655
{ 
# 5656
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5657
__asm__ volatile("sust.b.a1d.v2.b8.trap  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y))); 
# 5658
} else { 
# 5659
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5660
__asm__ volatile("sust.b.a1d.v2.b8.clamp [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y))); 
# 5661
} else { 
# 5662
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5663
__asm__ volatile("sust.b.a1d.v2.b8.zero  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y))); 
# 5664
}  }  }  
# 5665
} 
#endif
# 5667 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5668
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5678
::exit(___);}
#if 0
# 5668
{ 
# 5669
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5670
__asm__ volatile("sust.b.a1d.v2.b16.trap  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (layer), "r" (x), "h" (data.x), "h" (data.y)); 
# 5671
} else { 
# 5672
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5673
__asm__ volatile("sust.b.a1d.v2.b16.clamp [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (layer), "r" (x), "h" (data.x), "h" (data.y)); 
# 5674
} else { 
# 5675
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5676
__asm__ volatile("sust.b.a1d.v2.b16.zero  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (layer), "r" (x), "h" (data.x), "h" (data.y)); 
# 5677
}  }  }  
# 5678
} 
#endif
# 5680 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5681
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5691
::exit(___);}
#if 0
# 5681
{ 
# 5682
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5683
__asm__ volatile("sust.b.a1d.v2.b16.trap  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (layer), "r" (x), "h" (data.x), "h" (data.y)); 
# 5684
} else { 
# 5685
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5686
__asm__ volatile("sust.b.a1d.v2.b16.clamp [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (layer), "r" (x), "h" (data.x), "h" (data.y)); 
# 5687
} else { 
# 5688
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5689
__asm__ volatile("sust.b.a1d.v2.b16.zero  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (layer), "r" (x), "h" (data.x), "h" (data.y)); 
# 5690
}  }  }  
# 5691
} 
#endif
# 5693 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5694
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5704
::exit(___);}
#if 0
# 5694
{ 
# 5695
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5696
__asm__ volatile("sust.b.a1d.v2.b32.trap  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (data.x), "r" (data.y)); 
# 5697
} else { 
# 5698
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5699
__asm__ volatile("sust.b.a1d.v2.b32.clamp [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (data.x), "r" (data.y)); 
# 5700
} else { 
# 5701
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5702
__asm__ volatile("sust.b.a1d.v2.b32.zero  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (data.x), "r" (data.y)); 
# 5703
}  }  }  
# 5704
} 
#endif
# 5706 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5707
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5717
::exit(___);}
#if 0
# 5707
{ 
# 5708
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5709
__asm__ volatile("sust.b.a1d.v2.b32.trap  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (data.x), "r" (data.y)); 
# 5710
} else { 
# 5711
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5712
__asm__ volatile("sust.b.a1d.v2.b32.clamp [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (data.x), "r" (data.y)); 
# 5713
} else { 
# 5714
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5715
__asm__ volatile("sust.b.a1d.v2.b32.zero  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (data.x), "r" (data.y)); 
# 5716
}  }  }  
# 5717
} 
#endif
# 5719 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5720
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5730
::exit(___);}
#if 0
# 5720
{ 
# 5721
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5722
__asm__ volatile("sust.b.a1d.v2.b64.trap  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (layer), "r" (x), "l" (data.x), "l" (data.y)); 
# 5723
} else { 
# 5724
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5725
__asm__ volatile("sust.b.a1d.v2.b64.clamp [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (layer), "r" (x), "l" (data.x), "l" (data.y)); 
# 5726
} else { 
# 5727
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5728
__asm__ volatile("sust.b.a1d.v2.b64.zero  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (layer), "r" (x), "l" (data.x), "l" (data.y)); 
# 5729
}  }  }  
# 5730
} 
#endif
# 5732 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5733
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5743
::exit(___);}
#if 0
# 5733
{ 
# 5734
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5735
__asm__ volatile("sust.b.a1d.v2.b64.trap  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (layer), "r" (x), "l" (data.x), "l" (data.y)); 
# 5736
} else { 
# 5737
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5738
__asm__ volatile("sust.b.a1d.v2.b64.clamp [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (layer), "r" (x), "l" (data.x), "l" (data.y)); 
# 5739
} else { 
# 5740
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5741
__asm__ volatile("sust.b.a1d.v2.b64.zero  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (layer), "r" (x), "l" (data.x), "l" (data.y)); 
# 5742
}  }  }  
# 5743
} 
#endif
# 5745 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5746
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5756
::exit(___);}
#if 0
# 5746
{ 
# 5747
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5748
__asm__ volatile("sust.b.a1d.v2.b32.trap  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (layer), "r" (x), "f" (data.x), "f" (data.y)); 
# 5749
} else { 
# 5750
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5751
__asm__ volatile("sust.b.a1d.v2.b32.clamp [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (layer), "r" (x), "f" (data.x), "f" (data.y)); 
# 5752
} else { 
# 5753
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5754
__asm__ volatile("sust.b.a1d.v2.b32.zero  [%0, {%1, %2}], {%3, %4};" : : "l" (surfObject), "r" (layer), "r" (x), "f" (data.x), "f" (data.y)); 
# 5755
}  }  }  
# 5756
} 
#endif
# 5764 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5765
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5775
::exit(___);}
#if 0
# 5765
{ 
# 5766
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5767
__asm__ volatile("sust.b.a1d.v4.b8.trap  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (layer), "r" (x), "r" ((int)(data.x)), "r" ((int)(data.y)), "r" ((int)(data.z)), "r" ((int)(data.w))); 
# 5768
} else { 
# 5769
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5770
__asm__ volatile("sust.b.a1d.v4.b8.clamp [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (layer), "r" (x), "r" ((int)(data.x)), "r" ((int)(data.y)), "r" ((int)(data.z)), "r" ((int)(data.w))); 
# 5771
} else { 
# 5772
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5773
__asm__ volatile("sust.b.a1d.v4.b8.zero  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (layer), "r" (x), "r" ((int)(data.x)), "r" ((int)(data.y)), "r" ((int)(data.z)), "r" ((int)(data.w))); 
# 5774
}  }  }  
# 5775
} 
#endif
# 5777 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5778
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5788
::exit(___);}
#if 0
# 5778
{ 
# 5779
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5780
__asm__ volatile("sust.b.a1d.v4.b8.trap  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (layer), "r" (x), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y)), "r" ((unsigned)(data.z)), "r" ((unsigned)(data.w))); 
# 5781
} else { 
# 5782
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5783
__asm__ volatile("sust.b.a1d.v4.b8.clamp [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (layer), "r" (x), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y)), "r" ((unsigned)(data.z)), "r" ((unsigned)(data.w))); 
# 5784
} else { 
# 5785
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5786
__asm__ volatile("sust.b.a1d.v4.b8.zero  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (layer), "r" (x), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y)), "r" ((unsigned)(data.z)), "r" ((unsigned)(data.w))); 
# 5787
}  }  }  
# 5788
} 
#endif
# 5790 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5791
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5801
::exit(___);}
#if 0
# 5791
{ 
# 5792
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5793
__asm__ volatile("sust.b.a1d.v4.b16.trap  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (layer), "r" (x), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 5794
} else { 
# 5795
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5796
__asm__ volatile("sust.b.a1d.v4.b16.clamp [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (layer), "r" (x), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 5797
} else { 
# 5798
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5799
__asm__ volatile("sust.b.a1d.v4.b16.zero  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (layer), "r" (x), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 5800
}  }  }  
# 5801
} 
#endif
# 5803 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5804
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5814
::exit(___);}
#if 0
# 5804
{ 
# 5805
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5806
__asm__ volatile("sust.b.a1d.v4.b16.trap  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (layer), "r" (x), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 5807
} else { 
# 5808
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5809
__asm__ volatile("sust.b.a1d.v4.b16.clamp [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (layer), "r" (x), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 5810
} else { 
# 5811
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5812
__asm__ volatile("sust.b.a1d.v4.b16.zero  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (layer), "r" (x), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 5813
}  }  }  
# 5814
} 
#endif
# 5816 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5817
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5827
::exit(___);}
#if 0
# 5817
{ 
# 5818
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5819
__asm__ volatile("sust.b.a1d.v4.b32.trap  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 5820
} else { 
# 5821
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5822
__asm__ volatile("sust.b.a1d.v4.b32.clamp [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 5823
} else { 
# 5824
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5825
__asm__ volatile("sust.b.a1d.v4.b32.zero  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 5826
}  }  }  
# 5827
} 
#endif
# 5829 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5830
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5840
::exit(___);}
#if 0
# 5830
{ 
# 5831
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5832
__asm__ volatile("sust.b.a1d.v4.b32.trap  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 5833
} else { 
# 5834
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5835
__asm__ volatile("sust.b.a1d.v4.b32.clamp [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 5836
} else { 
# 5837
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5838
__asm__ volatile("sust.b.a1d.v4.b32.zero  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 5839
}  }  }  
# 5840
} 
#endif
# 5842 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5843
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 5853
::exit(___);}
#if 0
# 5843
{ 
# 5844
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5845
__asm__ volatile("sust.b.a1d.v4.b32.trap  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (layer), "r" (x), "f" (data.x), "f" (data.y), "f" (data.z), "f" (data.w)); 
# 5846
} else { 
# 5847
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5848
__asm__ volatile("sust.b.a1d.v4.b32.clamp [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (layer), "r" (x), "f" (data.x), "f" (data.y), "f" (data.z), "f" (data.w)); 
# 5849
} else { 
# 5850
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5851
__asm__ volatile("sust.b.a1d.v4.b32.zero  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l" (surfObject), "r" (layer), "r" (x), "f" (data.x), "f" (data.y), "f" (data.z), "f" (data.w)); 
# 5852
}  }  }  
# 5853
} 
#endif
# 5861 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5862
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 5872
::exit(___);}
#if 0
# 5862
{ 
# 5863
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5864
__asm__ volatile("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" ((int)data)); 
# 5865
} else { 
# 5866
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5867
__asm__ volatile("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" ((int)data)); 
# 5868
} else { 
# 5869
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5870
__asm__ volatile("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" ((int)data)); 
# 5871
}  }  }  
# 5872
} 
#endif
# 5874 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5875
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 5885
::exit(___);}
#if 0
# 5875
{ 
# 5876
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5877
__asm__ volatile("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" ((int)data)); 
# 5878
} else { 
# 5879
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5880
__asm__ volatile("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" ((int)data)); 
# 5881
} else { 
# 5882
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5883
__asm__ volatile("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" ((int)data)); 
# 5884
}  }  }  
# 5885
} 
#endif
# 5887 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5888
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 5898
::exit(___);}
#if 0
# 5888
{ 
# 5889
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5890
__asm__ volatile("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" ((int)(data.x))); 
# 5891
} else { 
# 5892
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5893
__asm__ volatile("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" ((int)(data.x))); 
# 5894
} else { 
# 5895
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5896
__asm__ volatile("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" ((int)(data.x))); 
# 5897
}  }  }  
# 5898
} 
#endif
# 5900 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5901
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 5911
::exit(___);}
#if 0
# 5901
{ 
# 5902
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5903
__asm__ volatile("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" ((unsigned)data)); 
# 5904
} else { 
# 5905
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5906
__asm__ volatile("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" ((unsigned)data)); 
# 5907
} else { 
# 5908
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5909
__asm__ volatile("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" ((unsigned)data)); 
# 5910
}  }  }  
# 5911
} 
#endif
# 5913 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5914
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 5924
::exit(___);}
#if 0
# 5914
{ 
# 5915
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5916
__asm__ volatile("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" ((unsigned)(data.x))); 
# 5917
} else { 
# 5918
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5919
__asm__ volatile("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" ((unsigned)(data.x))); 
# 5920
} else { 
# 5921
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5922
__asm__ volatile("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" ((unsigned)(data.x))); 
# 5923
}  }  }  
# 5924
} 
#endif
# 5926 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5927
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 5937
::exit(___);}
#if 0
# 5927
{ 
# 5928
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5929
__asm__ volatile("sust.b.a2d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "h" (data)); 
# 5930
} else { 
# 5931
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5932
__asm__ volatile("sust.b.a2d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "h" (data)); 
# 5933
} else { 
# 5934
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5935
__asm__ volatile("sust.b.a2d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "h" (data)); 
# 5936
}  }  }  
# 5937
} 
#endif
# 5939 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5940
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 5950
::exit(___);}
#if 0
# 5940
{ 
# 5941
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5942
__asm__ volatile("sust.b.a2d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "h" (data.x)); 
# 5943
} else { 
# 5944
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5945
__asm__ volatile("sust.b.a2d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "h" (data.x)); 
# 5946
} else { 
# 5947
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5948
__asm__ volatile("sust.b.a2d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "h" (data.x)); 
# 5949
}  }  }  
# 5950
} 
#endif
# 5952 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5953
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 5963
::exit(___);}
#if 0
# 5953
{ 
# 5954
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5955
__asm__ volatile("sust.b.a2d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "h" (data)); 
# 5956
} else { 
# 5957
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5958
__asm__ volatile("sust.b.a2d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "h" (data)); 
# 5959
} else { 
# 5960
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5961
__asm__ volatile("sust.b.a2d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "h" (data)); 
# 5962
}  }  }  
# 5963
} 
#endif
# 5965 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5966
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 5976
::exit(___);}
#if 0
# 5966
{ 
# 5967
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5968
__asm__ volatile("sust.b.a2d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "h" (data.x)); 
# 5969
} else { 
# 5970
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5971
__asm__ volatile("sust.b.a2d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "h" (data.x)); 
# 5972
} else { 
# 5973
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5974
__asm__ volatile("sust.b.a2d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "h" (data.x)); 
# 5975
}  }  }  
# 5976
} 
#endif
# 5978 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5979
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 5989
::exit(___);}
#if 0
# 5979
{ 
# 5980
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5981
__asm__ volatile("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" (data)); 
# 5982
} else { 
# 5983
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5984
__asm__ volatile("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" (data)); 
# 5985
} else { 
# 5986
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 5987
__asm__ volatile("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" (data)); 
# 5988
}  }  }  
# 5989
} 
#endif
# 5991 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 5992
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6002
::exit(___);}
#if 0
# 5992
{ 
# 5993
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 5994
__asm__ volatile("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" (data.x)); 
# 5995
} else { 
# 5996
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 5997
__asm__ volatile("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" (data.x)); 
# 5998
} else { 
# 5999
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6000
__asm__ volatile("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" (data.x)); 
# 6001
}  }  }  
# 6002
} 
#endif
# 6004 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6005
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6015
::exit(___);}
#if 0
# 6005
{ 
# 6006
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6007
__asm__ volatile("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" (data)); 
# 6008
} else { 
# 6009
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6010
__asm__ volatile("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" (data)); 
# 6011
} else { 
# 6012
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6013
__asm__ volatile("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" (data)); 
# 6014
}  }  }  
# 6015
} 
#endif
# 6017 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6018
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6028
::exit(___);}
#if 0
# 6018
{ 
# 6019
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6020
__asm__ volatile("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" (data.x)); 
# 6021
} else { 
# 6022
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6023
__asm__ volatile("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" (data.x)); 
# 6024
} else { 
# 6025
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6026
__asm__ volatile("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" (data.x)); 
# 6027
}  }  }  
# 6028
} 
#endif
# 6030 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6031
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6041
::exit(___);}
#if 0
# 6031
{ 
# 6032
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6033
__asm__ volatile("sust.b.a2d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "l" (data)); 
# 6034
} else { 
# 6035
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6036
__asm__ volatile("sust.b.a2d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "l" (data)); 
# 6037
} else { 
# 6038
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6039
__asm__ volatile("sust.b.a2d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "l" (data)); 
# 6040
}  }  }  
# 6041
} 
#endif
# 6043 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6044
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6054
::exit(___);}
#if 0
# 6044
{ 
# 6045
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6046
__asm__ volatile("sust.b.a2d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "l" (data.x)); 
# 6047
} else { 
# 6048
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6049
__asm__ volatile("sust.b.a2d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "l" (data.x)); 
# 6050
} else { 
# 6051
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6052
__asm__ volatile("sust.b.a2d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "l" (data.x)); 
# 6053
}  }  }  
# 6054
} 
#endif
# 6056 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6057
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6067
::exit(___);}
#if 0
# 6057
{ 
# 6058
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6059
__asm__ volatile("sust.b.a2d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "l" (data)); 
# 6060
} else { 
# 6061
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6062
__asm__ volatile("sust.b.a2d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "l" (data)); 
# 6063
} else { 
# 6064
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6065
__asm__ volatile("sust.b.a2d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "l" (data)); 
# 6066
}  }  }  
# 6067
} 
#endif
# 6069 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6070
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6080
::exit(___);}
#if 0
# 6070
{ 
# 6071
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6072
__asm__ volatile("sust.b.a2d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "l" (data.x)); 
# 6073
} else { 
# 6074
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6075
__asm__ volatile("sust.b.a2d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "l" (data.x)); 
# 6076
} else { 
# 6077
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6078
__asm__ volatile("sust.b.a2d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "l" (data.x)); 
# 6079
}  }  }  
# 6080
} 
#endif
# 6082 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6083
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6093
::exit(___);}
#if 0
# 6083
{ 
# 6084
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6085
__asm__ volatile("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "f" (data)); 
# 6086
} else { 
# 6087
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6088
__asm__ volatile("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "f" (data)); 
# 6089
} else { 
# 6090
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6091
__asm__ volatile("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "f" (data)); 
# 6092
}  }  }  
# 6093
} 
#endif
# 6095 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6096
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6106
::exit(___);}
#if 0
# 6096
{ 
# 6097
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6098
__asm__ volatile("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "f" (data.x)); 
# 6099
} else { 
# 6100
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6101
__asm__ volatile("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "f" (data.x)); 
# 6102
} else { 
# 6103
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6104
__asm__ volatile("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "f" (data.x)); 
# 6105
}  }  }  
# 6106
} 
#endif
# 6114 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6115
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6125
::exit(___);}
#if 0
# 6115
{ 
# 6116
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6117
__asm__ volatile("sust.b.a2d.v2.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" ((int)(data.x)), "r" ((int)(data.y))); 
# 6118
} else { 
# 6119
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6120
__asm__ volatile("sust.b.a2d.v2.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" ((int)(data.x)), "r" ((int)(data.y))); 
# 6121
} else { 
# 6122
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6123
__asm__ volatile("sust.b.a2d.v2.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" ((int)(data.x)), "r" ((int)(data.y))); 
# 6124
}  }  }  
# 6125
} 
#endif
# 6127 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6128
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6138
::exit(___);}
#if 0
# 6128
{ 
# 6129
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6130
__asm__ volatile("sust.b.a2d.v2.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y))); 
# 6131
} else { 
# 6132
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6133
__asm__ volatile("sust.b.a2d.v2.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y))); 
# 6134
} else { 
# 6135
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6136
__asm__ volatile("sust.b.a2d.v2.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y))); 
# 6137
}  }  }  
# 6138
} 
#endif
# 6140 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6141
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6151
::exit(___);}
#if 0
# 6141
{ 
# 6142
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6143
__asm__ volatile("sust.b.a2d.v2.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "h" (data.x), "h" (data.y)); 
# 6144
} else { 
# 6145
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6146
__asm__ volatile("sust.b.a2d.v2.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "h" (data.x), "h" (data.y)); 
# 6147
} else { 
# 6148
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6149
__asm__ volatile("sust.b.a2d.v2.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "h" (data.x), "h" (data.y)); 
# 6150
}  }  }  
# 6151
} 
#endif
# 6153 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6154
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6164
::exit(___);}
#if 0
# 6154
{ 
# 6155
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6156
__asm__ volatile("sust.b.a2d.v2.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "h" (data.x), "h" (data.y)); 
# 6157
} else { 
# 6158
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6159
__asm__ volatile("sust.b.a2d.v2.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "h" (data.x), "h" (data.y)); 
# 6160
} else { 
# 6161
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6162
__asm__ volatile("sust.b.a2d.v2.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "h" (data.x), "h" (data.y)); 
# 6163
}  }  }  
# 6164
} 
#endif
# 6166 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6167
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6177
::exit(___);}
#if 0
# 6167
{ 
# 6168
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6169
__asm__ volatile("sust.b.a2d.v2.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" (data.x), "r" (data.y)); 
# 6170
} else { 
# 6171
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6172
__asm__ volatile("sust.b.a2d.v2.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" (data.x), "r" (data.y)); 
# 6173
} else { 
# 6174
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6175
__asm__ volatile("sust.b.a2d.v2.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" (data.x), "r" (data.y)); 
# 6176
}  }  }  
# 6177
} 
#endif
# 6179 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6180
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6190
::exit(___);}
#if 0
# 6180
{ 
# 6181
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6182
__asm__ volatile("sust.b.a2d.v2.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" (data.x), "r" (data.y)); 
# 6183
} else { 
# 6184
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6185
__asm__ volatile("sust.b.a2d.v2.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" (data.x), "r" (data.y)); 
# 6186
} else { 
# 6187
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6188
__asm__ volatile("sust.b.a2d.v2.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" (data.x), "r" (data.y)); 
# 6189
}  }  }  
# 6190
} 
#endif
# 6192 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6193
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6203
::exit(___);}
#if 0
# 6193
{ 
# 6194
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6195
__asm__ volatile("sust.b.a2d.v2.b64.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "l" (data.x), "l" (data.y)); 
# 6196
} else { 
# 6197
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6198
__asm__ volatile("sust.b.a2d.v2.b64.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "l" (data.x), "l" (data.y)); 
# 6199
} else { 
# 6200
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6201
__asm__ volatile("sust.b.a2d.v2.b64.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "l" (data.x), "l" (data.y)); 
# 6202
}  }  }  
# 6203
} 
#endif
# 6205 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6206
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6216
::exit(___);}
#if 0
# 6206
{ 
# 6207
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6208
__asm__ volatile("sust.b.a2d.v2.b64.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "l" (data.x), "l" (data.y)); 
# 6209
} else { 
# 6210
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6211
__asm__ volatile("sust.b.a2d.v2.b64.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "l" (data.x), "l" (data.y)); 
# 6212
} else { 
# 6213
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6214
__asm__ volatile("sust.b.a2d.v2.b64.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "l" (data.x), "l" (data.y)); 
# 6215
}  }  }  
# 6216
} 
#endif
# 6218 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6219
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6229
::exit(___);}
#if 0
# 6219
{ 
# 6220
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6221
__asm__ volatile("sust.b.a2d.v2.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "f" (data.x), "f" (data.y)); 
# 6222
} else { 
# 6223
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6224
__asm__ volatile("sust.b.a2d.v2.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "f" (data.x), "f" (data.y)); 
# 6225
} else { 
# 6226
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6227
__asm__ volatile("sust.b.a2d.v2.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "f" (data.x), "f" (data.y)); 
# 6228
}  }  }  
# 6229
} 
#endif
# 6237 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6238
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6248
::exit(___);}
#if 0
# 6238
{ 
# 6239
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6240
__asm__ volatile("sust.b.a2d.v4.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" ((int)(data.x)), "r" ((int)(data.y)), "r" ((int)(data.z)), "r" ((int)(data.w))); 
# 6241
} else { 
# 6242
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6243
__asm__ volatile("sust.b.a2d.v4.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" ((int)(data.x)), "r" ((int)(data.y)), "r" ((int)(data.z)), "r" ((int)(data.w))); 
# 6244
} else { 
# 6245
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6246
__asm__ volatile("sust.b.a2d.v4.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" ((int)(data.x)), "r" ((int)(data.y)), "r" ((int)(data.z)), "r" ((int)(data.w))); 
# 6247
}  }  }  
# 6248
} 
#endif
# 6250 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6251
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6261
::exit(___);}
#if 0
# 6251
{ 
# 6252
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6253
__asm__ volatile("sust.b.a2d.v4.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y)), "r" ((unsigned)(data.z)), "r" ((unsigned)(data.w))); 
# 6254
} else { 
# 6255
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6256
__asm__ volatile("sust.b.a2d.v4.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y)), "r" ((unsigned)(data.z)), "r" ((unsigned)(data.w))); 
# 6257
} else { 
# 6258
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6259
__asm__ volatile("sust.b.a2d.v4.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y)), "r" ((unsigned)(data.z)), "r" ((unsigned)(data.w))); 
# 6260
}  }  }  
# 6261
} 
#endif
# 6263 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6264
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6274
::exit(___);}
#if 0
# 6264
{ 
# 6265
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6266
__asm__ volatile("sust.b.a2d.v4.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 6267
} else { 
# 6268
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6269
__asm__ volatile("sust.b.a2d.v4.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 6270
} else { 
# 6271
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6272
__asm__ volatile("sust.b.a2d.v4.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 6273
}  }  }  
# 6274
} 
#endif
# 6276 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6277
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6287
::exit(___);}
#if 0
# 6277
{ 
# 6278
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6279
__asm__ volatile("sust.b.a2d.v4.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 6280
} else { 
# 6281
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6282
__asm__ volatile("sust.b.a2d.v4.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 6283
} else { 
# 6284
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6285
__asm__ volatile("sust.b.a2d.v4.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 6286
}  }  }  
# 6287
} 
#endif
# 6289 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6290
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6300
::exit(___);}
#if 0
# 6290
{ 
# 6291
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6292
__asm__ volatile("sust.b.a2d.v4.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 6293
} else { 
# 6294
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6295
__asm__ volatile("sust.b.a2d.v4.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 6296
} else { 
# 6297
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6298
__asm__ volatile("sust.b.a2d.v4.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 6299
}  }  }  
# 6300
} 
#endif
# 6302 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6303
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6313
::exit(___);}
#if 0
# 6303
{ 
# 6304
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6305
__asm__ volatile("sust.b.a2d.v4.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 6306
} else { 
# 6307
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6308
__asm__ volatile("sust.b.a2d.v4.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 6309
} else { 
# 6310
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6311
__asm__ volatile("sust.b.a2d.v4.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 6312
}  }  }  
# 6313
} 
#endif
# 6315 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6316
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 6326
::exit(___);}
#if 0
# 6316
{ 
# 6317
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6318
__asm__ volatile("sust.b.a2d.v4.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "f" (data.x), "f" (data.y), "f" (data.z), "f" (data.w)); 
# 6319
} else { 
# 6320
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6321
__asm__ volatile("sust.b.a2d.v4.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "f" (data.x), "f" (data.y), "f" (data.z), "f" (data.w)); 
# 6322
} else { 
# 6323
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6324
__asm__ volatile("sust.b.a2d.v4.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layer), "r" (x), "r" (y), "f" (data.x), "f" (data.y), "f" (data.z), "f" (data.w)); 
# 6325
}  }  }  
# 6326
} 
#endif
# 6334 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6335
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6345
::exit(___);}
#if 0
# 6335
{ 
# 6336
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6337
__asm__ volatile("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" ((int)data)); 
# 6338
} else { 
# 6339
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6340
__asm__ volatile("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" ((int)data)); 
# 6341
} else { 
# 6342
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6343
__asm__ volatile("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" ((int)data)); 
# 6344
}  }  }  
# 6345
} 
#endif
# 6347 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6348
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6358
::exit(___);}
#if 0
# 6348
{ 
# 6349
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6350
__asm__ volatile("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" ((int)data)); 
# 6351
} else { 
# 6352
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6353
__asm__ volatile("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" ((int)data)); 
# 6354
} else { 
# 6355
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6356
__asm__ volatile("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" ((int)data)); 
# 6357
}  }  }  
# 6358
} 
#endif
# 6360 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6361
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6371
::exit(___);}
#if 0
# 6361
{ 
# 6362
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6363
__asm__ volatile("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" ((int)(data.x))); 
# 6364
} else { 
# 6365
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6366
__asm__ volatile("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" ((int)(data.x))); 
# 6367
} else { 
# 6368
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6369
__asm__ volatile("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" ((int)(data.x))); 
# 6370
}  }  }  
# 6371
} 
#endif
# 6373 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6374
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6384
::exit(___);}
#if 0
# 6374
{ 
# 6375
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6376
__asm__ volatile("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" ((unsigned)data)); 
# 6377
} else { 
# 6378
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6379
__asm__ volatile("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" ((unsigned)data)); 
# 6380
} else { 
# 6381
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6382
__asm__ volatile("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" ((unsigned)data)); 
# 6383
}  }  }  
# 6384
} 
#endif
# 6386 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6387
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6397
::exit(___);}
#if 0
# 6387
{ 
# 6388
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6389
__asm__ volatile("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" ((unsigned)(data.x))); 
# 6390
} else { 
# 6391
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6392
__asm__ volatile("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" ((unsigned)(data.x))); 
# 6393
} else { 
# 6394
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6395
__asm__ volatile("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" ((unsigned)(data.x))); 
# 6396
}  }  }  
# 6397
} 
#endif
# 6399 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6400
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6410
::exit(___);}
#if 0
# 6400
{ 
# 6401
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6402
__asm__ volatile("sust.b.a2d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "h" (data)); 
# 6403
} else { 
# 6404
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6405
__asm__ volatile("sust.b.a2d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "h" (data)); 
# 6406
} else { 
# 6407
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6408
__asm__ volatile("sust.b.a2d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "h" (data)); 
# 6409
}  }  }  
# 6410
} 
#endif
# 6412 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6413
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6423
::exit(___);}
#if 0
# 6413
{ 
# 6414
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6415
__asm__ volatile("sust.b.a2d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "h" (data.x)); 
# 6416
} else { 
# 6417
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6418
__asm__ volatile("sust.b.a2d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "h" (data.x)); 
# 6419
} else { 
# 6420
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6421
__asm__ volatile("sust.b.a2d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "h" (data.x)); 
# 6422
}  }  }  
# 6423
} 
#endif
# 6425 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6426
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6436
::exit(___);}
#if 0
# 6426
{ 
# 6427
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6428
__asm__ volatile("sust.b.a2d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "h" (data)); 
# 6429
} else { 
# 6430
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6431
__asm__ volatile("sust.b.a2d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "h" (data)); 
# 6432
} else { 
# 6433
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6434
__asm__ volatile("sust.b.a2d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "h" (data)); 
# 6435
}  }  }  
# 6436
} 
#endif
# 6438 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6439
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6449
::exit(___);}
#if 0
# 6439
{ 
# 6440
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6441
__asm__ volatile("sust.b.a2d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "h" (data.x)); 
# 6442
} else { 
# 6443
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6444
__asm__ volatile("sust.b.a2d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "h" (data.x)); 
# 6445
} else { 
# 6446
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6447
__asm__ volatile("sust.b.a2d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "h" (data.x)); 
# 6448
}  }  }  
# 6449
} 
#endif
# 6451 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6452
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6462
::exit(___);}
#if 0
# 6452
{ 
# 6453
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6454
__asm__ volatile("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" (data)); 
# 6455
} else { 
# 6456
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6457
__asm__ volatile("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" (data)); 
# 6458
} else { 
# 6459
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6460
__asm__ volatile("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" (data)); 
# 6461
}  }  }  
# 6462
} 
#endif
# 6464 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6465
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6475
::exit(___);}
#if 0
# 6465
{ 
# 6466
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6467
__asm__ volatile("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" (data.x)); 
# 6468
} else { 
# 6469
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6470
__asm__ volatile("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" (data.x)); 
# 6471
} else { 
# 6472
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6473
__asm__ volatile("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" (data.x)); 
# 6474
}  }  }  
# 6475
} 
#endif
# 6477 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6478
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6488
::exit(___);}
#if 0
# 6478
{ 
# 6479
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6480
__asm__ volatile("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" (data)); 
# 6481
} else { 
# 6482
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6483
__asm__ volatile("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" (data)); 
# 6484
} else { 
# 6485
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6486
__asm__ volatile("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" (data)); 
# 6487
}  }  }  
# 6488
} 
#endif
# 6490 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6491
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6501
::exit(___);}
#if 0
# 6491
{ 
# 6492
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6493
__asm__ volatile("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" (data.x)); 
# 6494
} else { 
# 6495
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6496
__asm__ volatile("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" (data.x)); 
# 6497
} else { 
# 6498
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6499
__asm__ volatile("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" (data.x)); 
# 6500
}  }  }  
# 6501
} 
#endif
# 6503 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6504
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6514
::exit(___);}
#if 0
# 6504
{ 
# 6505
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6506
__asm__ volatile("sust.b.a2d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "l" (data)); 
# 6507
} else { 
# 6508
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6509
__asm__ volatile("sust.b.a2d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "l" (data)); 
# 6510
} else { 
# 6511
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6512
__asm__ volatile("sust.b.a2d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "l" (data)); 
# 6513
}  }  }  
# 6514
} 
#endif
# 6516 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6517
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6527
::exit(___);}
#if 0
# 6517
{ 
# 6518
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6519
__asm__ volatile("sust.b.a2d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "l" (data.x)); 
# 6520
} else { 
# 6521
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6522
__asm__ volatile("sust.b.a2d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "l" (data.x)); 
# 6523
} else { 
# 6524
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6525
__asm__ volatile("sust.b.a2d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "l" (data.x)); 
# 6526
}  }  }  
# 6527
} 
#endif
# 6529 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6530
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6540
::exit(___);}
#if 0
# 6530
{ 
# 6531
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6532
__asm__ volatile("sust.b.a2d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "l" (data)); 
# 6533
} else { 
# 6534
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6535
__asm__ volatile("sust.b.a2d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "l" (data)); 
# 6536
} else { 
# 6537
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6538
__asm__ volatile("sust.b.a2d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "l" (data)); 
# 6539
}  }  }  
# 6540
} 
#endif
# 6542 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6543
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6553
::exit(___);}
#if 0
# 6543
{ 
# 6544
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6545
__asm__ volatile("sust.b.a2d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "l" (data.x)); 
# 6546
} else { 
# 6547
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6548
__asm__ volatile("sust.b.a2d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "l" (data.x)); 
# 6549
} else { 
# 6550
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6551
__asm__ volatile("sust.b.a2d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "l" (data.x)); 
# 6552
}  }  }  
# 6553
} 
#endif
# 6555 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6556
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6566
::exit(___);}
#if 0
# 6556
{ 
# 6557
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6558
__asm__ volatile("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "f" (data)); 
# 6559
} else { 
# 6560
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6561
__asm__ volatile("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "f" (data)); 
# 6562
} else { 
# 6563
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6564
__asm__ volatile("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "f" (data)); 
# 6565
}  }  }  
# 6566
} 
#endif
# 6568 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6569
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6579
::exit(___);}
#if 0
# 6569
{ 
# 6570
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6571
__asm__ volatile("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "f" (data.x)); 
# 6572
} else { 
# 6573
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6574
__asm__ volatile("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "f" (data.x)); 
# 6575
} else { 
# 6576
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6577
__asm__ volatile("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "f" (data.x)); 
# 6578
}  }  }  
# 6579
} 
#endif
# 6587 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6588
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6598
::exit(___);}
#if 0
# 6588
{ 
# 6589
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6590
__asm__ volatile("sust.b.a2d.v2.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" ((int)(data.x)), "r" ((int)(data.y))); 
# 6591
} else { 
# 6592
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6593
__asm__ volatile("sust.b.a2d.v2.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" ((int)(data.x)), "r" ((int)(data.y))); 
# 6594
} else { 
# 6595
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6596
__asm__ volatile("sust.b.a2d.v2.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" ((int)(data.x)), "r" ((int)(data.y))); 
# 6597
}  }  }  
# 6598
} 
#endif
# 6600 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6601
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6611
::exit(___);}
#if 0
# 6601
{ 
# 6602
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6603
__asm__ volatile("sust.b.a2d.v2.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y))); 
# 6604
} else { 
# 6605
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6606
__asm__ volatile("sust.b.a2d.v2.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y))); 
# 6607
} else { 
# 6608
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6609
__asm__ volatile("sust.b.a2d.v2.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y))); 
# 6610
}  }  }  
# 6611
} 
#endif
# 6613 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6614
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6624
::exit(___);}
#if 0
# 6614
{ 
# 6615
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6616
__asm__ volatile("sust.b.a2d.v2.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "h" (data.x), "h" (data.y)); 
# 6617
} else { 
# 6618
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6619
__asm__ volatile("sust.b.a2d.v2.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "h" (data.x), "h" (data.y)); 
# 6620
} else { 
# 6621
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6622
__asm__ volatile("sust.b.a2d.v2.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "h" (data.x), "h" (data.y)); 
# 6623
}  }  }  
# 6624
} 
#endif
# 6626 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6627
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6637
::exit(___);}
#if 0
# 6627
{ 
# 6628
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6629
__asm__ volatile("sust.b.a2d.v2.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "h" (data.x), "h" (data.y)); 
# 6630
} else { 
# 6631
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6632
__asm__ volatile("sust.b.a2d.v2.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "h" (data.x), "h" (data.y)); 
# 6633
} else { 
# 6634
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6635
__asm__ volatile("sust.b.a2d.v2.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "h" (data.x), "h" (data.y)); 
# 6636
}  }  }  
# 6637
} 
#endif
# 6639 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6640
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6650
::exit(___);}
#if 0
# 6640
{ 
# 6641
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6642
__asm__ volatile("sust.b.a2d.v2.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" (data.x), "r" (data.y)); 
# 6643
} else { 
# 6644
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6645
__asm__ volatile("sust.b.a2d.v2.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" (data.x), "r" (data.y)); 
# 6646
} else { 
# 6647
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6648
__asm__ volatile("sust.b.a2d.v2.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" (data.x), "r" (data.y)); 
# 6649
}  }  }  
# 6650
} 
#endif
# 6652 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6653
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6663
::exit(___);}
#if 0
# 6653
{ 
# 6654
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6655
__asm__ volatile("sust.b.a2d.v2.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" (data.x), "r" (data.y)); 
# 6656
} else { 
# 6657
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6658
__asm__ volatile("sust.b.a2d.v2.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" (data.x), "r" (data.y)); 
# 6659
} else { 
# 6660
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6661
__asm__ volatile("sust.b.a2d.v2.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" (data.x), "r" (data.y)); 
# 6662
}  }  }  
# 6663
} 
#endif
# 6665 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6666
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6676
::exit(___);}
#if 0
# 6666
{ 
# 6667
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6668
__asm__ volatile("sust.b.a2d.v2.b64.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "l" (data.x), "l" (data.y)); 
# 6669
} else { 
# 6670
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6671
__asm__ volatile("sust.b.a2d.v2.b64.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "l" (data.x), "l" (data.y)); 
# 6672
} else { 
# 6673
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6674
__asm__ volatile("sust.b.a2d.v2.b64.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "l" (data.x), "l" (data.y)); 
# 6675
}  }  }  
# 6676
} 
#endif
# 6678 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6679
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6689
::exit(___);}
#if 0
# 6679
{ 
# 6680
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6681
__asm__ volatile("sust.b.a2d.v2.b64.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "l" (data.x), "l" (data.y)); 
# 6682
} else { 
# 6683
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6684
__asm__ volatile("sust.b.a2d.v2.b64.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "l" (data.x), "l" (data.y)); 
# 6685
} else { 
# 6686
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6687
__asm__ volatile("sust.b.a2d.v2.b64.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "l" (data.x), "l" (data.y)); 
# 6688
}  }  }  
# 6689
} 
#endif
# 6691 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6692
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6702
::exit(___);}
#if 0
# 6692
{ 
# 6693
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6694
__asm__ volatile("sust.b.a2d.v2.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "f" (data.x), "f" (data.y)); 
# 6695
} else { 
# 6696
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6697
__asm__ volatile("sust.b.a2d.v2.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "f" (data.x), "f" (data.y)); 
# 6698
} else { 
# 6699
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6700
__asm__ volatile("sust.b.a2d.v2.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "f" (data.x), "f" (data.y)); 
# 6701
}  }  }  
# 6702
} 
#endif
# 6710 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6711
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6721
::exit(___);}
#if 0
# 6711
{ 
# 6712
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6713
__asm__ volatile("sust.b.a2d.v4.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" ((int)(data.x)), "r" ((int)(data.y)), "r" ((int)(data.z)), "r" ((int)(data.w))); 
# 6714
} else { 
# 6715
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6716
__asm__ volatile("sust.b.a2d.v4.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" ((int)(data.x)), "r" ((int)(data.y)), "r" ((int)(data.z)), "r" ((int)(data.w))); 
# 6717
} else { 
# 6718
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6719
__asm__ volatile("sust.b.a2d.v4.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" ((int)(data.x)), "r" ((int)(data.y)), "r" ((int)(data.z)), "r" ((int)(data.w))); 
# 6720
}  }  }  
# 6721
} 
#endif
# 6723 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6724
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6734
::exit(___);}
#if 0
# 6724
{ 
# 6725
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6726
__asm__ volatile("sust.b.a2d.v4.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y)), "r" ((unsigned)(data.z)), "r" ((unsigned)(data.w))); 
# 6727
} else { 
# 6728
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6729
__asm__ volatile("sust.b.a2d.v4.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y)), "r" ((unsigned)(data.z)), "r" ((unsigned)(data.w))); 
# 6730
} else { 
# 6731
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6732
__asm__ volatile("sust.b.a2d.v4.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y)), "r" ((unsigned)(data.z)), "r" ((unsigned)(data.w))); 
# 6733
}  }  }  
# 6734
} 
#endif
# 6736 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6737
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6747
::exit(___);}
#if 0
# 6737
{ 
# 6738
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6739
__asm__ volatile("sust.b.a2d.v4.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 6740
} else { 
# 6741
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6742
__asm__ volatile("sust.b.a2d.v4.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 6743
} else { 
# 6744
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6745
__asm__ volatile("sust.b.a2d.v4.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 6746
}  }  }  
# 6747
} 
#endif
# 6749 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6750
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6760
::exit(___);}
#if 0
# 6750
{ 
# 6751
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6752
__asm__ volatile("sust.b.a2d.v4.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 6753
} else { 
# 6754
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6755
__asm__ volatile("sust.b.a2d.v4.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 6756
} else { 
# 6757
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6758
__asm__ volatile("sust.b.a2d.v4.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 6759
}  }  }  
# 6760
} 
#endif
# 6762 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6763
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6773
::exit(___);}
#if 0
# 6763
{ 
# 6764
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6765
__asm__ volatile("sust.b.a2d.v4.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 6766
} else { 
# 6767
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6768
__asm__ volatile("sust.b.a2d.v4.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 6769
} else { 
# 6770
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6771
__asm__ volatile("sust.b.a2d.v4.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 6772
}  }  }  
# 6773
} 
#endif
# 6775 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6776
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6786
::exit(___);}
#if 0
# 6776
{ 
# 6777
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6778
__asm__ volatile("sust.b.a2d.v4.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 6779
} else { 
# 6780
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6781
__asm__ volatile("sust.b.a2d.v4.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 6782
} else { 
# 6783
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6784
__asm__ volatile("sust.b.a2d.v4.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 6785
}  }  }  
# 6786
} 
#endif
# 6788 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6789
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 6799
::exit(___);}
#if 0
# 6789
{ 
# 6790
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6791
__asm__ volatile("sust.b.a2d.v4.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "f" (data.x), "f" (data.y), "f" (data.z), "f" (data.w)); 
# 6792
} else { 
# 6793
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6794
__asm__ volatile("sust.b.a2d.v4.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "f" (data.x), "f" (data.y), "f" (data.z), "f" (data.w)); 
# 6795
} else { 
# 6796
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6797
__asm__ volatile("sust.b.a2d.v4.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (face), "r" (x), "r" (y), "f" (data.x), "f" (data.y), "f" (data.z), "f" (data.w)); 
# 6798
}  }  }  
# 6799
} 
#endif
# 6807 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6808
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6818
::exit(___);}
#if 0
# 6808
{ 
# 6809
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6810
__asm__ volatile("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" ((int)data)); 
# 6811
} else { 
# 6812
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6813
__asm__ volatile("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" ((int)data)); 
# 6814
} else { 
# 6815
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6816
__asm__ volatile("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" ((int)data)); 
# 6817
}  }  }  
# 6818
} 
#endif
# 6820 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6821
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6831
::exit(___);}
#if 0
# 6821
{ 
# 6822
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6823
__asm__ volatile("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" ((int)data)); 
# 6824
} else { 
# 6825
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6826
__asm__ volatile("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" ((int)data)); 
# 6827
} else { 
# 6828
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6829
__asm__ volatile("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" ((int)data)); 
# 6830
}  }  }  
# 6831
} 
#endif
# 6833 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6834
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6844
::exit(___);}
#if 0
# 6834
{ 
# 6835
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6836
__asm__ volatile("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" ((int)(data.x))); 
# 6837
} else { 
# 6838
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6839
__asm__ volatile("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" ((int)(data.x))); 
# 6840
} else { 
# 6841
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6842
__asm__ volatile("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" ((int)(data.x))); 
# 6843
}  }  }  
# 6844
} 
#endif
# 6846 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6847
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6857
::exit(___);}
#if 0
# 6847
{ 
# 6848
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6849
__asm__ volatile("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" ((unsigned)data)); 
# 6850
} else { 
# 6851
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6852
__asm__ volatile("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" ((unsigned)data)); 
# 6853
} else { 
# 6854
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6855
__asm__ volatile("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" ((unsigned)data)); 
# 6856
}  }  }  
# 6857
} 
#endif
# 6859 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6860
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6870
::exit(___);}
#if 0
# 6860
{ 
# 6861
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6862
__asm__ volatile("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" ((unsigned)(data.x))); 
# 6863
} else { 
# 6864
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6865
__asm__ volatile("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" ((unsigned)(data.x))); 
# 6866
} else { 
# 6867
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6868
__asm__ volatile("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" ((unsigned)(data.x))); 
# 6869
}  }  }  
# 6870
} 
#endif
# 6872 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6873
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6883
::exit(___);}
#if 0
# 6873
{ 
# 6874
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6875
__asm__ volatile("sust.b.a2d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "h" (data)); 
# 6876
} else { 
# 6877
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6878
__asm__ volatile("sust.b.a2d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "h" (data)); 
# 6879
} else { 
# 6880
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6881
__asm__ volatile("sust.b.a2d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "h" (data)); 
# 6882
}  }  }  
# 6883
} 
#endif
# 6885 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6886
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6896
::exit(___);}
#if 0
# 6886
{ 
# 6887
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6888
__asm__ volatile("sust.b.a2d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "h" (data.x)); 
# 6889
} else { 
# 6890
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6891
__asm__ volatile("sust.b.a2d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "h" (data.x)); 
# 6892
} else { 
# 6893
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6894
__asm__ volatile("sust.b.a2d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "h" (data.x)); 
# 6895
}  }  }  
# 6896
} 
#endif
# 6898 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6899
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6909
::exit(___);}
#if 0
# 6899
{ 
# 6900
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6901
__asm__ volatile("sust.b.a2d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "h" (data)); 
# 6902
} else { 
# 6903
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6904
__asm__ volatile("sust.b.a2d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "h" (data)); 
# 6905
} else { 
# 6906
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6907
__asm__ volatile("sust.b.a2d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "h" (data)); 
# 6908
}  }  }  
# 6909
} 
#endif
# 6911 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6912
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6922
::exit(___);}
#if 0
# 6912
{ 
# 6913
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6914
__asm__ volatile("sust.b.a2d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "h" (data.x)); 
# 6915
} else { 
# 6916
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6917
__asm__ volatile("sust.b.a2d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "h" (data.x)); 
# 6918
} else { 
# 6919
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6920
__asm__ volatile("sust.b.a2d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "h" (data.x)); 
# 6921
}  }  }  
# 6922
} 
#endif
# 6924 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6925
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6935
::exit(___);}
#if 0
# 6925
{ 
# 6926
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6927
__asm__ volatile("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" (data)); 
# 6928
} else { 
# 6929
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6930
__asm__ volatile("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" (data)); 
# 6931
} else { 
# 6932
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6933
__asm__ volatile("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" (data)); 
# 6934
}  }  }  
# 6935
} 
#endif
# 6937 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6938
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6948
::exit(___);}
#if 0
# 6938
{ 
# 6939
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6940
__asm__ volatile("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" (data.x)); 
# 6941
} else { 
# 6942
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6943
__asm__ volatile("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" (data.x)); 
# 6944
} else { 
# 6945
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6946
__asm__ volatile("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" (data.x)); 
# 6947
}  }  }  
# 6948
} 
#endif
# 6950 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6951
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6961
::exit(___);}
#if 0
# 6951
{ 
# 6952
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6953
__asm__ volatile("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" (data)); 
# 6954
} else { 
# 6955
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6956
__asm__ volatile("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" (data)); 
# 6957
} else { 
# 6958
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6959
__asm__ volatile("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" (data)); 
# 6960
}  }  }  
# 6961
} 
#endif
# 6963 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6964
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6974
::exit(___);}
#if 0
# 6964
{ 
# 6965
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6966
__asm__ volatile("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" (data.x)); 
# 6967
} else { 
# 6968
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6969
__asm__ volatile("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" (data.x)); 
# 6970
} else { 
# 6971
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6972
__asm__ volatile("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" (data.x)); 
# 6973
}  }  }  
# 6974
} 
#endif
# 6976 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6977
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 6987
::exit(___);}
#if 0
# 6977
{ 
# 6978
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6979
__asm__ volatile("sust.b.a2d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "l" (data)); 
# 6980
} else { 
# 6981
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6982
__asm__ volatile("sust.b.a2d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "l" (data)); 
# 6983
} else { 
# 6984
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6985
__asm__ volatile("sust.b.a2d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "l" (data)); 
# 6986
}  }  }  
# 6987
} 
#endif
# 6989 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 6990
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7000
::exit(___);}
#if 0
# 6990
{ 
# 6991
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 6992
__asm__ volatile("sust.b.a2d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "l" (data.x)); 
# 6993
} else { 
# 6994
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 6995
__asm__ volatile("sust.b.a2d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "l" (data.x)); 
# 6996
} else { 
# 6997
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 6998
__asm__ volatile("sust.b.a2d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "l" (data.x)); 
# 6999
}  }  }  
# 7000
} 
#endif
# 7002 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 7003
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7013
::exit(___);}
#if 0
# 7003
{ 
# 7004
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7005
__asm__ volatile("sust.b.a2d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "l" (data)); 
# 7006
} else { 
# 7007
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7008
__asm__ volatile("sust.b.a2d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "l" (data)); 
# 7009
} else { 
# 7010
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7011
__asm__ volatile("sust.b.a2d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "l" (data)); 
# 7012
}  }  }  
# 7013
} 
#endif
# 7015 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 7016
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7026
::exit(___);}
#if 0
# 7016
{ 
# 7017
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7018
__asm__ volatile("sust.b.a2d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "l" (data.x)); 
# 7019
} else { 
# 7020
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7021
__asm__ volatile("sust.b.a2d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "l" (data.x)); 
# 7022
} else { 
# 7023
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7024
__asm__ volatile("sust.b.a2d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "l" (data.x)); 
# 7025
}  }  }  
# 7026
} 
#endif
# 7028 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 7029
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7039
::exit(___);}
#if 0
# 7029
{ 
# 7030
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7031
__asm__ volatile("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "f" (data)); 
# 7032
} else { 
# 7033
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7034
__asm__ volatile("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "f" (data)); 
# 7035
} else { 
# 7036
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7037
__asm__ volatile("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "f" (data)); 
# 7038
}  }  }  
# 7039
} 
#endif
# 7041 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 7042
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7052
::exit(___);}
#if 0
# 7042
{ 
# 7043
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7044
__asm__ volatile("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "f" (data.x)); 
# 7045
} else { 
# 7046
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7047
__asm__ volatile("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "f" (data.x)); 
# 7048
} else { 
# 7049
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7050
__asm__ volatile("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "f" (data.x)); 
# 7051
}  }  }  
# 7052
} 
#endif
# 7060 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 7061
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7071
::exit(___);}
#if 0
# 7061
{ 
# 7062
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7063
__asm__ volatile("sust.b.a2d.v2.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" ((int)(data.x)), "r" ((int)(data.y))); 
# 7064
} else { 
# 7065
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7066
__asm__ volatile("sust.b.a2d.v2.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" ((int)(data.x)), "r" ((int)(data.y))); 
# 7067
} else { 
# 7068
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7069
__asm__ volatile("sust.b.a2d.v2.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" ((int)(data.x)), "r" ((int)(data.y))); 
# 7070
}  }  }  
# 7071
} 
#endif
# 7073 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 7074
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7084
::exit(___);}
#if 0
# 7074
{ 
# 7075
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7076
__asm__ volatile("sust.b.a2d.v2.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y))); 
# 7077
} else { 
# 7078
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7079
__asm__ volatile("sust.b.a2d.v2.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y))); 
# 7080
} else { 
# 7081
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7082
__asm__ volatile("sust.b.a2d.v2.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y))); 
# 7083
}  }  }  
# 7084
} 
#endif
# 7086 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 7087
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7097
::exit(___);}
#if 0
# 7087
{ 
# 7088
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7089
__asm__ volatile("sust.b.a2d.v2.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "h" (data.x), "h" (data.y)); 
# 7090
} else { 
# 7091
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7092
__asm__ volatile("sust.b.a2d.v2.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "h" (data.x), "h" (data.y)); 
# 7093
} else { 
# 7094
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7095
__asm__ volatile("sust.b.a2d.v2.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "h" (data.x), "h" (data.y)); 
# 7096
}  }  }  
# 7097
} 
#endif
# 7099 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 7100
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7110
::exit(___);}
#if 0
# 7100
{ 
# 7101
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7102
__asm__ volatile("sust.b.a2d.v2.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "h" (data.x), "h" (data.y)); 
# 7103
} else { 
# 7104
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7105
__asm__ volatile("sust.b.a2d.v2.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "h" (data.x), "h" (data.y)); 
# 7106
} else { 
# 7107
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7108
__asm__ volatile("sust.b.a2d.v2.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "h" (data.x), "h" (data.y)); 
# 7109
}  }  }  
# 7110
} 
#endif
# 7112 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 7113
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7123
::exit(___);}
#if 0
# 7113
{ 
# 7114
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7115
__asm__ volatile("sust.b.a2d.v2.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" (data.x), "r" (data.y)); 
# 7116
} else { 
# 7117
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7118
__asm__ volatile("sust.b.a2d.v2.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" (data.x), "r" (data.y)); 
# 7119
} else { 
# 7120
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7121
__asm__ volatile("sust.b.a2d.v2.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" (data.x), "r" (data.y)); 
# 7122
}  }  }  
# 7123
} 
#endif
# 7125 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 7126
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7136
::exit(___);}
#if 0
# 7126
{ 
# 7127
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7128
__asm__ volatile("sust.b.a2d.v2.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" (data.x), "r" (data.y)); 
# 7129
} else { 
# 7130
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7131
__asm__ volatile("sust.b.a2d.v2.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" (data.x), "r" (data.y)); 
# 7132
} else { 
# 7133
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7134
__asm__ volatile("sust.b.a2d.v2.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" (data.x), "r" (data.y)); 
# 7135
}  }  }  
# 7136
} 
#endif
# 7138 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 7139
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7149
::exit(___);}
#if 0
# 7139
{ 
# 7140
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7141
__asm__ volatile("sust.b.a2d.v2.b64.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "l" (data.x), "l" (data.y)); 
# 7142
} else { 
# 7143
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7144
__asm__ volatile("sust.b.a2d.v2.b64.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "l" (data.x), "l" (data.y)); 
# 7145
} else { 
# 7146
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7147
__asm__ volatile("sust.b.a2d.v2.b64.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "l" (data.x), "l" (data.y)); 
# 7148
}  }  }  
# 7149
} 
#endif
# 7151 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 7152
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7162
::exit(___);}
#if 0
# 7152
{ 
# 7153
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7154
__asm__ volatile("sust.b.a2d.v2.b64.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "l" (data.x), "l" (data.y)); 
# 7155
} else { 
# 7156
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7157
__asm__ volatile("sust.b.a2d.v2.b64.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "l" (data.x), "l" (data.y)); 
# 7158
} else { 
# 7159
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7160
__asm__ volatile("sust.b.a2d.v2.b64.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "l" (data.x), "l" (data.y)); 
# 7161
}  }  }  
# 7162
} 
#endif
# 7164 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 7165
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7175
::exit(___);}
#if 0
# 7165
{ 
# 7166
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7167
__asm__ volatile("sust.b.a2d.v2.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "f" (data.x), "f" (data.y)); 
# 7168
} else { 
# 7169
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7170
__asm__ volatile("sust.b.a2d.v2.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "f" (data.x), "f" (data.y)); 
# 7171
} else { 
# 7172
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7173
__asm__ volatile("sust.b.a2d.v2.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "f" (data.x), "f" (data.y)); 
# 7174
}  }  }  
# 7175
} 
#endif
# 7183 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 7184
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7194
::exit(___);}
#if 0
# 7184
{ 
# 7185
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7186
__asm__ volatile("sust.b.a2d.v4.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" ((int)(data.x)), "r" ((int)(data.y)), "r" ((int)(data.z)), "r" ((int)(data.w))); 
# 7187
} else { 
# 7188
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7189
__asm__ volatile("sust.b.a2d.v4.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" ((int)(data.x)), "r" ((int)(data.y)), "r" ((int)(data.z)), "r" ((int)(data.w))); 
# 7190
} else { 
# 7191
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7192
__asm__ volatile("sust.b.a2d.v4.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" ((int)(data.x)), "r" ((int)(data.y)), "r" ((int)(data.z)), "r" ((int)(data.w))); 
# 7193
}  }  }  
# 7194
} 
#endif
# 7196 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 7197
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7207
::exit(___);}
#if 0
# 7197
{ 
# 7198
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7199
__asm__ volatile("sust.b.a2d.v4.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y)), "r" ((unsigned)(data.z)), "r" ((unsigned)(data.w))); 
# 7200
} else { 
# 7201
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7202
__asm__ volatile("sust.b.a2d.v4.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y)), "r" ((unsigned)(data.z)), "r" ((unsigned)(data.w))); 
# 7203
} else { 
# 7204
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7205
__asm__ volatile("sust.b.a2d.v4.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" ((unsigned)(data.x)), "r" ((unsigned)(data.y)), "r" ((unsigned)(data.z)), "r" ((unsigned)(data.w))); 
# 7206
}  }  }  
# 7207
} 
#endif
# 7209 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 7210
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7220
::exit(___);}
#if 0
# 7210
{ 
# 7211
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7212
__asm__ volatile("sust.b.a2d.v4.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 7213
} else { 
# 7214
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7215
__asm__ volatile("sust.b.a2d.v4.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 7216
} else { 
# 7217
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7218
__asm__ volatile("sust.b.a2d.v4.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 7219
}  }  }  
# 7220
} 
#endif
# 7222 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 7223
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7233
::exit(___);}
#if 0
# 7223
{ 
# 7224
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7225
__asm__ volatile("sust.b.a2d.v4.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 7226
} else { 
# 7227
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7228
__asm__ volatile("sust.b.a2d.v4.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 7229
} else { 
# 7230
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7231
__asm__ volatile("sust.b.a2d.v4.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "h" (data.x), "h" (data.y), "h" (data.z), "h" (data.w)); 
# 7232
}  }  }  
# 7233
} 
#endif
# 7235 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 7236
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7246
::exit(___);}
#if 0
# 7236
{ 
# 7237
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7238
__asm__ volatile("sust.b.a2d.v4.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 7239
} else { 
# 7240
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7241
__asm__ volatile("sust.b.a2d.v4.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 7242
} else { 
# 7243
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7244
__asm__ volatile("sust.b.a2d.v4.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 7245
}  }  }  
# 7246
} 
#endif
# 7248 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 7249
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7259
::exit(___);}
#if 0
# 7249
{ 
# 7250
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7251
__asm__ volatile("sust.b.a2d.v4.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 7252
} else { 
# 7253
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7254
__asm__ volatile("sust.b.a2d.v4.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 7255
} else { 
# 7256
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7257
__asm__ volatile("sust.b.a2d.v4.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "r" (data.x), "r" (data.y), "r" (data.z), "r" (data.w)); 
# 7258
}  }  }  
# 7259
} 
#endif
# 7261 "/usr/local/cuda-5.0/include/surface_indirect_functions.h"
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = (cudaBoundaryModeTrap)) 
# 7262
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
# 7272
::exit(___);}
#if 0
# 7262
{ 
# 7263
if (boundaryMode == (cudaBoundaryModeTrap)) { 
# 7264
__asm__ volatile("sust.b.a2d.v4.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "f" (data.x), "f" (data.y), "f" (data.z), "f" (data.w)); 
# 7265
} else { 
# 7266
if (boundaryMode == (cudaBoundaryModeClamp)) { 
# 7267
__asm__ volatile("sust.b.a2d.v4.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "f" (data.x), "f" (data.y), "f" (data.z), "f" (data.w)); 
# 7268
} else { 
# 7269
if (boundaryMode == (cudaBoundaryModeZero)) { 
# 7270
__asm__ volatile("sust.b.a2d.v4.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l" (surfObject), "r" (layerface), "r" (x), "r" (y), "f" (data.x), "f" (data.y), "f" (data.z), "f" (data.w)); 
# 7271
}  }  }  
# 7272
} 
#endif
# 66 "/usr/local/cuda-5.0/include/device_launch_parameters.h"
extern "C" { extern const uint3 threadIdx; } 
# 67
extern "C" { extern const uint3 blockIdx; } 
# 68
extern "C" { extern const dim3 blockDim; } 
# 69
extern "C" { extern const dim3 gridDim; } 
# 70
extern "C" { extern const int warpSize; } 
# 120 "/usr/local/cuda-5.0/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 121
cudaSetupArgument(T 
# 122
arg, size_t 
# 123
offset) 
# 125
{ 
# 126
return cudaSetupArgument((const void *)(&arg), sizeof(T), offset); 
# 127
} 
# 159 "/usr/local/cuda-5.0/include/cuda_runtime.h"
static inline cudaError_t cudaEventCreate(cudaEvent_t *
# 160
event, unsigned 
# 161
flags) 
# 163
{ 
# 164
return cudaEventCreateWithFlags(event, flags); 
# 165
} 
# 222 "/usr/local/cuda-5.0/include/cuda_runtime.h"
static inline cudaError_t cudaMallocHost(void **
# 223
ptr, size_t 
# 224
size, unsigned 
# 225
flags) 
# 227
{ 
# 228
return cudaHostAlloc(ptr, size, flags); 
# 229
} 
# 231
template< class T> inline cudaError_t 
# 232
cudaHostAlloc(T **
# 233
ptr, size_t 
# 234
size, unsigned 
# 235
flags) 
# 237
{ 
# 238
return cudaHostAlloc((void **)((void *)ptr), size, flags); 
# 239
} 
# 241
template< class T> inline cudaError_t 
# 242
cudaHostGetDevicePointer(T **
# 243
pDevice, void *
# 244
pHost, unsigned 
# 245
flags) 
# 247
{ 
# 248
return cudaHostGetDevicePointer((void **)((void *)pDevice), pHost, flags); 
# 249
} 
# 251
template< class T> inline cudaError_t 
# 252
cudaMalloc(T **
# 253
devPtr, size_t 
# 254
size) 
# 256
{ 
# 257
return cudaMalloc((void **)((void *)devPtr), size); 
# 258
} 
# 260
template< class T> inline cudaError_t 
# 261
cudaMallocHost(T **
# 262
ptr, size_t 
# 263
size, unsigned 
# 264
flags = (0)) 
# 266
{ 
# 267
return cudaMallocHost((void **)((void *)ptr), size, flags); 
# 268
} 
# 270
template< class T> inline cudaError_t 
# 271
cudaMallocPitch(T **
# 272
devPtr, size_t *
# 273
pitch, size_t 
# 274
width, size_t 
# 275
height) 
# 277
{ 
# 278
return cudaMallocPitch((void **)((void *)devPtr), pitch, width, height); 
# 279
} 
# 316 "/usr/local/cuda-5.0/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 317
cudaMemcpyToSymbol(const T &
# 318
symbol, const void *
# 319
src, size_t 
# 320
count, size_t 
# 321
offset = (0), cudaMemcpyKind 
# 322
kind = (cudaMemcpyHostToDevice)) 
# 324
{ 
# 325
return cudaMemcpyToSymbol((const void *)(&symbol), src, count, offset, kind); 
# 326
} 
# 368 "/usr/local/cuda-5.0/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 369
cudaMemcpyToSymbolAsync(const T &
# 370
symbol, const void *
# 371
src, size_t 
# 372
count, size_t 
# 373
offset = (0), cudaMemcpyKind 
# 374
kind = (cudaMemcpyHostToDevice), cudaStream_t 
# 375
stream = 0) 
# 377
{ 
# 378
return cudaMemcpyToSymbolAsync((const void *)(&symbol), src, count, offset, kind, stream); 
# 379
} 
# 414 "/usr/local/cuda-5.0/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 415
cudaMemcpyFromSymbol(void *
# 416
dst, const T &
# 417
symbol, size_t 
# 418
count, size_t 
# 419
offset = (0), cudaMemcpyKind 
# 420
kind = (cudaMemcpyDeviceToHost)) 
# 422
{ 
# 423
return cudaMemcpyFromSymbol(dst, (const void *)(&symbol), count, offset, kind); 
# 424
} 
# 466 "/usr/local/cuda-5.0/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 467
cudaMemcpyFromSymbolAsync(void *
# 468
dst, const T &
# 469
symbol, size_t 
# 470
count, size_t 
# 471
offset = (0), cudaMemcpyKind 
# 472
kind = (cudaMemcpyDeviceToHost), cudaStream_t 
# 473
stream = 0) 
# 475
{ 
# 476
return cudaMemcpyFromSymbolAsync(dst, (const void *)(&symbol), count, offset, kind, stream); 
# 477
} 
# 499 "/usr/local/cuda-5.0/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 500
cudaGetSymbolAddress(void **
# 501
devPtr, const T &
# 502
symbol) 
# 504
{ 
# 505
return cudaGetSymbolAddress(devPtr, (const void *)(&symbol)); 
# 506
} 
# 528 "/usr/local/cuda-5.0/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 529
cudaGetSymbolSize(size_t *
# 530
size, const T &
# 531
symbol) 
# 533
{ 
# 534
return cudaGetSymbolSize(size, (const void *)(&symbol)); 
# 535
} 
# 571 "/usr/local/cuda-5.0/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t 
# 572
cudaBindTexture(size_t *
# 573
offset, const texture< T, dim, readMode>  &
# 574
tex, const void *
# 575
devPtr, const cudaChannelFormatDesc &
# 576
desc, size_t 
# 577
size = (((2147483647) * 2U) + 1U)) 
# 579
{ 
# 580
return cudaBindTexture(offset, &tex, devPtr, &desc, size); 
# 581
} 
# 616 "/usr/local/cuda-5.0/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t 
# 617
cudaBindTexture(size_t *
# 618
offset, const texture< T, dim, readMode>  &
# 619
tex, const void *
# 620
devPtr, size_t 
# 621
size = (((2147483647) * 2U) + 1U)) 
# 623
{ 
# 624
return cudaBindTexture(offset, tex, devPtr, (tex.channelDesc), size); 
# 625
} 
# 672 "/usr/local/cuda-5.0/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t 
# 673
cudaBindTexture2D(size_t *
# 674
offset, const texture< T, dim, readMode>  &
# 675
tex, const void *
# 676
devPtr, const cudaChannelFormatDesc &
# 677
desc, size_t 
# 678
width, size_t 
# 679
height, size_t 
# 680
pitch) 
# 682
{ 
# 683
return cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch); 
# 684
} 
# 730 "/usr/local/cuda-5.0/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t 
# 731
cudaBindTexture2D(size_t *
# 732
offset, const texture< T, dim, readMode>  &
# 733
tex, const void *
# 734
devPtr, size_t 
# 735
width, size_t 
# 736
height, size_t 
# 737
pitch) 
# 739
{ 
# 740
return cudaBindTexture2D(offset, &tex, devPtr, &(tex.texture< T, dim, readMode> ::channelDesc), width, height, pitch); 
# 741
} 
# 772 "/usr/local/cuda-5.0/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t 
# 773
cudaBindTextureToArray(const texture< T, dim, readMode>  &
# 774
tex, cudaArray_const_t 
# 775
array, const cudaChannelFormatDesc &
# 776
desc) 
# 778
{ 
# 779
return cudaBindTextureToArray(&tex, array, &desc); 
# 780
} 
# 810 "/usr/local/cuda-5.0/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t 
# 811
cudaBindTextureToArray(const texture< T, dim, readMode>  &
# 812
tex, cudaArray_const_t 
# 813
array) 
# 815
{ 
# 816
cudaChannelFormatDesc desc; 
# 817
cudaError_t err = cudaGetChannelDesc(&desc, array); 
# 819
return (err == (cudaSuccess)) ? cudaBindTextureToArray(tex, array, desc) : err; 
# 820
} 
# 851 "/usr/local/cuda-5.0/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t 
# 852
cudaBindTextureToMipmappedArray(const texture< T, dim, readMode>  &
# 853
tex, cudaMipmappedArray_const_t 
# 854
mipmappedArray, const cudaChannelFormatDesc &
# 855
desc) 
# 857
{ 
# 858
return cudaBindTextureToMipmappedArray(&tex, mipmappedArray, &desc); 
# 859
} 
# 889 "/usr/local/cuda-5.0/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t 
# 890
cudaBindTextureToMipmappedArray(const texture< T, dim, readMode>  &
# 891
tex, cudaMipmappedArray_const_t 
# 892
mipmappedArray) 
# 894
{ 
# 895
cudaChannelFormatDesc desc; 
# 896
cudaArray_t levelArray; 
# 897
cudaError_t err = cudaGetMipmappedArrayLevel(&levelArray, mipmappedArray, 0); 
# 899
if (err != (cudaSuccess)) { 
# 900
return err; 
# 901
}  
# 902
err = cudaGetChannelDesc(&desc, levelArray); 
# 904
return (err == (cudaSuccess)) ? cudaBindTextureToMipmappedArray(tex, mipmappedArray, desc) : err; 
# 905
} 
# 928 "/usr/local/cuda-5.0/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t 
# 929
cudaUnbindTexture(const texture< T, dim, readMode>  &
# 930
tex) 
# 932
{ 
# 933
return cudaUnbindTexture(&tex); 
# 934
} 
# 962 "/usr/local/cuda-5.0/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t 
# 963
cudaGetTextureAlignmentOffset(size_t *
# 964
offset, const texture< T, dim, readMode>  &
# 965
tex) 
# 967
{ 
# 968
return cudaGetTextureAlignmentOffset(offset, &tex); 
# 969
} 
# 1015 "/usr/local/cuda-5.0/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 1016
cudaFuncSetCacheConfig(T *
# 1017
func, cudaFuncCache 
# 1018
cacheConfig) 
# 1020
{ 
# 1021
return cudaFuncSetCacheConfig((const void *)func, cacheConfig); 
# 1022
} 
# 1024
template< class T> inline cudaError_t 
# 1025
cudaFuncSetSharedMemConfig(T *
# 1026
func, cudaSharedMemConfig 
# 1027
config) 
# 1029
{ 
# 1030
return cudaFuncSetSharedMemConfig((const void *)func, config); 
# 1031
} 
# 1067 "/usr/local/cuda-5.0/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 1068
cudaLaunch(T *
# 1069
func) 
# 1071
{ 
# 1072
return cudaLaunch((const void *)func); 
# 1073
} 
# 1105 "/usr/local/cuda-5.0/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 1106
cudaFuncGetAttributes(cudaFuncAttributes *
# 1107
attr, T *
# 1108
entry) 
# 1110
{ 
# 1111
return cudaFuncGetAttributes(attr, (const void *)entry); 
# 1112
} 
# 1134 "/usr/local/cuda-5.0/include/cuda_runtime.h"
template< class T, int dim> inline cudaError_t 
# 1135
cudaBindSurfaceToArray(const surface< T, dim>  &
# 1136
surf, cudaArray_const_t 
# 1137
array, const cudaChannelFormatDesc &
# 1138
desc) 
# 1140
{ 
# 1141
return cudaBindSurfaceToArray(&surf, array, &desc); 
# 1142
} 
# 1163 "/usr/local/cuda-5.0/include/cuda_runtime.h"
template< class T, int dim> inline cudaError_t 
# 1164
cudaBindSurfaceToArray(const surface< T, dim>  &
# 1165
surf, cudaArray_const_t 
# 1166
array) 
# 1168
{ 
# 1169
cudaChannelFormatDesc desc; 
# 1170
cudaError_t err = cudaGetChannelDesc(&desc, array); 
# 1172
return (err == (cudaSuccess)) ? cudaBindSurfaceToArray(surf, array, desc) : err; 
# 1173
} 
# 40 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stdarg.h" 3
typedef __builtin_va_list __gnuc_va_list; 
# 102 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stdarg.h" 3
typedef __gnuc_va_list va_list; 
# 146 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits" 3
namespace std __attribute((__visibility__("default"))) { 
# 153
enum float_round_style { 
# 155
round_indeterminate = (-1), 
# 156
round_toward_zero = 0, 
# 157
round_to_nearest, 
# 158
round_toward_infinity, 
# 159
round_toward_neg_infinity
# 160
}; 
# 168
enum float_denorm_style { 
# 171
denorm_indeterminate = (-1), 
# 173
denorm_absent = 0, 
# 175
denorm_present
# 176
}; 
# 188 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits" 3
struct __numeric_limits_base { 
# 192
static const bool is_specialized = false; 
# 197
static const int digits = 0; 
# 199
static const int digits10 = 0; 
# 201
static const bool is_signed = false; 
# 205
static const bool is_integer = false; 
# 210
static const bool is_exact = false; 
# 213
static const int radix = 0; 
# 217
static const int min_exponent = 0; 
# 220
static const int min_exponent10 = 0; 
# 224
static const int max_exponent = 0; 
# 227
static const int max_exponent10 = 0; 
# 230
static const bool has_infinity = false; 
# 233
static const bool has_quiet_NaN = false; 
# 236
static const bool has_signaling_NaN = false; 
# 238
static const float_denorm_style has_denorm = denorm_absent; 
# 241
static const bool has_denorm_loss = false; 
# 245
static const bool is_iec559 = false; 
# 249
static const bool is_bounded = false; 
# 254
static const bool is_modulo = false; 
# 257
static const bool traps = false; 
# 259
static const bool tinyness_before = false; 
# 263
static const float_round_style round_style = round_toward_zero; 
# 264
}; 
# 277 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits" 3
template < typename _Tp >
    struct numeric_limits : public __numeric_limits_base
    {


      static _Tp min ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }

      static _Tp max ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }


      static _Tp epsilon ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }

      static _Tp round_error ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }

      static _Tp infinity ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }

      static _Tp quiet_NaN ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }


      static _Tp signaling_NaN ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }



      static _Tp denorm_min ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }
    };
# 308
template<> struct numeric_limits< bool>  { 
# 310
static const bool is_specialized = true; 
# 312
static bool min() throw() 
# 313
{ return false; } 
# 314
static bool max() throw() 
# 315
{ return true; } 
# 317
static const int digits = 1; 
# 318
static const int digits10 = 0; 
# 319
static const bool is_signed = false; 
# 320
static const bool is_integer = true; 
# 321
static const bool is_exact = true; 
# 322
static const int radix = 2; 
# 323
static bool epsilon() throw() 
# 324
{ return false; } 
# 325
static bool round_error() throw() 
# 326
{ return false; } 
# 328
static const int min_exponent = 0; 
# 329
static const int min_exponent10 = 0; 
# 330
static const int max_exponent = 0; 
# 331
static const int max_exponent10 = 0; 
# 333
static const bool has_infinity = false; 
# 334
static const bool has_quiet_NaN = false; 
# 335
static const bool has_signaling_NaN = false; 
# 336
static const float_denorm_style has_denorm = denorm_absent; 
# 337
static const bool has_denorm_loss = false; 
# 339
static bool infinity() throw() 
# 340
{ return false; } 
# 341
static bool quiet_NaN() throw() 
# 342
{ return false; } 
# 343
static bool signaling_NaN() throw() 
# 344
{ return false; } 
# 345
static bool denorm_min() throw() 
# 346
{ return false; } 
# 348
static const bool is_iec559 = false; 
# 349
static const bool is_bounded = true; 
# 350
static const bool is_modulo = false; 
# 355
static const bool traps = true; 
# 356
static const bool tinyness_before = false; 
# 357
static const float_round_style round_style = round_toward_zero; 
# 358
}; 
# 362
template<> struct numeric_limits< char>  { 
# 364
static const bool is_specialized = true; 
# 366
static char min() throw() 
# 367
{ return (((char)(-1)) < 0) ? (((char)1) << ((sizeof(char) * (8)) - (((char)(-1)) < 0))) : ((char)0); } 
# 368
static char max() throw() 
# 369
{ return (((char)(-1)) < 0) ? ((((((char)1) << (((sizeof(char) * (8)) - (((char)(-1)) < 0)) - (1))) - 1) << 1) + 1) : (~((char)0)); } 
# 371
static const int digits = ((sizeof(char) * (8)) - (((char)(-1)) < 0)); 
# 372
static const int digits10 = ((((sizeof(char) * (8)) - (((char)(-1)) < 0)) * (643)) / (2136)); 
# 373
static const bool is_signed = (((char)(-1)) < 0); 
# 374
static const bool is_integer = true; 
# 375
static const bool is_exact = true; 
# 376
static const int radix = 2; 
# 377
static char epsilon() throw() 
# 378
{ return 0; } 
# 379
static char round_error() throw() 
# 380
{ return 0; } 
# 382
static const int min_exponent = 0; 
# 383
static const int min_exponent10 = 0; 
# 384
static const int max_exponent = 0; 
# 385
static const int max_exponent10 = 0; 
# 387
static const bool has_infinity = false; 
# 388
static const bool has_quiet_NaN = false; 
# 389
static const bool has_signaling_NaN = false; 
# 390
static const float_denorm_style has_denorm = denorm_absent; 
# 391
static const bool has_denorm_loss = false; 
# 393
static char infinity() throw() 
# 394
{ return ((char)0); } 
# 395
static char quiet_NaN() throw() 
# 396
{ return ((char)0); } 
# 397
static char signaling_NaN() throw() 
# 398
{ return ((char)0); } 
# 399
static char denorm_min() throw() 
# 400
{ return static_cast< char>(0); } 
# 402
static const bool is_iec559 = false; 
# 403
static const bool is_bounded = true; 
# 404
static const bool is_modulo = true; 
# 406
static const bool traps = true; 
# 407
static const bool tinyness_before = false; 
# 408
static const float_round_style round_style = round_toward_zero; 
# 409
}; 
# 413
template<> struct numeric_limits< signed char>  { 
# 415
static const bool is_specialized = true; 
# 417
static signed char min() throw() 
# 418
{ return (-127) - 1; } 
# 419
static signed char max() throw() 
# 420
{ return 127; } 
# 422
static const int digits = ((sizeof(signed char) * (8)) - (((signed char)(-1)) < 0)); 
# 423
static const int digits10 = ((((sizeof(signed char) * (8)) - (((signed char)(-1)) < 0)) * (643)) / (2136)); 
# 424
static const bool is_signed = true; 
# 425
static const bool is_integer = true; 
# 426
static const bool is_exact = true; 
# 427
static const int radix = 2; 
# 428
static signed char epsilon() throw() 
# 429
{ return 0; } 
# 430
static signed char round_error() throw() 
# 431
{ return 0; } 
# 433
static const int min_exponent = 0; 
# 434
static const int min_exponent10 = 0; 
# 435
static const int max_exponent = 0; 
# 436
static const int max_exponent10 = 0; 
# 438
static const bool has_infinity = false; 
# 439
static const bool has_quiet_NaN = false; 
# 440
static const bool has_signaling_NaN = false; 
# 441
static const float_denorm_style has_denorm = denorm_absent; 
# 442
static const bool has_denorm_loss = false; 
# 444
static signed char infinity() throw() 
# 445
{ return static_cast< signed char>(0); } 
# 446
static signed char quiet_NaN() throw() 
# 447
{ return static_cast< signed char>(0); } 
# 448
static signed char signaling_NaN() throw() 
# 449
{ return static_cast< signed char>(0); } 
# 450
static signed char denorm_min() throw() 
# 451
{ return static_cast< signed char>(0); } 
# 453
static const bool is_iec559 = false; 
# 454
static const bool is_bounded = true; 
# 455
static const bool is_modulo = true; 
# 457
static const bool traps = true; 
# 458
static const bool tinyness_before = false; 
# 459
static const float_round_style round_style = round_toward_zero; 
# 460
}; 
# 464
template<> struct numeric_limits< unsigned char>  { 
# 466
static const bool is_specialized = true; 
# 468
static unsigned char min() throw() 
# 469
{ return 0; } 
# 470
static unsigned char max() throw() 
# 471
{ return ((127) * 2U) + (1); } 
# 473
static const int digits = ((sizeof(unsigned char) * (8)) - (((unsigned char)(-1)) < 0)); 
# 474
static const int digits10 = ((((sizeof(unsigned char) * (8)) - (((unsigned char)(-1)) < 0)) * (643)) / (2136)); 
# 475
static const bool is_signed = false; 
# 476
static const bool is_integer = true; 
# 477
static const bool is_exact = true; 
# 478
static const int radix = 2; 
# 479
static unsigned char epsilon() throw() 
# 480
{ return 0; } 
# 481
static unsigned char round_error() throw() 
# 482
{ return 0; } 
# 484
static const int min_exponent = 0; 
# 485
static const int min_exponent10 = 0; 
# 486
static const int max_exponent = 0; 
# 487
static const int max_exponent10 = 0; 
# 489
static const bool has_infinity = false; 
# 490
static const bool has_quiet_NaN = false; 
# 491
static const bool has_signaling_NaN = false; 
# 492
static const float_denorm_style has_denorm = denorm_absent; 
# 493
static const bool has_denorm_loss = false; 
# 495
static unsigned char infinity() throw() 
# 496
{ return static_cast< unsigned char>(0); } 
# 497
static unsigned char quiet_NaN() throw() 
# 498
{ return static_cast< unsigned char>(0); } 
# 499
static unsigned char signaling_NaN() throw() 
# 500
{ return static_cast< unsigned char>(0); } 
# 501
static unsigned char denorm_min() throw() 
# 502
{ return static_cast< unsigned char>(0); } 
# 504
static const bool is_iec559 = false; 
# 505
static const bool is_bounded = true; 
# 506
static const bool is_modulo = true; 
# 508
static const bool traps = true; 
# 509
static const bool tinyness_before = false; 
# 510
static const float_round_style round_style = round_toward_zero; 
# 511
}; 
# 515
template<> struct numeric_limits< wchar_t>  { 
# 517
static const bool is_specialized = true; 
# 519
static wchar_t min() throw() 
# 520
{ return (((wchar_t)(-1)) < 0) ? (((wchar_t)1) << ((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0))) : ((wchar_t)0); } 
# 521
static wchar_t max() throw() 
# 522
{ return (((wchar_t)(-1)) < 0) ? ((((((wchar_t)1) << (((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) - (1))) - 1) << 1) + 1) : (~((wchar_t)0)); } 
# 524
static const int digits = ((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)); 
# 525
static const int digits10 = ((((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) * (643)) / (2136)); 
# 526
static const bool is_signed = (((wchar_t)(-1)) < 0); 
# 527
static const bool is_integer = true; 
# 528
static const bool is_exact = true; 
# 529
static const int radix = 2; 
# 530
static wchar_t epsilon() throw() 
# 531
{ return 0; } 
# 532
static wchar_t round_error() throw() 
# 533
{ return 0; } 
# 535
static const int min_exponent = 0; 
# 536
static const int min_exponent10 = 0; 
# 537
static const int max_exponent = 0; 
# 538
static const int max_exponent10 = 0; 
# 540
static const bool has_infinity = false; 
# 541
static const bool has_quiet_NaN = false; 
# 542
static const bool has_signaling_NaN = false; 
# 543
static const float_denorm_style has_denorm = denorm_absent; 
# 544
static const bool has_denorm_loss = false; 
# 546
static wchar_t infinity() throw() 
# 547
{ return ((wchar_t)0); } 
# 548
static wchar_t quiet_NaN() throw() 
# 549
{ return ((wchar_t)0); } 
# 550
static wchar_t signaling_NaN() throw() 
# 551
{ return ((wchar_t)0); } 
# 552
static wchar_t denorm_min() throw() 
# 553
{ return ((wchar_t)0); } 
# 555
static const bool is_iec559 = false; 
# 556
static const bool is_bounded = true; 
# 557
static const bool is_modulo = true; 
# 559
static const bool traps = true; 
# 560
static const bool tinyness_before = false; 
# 561
static const float_round_style round_style = round_toward_zero; 
# 562
}; 
# 670 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits" 3
template<> struct numeric_limits< short>  { 
# 672
static const bool is_specialized = true; 
# 674
static short min() throw() 
# 675
{ return (-32767) - 1; } 
# 676
static short max() throw() 
# 677
{ return 32767; } 
# 679
static const int digits = ((sizeof(short) * (8)) - (((short)(-1)) < 0)); 
# 680
static const int digits10 = ((((sizeof(short) * (8)) - (((short)(-1)) < 0)) * (643)) / (2136)); 
# 681
static const bool is_signed = true; 
# 682
static const bool is_integer = true; 
# 683
static const bool is_exact = true; 
# 684
static const int radix = 2; 
# 685
static short epsilon() throw() 
# 686
{ return 0; } 
# 687
static short round_error() throw() 
# 688
{ return 0; } 
# 690
static const int min_exponent = 0; 
# 691
static const int min_exponent10 = 0; 
# 692
static const int max_exponent = 0; 
# 693
static const int max_exponent10 = 0; 
# 695
static const bool has_infinity = false; 
# 696
static const bool has_quiet_NaN = false; 
# 697
static const bool has_signaling_NaN = false; 
# 698
static const float_denorm_style has_denorm = denorm_absent; 
# 699
static const bool has_denorm_loss = false; 
# 701
static short infinity() throw() 
# 702
{ return ((short)0); } 
# 703
static short quiet_NaN() throw() 
# 704
{ return ((short)0); } 
# 705
static short signaling_NaN() throw() 
# 706
{ return ((short)0); } 
# 707
static short denorm_min() throw() 
# 708
{ return ((short)0); } 
# 710
static const bool is_iec559 = false; 
# 711
static const bool is_bounded = true; 
# 712
static const bool is_modulo = true; 
# 714
static const bool traps = true; 
# 715
static const bool tinyness_before = false; 
# 716
static const float_round_style round_style = round_toward_zero; 
# 717
}; 
# 721
template<> struct numeric_limits< unsigned short>  { 
# 723
static const bool is_specialized = true; 
# 725
static unsigned short min() throw() 
# 726
{ return 0; } 
# 727
static unsigned short max() throw() 
# 728
{ return ((32767) * 2U) + (1); } 
# 730
static const int digits = ((sizeof(unsigned short) * (8)) - (((unsigned short)(-1)) < 0)); 
# 731
static const int digits10 = ((((sizeof(unsigned short) * (8)) - (((unsigned short)(-1)) < 0)) * (643)) / (2136)); 
# 732
static const bool is_signed = false; 
# 733
static const bool is_integer = true; 
# 734
static const bool is_exact = true; 
# 735
static const int radix = 2; 
# 736
static unsigned short epsilon() throw() 
# 737
{ return 0; } 
# 738
static unsigned short round_error() throw() 
# 739
{ return 0; } 
# 741
static const int min_exponent = 0; 
# 742
static const int min_exponent10 = 0; 
# 743
static const int max_exponent = 0; 
# 744
static const int max_exponent10 = 0; 
# 746
static const bool has_infinity = false; 
# 747
static const bool has_quiet_NaN = false; 
# 748
static const bool has_signaling_NaN = false; 
# 749
static const float_denorm_style has_denorm = denorm_absent; 
# 750
static const bool has_denorm_loss = false; 
# 752
static unsigned short infinity() throw() 
# 753
{ return static_cast< unsigned short>(0); } 
# 754
static unsigned short quiet_NaN() throw() 
# 755
{ return static_cast< unsigned short>(0); } 
# 756
static unsigned short signaling_NaN() throw() 
# 757
{ return static_cast< unsigned short>(0); } 
# 758
static unsigned short denorm_min() throw() 
# 759
{ return static_cast< unsigned short>(0); } 
# 761
static const bool is_iec559 = false; 
# 762
static const bool is_bounded = true; 
# 763
static const bool is_modulo = true; 
# 765
static const bool traps = true; 
# 766
static const bool tinyness_before = false; 
# 767
static const float_round_style round_style = round_toward_zero; 
# 768
}; 
# 772
template<> struct numeric_limits< int>  { 
# 774
static const bool is_specialized = true; 
# 776
static int min() throw() 
# 777
{ return (-2147483647) - 1; } 
# 778
static int max() throw() 
# 779
{ return 2147483647; } 
# 781
static const int digits = ((sizeof(int) * (8)) - (((int)(-1)) < 0)); 
# 782
static const int digits10 = ((((sizeof(int) * (8)) - (((int)(-1)) < 0)) * (643)) / (2136)); 
# 783
static const bool is_signed = true; 
# 784
static const bool is_integer = true; 
# 785
static const bool is_exact = true; 
# 786
static const int radix = 2; 
# 787
static int epsilon() throw() 
# 788
{ return 0; } 
# 789
static int round_error() throw() 
# 790
{ return 0; } 
# 792
static const int min_exponent = 0; 
# 793
static const int min_exponent10 = 0; 
# 794
static const int max_exponent = 0; 
# 795
static const int max_exponent10 = 0; 
# 797
static const bool has_infinity = false; 
# 798
static const bool has_quiet_NaN = false; 
# 799
static const bool has_signaling_NaN = false; 
# 800
static const float_denorm_style has_denorm = denorm_absent; 
# 801
static const bool has_denorm_loss = false; 
# 803
static int infinity() throw() 
# 804
{ return static_cast< int>(0); } 
# 805
static int quiet_NaN() throw() 
# 806
{ return static_cast< int>(0); } 
# 807
static int signaling_NaN() throw() 
# 808
{ return static_cast< int>(0); } 
# 809
static int denorm_min() throw() 
# 810
{ return static_cast< int>(0); } 
# 812
static const bool is_iec559 = false; 
# 813
static const bool is_bounded = true; 
# 814
static const bool is_modulo = true; 
# 816
static const bool traps = true; 
# 817
static const bool tinyness_before = false; 
# 818
static const float_round_style round_style = round_toward_zero; 
# 819
}; 
# 823
template<> struct numeric_limits< unsigned>  { 
# 825
static const bool is_specialized = true; 
# 827
static unsigned min() throw() 
# 828
{ return 0; } 
# 829
static unsigned max() throw() 
# 830
{ return ((2147483647) * 2U) + (1); } 
# 832
static const int digits = ((sizeof(unsigned) * (8)) - (((unsigned)(-1)) < (0))); 
# 833
static const int digits10 = ((((sizeof(unsigned) * (8)) - (((unsigned)(-1)) < (0))) * (643)) / (2136)); 
# 834
static const bool is_signed = false; 
# 835
static const bool is_integer = true; 
# 836
static const bool is_exact = true; 
# 837
static const int radix = 2; 
# 838
static unsigned epsilon() throw() 
# 839
{ return 0; } 
# 840
static unsigned round_error() throw() 
# 841
{ return 0; } 
# 843
static const int min_exponent = 0; 
# 844
static const int min_exponent10 = 0; 
# 845
static const int max_exponent = 0; 
# 846
static const int max_exponent10 = 0; 
# 848
static const bool has_infinity = false; 
# 849
static const bool has_quiet_NaN = false; 
# 850
static const bool has_signaling_NaN = false; 
# 851
static const float_denorm_style has_denorm = denorm_absent; 
# 852
static const bool has_denorm_loss = false; 
# 854
static unsigned infinity() throw() 
# 855
{ return static_cast< unsigned>(0); } 
# 856
static unsigned quiet_NaN() throw() 
# 857
{ return static_cast< unsigned>(0); } 
# 858
static unsigned signaling_NaN() throw() 
# 859
{ return static_cast< unsigned>(0); } 
# 860
static unsigned denorm_min() throw() 
# 861
{ return static_cast< unsigned>(0); } 
# 863
static const bool is_iec559 = false; 
# 864
static const bool is_bounded = true; 
# 865
static const bool is_modulo = true; 
# 867
static const bool traps = true; 
# 868
static const bool tinyness_before = false; 
# 869
static const float_round_style round_style = round_toward_zero; 
# 870
}; 
# 874
template<> struct numeric_limits< long>  { 
# 876
static const bool is_specialized = true; 
# 878
static long min() throw() 
# 879
{ return (-9223372036854775807L) - (1); } 
# 880
static long max() throw() 
# 881
{ return 9223372036854775807L; } 
# 883
static const int digits = ((sizeof(long) * (8)) - (((long)(-1)) < (0))); 
# 884
static const int digits10 = ((((sizeof(long) * (8)) - (((long)(-1)) < (0))) * (643)) / (2136)); 
# 885
static const bool is_signed = true; 
# 886
static const bool is_integer = true; 
# 887
static const bool is_exact = true; 
# 888
static const int radix = 2; 
# 889
static long epsilon() throw() 
# 890
{ return 0; } 
# 891
static long round_error() throw() 
# 892
{ return 0; } 
# 894
static const int min_exponent = 0; 
# 895
static const int min_exponent10 = 0; 
# 896
static const int max_exponent = 0; 
# 897
static const int max_exponent10 = 0; 
# 899
static const bool has_infinity = false; 
# 900
static const bool has_quiet_NaN = false; 
# 901
static const bool has_signaling_NaN = false; 
# 902
static const float_denorm_style has_denorm = denorm_absent; 
# 903
static const bool has_denorm_loss = false; 
# 905
static long infinity() throw() 
# 906
{ return static_cast< long>(0); } 
# 907
static long quiet_NaN() throw() 
# 908
{ return static_cast< long>(0); } 
# 909
static long signaling_NaN() throw() 
# 910
{ return static_cast< long>(0); } 
# 911
static long denorm_min() throw() 
# 912
{ return static_cast< long>(0); } 
# 914
static const bool is_iec559 = false; 
# 915
static const bool is_bounded = true; 
# 916
static const bool is_modulo = true; 
# 918
static const bool traps = true; 
# 919
static const bool tinyness_before = false; 
# 920
static const float_round_style round_style = round_toward_zero; 
# 921
}; 
# 925
template<> struct numeric_limits< unsigned long>  { 
# 927
static const bool is_specialized = true; 
# 929
static unsigned long min() throw() 
# 930
{ return 0; } 
# 931
static unsigned long max() throw() 
# 932
{ return ((9223372036854775807L) * 2UL) + (1); } 
# 934
static const int digits = ((sizeof(unsigned long) * (8)) - (((unsigned long)(-1)) < (0))); 
# 935
static const int digits10 = ((((sizeof(unsigned long) * (8)) - (((unsigned long)(-1)) < (0))) * (643)) / (2136)); 
# 936
static const bool is_signed = false; 
# 937
static const bool is_integer = true; 
# 938
static const bool is_exact = true; 
# 939
static const int radix = 2; 
# 940
static unsigned long epsilon() throw() 
# 941
{ return 0; } 
# 942
static unsigned long round_error() throw() 
# 943
{ return 0; } 
# 945
static const int min_exponent = 0; 
# 946
static const int min_exponent10 = 0; 
# 947
static const int max_exponent = 0; 
# 948
static const int max_exponent10 = 0; 
# 950
static const bool has_infinity = false; 
# 951
static const bool has_quiet_NaN = false; 
# 952
static const bool has_signaling_NaN = false; 
# 953
static const float_denorm_style has_denorm = denorm_absent; 
# 954
static const bool has_denorm_loss = false; 
# 956
static unsigned long infinity() throw() 
# 957
{ return static_cast< unsigned long>(0); } 
# 958
static unsigned long quiet_NaN() throw() 
# 959
{ return static_cast< unsigned long>(0); } 
# 960
static unsigned long signaling_NaN() throw() 
# 961
{ return static_cast< unsigned long>(0); } 
# 962
static unsigned long denorm_min() throw() 
# 963
{ return static_cast< unsigned long>(0); } 
# 965
static const bool is_iec559 = false; 
# 966
static const bool is_bounded = true; 
# 967
static const bool is_modulo = true; 
# 969
static const bool traps = true; 
# 970
static const bool tinyness_before = false; 
# 971
static const float_round_style round_style = round_toward_zero; 
# 972
}; 
# 976
template<> struct numeric_limits< long long>  { 
# 978
static const bool is_specialized = true; 
# 980
static long long min() throw() 
# 981
{ return (-9223372036854775807LL) - (1); } 
# 982
static long long max() throw() 
# 983
{ return 9223372036854775807LL; } 
# 985
static const int digits = ((sizeof(long long) * (8)) - (((long long)(-1)) < (0))); 
# 986
static const int digits10 = ((((sizeof(long long) * (8)) - (((long long)(-1)) < (0))) * (643)) / (2136)); 
# 987
static const bool is_signed = true; 
# 988
static const bool is_integer = true; 
# 989
static const bool is_exact = true; 
# 990
static const int radix = 2; 
# 991
static long long epsilon() throw() 
# 992
{ return 0; } 
# 993
static long long round_error() throw() 
# 994
{ return 0; } 
# 996
static const int min_exponent = 0; 
# 997
static const int min_exponent10 = 0; 
# 998
static const int max_exponent = 0; 
# 999
static const int max_exponent10 = 0; 
# 1001
static const bool has_infinity = false; 
# 1002
static const bool has_quiet_NaN = false; 
# 1003
static const bool has_signaling_NaN = false; 
# 1004
static const float_denorm_style has_denorm = denorm_absent; 
# 1005
static const bool has_denorm_loss = false; 
# 1007
static long long infinity() throw() 
# 1008
{ return static_cast< long long>(0); } 
# 1009
static long long quiet_NaN() throw() 
# 1010
{ return static_cast< long long>(0); } 
# 1011
static long long signaling_NaN() throw() 
# 1012
{ return static_cast< long long>(0); } 
# 1013
static long long denorm_min() throw() 
# 1014
{ return static_cast< long long>(0); } 
# 1016
static const bool is_iec559 = false; 
# 1017
static const bool is_bounded = true; 
# 1018
static const bool is_modulo = true; 
# 1020
static const bool traps = true; 
# 1021
static const bool tinyness_before = false; 
# 1022
static const float_round_style round_style = round_toward_zero; 
# 1023
}; 
# 1027
template<> struct numeric_limits< unsigned long long>  { 
# 1029
static const bool is_specialized = true; 
# 1031
static unsigned long long min() throw() 
# 1032
{ return 0; } 
# 1033
static unsigned long long max() throw() 
# 1034
{ return ((9223372036854775807LL) * 2ULL) + (1); } 
# 1036
static const int digits = ((sizeof(unsigned long long) * (8)) - (((unsigned long long)(-1)) < (0))); 
# 1037
static const int digits10 = ((((sizeof(unsigned long long) * (8)) - (((unsigned long long)(-1)) < (0))) * (643)) / (2136)); 
# 1038
static const bool is_signed = false; 
# 1039
static const bool is_integer = true; 
# 1040
static const bool is_exact = true; 
# 1041
static const int radix = 2; 
# 1042
static unsigned long long epsilon() throw() 
# 1043
{ return 0; } 
# 1044
static unsigned long long round_error() throw() 
# 1045
{ return 0; } 
# 1047
static const int min_exponent = 0; 
# 1048
static const int min_exponent10 = 0; 
# 1049
static const int max_exponent = 0; 
# 1050
static const int max_exponent10 = 0; 
# 1052
static const bool has_infinity = false; 
# 1053
static const bool has_quiet_NaN = false; 
# 1054
static const bool has_signaling_NaN = false; 
# 1055
static const float_denorm_style has_denorm = denorm_absent; 
# 1056
static const bool has_denorm_loss = false; 
# 1058
static unsigned long long infinity() throw() 
# 1059
{ return static_cast< unsigned long long>(0); } 
# 1060
static unsigned long long quiet_NaN() throw() 
# 1061
{ return static_cast< unsigned long long>(0); } 
# 1062
static unsigned long long signaling_NaN() throw() 
# 1063
{ return static_cast< unsigned long long>(0); } 
# 1064
static unsigned long long denorm_min() throw() 
# 1065
{ return static_cast< unsigned long long>(0); } 
# 1067
static const bool is_iec559 = false; 
# 1068
static const bool is_bounded = true; 
# 1069
static const bool is_modulo = true; 
# 1071
static const bool traps = true; 
# 1072
static const bool tinyness_before = false; 
# 1073
static const float_round_style round_style = round_toward_zero; 
# 1074
}; 
# 1078
template<> struct numeric_limits< float>  { 
# 1080
static const bool is_specialized = true; 
# 1082
static float min() throw() 
# 1083
{ return (1.175494351e-38F); } 
# 1084
static float max() throw() 
# 1085
{ return (3.402823466e+38F); } 
# 1087
static const int digits = 24; 
# 1088
static const int digits10 = 6; 
# 1089
static const bool is_signed = true; 
# 1090
static const bool is_integer = false; 
# 1091
static const bool is_exact = false; 
# 1092
static const int radix = 2; 
# 1093
static float epsilon() throw() 
# 1094
{ return (1.192092896e-07F); } 
# 1095
static float round_error() throw() 
# 1096
{ return (0.5F); } 
# 1098
static const int min_exponent = (-125); 
# 1099
static const int min_exponent10 = (-37); 
# 1100
static const int max_exponent = 128; 
# 1101
static const int max_exponent10 = 38; 
# 1103
static const bool has_infinity = (1); 
# 1104
static const bool has_quiet_NaN = (1); 
# 1105
static const bool has_signaling_NaN = has_quiet_NaN; 
# 1106
static const float_denorm_style has_denorm = denorm_present; 
# 1108
static const bool has_denorm_loss = false; 
# 1110
static float infinity() throw() 
# 1111
{ return __builtin_huge_valf(); } 
# 1112
static float quiet_NaN() throw() 
# 1113
{ return __builtin_nanf(""); } 
# 1114
static float signaling_NaN() throw() 
# 1115
{ return __builtin_nansf(""); } 
# 1116
static float denorm_min() throw() 
# 1117
{ return (1.401298464e-45F); } 
# 1119
static const bool is_iec559 = ((has_infinity && has_quiet_NaN) && ((denorm_present) == (denorm_present))); 
# 1121
static const bool is_bounded = true; 
# 1122
static const bool is_modulo = false; 
# 1124
static const bool traps = false; 
# 1125
static const bool tinyness_before = false; 
# 1126
static const float_round_style round_style = round_to_nearest; 
# 1127
}; 
# 1135
template<> struct numeric_limits< double>  { 
# 1137
static const bool is_specialized = true; 
# 1139
static double min() throw() 
# 1140
{ return (2.225073858507201383e-308); } 
# 1141
static double max() throw() 
# 1142
{ return (1.797693134862315708e+308); } 
# 1144
static const int digits = 53; 
# 1145
static const int digits10 = 15; 
# 1146
static const bool is_signed = true; 
# 1147
static const bool is_integer = false; 
# 1148
static const bool is_exact = false; 
# 1149
static const int radix = 2; 
# 1150
static double epsilon() throw() 
# 1151
{ return (2.220446049250313081e-16); } 
# 1152
static double round_error() throw() 
# 1153
{ return (0.5); } 
# 1155
static const int min_exponent = (-1021); 
# 1156
static const int min_exponent10 = (-307); 
# 1157
static const int max_exponent = 1024; 
# 1158
static const int max_exponent10 = 308; 
# 1160
static const bool has_infinity = (1); 
# 1161
static const bool has_quiet_NaN = (1); 
# 1162
static const bool has_signaling_NaN = has_quiet_NaN; 
# 1163
static const float_denorm_style has_denorm = denorm_present; 
# 1165
static const bool has_denorm_loss = false; 
# 1167
static double infinity() throw() 
# 1168
{ return __builtin_huge_val(); } 
# 1169
static double quiet_NaN() throw() 
# 1170
{ return __builtin_nan(""); } 
# 1171
static double signaling_NaN() throw() 
# 1172
{ return __builtin_nans(""); } 
# 1173
static double denorm_min() throw() 
# 1174
{ return (4.940656458412465442e-324); } 
# 1176
static const bool is_iec559 = ((has_infinity && has_quiet_NaN) && ((denorm_present) == (denorm_present))); 
# 1178
static const bool is_bounded = true; 
# 1179
static const bool is_modulo = false; 
# 1181
static const bool traps = false; 
# 1182
static const bool tinyness_before = false; 
# 1183
static const float_round_style round_style = round_to_nearest; 
# 1184
}; 
# 1192
template<> struct numeric_limits< long double>  { 
# 1194
static const bool is_specialized = true; 
# 1196
static long double min() throw() 
# 1197
{ return (0.0L); } 
# 1198
static long double max() throw() 
# 1199
{ return ((__builtin_huge_vall())); } 
# 1201
static const int digits = 64; 
# 1202
static const int digits10 = 18; 
# 1203
static const bool is_signed = true; 
# 1204
static const bool is_integer = false; 
# 1205
static const bool is_exact = false; 
# 1206
static const int radix = 2; 
# 1207
static long double epsilon() throw() 
# 1208
{ return (1.084202172485504434e-19L); } 
# 1209
static long double round_error() throw() 
# 1210
{ return (0.5L); } 
# 1212
static const int min_exponent = (-16381); 
# 1213
static const int min_exponent10 = (-4931); 
# 1214
static const int max_exponent = 16384; 
# 1215
static const int max_exponent10 = 4932; 
# 1217
static const bool has_infinity = (1); 
# 1218
static const bool has_quiet_NaN = (1); 
# 1219
static const bool has_signaling_NaN = has_quiet_NaN; 
# 1220
static const float_denorm_style has_denorm = denorm_present; 
# 1222
static const bool has_denorm_loss = false; 
# 1225
static long double infinity() throw() 
# 1226
{ return __builtin_huge_vall(); } 
# 1227
static long double quiet_NaN() throw() 
# 1228
{ return __builtin_nanl(""); } 
# 1229
static long double signaling_NaN() throw() 
# 1230
{ return __builtin_nansl(""); } 
# 1231
static long double denorm_min() throw() 
# 1232
{ return (0.0L); } 
# 1234
static const bool is_iec559 = ((has_infinity && has_quiet_NaN) && ((denorm_present) == (denorm_present))); 
# 1236
static const bool is_bounded = true; 
# 1237
static const bool is_modulo = false; 
# 1239
static const bool traps = false; 
# 1240
static const bool tinyness_before = false; 
# 1241
static const float_round_style round_style = round_to_nearest; 
# 1242
}; 
# 1248
}
# 42 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stringfwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 44
template < typename _Alloc >
    class allocator;
# 47
template< class _CharT> struct char_traits; 
# 50
template < typename _CharT, typename _Traits = char_traits < _CharT >,
           typename _Alloc = allocator < _CharT > >
    class basic_string;
# 54
template<> struct char_traits< char> ; 
# 56
typedef basic_string< char>  string; 
# 59
template<> struct char_traits< wchar_t> ; 
# 61
typedef basic_string< wchar_t>  wstring; 
# 75 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stringfwd.h" 3
}
# 45 "/usr/include/stdio.h" 3
struct _IO_FILE; 
# 49
typedef _IO_FILE FILE; 
# 65 "/usr/include/stdio.h" 3
typedef _IO_FILE __FILE; 
# 352 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h" 3
typedef unsigned wint_t; 
# 95 "/usr/include/wchar.h" 3
typedef 
# 84
struct { 
# 85
int __count; 
# 87
union { 
# 89
unsigned __wch; 
# 93
char __wchb[4]; 
# 94
} __value; 
# 95
} __mbstate_t; 
# 106 "/usr/include/wchar.h" 3
typedef __mbstate_t mbstate_t; 
# 134 "/usr/include/wchar.h" 3
struct tm; 
# 144
extern "C" wchar_t *wcscpy(wchar_t *__restrict__ , const wchar_t *__restrict__ ) throw(); 
# 147
extern "C" wchar_t *wcsncpy(wchar_t *__restrict__ , const wchar_t *__restrict__ , size_t ) throw(); 
# 152
extern "C" wchar_t *wcscat(wchar_t *__restrict__ , const wchar_t *__restrict__ ) throw(); 
# 155
extern "C" wchar_t *wcsncat(wchar_t *__restrict__ , const wchar_t *__restrict__ , size_t ) throw(); 
# 160
extern "C" int wcscmp(const wchar_t * , const wchar_t * ) throw()
# 161
 __attribute((__pure__)); 
# 163
extern "C" int wcsncmp(const wchar_t * , const wchar_t * , size_t ) throw()
# 164
 __attribute((__pure__)); 
# 169
extern "C" int wcscasecmp(const wchar_t * , const wchar_t * ) throw(); 
# 172
extern "C" int wcsncasecmp(const wchar_t * , const wchar_t * , size_t ) throw(); 
# 179
extern "C" int wcscasecmp_l(const wchar_t * , const wchar_t * , __locale_t ) throw(); 
# 182
extern "C" int wcsncasecmp_l(const wchar_t * , const wchar_t * , size_t , __locale_t ) throw(); 
# 189
extern "C" int wcscoll(const wchar_t * , const wchar_t * ) throw(); 
# 193
extern "C" size_t wcsxfrm(wchar_t *__restrict__ , const wchar_t *__restrict__ , size_t ) throw(); 
# 203
extern "C" int wcscoll_l(const wchar_t * , const wchar_t * , __locale_t ) throw(); 
# 209
extern "C" size_t wcsxfrm_l(wchar_t * , const wchar_t * , size_t , __locale_t ) throw(); 
# 213
extern "C" wchar_t *wcsdup(const wchar_t * ) throw() __attribute((__malloc__)); 
# 219
wchar_t *wcschr(wchar_t * , wchar_t ) throw() __asm__("wcschr")
# 220
 __attribute((__pure__)); 
# 221
const wchar_t *wcschr(const wchar_t * , wchar_t ) throw() __asm__("wcschr")
# 222
 __attribute((__pure__)); 
# 229
wchar_t *wcsrchr(wchar_t * , wchar_t ) throw() __asm__("wcsrchr")
# 230
 __attribute((__pure__)); 
# 231
const wchar_t *wcsrchr(const wchar_t * , wchar_t ) throw() __asm__("wcsrchr")
# 232
 __attribute((__pure__)); 
# 242
extern "C" wchar_t *wcschrnul(const wchar_t * , wchar_t ) throw()
# 243
 __attribute((__pure__)); 
# 249
extern "C" size_t wcscspn(const wchar_t * , const wchar_t * ) throw()
# 250
 __attribute((__pure__)); 
# 253
extern "C" size_t wcsspn(const wchar_t * , const wchar_t * ) throw()
# 254
 __attribute((__pure__)); 
# 257
wchar_t *wcspbrk(wchar_t * , const wchar_t * ) throw() __asm__("wcspbrk")
# 258
 __attribute((__pure__)); 
# 259
const wchar_t *wcspbrk(const wchar_t * , const wchar_t * ) throw() __asm__("wcspbrk")
# 261
 __attribute((__pure__)); 
# 268
wchar_t *wcsstr(wchar_t * , const wchar_t * ) throw() __asm__("wcsstr")
# 269
 __attribute((__pure__)); 
# 270
const wchar_t *wcsstr(const wchar_t * , const wchar_t * ) throw() __asm__("wcsstr")
# 272
 __attribute((__pure__)); 
# 279
extern "C" wchar_t *wcstok(wchar_t *__restrict__ , const wchar_t *__restrict__ , wchar_t **__restrict__ ) throw(); 
# 284
extern "C" size_t wcslen(const wchar_t * ) throw() __attribute((__pure__)); 
# 290
wchar_t *wcswcs(wchar_t * , const wchar_t * ) throw() __asm__("wcswcs")
# 291
 __attribute((__pure__)); 
# 292
const wchar_t *wcswcs(const wchar_t * , const wchar_t * ) throw() __asm__("wcswcs")
# 294
 __attribute((__pure__)); 
# 303 "/usr/include/wchar.h" 3
extern "C" size_t wcsnlen(const wchar_t * , size_t ) throw()
# 304
 __attribute((__pure__)); 
# 311
wchar_t *wmemchr(wchar_t * , wchar_t , size_t ) throw() __asm__("wmemchr")
# 312
 __attribute((__pure__)); 
# 313
const wchar_t *wmemchr(const wchar_t * , wchar_t , size_t ) throw() __asm__("wmemchr")
# 315
 __attribute((__pure__)); 
# 322
extern "C" int wmemcmp(const wchar_t *__restrict__ , const wchar_t *__restrict__ , size_t ) throw()
# 324
 __attribute((__pure__)); 
# 327
extern "C" wchar_t *wmemcpy(wchar_t *__restrict__ , const wchar_t *__restrict__ , size_t ) throw(); 
# 332
extern "C" wchar_t *wmemmove(wchar_t * , const wchar_t * , size_t ) throw(); 
# 336
extern "C" wchar_t *wmemset(wchar_t * , wchar_t , size_t ) throw(); 
# 342
extern "C" wchar_t *wmempcpy(wchar_t *__restrict__ , const wchar_t *__restrict__ , size_t ) throw(); 
# 351
extern "C" wint_t btowc(int ) throw(); 
# 355
extern "C" int wctob(wint_t ) throw(); 
# 359
extern "C" int mbsinit(const mbstate_t * ) throw() __attribute((__pure__)); 
# 363
extern "C" size_t mbrtowc(wchar_t *__restrict__ , const char *__restrict__ , size_t , mbstate_t * ) throw(); 
# 368
extern "C" size_t wcrtomb(char *__restrict__ , wchar_t , mbstate_t *__restrict__ ) throw(); 
# 372
extern "C" size_t __mbrlen(const char *__restrict__ , size_t , mbstate_t *__restrict__ ) throw(); 
# 374
extern "C" size_t mbrlen(const char *__restrict__ , size_t , mbstate_t *__restrict__ ) throw(); 
# 406 "/usr/include/wchar.h" 3
extern "C" size_t mbsrtowcs(wchar_t *__restrict__ , const char **__restrict__ , size_t , mbstate_t *__restrict__ ) throw(); 
# 412
extern "C" size_t wcsrtombs(char *__restrict__ , const wchar_t **__restrict__ , size_t , mbstate_t *__restrict__ ) throw(); 
# 421
extern "C" size_t mbsnrtowcs(wchar_t *__restrict__ , const char **__restrict__ , size_t , size_t , mbstate_t *__restrict__ ) throw(); 
# 427
extern "C" size_t wcsnrtombs(char *__restrict__ , const wchar_t **__restrict__ , size_t , size_t , mbstate_t *__restrict__ ) throw(); 
# 437
extern "C" int wcwidth(wchar_t ) throw(); 
# 441
extern "C" int wcswidth(const wchar_t * , size_t ) throw(); 
# 448
extern "C" double wcstod(const wchar_t *__restrict__ , wchar_t **__restrict__ ) throw(); 
# 455
extern "C" float wcstof(const wchar_t *__restrict__ , wchar_t **__restrict__ ) throw(); 
# 457
extern "C" long double wcstold(const wchar_t *__restrict__ , wchar_t **__restrict__ ) throw(); 
# 466
extern "C" long wcstol(const wchar_t *__restrict__ , wchar_t **__restrict__ , int ) throw(); 
# 471
extern "C" unsigned long wcstoul(const wchar_t *__restrict__ , wchar_t **__restrict__ , int ) throw(); 
# 481
__extension__ extern "C" long long wcstoll(const wchar_t *__restrict__ , wchar_t **__restrict__ , int ) throw(); 
# 488
__extension__ extern "C" unsigned long long wcstoull(const wchar_t *__restrict__ , wchar_t **__restrict__ , int ) throw(); 
# 498
__extension__ extern "C" long long wcstoq(const wchar_t *__restrict__ , wchar_t **__restrict__ , int ) throw(); 
# 505
__extension__ extern "C" unsigned long long wcstouq(const wchar_t *__restrict__ , wchar_t **__restrict__ , int ) throw(); 
# 528 "/usr/include/wchar.h" 3
extern "C" long wcstol_l(const wchar_t *__restrict__ , wchar_t **__restrict__ , int , __locale_t ) throw(); 
# 532
extern "C" unsigned long wcstoul_l(const wchar_t *__restrict__ , wchar_t **__restrict__ , int , __locale_t ) throw(); 
# 537
__extension__ extern "C" long long wcstoll_l(const wchar_t *__restrict__ , wchar_t **__restrict__ , int , __locale_t ) throw(); 
# 542
__extension__ extern "C" unsigned long long wcstoull_l(const wchar_t *__restrict__ , wchar_t **__restrict__ , int , __locale_t ) throw(); 
# 547
extern "C" double wcstod_l(const wchar_t *__restrict__ , wchar_t **__restrict__ , __locale_t ) throw(); 
# 551
extern "C" float wcstof_l(const wchar_t *__restrict__ , wchar_t **__restrict__ , __locale_t ) throw(); 
# 555
extern "C" long double wcstold_l(const wchar_t *__restrict__ , wchar_t **__restrict__ , __locale_t ) throw(); 
# 562
extern "C" wchar_t *wcpcpy(wchar_t *__restrict__ , const wchar_t *__restrict__ ) throw(); 
# 567
extern "C" wchar_t *wcpncpy(wchar_t *__restrict__ , const wchar_t *__restrict__ , size_t ) throw(); 
# 578 "/usr/include/wchar.h" 3
extern "C" __FILE *open_wmemstream(wchar_t ** , size_t * ) throw(); 
# 585
extern "C" int fwide(__FILE * , int ) throw(); 
# 592
extern "C" int fwprintf(__FILE *__restrict__ , const wchar_t *__restrict__ , ...); 
# 599
extern "C" int wprintf(const wchar_t *__restrict__ , ...); 
# 602
extern "C" int swprintf(wchar_t *__restrict__ , size_t , const wchar_t *__restrict__ , ...) throw(); 
# 610
extern "C" int vfwprintf(__FILE *__restrict__ , const wchar_t *__restrict__ , __gnuc_va_list ); 
# 618
extern "C" int vwprintf(const wchar_t *__restrict__ , __gnuc_va_list ); 
# 623
extern "C" int vswprintf(wchar_t *__restrict__ , size_t , const wchar_t *__restrict__ , __gnuc_va_list ) throw(); 
# 633
extern "C" int fwscanf(__FILE *__restrict__ , const wchar_t *__restrict__ , ...); 
# 640
extern "C" int wscanf(const wchar_t *__restrict__ , ...); 
# 643
extern "C" int swscanf(const wchar_t *__restrict__ , const wchar_t *__restrict__ , ...) throw(); 
# 687 "/usr/include/wchar.h" 3
extern "C" int vfwscanf(__FILE *__restrict__ , const wchar_t *__restrict__ , __gnuc_va_list ); 
# 695
extern "C" int vwscanf(const wchar_t *__restrict__ , __gnuc_va_list ); 
# 699
extern "C" int vswscanf(const wchar_t *__restrict__ , const wchar_t *__restrict__ , __gnuc_va_list ) throw(); 
# 743 "/usr/include/wchar.h" 3
extern "C" wint_t fgetwc(__FILE * ); 
# 744
extern "C" wint_t getwc(__FILE * ); 
# 750
extern "C" wint_t getwchar(); 
# 757
extern "C" wint_t fputwc(wchar_t , __FILE * ); 
# 758
extern "C" wint_t putwc(wchar_t , __FILE * ); 
# 764
extern "C" wint_t putwchar(wchar_t ); 
# 772
extern "C" wchar_t *fgetws(wchar_t *__restrict__ , int , __FILE *__restrict__ ); 
# 779
extern "C" int fputws(const wchar_t *__restrict__ , __FILE *__restrict__ ); 
# 787
extern "C" wint_t ungetwc(wint_t , __FILE * ); 
# 799 "/usr/include/wchar.h" 3
extern "C" wint_t getwc_unlocked(__FILE * ); 
# 800
extern "C" wint_t getwchar_unlocked(); 
# 808
extern "C" wint_t fgetwc_unlocked(__FILE * ); 
# 816
extern "C" wint_t fputwc_unlocked(wchar_t , __FILE * ); 
# 825 "/usr/include/wchar.h" 3
extern "C" wint_t putwc_unlocked(wchar_t , __FILE * ); 
# 826
extern "C" wint_t putwchar_unlocked(wchar_t ); 
# 835 "/usr/include/wchar.h" 3
extern "C" wchar_t *fgetws_unlocked(wchar_t *__restrict__ , int , __FILE *__restrict__ ); 
# 844
extern "C" int fputws_unlocked(const wchar_t *__restrict__ , __FILE *__restrict__ ); 
# 853
extern "C" size_t wcsftime(wchar_t *__restrict__ , size_t , const wchar_t *__restrict__ , const tm *__restrict__ ) throw(); 
# 863
extern "C" size_t wcsftime_l(wchar_t *__restrict__ , size_t , const wchar_t *__restrict__ , const tm *__restrict__ , __locale_t ) throw(); 
# 65 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/cwchar" 3
namespace std __attribute((__visibility__("default"))) { 
# 67
using ::mbstate_t;
# 69
}
# 139 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/cwchar" 3
namespace std __attribute((__visibility__("default"))) { 
# 141
using ::wint_t;
# 143
using ::btowc;
# 144
using ::fgetwc;
# 145
using ::fgetws;
# 146
using ::fputwc;
# 147
using ::fputws;
# 148
using ::fwide;
# 149
using ::fwprintf;
# 150
using ::fwscanf;
# 151
using ::getwc;
# 152
using ::getwchar;
# 153
using ::mbrlen;
# 154
using ::mbrtowc;
# 155
using ::mbsinit;
# 156
using ::mbsrtowcs;
# 157
using ::putwc;
# 158
using ::putwchar;
# 159
using ::swprintf;
# 160
using ::swscanf;
# 161
using ::ungetwc;
# 162
using ::vfwprintf;
# 164
using ::vfwscanf;
# 166
using ::vswprintf;
# 168
using ::vswscanf;
# 170
using ::vwprintf;
# 172
using ::vwscanf;
# 174
using ::wcrtomb;
# 175
using ::wcscat;
# 176
using ::wcscmp;
# 177
using ::wcscoll;
# 178
using ::wcscpy;
# 179
using ::wcscspn;
# 180
using ::wcsftime;
# 181
using ::wcslen;
# 182
using ::wcsncat;
# 183
using ::wcsncmp;
# 184
using ::wcsncpy;
# 185
using ::wcsrtombs;
# 186
using ::wcsspn;
# 187
using ::wcstod;
# 189
using ::wcstof;
# 191
using ::wcstok;
# 192
using ::wcstol;
# 193
using ::wcstoul;
# 194
using ::wcsxfrm;
# 195
using ::wctob;
# 196
using ::wmemcmp;
# 197
using ::wmemcpy;
# 198
using ::wmemmove;
# 199
using ::wmemset;
# 200
using ::wprintf;
# 201
using ::wscanf;
# 202
using ::wcschr;
# 203
using ::wcspbrk;
# 204
using ::wcsrchr;
# 205
using ::wcsstr;
# 206
using ::wmemchr;
# 230 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/cwchar" 3
}
# 238
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 245
using ::wcstold;
# 254 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/cwchar" 3
using ::wcstoll;
# 255
using ::wcstoull;
# 258
}
# 260
namespace std __attribute((__visibility__("default"))) { 
# 262
using __gnu_cxx::wcstold;
# 263
using __gnu_cxx::wcstoll;
# 264
using __gnu_cxx::wcstoull;
# 266
}
# 70 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/postypes.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 88 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/postypes.h" 3
typedef long streamoff; 
# 98 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/postypes.h" 3
typedef ptrdiff_t streamsize; 
# 111 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/postypes.h" 3
template < typename _StateT >
    class fpos
    {
    private :
      streamoff _M_off;
      _StateT _M_state;

    public :




      fpos ( )
      : _M_off ( 0 ), _M_state ( ) { }

      fpos ( streamoff __off )
      : _M_off ( __off ), _M_state ( ) { }


      operator streamoff ( ) const { return _M_off; }


      void
      state ( _StateT __st )
      { _M_state = __st; }


      _StateT
      state ( ) const
      { return _M_state; }





      fpos &
      operator += ( streamoff __off )
      {
 _M_off += __off;
 return * this;
      }





      fpos &
      operator -= ( streamoff __off )
      {
 _M_off -= __off;
 return * this;
      }







      fpos
      operator + ( streamoff __off ) const
      {
 fpos __pos ( * this );
 __pos += __off;
 return __pos;
      }







      fpos
      operator - ( streamoff __off ) const
      {
 fpos __pos ( * this );
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator - ( const fpos & __other ) const
      { return _M_off - __other . _M_off; }
    };
# 214 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/postypes.h" 3
template < typename _StateT >
    inline bool
    operator == ( const fpos < _StateT > & __lhs, const fpos < _StateT > & __rhs )
    { return streamoff ( __lhs ) == streamoff ( __rhs ); }
# 219
template < typename _StateT >
    inline bool
    operator != ( const fpos < _StateT > & __lhs, const fpos < _StateT > & __rhs )
    { return streamoff ( __lhs ) != streamoff ( __rhs ); }
# 228
typedef fpos< __mbstate_t>  streampos; 
# 230
typedef fpos< __mbstate_t>  wstreampos; 
# 239 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/postypes.h" 3
}
# 44 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/iosfwd" 3
namespace std __attribute((__visibility__("default"))) { 
# 46
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_ios;
# 49
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_streambuf;
# 52
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_istream;
# 55
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_ostream;
# 58
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_iostream;
# 61
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 62
_Alloc = allocator< _CharT> > class basic_stringbuf; 
# 65
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 66
_Alloc = allocator< _CharT> > class basic_istringstream; 
# 69
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 70
_Alloc = allocator< _CharT> > class basic_ostringstream; 
# 73
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 74
_Alloc = allocator< _CharT> > class basic_stringstream; 
# 77
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_filebuf; 
# 80
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ifstream; 
# 83
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ofstream; 
# 86
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_fstream; 
# 89
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class istreambuf_iterator;
# 92
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class ostreambuf_iterator;
# 97
class ios_base; 
# 127 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/iosfwd" 3
typedef basic_ios< char>  ios; 
# 128
typedef basic_streambuf< char>  streambuf; 
# 129
typedef basic_istream< char>  istream; 
# 130
typedef basic_ostream< char>  ostream; 
# 131
typedef basic_iostream< char>  iostream; 
# 132
typedef basic_stringbuf< char>  stringbuf; 
# 133
typedef basic_istringstream< char>  istringstream; 
# 134
typedef basic_ostringstream< char>  ostringstream; 
# 135
typedef basic_stringstream< char>  stringstream; 
# 136
typedef basic_filebuf< char>  filebuf; 
# 137
typedef basic_ifstream< char>  ifstream; 
# 138
typedef basic_ofstream< char>  ofstream; 
# 139
typedef basic_fstream< char>  fstream; 
# 142
typedef basic_ios< wchar_t>  wios; 
# 143
typedef basic_streambuf< wchar_t>  wstreambuf; 
# 144
typedef basic_istream< wchar_t>  wistream; 
# 145
typedef basic_ostream< wchar_t>  wostream; 
# 146
typedef basic_iostream< wchar_t>  wiostream; 
# 147
typedef basic_stringbuf< wchar_t>  wstringbuf; 
# 148
typedef basic_istringstream< wchar_t>  wistringstream; 
# 149
typedef basic_ostringstream< wchar_t>  wostringstream; 
# 150
typedef basic_stringstream< wchar_t>  wstringstream; 
# 151
typedef basic_filebuf< wchar_t>  wfilebuf; 
# 152
typedef basic_ifstream< wchar_t>  wifstream; 
# 153
typedef basic_ofstream< wchar_t>  wofstream; 
# 154
typedef basic_fstream< wchar_t>  wfstream; 
# 158
}
# 41 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/exception" 3
namespace std { 
# 59 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/exception" 3
class exception { 
# 62
public: exception() throw() { } 
# 63
virtual ~exception() throw(); 
# 67
virtual const char *what() const throw(); 
# 68
}; 
# 72
class bad_exception : public exception { 
# 75
public: bad_exception() throw() { } 
# 79
virtual ~bad_exception() throw(); 
# 82
virtual const char *what() const throw(); 
# 83
}; 
# 86
typedef void (*terminate_handler)(void); 
# 89
typedef void (*unexpected_handler)(void); 
# 92
terminate_handler set_terminate(terminate_handler) throw(); 
# 96
void terminate() __attribute((__noreturn__)); 
# 99
unexpected_handler set_unexpected(unexpected_handler) throw(); 
# 103
void unexpected() __attribute((__noreturn__)); 
# 115 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/exception" 3
bool uncaught_exception() throw(); 
# 118
}
# 120
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 138 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/exception" 3
void __verbose_terminate_handler(); 
# 140
}
# 39 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/functexcept.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 43
void __throw_bad_exception() __attribute((__noreturn__)); 
# 47
void __throw_bad_alloc() __attribute((__noreturn__)); 
# 51
void __throw_bad_cast() __attribute((__noreturn__)); 
# 54
void __throw_bad_typeid() __attribute((__noreturn__)); 
# 58
void __throw_logic_error(const char *) __attribute((__noreturn__)); 
# 61
void __throw_domain_error(const char *) __attribute((__noreturn__)); 
# 64
void __throw_invalid_argument(const char *) __attribute((__noreturn__)); 
# 67
void __throw_length_error(const char *) __attribute((__noreturn__)); 
# 70
void __throw_out_of_range(const char *) __attribute((__noreturn__)); 
# 73
void __throw_runtime_error(const char *) __attribute((__noreturn__)); 
# 76
void __throw_range_error(const char *) __attribute((__noreturn__)); 
# 79
void __throw_overflow_error(const char *) __attribute((__noreturn__)); 
# 82
void __throw_underflow_error(const char *) __attribute((__noreturn__)); 
# 86
void __throw_ios_failure(const char *) __attribute((__noreturn__)); 
# 89
void __throw_system_error(int) __attribute((__noreturn__)); 
# 91
}
# 37 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/numeric_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 52 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/numeric_traits.h" 3
template< class _Value> 
# 53
struct __numeric_traits_integer { 
# 56
static const _Value __min = ((((_Value)(-1)) < 0) ? (((_Value)1) << ((sizeof(_Value) * (8)) - (((_Value)(-1)) < 0))) : ((_Value)0)); 
# 57
static const _Value __max = ((((_Value)(-1)) < 0) ? ((((((_Value)1) << (((sizeof(_Value) * (8)) - (((_Value)(-1)) < 0)) - (1))) - 1) << 1) + 1) : (~((_Value)0))); 
# 61
static const bool __is_signed = (((_Value)(-1)) < 0); 
# 62
static const int __digits = ((sizeof(_Value) * (8)) - (((_Value)(-1)) < 0)); 
# 63
}; 
# 65
template< class _Value> const _Value 
# 66
__numeric_traits_integer< _Value> ::__min; 
# 68
template< class _Value> const _Value 
# 69
__numeric_traits_integer< _Value> ::__max; 
# 71
template< class _Value> const bool 
# 72
__numeric_traits_integer< _Value> ::__is_signed; 
# 74
template< class _Value> const int 
# 75
__numeric_traits_integer< _Value> ::__digits; 
# 97 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/numeric_traits.h" 3
template< class _Value> 
# 98
struct __numeric_traits_floating { 
# 101
static const int __max_digits10 = (2 + ((((std::__are_same< _Value, float> ::__value) ? 24 : ((std::__are_same< _Value, double> ::__value) ? 53 : 64)) * 3010) / 10000)); 
# 104
static const bool __is_signed = true; 
# 105
static const int __digits10 = ((std::__are_same< _Value, float> ::__value) ? 6 : ((std::__are_same< _Value, double> ::__value) ? 15 : 18)); 
# 106
static const int __max_exponent10 = ((std::__are_same< _Value, float> ::__value) ? 38 : ((std::__are_same< _Value, double> ::__value) ? 308 : 4932)); 
# 107
}; 
# 109
template< class _Value> const int 
# 110
__numeric_traits_floating< _Value> ::__max_digits10; 
# 112
template< class _Value> const bool 
# 113
__numeric_traits_floating< _Value> ::__is_signed; 
# 115
template< class _Value> const int 
# 116
__numeric_traits_floating< _Value> ::__digits10; 
# 118
template< class _Value> const int 
# 119
__numeric_traits_floating< _Value> ::__max_exponent10; 
# 121
template< class _Value> 
# 122
struct __numeric_traits : public __conditional_type< std::__is_integer< _Value> ::__value, __numeric_traits_integer< _Value> , __numeric_traits_floating< _Value> > ::__type { 
# 126
}; 
# 128
}
# 66 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/move.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 74
template < typename _Tp >
    inline void
    swap ( _Tp & __a, _Tp & __b )
    {



      _Tp __tmp = ( __a );
      __a = ( __b );
      __b = ( __tmp );
    }
# 88
template < typename _Tp, size_t _Nm >
    inline void
    swap ( _Tp ( & __a ) [ _Nm ], _Tp ( & __b ) [ _Nm ] )
    {
      for ( size_t __n = 0; __n < _Nm; ++ __n )
 swap ( __a [ __n ], __b [ __n ] );
    }
# 96
}
# 63 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 66
template < class _T1, class _T2 >
    struct pair
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;





      pair ( )
      : first ( ), second ( ) { }


      pair ( const _T1 & __a, const _T2 & __b )
      : first ( __a ), second ( __b ) { }

      template < class _U1, class _U2 >
        pair ( const pair < _U1, _U2 > & __p )
 : first ( __p . first ),
   second ( __p . second ) { }

    };
# 144 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h" 3
template < class _T1, class _T2 >
    inline bool
    operator == ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return __x . first == __y . first && __x . second == __y . second; }
# 150
template < class _T1, class _T2 >
    inline bool
    operator < ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return __x . first < __y . first
      || ( ! ( __y . first < __x . first ) && __x . second < __y . second ); }
# 157
template < class _T1, class _T2 >
    inline bool
    operator != ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return ! ( __x == __y ); }
# 163
template < class _T1, class _T2 >
    inline bool
    operator > ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return __y < __x; }
# 169
template < class _T1, class _T2 >
    inline bool
    operator <= ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return ! ( __y < __x ); }
# 175
template < class _T1, class _T2 >
    inline bool
    operator >= ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return ! ( __x < __y ); }
# 213 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h" 3
template < class _T1, class _T2 >
    inline pair < _T1, _T2 >
    make_pair ( _T1 __x, _T2 __y )
    { return pair < _T1, _T2 > ( __x, __y ); }
# 259 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h" 3
}
# 68 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator_base_types.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 79 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator_base_types.h" 3
struct input_iterator_tag { }; 
# 81
struct output_iterator_tag { }; 
# 83
struct forward_iterator_tag : public input_iterator_tag { }; 
# 86
struct bidirectional_iterator_tag : public forward_iterator_tag { }; 
# 89
struct random_access_iterator_tag : public bidirectional_iterator_tag { }; 
# 102 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator_base_types.h" 3
template< class _Category, class _Tp, class _Distance = ptrdiff_t, class 
# 103
_Pointer = _Tp *, class _Reference = _Tp &> 
# 104
struct iterator { 
# 107
typedef _Category iterator_category; 
# 109
typedef _Tp value_type; 
# 111
typedef _Distance difference_type; 
# 113
typedef _Pointer pointer; 
# 115
typedef _Reference reference; 
# 116
}; 
# 124
template< class _Iterator> 
# 125
struct iterator_traits { 
# 127
typedef typename _Iterator::iterator_category iterator_category; 
# 128
typedef typename _Iterator::value_type value_type; 
# 129
typedef typename _Iterator::difference_type difference_type; 
# 130
typedef typename _Iterator::pointer pointer; 
# 131
typedef typename _Iterator::reference reference; 
# 132
}; 
# 134
template< class _Tp> 
# 135
struct iterator_traits< _Tp *>  { 
# 137
typedef random_access_iterator_tag iterator_category; 
# 138
typedef _Tp value_type; 
# 139
typedef ptrdiff_t difference_type; 
# 140
typedef _Tp *pointer; 
# 141
typedef _Tp &reference; 
# 142
}; 
# 144
template< class _Tp> 
# 145
struct iterator_traits< const _Tp *>  { 
# 147
typedef random_access_iterator_tag iterator_category; 
# 148
typedef _Tp value_type; 
# 149
typedef ptrdiff_t difference_type; 
# 150
typedef const _Tp *pointer; 
# 151
typedef const _Tp &reference; 
# 152
}; 
# 158
template < typename _Iter >
    inline typename iterator_traits < _Iter > :: iterator_category
    __iterator_category ( const _Iter & )
    { return typename iterator_traits < _Iter > :: iterator_category ( ); }
# 165
}
# 66 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator_base_funcs.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 68
template < typename _InputIterator >
    inline typename iterator_traits < _InputIterator > :: difference_type
    __distance ( _InputIterator __first, _InputIterator __last,
               input_iterator_tag )
    {



      typename iterator_traits < _InputIterator > :: difference_type __n = 0;
      while ( __first != __last )
 {
   ++ __first;
   ++ __n;
 }
      return __n;
    }
# 85
template < typename _RandomAccessIterator >
    inline typename iterator_traits < _RandomAccessIterator > :: difference_type
    __distance ( _RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag )
    {



      return __last - __first;
    }
# 108 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator_base_funcs.h" 3
template < typename _InputIterator >
    inline typename iterator_traits < _InputIterator > :: difference_type
    distance ( _InputIterator __first, _InputIterator __last )
    {

      return std :: __distance ( __first, __last,
        std :: __iterator_category ( __first ) );
    }
# 117
template < typename _InputIterator, typename _Distance >
    inline void
    __advance ( _InputIterator & __i, _Distance __n, input_iterator_tag )
    {


      while ( __n -- )
 ++ __i;
    }
# 127
template < typename _BidirectionalIterator, typename _Distance >
    inline void
    __advance ( _BidirectionalIterator & __i, _Distance __n,
       bidirectional_iterator_tag )
    {



      if ( __n > 0 )
        while ( __n -- )
   ++ __i;
      else
        while ( __n ++ )
   -- __i;
    }
# 143
template < typename _RandomAccessIterator, typename _Distance >
    inline void
    __advance ( _RandomAccessIterator & __i, _Distance __n,
              random_access_iterator_tag )
    {



      __i += __n;
    }
# 166 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator_base_funcs.h" 3
template < typename _InputIterator, typename _Distance >
    inline void
    advance ( _InputIterator & __i, _Distance __n )
    {

      typename iterator_traits < _InputIterator > :: difference_type __d = __n;
      std :: __advance ( __i, __d, std :: __iterator_category ( __i ) );
    }
# 195 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator_base_funcs.h" 3
}
# 68 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 89 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h" 3
template < typename _Iterator >
    class reverse_iterator
    : public iterator < typename iterator_traits < _Iterator > :: iterator_category,
        typename iterator_traits < _Iterator > :: value_type,
        typename iterator_traits < _Iterator > :: difference_type,
        typename iterator_traits < _Iterator > :: pointer,
                      typename iterator_traits < _Iterator > :: reference >
    {
    protected :
      _Iterator current;

    public :
      typedef _Iterator iterator_type;
      typedef typename iterator_traits < _Iterator > :: difference_type
              difference_type;
      typedef typename iterator_traits < _Iterator > :: reference reference;
      typedef typename iterator_traits < _Iterator > :: pointer pointer;

    public :






      reverse_iterator ( ) : current ( ) { }




      explicit
      reverse_iterator ( iterator_type __x ) : current ( __x ) { }




      reverse_iterator ( const reverse_iterator & __x )
      : current ( __x . current ) { }





      template < typename _Iter >
        reverse_iterator ( const reverse_iterator < _Iter > & __x )
 : current ( __x . base ( ) ) { }




      iterator_type
      base ( ) const
      { return current; }






      reference
      operator * ( ) const
      {
 _Iterator __tmp = current;
 return * -- __tmp;
      }






      pointer
      operator -> ( ) const
      { return & ( operator * ( ) ); }






      reverse_iterator &
      operator ++ ( )
      {
 -- current;
 return * this;
      }






      reverse_iterator
      operator ++ ( int )
      {
 reverse_iterator __tmp = * this;
 -- current;
 return __tmp;
      }






      reverse_iterator &
      operator -- ( )
      {
 ++ current;
 return * this;
      }






      reverse_iterator
      operator -- ( int )
      {
 reverse_iterator __tmp = * this;
 ++ current;
 return __tmp;
      }






      reverse_iterator
      operator + ( difference_type __n ) const
      { return reverse_iterator ( current - __n ); }






      reverse_iterator &
      operator += ( difference_type __n )
      {
 current -= __n;
 return * this;
      }






      reverse_iterator
      operator - ( difference_type __n ) const
      { return reverse_iterator ( current + __n ); }






      reverse_iterator &
      operator -= ( difference_type __n )
      {
 current += __n;
 return * this;
      }






      reference
      operator [ ] ( difference_type __n ) const
      { return * ( * this + __n ); }
    };
# 276 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h" 3
template < typename _Iterator >
    inline bool
    operator == ( const reverse_iterator < _Iterator > & __x,
        const reverse_iterator < _Iterator > & __y )
    { return __x . base ( ) == __y . base ( ); }
# 282
template < typename _Iterator >
    inline bool
    operator < ( const reverse_iterator < _Iterator > & __x,
       const reverse_iterator < _Iterator > & __y )
    { return __y . base ( ) < __x . base ( ); }
# 288
template < typename _Iterator >
    inline bool
    operator != ( const reverse_iterator < _Iterator > & __x,
        const reverse_iterator < _Iterator > & __y )
    { return ! ( __x == __y ); }
# 294
template < typename _Iterator >
    inline bool
    operator > ( const reverse_iterator < _Iterator > & __x,
       const reverse_iterator < _Iterator > & __y )
    { return __y < __x; }
# 300
template < typename _Iterator >
    inline bool
    operator <= ( const reverse_iterator < _Iterator > & __x,
        const reverse_iterator < _Iterator > & __y )
    { return ! ( __y < __x ); }
# 306
template < typename _Iterator >
    inline bool
    operator >= ( const reverse_iterator < _Iterator > & __x,
        const reverse_iterator < _Iterator > & __y )
    { return ! ( __x < __y ); }
# 312
template < typename _Iterator >
    inline typename reverse_iterator < _Iterator > :: difference_type
    operator - ( const reverse_iterator < _Iterator > & __x,
       const reverse_iterator < _Iterator > & __y )
    { return __y . base ( ) - __x . base ( ); }
# 318
template < typename _Iterator >
    inline reverse_iterator < _Iterator >
    operator + ( typename reverse_iterator < _Iterator > :: difference_type __n,
       const reverse_iterator < _Iterator > & __x )
    { return reverse_iterator < _Iterator > ( __x . base ( ) - __n ); }
# 326
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator == ( const reverse_iterator < _IteratorL > & __x,
        const reverse_iterator < _IteratorR > & __y )
    { return __x . base ( ) == __y . base ( ); }
# 332
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator < ( const reverse_iterator < _IteratorL > & __x,
       const reverse_iterator < _IteratorR > & __y )
    { return __y . base ( ) < __x . base ( ); }
# 338
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator != ( const reverse_iterator < _IteratorL > & __x,
        const reverse_iterator < _IteratorR > & __y )
    { return ! ( __x == __y ); }
# 344
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator > ( const reverse_iterator < _IteratorL > & __x,
       const reverse_iterator < _IteratorR > & __y )
    { return __y < __x; }
# 350
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator <= ( const reverse_iterator < _IteratorL > & __x,
        const reverse_iterator < _IteratorR > & __y )
    { return ! ( __y < __x ); }
# 356
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator >= ( const reverse_iterator < _IteratorL > & __x,
        const reverse_iterator < _IteratorR > & __y )
    { return ! ( __x < __y ); }
# 362
template < typename _IteratorL, typename _IteratorR >







    inline typename reverse_iterator < _IteratorL > :: difference_type
    operator - ( const reverse_iterator < _IteratorL > & __x,
       const reverse_iterator < _IteratorR > & __y )

    { return __y . base ( ) - __x . base ( ); }
# 388 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h" 3
template < typename _Container >
    class back_insert_iterator
    : public iterator < output_iterator_tag, void, void, void, void >
    {
    protected :
      _Container * container;

    public :

      typedef _Container container_type;


      explicit
      back_insert_iterator ( _Container & __x ) : container ( & __x ) { }

      back_insert_iterator &
      operator = ( typename _Container :: const_reference __value )
      {
 container -> push_back ( __value );
 return * this;
      }

      back_insert_iterator &
      operator * ( )
      { return * this; }


      back_insert_iterator &
      operator ++ ( )
      { return * this; }


      back_insert_iterator
      operator ++ ( int )
      { return * this; }
    };
# 457 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h" 3
template < typename _Container >
    inline back_insert_iterator < _Container >
    back_inserter ( _Container & __x )
    { return back_insert_iterator < _Container > ( __x ); }
# 472 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h" 3
template < typename _Container >
    class front_insert_iterator
    : public iterator < output_iterator_tag, void, void, void, void >
    {
    protected :
      _Container * container;

    public :

      typedef _Container container_type;


      explicit front_insert_iterator ( _Container & __x ) : container ( & __x ) { }

      front_insert_iterator &
      operator = ( typename _Container :: const_reference __value )
      {
 container -> push_front ( __value );
 return * this;
      }

      front_insert_iterator &
      operator * ( )
      { return * this; }


      front_insert_iterator &
      operator ++ ( )
      { return * this; }


      front_insert_iterator
      operator ++ ( int )
      { return * this; }
    };
# 540 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h" 3
template < typename _Container >
    inline front_insert_iterator < _Container >
    front_inserter ( _Container & __x )
    { return front_insert_iterator < _Container > ( __x ); }
# 559 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h" 3
template < typename _Container >
    class insert_iterator
    : public iterator < output_iterator_tag, void, void, void, void >
    {
    protected :
      _Container * container;
      typename _Container :: iterator iter;

    public :

      typedef _Container container_type;





      insert_iterator ( _Container & __x, typename _Container :: iterator __i )
      : container ( & __x ), iter ( __i ) { }

      insert_iterator &
      operator = ( typename _Container :: const_reference __value )
      {
 iter = container -> insert ( iter, __value );
 ++ iter;
 return * this;
      }

      insert_iterator &
      operator * ( )
      { return * this; }


      insert_iterator &
      operator ++ ( )
      { return * this; }


      insert_iterator &
      operator ++ ( int )
      { return * this; }
    };
# 646 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h" 3
template < typename _Container, typename _Iterator >
    inline insert_iterator < _Container >
    inserter ( _Container & __x, _Iterator __i )
    {
      return insert_iterator < _Container > ( __x,
      typename _Container :: iterator ( __i ) );
    }
# 654
}
# 656
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 665 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h" 3
using std::iterator_traits;
# 666
using std::iterator;
# 667
template < typename _Iterator, typename _Container >
    class __normal_iterator
    {
    protected :
      _Iterator _M_current;

    public :
      typedef _Iterator iterator_type;
      typedef typename iterator_traits < _Iterator > :: iterator_category
                                                             iterator_category;
      typedef typename iterator_traits < _Iterator > :: value_type value_type;
      typedef typename iterator_traits < _Iterator > :: difference_type
                                                             difference_type;
      typedef typename iterator_traits < _Iterator > :: reference reference;
      typedef typename iterator_traits < _Iterator > :: pointer pointer;

      __normal_iterator ( ) : _M_current ( _Iterator ( ) ) { }

      explicit
      __normal_iterator ( const _Iterator & __i ) : _M_current ( __i ) { }


      template < typename _Iter >
        __normal_iterator ( const __normal_iterator < _Iter,
     typename __enable_if <
              ( std :: __are_same < _Iter, typename _Container :: pointer > :: __value ),
        _Container > :: __type > & __i )
        : _M_current ( __i . base ( ) ) { }


      reference
      operator * ( ) const
      { return * _M_current; }

      pointer
      operator -> ( ) const
      { return _M_current; }

      __normal_iterator &
      operator ++ ( )
      {
 ++ _M_current;
 return * this;
      }

      __normal_iterator
      operator ++ ( int )
      { return __normal_iterator ( _M_current ++ ); }


      __normal_iterator &
      operator -- ( )
      {
 -- _M_current;
 return * this;
      }

      __normal_iterator
      operator -- ( int )
      { return __normal_iterator ( _M_current -- ); }


      reference
      operator [ ] ( const difference_type & __n ) const
      { return _M_current [ __n ]; }

      __normal_iterator &
      operator += ( const difference_type & __n )
      { _M_current += __n; return * this; }

      __normal_iterator
      operator + ( const difference_type & __n ) const
      { return __normal_iterator ( _M_current + __n ); }

      __normal_iterator &
      operator -= ( const difference_type & __n )
      { _M_current -= __n; return * this; }

      __normal_iterator
      operator - ( const difference_type & __n ) const
      { return __normal_iterator ( _M_current - __n ); }

      const _Iterator &
      base ( ) const
      { return _M_current; }
    };
# 763 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator == ( const __normal_iterator < _IteratorL, _Container > & __lhs,
        const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) == __rhs . base ( ); }
# 769
template < typename _Iterator, typename _Container >
    inline bool
    operator == ( const __normal_iterator < _Iterator, _Container > & __lhs,
        const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) == __rhs . base ( ); }
# 775
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator != ( const __normal_iterator < _IteratorL, _Container > & __lhs,
        const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) != __rhs . base ( ); }
# 781
template < typename _Iterator, typename _Container >
    inline bool
    operator != ( const __normal_iterator < _Iterator, _Container > & __lhs,
        const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) != __rhs . base ( ); }
# 788
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator < ( const __normal_iterator < _IteratorL, _Container > & __lhs,
       const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) < __rhs . base ( ); }
# 794
template < typename _Iterator, typename _Container >
    inline bool
    operator < ( const __normal_iterator < _Iterator, _Container > & __lhs,
       const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) < __rhs . base ( ); }
# 800
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator > ( const __normal_iterator < _IteratorL, _Container > & __lhs,
       const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) > __rhs . base ( ); }
# 806
template < typename _Iterator, typename _Container >
    inline bool
    operator > ( const __normal_iterator < _Iterator, _Container > & __lhs,
       const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) > __rhs . base ( ); }
# 812
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator <= ( const __normal_iterator < _IteratorL, _Container > & __lhs,
        const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) <= __rhs . base ( ); }
# 818
template < typename _Iterator, typename _Container >
    inline bool
    operator <= ( const __normal_iterator < _Iterator, _Container > & __lhs,
        const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) <= __rhs . base ( ); }
# 824
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator >= ( const __normal_iterator < _IteratorL, _Container > & __lhs,
        const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) >= __rhs . base ( ); }
# 830
template < typename _Iterator, typename _Container >
    inline bool
    operator >= ( const __normal_iterator < _Iterator, _Container > & __lhs,
        const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) >= __rhs . base ( ); }
# 840
template < typename _IteratorL, typename _IteratorR, typename _Container >







    inline typename __normal_iterator < _IteratorL, _Container > :: difference_type
    operator - ( const __normal_iterator < _IteratorL, _Container > & __lhs,
       const __normal_iterator < _IteratorR, _Container > & __rhs )

    { return __lhs . base ( ) - __rhs . base ( ); }
# 854
template < typename _Iterator, typename _Container >
    inline typename __normal_iterator < _Iterator, _Container > :: difference_type
    operator - ( const __normal_iterator < _Iterator, _Container > & __lhs,
       const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) - __rhs . base ( ); }
# 860
template < typename _Iterator, typename _Container >
    inline __normal_iterator < _Iterator, _Container >
    operator + ( typename __normal_iterator < _Iterator, _Container > :: difference_type
       __n, const __normal_iterator < _Iterator, _Container > & __i )
    { return __normal_iterator < _Iterator, _Container > ( __i . base ( ) + __n ); }
# 866
}
# 47 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/debug/debug.h" 3
namespace std { 
# 49
namespace __debug { }
# 50
}
# 55
namespace __gnu_debug { 
# 57
using namespace std::__debug;
# 58
}
# 74 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 79
template< bool _BoolType> 
# 80
struct __iter_swap { 
# 82
template < typename _ForwardIterator1, typename _ForwardIterator2 >
        static void
        iter_swap ( _ForwardIterator1 __a, _ForwardIterator2 __b )
        {
          typedef typename iterator_traits < _ForwardIterator1 > :: value_type
            _ValueType1;
          _ValueType1 __tmp = ( * __a );
          * __a = ( * __b );
          * __b = ( __tmp );
 }
# 92
}; 
# 95
template<> struct __iter_swap< true>  { 
# 97
template < typename _ForwardIterator1, typename _ForwardIterator2 >
        static void
        iter_swap ( _ForwardIterator1 __a, _ForwardIterator2 __b )
        {
          swap ( * __a, * __b );
        }
# 103
}; 
# 115 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2 >
    inline void
    iter_swap ( _ForwardIterator1 __a, _ForwardIterator2 __b )
    {
      typedef typename iterator_traits < _ForwardIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _ForwardIterator2 > :: value_type
 _ValueType2;











      typedef typename iterator_traits < _ForwardIterator1 > :: reference
 _ReferenceType1;
      typedef typename iterator_traits < _ForwardIterator2 > :: reference
 _ReferenceType2;
      std :: __iter_swap < __are_same < _ValueType1, _ValueType2 > :: __value
 && __are_same < _ValueType1 &, _ReferenceType1 > :: __value
 && __are_same < _ValueType2 &, _ReferenceType2 > :: __value > ::
 iter_swap ( __a, __b );
    }
# 156 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2 >
    _ForwardIterator2
    swap_ranges ( _ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2 )
    {





      ;

      for (; __first1 != __last1; ++ __first1, ++ __first2 )
 std :: iter_swap ( __first1, __first2 );
      return __first2;
    }
# 184 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h" 3
template < typename _Tp >
    inline const _Tp &
    min ( const _Tp & __a, const _Tp & __b )
    {



      if ( __b < __a )
 return __b;
      return __a;
    }
# 207 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h" 3
template < typename _Tp >
    inline const _Tp &
    max ( const _Tp & __a, const _Tp & __b )
    {



      if ( __a < __b )
 return __b;
      return __a;
    }
# 230 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h" 3
template < typename _Tp, typename _Compare >
    inline const _Tp &
    min ( const _Tp & __a, const _Tp & __b, _Compare __comp )
    {

      if ( __comp ( __b, __a ) )
 return __b;
      return __a;
    }
# 251 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h" 3
template < typename _Tp, typename _Compare >
    inline const _Tp &
    max ( const _Tp & __a, const _Tp & __b, _Compare __comp )
    {

      if ( __comp ( __a, __b ) )
 return __b;
      return __a;
    }
# 264
template < typename _Iterator,
    bool _IsNormal = __is_normal_iterator < _Iterator > :: __value >
    struct __niter_base
    {
      static _Iterator
      __b ( _Iterator __it )
      { return __it; }
    };
# 273
template < typename _Iterator >
    struct __niter_base < _Iterator, true >
    {
      static typename _Iterator :: iterator_type
      __b ( _Iterator __it )
      { return __it . base ( ); }
    };
# 282
template < typename _Iterator,
    bool _IsMove = __is_move_iterator < _Iterator > :: __value >
    struct __miter_base
    {
      static _Iterator
      __b ( _Iterator __it )
      { return __it; }
    };
# 291
template < typename _Iterator >
    struct __miter_base < _Iterator, true >
    {
      static typename _Iterator :: iterator_type
      __b ( _Iterator __it )
      { return __it . base ( ); }
    };
# 305
template< bool __T3, bool __T4, class > 
# 306
struct __copy_move { 
# 308
template < typename _II, typename _OI >
        static _OI
        __copy_m ( _II __first, _II __last, _OI __result )
        {
   for (; __first != __last; ++ __result, ++ __first )
     * __result = * __first;
   return __result;
 }
# 316
}; 
# 334 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h" 3
template<> struct __copy_move< false, false, random_access_iterator_tag>  { 
# 336
template < typename _II, typename _OI >
        static _OI
        __copy_m ( _II __first, _II __last, _OI __result )
        {
   typedef typename iterator_traits < _II > :: difference_type _Distance;
   for ( _Distance __n = __last - __first; __n > 0; -- __n )
     {
       * __result = * __first;
       ++ __first;
       ++ __result;
     }
   return __result;
 }
# 349
}; 
# 371 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h" 3
template< bool _IsMove> 
# 372
struct __copy_move< _IsMove, true, random_access_iterator_tag>  { 
# 374
template < typename _Tp >
        static _Tp *
        __copy_m ( const _Tp * __first, const _Tp * __last, _Tp * __result )
        {
   __builtin_memmove ( __result, __first,
       sizeof ( _Tp ) * ( __last - __first ) );
   return __result + ( __last - __first );
 }
# 382
}; 
# 384
template < bool _IsMove, typename _II, typename _OI >
    inline _OI
    __copy_move_a ( _II __first, _II __last, _OI __result )
    {
      typedef typename iterator_traits < _II > :: value_type _ValueTypeI;
      typedef typename iterator_traits < _OI > :: value_type _ValueTypeO;
      typedef typename iterator_traits < _II > :: iterator_category _Category;
      const bool __simple = ( __is_pod ( _ValueTypeI )
                      && __is_pointer < _II > :: __value
                      && __is_pointer < _OI > :: __value
        && __are_same < _ValueTypeI, _ValueTypeO > :: __value );

      return std :: __copy_move < _IsMove, __simple,
                       _Category > :: __copy_m ( __first, __last, __result );
    }
# 402
template< class _CharT> struct char_traits; 
# 405
template< class _CharT, class _Traits> class istreambuf_iterator; 
# 408
template< class _CharT, class _Traits> class ostreambuf_iterator; 
# 411
template < bool _IsMove, typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
      ostreambuf_iterator < _CharT, char_traits < _CharT > > > :: __type
    __copy_move_a2 ( _CharT *, _CharT *,
     ostreambuf_iterator < _CharT, char_traits < _CharT > > );
# 417
template < bool _IsMove, typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
      ostreambuf_iterator < _CharT, char_traits < _CharT > > > :: __type
    __copy_move_a2 ( const _CharT *, const _CharT *,
     ostreambuf_iterator < _CharT, char_traits < _CharT > > );
# 423
template < bool _IsMove, typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
        _CharT * > :: __type
    __copy_move_a2 ( istreambuf_iterator < _CharT, char_traits < _CharT > >,
     istreambuf_iterator < _CharT, char_traits < _CharT > >, _CharT * );
# 429
template < bool _IsMove, typename _II, typename _OI >
    inline _OI
    __copy_move_a2 ( _II __first, _II __last, _OI __result )
    {
      return _OI ( std :: __copy_move_a < _IsMove >
   ( std :: __niter_base < _II > :: __b ( __first ),
    std :: __niter_base < _II > :: __b ( __last ),
    std :: __niter_base < _OI > :: __b ( __result ) ) );
    }
# 456 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h" 3
template < typename _II, typename _OI >
    inline _OI
    copy ( _II __first, _II __last, _OI __result )
    {




      ;

      return ( std :: __copy_move_a2 < __is_move_iterator < _II > :: __value >
       ( std :: __miter_base < _II > :: __b ( __first ),
        std :: __miter_base < _II > :: __b ( __last ), __result ) );
    }
# 509 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h" 3
template< bool __T5, bool __T6, class > 
# 510
struct __copy_move_backward { 
# 512
template < typename _BI1, typename _BI2 >
        static _BI2
        __copy_move_b ( _BI1 __first, _BI1 __last, _BI2 __result )
        {
   while ( __first != __last )
     * -- __result = * -- __last;
   return __result;
 }
# 520
}; 
# 538 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h" 3
template<> struct __copy_move_backward< false, false, random_access_iterator_tag>  { 
# 540
template < typename _BI1, typename _BI2 >
        static _BI2
        __copy_move_b ( _BI1 __first, _BI1 __last, _BI2 __result )
        {
   typename iterator_traits < _BI1 > :: difference_type __n;
   for ( __n = __last - __first; __n > 0; -- __n )
     * -- __result = * -- __last;
   return __result;
 }
# 549
}; 
# 567 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h" 3
template< bool _IsMove> 
# 568
struct __copy_move_backward< _IsMove, true, random_access_iterator_tag>  { 
# 570
template < typename _Tp >
        static _Tp *
        __copy_move_b ( const _Tp * __first, const _Tp * __last, _Tp * __result )
        {
   const ptrdiff_t _Num = __last - __first;
   __builtin_memmove ( __result - _Num, __first, sizeof ( _Tp ) * _Num );
   return __result - _Num;
 }
# 578
}; 
# 580
template < bool _IsMove, typename _BI1, typename _BI2 >
    inline _BI2
    __copy_move_backward_a ( _BI1 __first, _BI1 __last, _BI2 __result )
    {
      typedef typename iterator_traits < _BI1 > :: value_type _ValueType1;
      typedef typename iterator_traits < _BI2 > :: value_type _ValueType2;
      typedef typename iterator_traits < _BI1 > :: iterator_category _Category;
      const bool __simple = ( __is_pod ( _ValueType1 )
                      && __is_pointer < _BI1 > :: __value
                      && __is_pointer < _BI2 > :: __value
        && __are_same < _ValueType1, _ValueType2 > :: __value );

      return std :: __copy_move_backward < _IsMove, __simple,
                                _Category > :: __copy_move_b ( __first,
         __last,
         __result );
    }
# 598
template < bool _IsMove, typename _BI1, typename _BI2 >
    inline _BI2
    __copy_move_backward_a2 ( _BI1 __first, _BI1 __last, _BI2 __result )
    {
      return _BI2 ( std :: __copy_move_backward_a < _IsMove >
    ( std :: __niter_base < _BI1 > :: __b ( __first ),
     std :: __niter_base < _BI1 > :: __b ( __last ),
     std :: __niter_base < _BI2 > :: __b ( __result ) ) );
    }
# 626 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h" 3
template < typename _BI1, typename _BI2 >
    inline _BI2
    copy_backward ( _BI1 __first, _BI1 __last, _BI2 __result )
    {






      ;

      return ( std :: __copy_move_backward_a2 < __is_move_iterator < _BI1 > :: __value >
       ( std :: __miter_base < _BI1 > :: __b ( __first ),
        std :: __miter_base < _BI1 > :: __b ( __last ), __result ) );
    }
# 684 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h" 3
template < typename _ForwardIterator, typename _Tp >
    inline typename
    __gnu_cxx :: __enable_if < ! __is_scalar < _Tp > :: __value, void > :: __type
    __fill_a ( _ForwardIterator __first, _ForwardIterator __last,
       const _Tp & __value )
    {
      for (; __first != __last; ++ __first )
 * __first = __value;
    }
# 694
template < typename _ForwardIterator, typename _Tp >
    inline typename
    __gnu_cxx :: __enable_if < __is_scalar < _Tp > :: __value, void > :: __type
    __fill_a ( _ForwardIterator __first, _ForwardIterator __last,
      const _Tp & __value )
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++ __first )
 * __first = __tmp;
    }
# 706
template < typename _Tp >
    inline typename
    __gnu_cxx :: __enable_if < __is_byte < _Tp > :: __value, void > :: __type
    __fill_a ( _Tp * __first, _Tp * __last, const _Tp & __c )
    {
      const _Tp __tmp = __c;
      __builtin_memset ( __first, static_cast < unsigned char > ( __tmp ),
         __last - __first );
    }
# 728 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h" 3
template < typename _ForwardIterator, typename _Tp >
    inline void
    fill ( _ForwardIterator __first, _ForwardIterator __last, const _Tp & __value )
    {



      ;

      std :: __fill_a ( std :: __niter_base < _ForwardIterator > :: __b ( __first ),
      std :: __niter_base < _ForwardIterator > :: __b ( __last ), __value );
    }
# 741
template < typename _OutputIterator, typename _Size, typename _Tp >
    inline typename
    __gnu_cxx :: __enable_if < ! __is_scalar < _Tp > :: __value, _OutputIterator > :: __type
    __fill_n_a ( _OutputIterator __first, _Size __n, const _Tp & __value )
    {
      for (; __n > 0; -- __n, ++ __first )
 * __first = __value;
      return __first;
    }
# 751
template < typename _OutputIterator, typename _Size, typename _Tp >
    inline typename
    __gnu_cxx :: __enable_if < __is_scalar < _Tp > :: __value, _OutputIterator > :: __type
    __fill_n_a ( _OutputIterator __first, _Size __n, const _Tp & __value )
    {
      const _Tp __tmp = __value;
      for (; __n > 0; -- __n, ++ __first )
 * __first = __tmp;
      return __first;
    }
# 762
template < typename _Size, typename _Tp >
    inline typename
    __gnu_cxx :: __enable_if < __is_byte < _Tp > :: __value, _Tp * > :: __type
    __fill_n_a ( _Tp * __first, _Size __n, const _Tp & __c )
    {
      std :: __fill_a ( __first, __first + __n, __c );
      return __first + __n;
    }
# 783 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h" 3
template < typename _OI, typename _Size, typename _Tp >
    inline _OI
    fill_n ( _OI __first, _Size __n, const _Tp & __value )
    {



      return _OI ( std :: __fill_n_a ( std :: __niter_base < _OI > :: __b ( __first ),
     __n, __value ) );
    }
# 794
template< bool _BoolType> 
# 795
struct __equal { 
# 797
template < typename _II1, typename _II2 >
        static bool
        equal ( _II1 __first1, _II1 __last1, _II2 __first2 )
        {
   for (; __first1 != __last1; ++ __first1, ++ __first2 )
     if ( ! ( * __first1 == * __first2 ) )
       return false;
   return true;
 }
# 806
}; 
# 809
template<> struct __equal< true>  { 
# 811
template < typename _Tp >
        static bool
        equal ( const _Tp * __first1, const _Tp * __last1, const _Tp * __first2 )
        {
   return ! __builtin_memcmp ( __first1, __first2, sizeof ( _Tp )
       * ( __last1 - __first1 ) );
 }
# 818
}; 
# 820
template < typename _II1, typename _II2 >
    inline bool
    __equal_aux ( _II1 __first1, _II1 __last1, _II2 __first2 )
    {
      typedef typename iterator_traits < _II1 > :: value_type _ValueType1;
      typedef typename iterator_traits < _II2 > :: value_type _ValueType2;
      const bool __simple = ( __is_integer < _ValueType1 > :: __value
                      && __is_pointer < _II1 > :: __value
                      && __is_pointer < _II2 > :: __value
        && __are_same < _ValueType1, _ValueType2 > :: __value );

      return std :: __equal < __simple > :: equal ( __first1, __last1, __first2 );
    }
# 835
template< class , class > 
# 836
struct __lc_rai { 
# 838
template < typename _II1, typename _II2 >
        static _II1
        __newlast1 ( _II1, _II1 __last1, _II2, _II2 )
        { return __last1; }
# 843
template < typename _II >
        static bool
        __cnd2 ( _II __first, _II __last )
        { return __first != __last; }
# 847
}; 
# 850
template<> struct __lc_rai< random_access_iterator_tag, random_access_iterator_tag>  { 
# 852
template < typename _RAI1, typename _RAI2 >
        static _RAI1
        __newlast1 ( _RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2 )
        {
   const typename iterator_traits < _RAI1 > :: difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits < _RAI2 > :: difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }
# 864
template < typename _RAI >
        static bool
        __cnd2 ( _RAI, _RAI )
        { return true; }
# 868
}; 
# 870
template< bool _BoolType> 
# 871
struct __lexicographical_compare { 
# 873
template < typename _II1, typename _II2 >
        static bool __lc ( _II1, _II1, _II2, _II2 );
# 875
}; 
# 877
template < bool _BoolType >
    template < typename _II1, typename _II2 >
      bool
      __lexicographical_compare < _BoolType > ::
      __lc ( _II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2 )
      {
 typedef typename iterator_traits < _II1 > :: iterator_category _Category1;
 typedef typename iterator_traits < _II2 > :: iterator_category _Category2;
 typedef std :: __lc_rai < _Category1, _Category2 > __rai_type;

 __last1 = __rai_type :: __newlast1 ( __first1, __last1,
      __first2, __last2 );
 for (; __first1 != __last1 && __rai_type :: __cnd2 ( __first2, __last2 );
      ++ __first1, ++ __first2 )
   {
     if ( * __first1 < * __first2 )
       return true;
     if ( * __first2 < * __first1 )
       return false;
   }
 return __first1 == __last1 && __first2 != __last2;
      }
# 901
template<> struct __lexicographical_compare< true>  { 
# 903
template < typename _Tp, typename _Up >
        static bool
        __lc ( const _Tp * __first1, const _Tp * __last1,
      const _Up * __first2, const _Up * __last2 )
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   const int __result = __builtin_memcmp ( __first1, __first2,
      std :: min ( __len1, __len2 ) );
   return __result != 0 ? __result < 0 : __len1 < __len2;
 }
# 914
}; 
# 916
template < typename _II1, typename _II2 >
    inline bool
    __lexicographical_compare_aux ( _II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2 )
    {
      typedef typename iterator_traits < _II1 > :: value_type _ValueType1;
      typedef typename iterator_traits < _II2 > :: value_type _ValueType2;
      const bool __simple =
 ( __is_byte < _ValueType1 > :: __value && __is_byte < _ValueType2 > :: __value
  && ! __gnu_cxx :: __numeric_traits < _ValueType1 > :: __is_signed
  && ! __gnu_cxx :: __numeric_traits < _ValueType2 > :: __is_signed
  && __is_pointer < _II1 > :: __value
  && __is_pointer < _II2 > :: __value );

      return std :: __lexicographical_compare < __simple > :: __lc ( __first1, __last1,
           __first2, __last2 );
    }
# 934
}
# 936
namespace std __attribute((__visibility__("default"))) { 
# 950 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h" 3
template < typename _II1, typename _II2 >
    inline bool
    equal ( _II1 __first1, _II1 __last1, _II2 __first2 )
    {






      ;

      return std :: __equal_aux ( std :: __niter_base < _II1 > :: __b ( __first1 ),
         std :: __niter_base < _II1 > :: __b ( __last1 ),
         std :: __niter_base < _II2 > :: __b ( __first2 ) );
    }
# 982 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h" 3
template < typename _IIter1, typename _IIter2, typename _BinaryPredicate >
    inline bool
    equal ( _IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred )
    {



      ;

      for (; __first1 != __last1; ++ __first1, ++ __first2 )
 if ( ! bool ( __binary_pred ( * __first1, * __first2 ) ) )
   return false;
      return true;
    }
# 1013 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h" 3
template < typename _II1, typename _II2 >
    inline bool
    lexicographical_compare ( _II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2 )
    {

      typedef typename iterator_traits < _II1 > :: value_type _ValueType1;
      typedef typename iterator_traits < _II2 > :: value_type _ValueType2;




      ;
      ;

      return std :: __lexicographical_compare_aux
 ( std :: __niter_base < _II1 > :: __b ( __first1 ),
  std :: __niter_base < _II1 > :: __b ( __last1 ),
  std :: __niter_base < _II2 > :: __b ( __first2 ),
  std :: __niter_base < _II2 > :: __b ( __last2 ) );
    }
# 1048 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h" 3
template < typename _II1, typename _II2, typename _Compare >
    bool
    lexicographical_compare ( _II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp )
    {
      typedef typename iterator_traits < _II1 > :: iterator_category _Category1;
      typedef typename iterator_traits < _II2 > :: iterator_category _Category2;
      typedef std :: __lc_rai < _Category1, _Category2 > __rai_type;




      ;
      ;

      __last1 = __rai_type :: __newlast1 ( __first1, __last1, __first2, __last2 );
      for (; __first1 != __last1 && __rai_type :: __cnd2 ( __first2, __last2 );
    ++ __first1, ++ __first2 )
 {
   if ( __comp ( * __first1, * __first2 ) )
     return true;
   if ( __comp ( * __first2, * __first1 ) )
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }
# 1088 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h" 3
template < typename _InputIterator1, typename _InputIterator2 >
    pair < _InputIterator1, _InputIterator2 >
    mismatch ( _InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2 )
    {






      ;

      while ( __first1 != __last1 && * __first1 == * __first2 )
        {
   ++ __first1;
   ++ __first2;
        }
      return pair < _InputIterator1, _InputIterator2 > ( __first1, __first2 );
    }
# 1125 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate >
    pair < _InputIterator1, _InputIterator2 >
    mismatch ( _InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred )
    {



      ;

      while ( __first1 != __last1 && bool ( __binary_pred ( * __first1, * __first2 ) ) )
        {
   ++ __first1;
   ++ __first2;
        }
      return pair < _InputIterator1, _InputIterator2 > ( __first1, __first2 );
    }
# 1144
}
# 52 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/char_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 64 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/char_traits.h" 3
template< class _CharT> 
# 65
struct _Char_types { 
# 67
typedef unsigned long int_type; 
# 68
typedef std::streampos pos_type; 
# 69
typedef std::streamoff off_type; 
# 70
typedef mbstate_t state_type; 
# 71
}; 
# 89 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/char_traits.h" 3
template < typename _CharT >
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types < _CharT > :: int_type int_type;
      typedef typename _Char_types < _CharT > :: pos_type pos_type;
      typedef typename _Char_types < _CharT > :: off_type off_type;
      typedef typename _Char_types < _CharT > :: state_type state_type;

      static void
      assign ( char_type & __c1, const char_type & __c2 )
      { __c1 = __c2; }

      static bool
      eq ( const char_type & __c1, const char_type & __c2 )
      { return __c1 == __c2; }

      static bool
      lt ( const char_type & __c1, const char_type & __c2 )
      { return __c1 < __c2; }

      static int
      compare ( const char_type * __s1, const char_type * __s2, std :: size_t __n );

      static std :: size_t
      length ( const char_type * __s );

      static const char_type *
      find ( const char_type * __s, std :: size_t __n, const char_type & __a );

      static char_type *
      move ( char_type * __s1, const char_type * __s2, std :: size_t __n );

      static char_type *
      copy ( char_type * __s1, const char_type * __s2, std :: size_t __n );

      static char_type *
      assign ( char_type * __s, std :: size_t __n, char_type __a );

      static char_type
      to_char_type ( const int_type & __c )
      { return static_cast < char_type > ( __c ); }

      static int_type
      to_int_type ( const char_type & __c )
      { return static_cast < int_type > ( __c ); }

      static bool
      eq_int_type ( const int_type & __c1, const int_type & __c2 )
      { return __c1 == __c2; }

      static int_type
      eof ( )
      { return static_cast < int_type > ( ( - 1 ) ); }

      static int_type
      not_eof ( const int_type & __c )
      { return ! eq_int_type ( __c, eof ( ) ) ? __c : to_int_type ( char_type ( ) ); }
    };
# 149
template < typename _CharT >
    int
    char_traits < _CharT > ::
    compare ( const char_type * __s1, const char_type * __s2, std :: size_t __n )
    {
      for ( std :: size_t __i = 0; __i < __n; ++ __i )
 if ( lt ( __s1 [ __i ], __s2 [ __i ] ) )
   return - 1;
 else if ( lt ( __s2 [ __i ], __s1 [ __i ] ) )
   return 1;
      return 0;
    }
# 162
template < typename _CharT >
    std :: size_t
    char_traits < _CharT > ::
    length ( const char_type * __p )
    {
      std :: size_t __i = 0;
      while ( ! eq ( __p [ __i ], char_type ( ) ) )
        ++ __i;
      return __i;
    }
# 173
template < typename _CharT >
    const typename char_traits < _CharT > :: char_type *
    char_traits < _CharT > ::
    find ( const char_type * __s, std :: size_t __n, const char_type & __a )
    {
      for ( std :: size_t __i = 0; __i < __n; ++ __i )
        if ( eq ( __s [ __i ], __a ) )
          return __s + __i;
      return 0;
    }
# 184
template < typename _CharT >
    typename char_traits < _CharT > :: char_type *
    char_traits < _CharT > ::
    move ( char_type * __s1, const char_type * __s2, std :: size_t __n )
    {
      return static_cast < _CharT * > ( __builtin_memmove ( __s1, __s2,
          __n * sizeof ( char_type ) ) );
    }
# 193
template < typename _CharT >
    typename char_traits < _CharT > :: char_type *
    char_traits < _CharT > ::
    copy ( char_type * __s1, const char_type * __s2, std :: size_t __n )
    {

      std :: copy ( __s2, __s2 + __n, __s1 );
      return __s1;
    }
# 203
template < typename _CharT >
    typename char_traits < _CharT > :: char_type *
    char_traits < _CharT > ::
    assign ( char_type * __s, std :: size_t __n, char_type __a )
    {

      std :: fill_n ( __s, __n, __a );
      return __s;
    }
# 213
}
# 215
namespace std __attribute((__visibility__("default"))) { 
# 230 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/char_traits.h" 3
template< class _CharT> 
# 231
struct char_traits : public __gnu_cxx::char_traits< _CharT>  { 
# 232
}; 
# 237
template<> struct char_traits< char>  { 
# 239
typedef char char_type; 
# 240
typedef int int_type; 
# 241
typedef streampos pos_type; 
# 242
typedef streamoff off_type; 
# 243
typedef mbstate_t state_type; 
# 246
static void assign(char_type &__c1, const char_type &__c2) 
# 247
{ __c1 = __c2; } 
# 250
static bool eq(const char_type &__c1, const char_type &__c2) 
# 251
{ return __c1 == __c2; } 
# 254
static bool lt(const char_type &__c1, const char_type &__c2) 
# 255
{ return __c1 < __c2; } 
# 258
static int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 259
{ return __builtin_memcmp(__s1, __s2, __n); } 
# 262
static size_t length(const char_type *__s) 
# 263
{ return __builtin_strlen(__s); } 
# 266
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 267
{ return static_cast< const char_type *>(__builtin_memchr(__s, __a, __n)); } 
# 270
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 271
{ return static_cast< char_type *>(__builtin_memmove(__s1, __s2, __n)); } 
# 274
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 275
{ return static_cast< char_type *>(__builtin_memcpy(__s1, __s2, __n)); } 
# 278
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 279
{ return static_cast< char_type *>(__builtin_memset(__s, __a, __n)); } 
# 282
static char_type to_char_type(const int_type &__c) 
# 283
{ return static_cast< char_type>(__c); } 
# 288
static int_type to_int_type(const char_type &__c) 
# 289
{ return static_cast< int_type>((static_cast< unsigned char>(__c))); } 
# 292
static bool eq_int_type(const int_type &__c1, const int_type &__c2) 
# 293
{ return __c1 == __c2; } 
# 296
static int_type eof() 
# 297
{ return static_cast< int_type>((-1)); } 
# 300
static int_type not_eof(const int_type &__c) 
# 301
{ return (__c == eof()) ? 0 : __c; } 
# 302
}; 
# 308
template<> struct char_traits< wchar_t>  { 
# 310
typedef wchar_t char_type; 
# 311
typedef wint_t int_type; 
# 312
typedef streamoff off_type; 
# 313
typedef wstreampos pos_type; 
# 314
typedef mbstate_t state_type; 
# 317
static void assign(char_type &__c1, const char_type &__c2) 
# 318
{ __c1 = __c2; } 
# 321
static bool eq(const char_type &__c1, const char_type &__c2) 
# 322
{ return __c1 == __c2; } 
# 325
static bool lt(const char_type &__c1, const char_type &__c2) 
# 326
{ return __c1 < __c2; } 
# 329
static int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 330
{ return wmemcmp(__s1, __s2, __n); } 
# 333
static size_t length(const char_type *__s) 
# 334
{ return wcslen(__s); } 
# 337
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 338
{ return wmemchr(__s, __a, __n); } 
# 341
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 342
{ return wmemmove(__s1, __s2, __n); } 
# 345
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 346
{ return wmemcpy(__s1, __s2, __n); } 
# 349
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 350
{ return wmemset(__s, __a, __n); } 
# 353
static char_type to_char_type(const int_type &__c) 
# 354
{ return (char_type)__c; } 
# 357
static int_type to_int_type(const char_type &__c) 
# 358
{ return (int_type)__c; } 
# 361
static bool eq_int_type(const int_type &__c1, const int_type &__c2) 
# 362
{ return __c1 == __c2; } 
# 365
static int_type eof() 
# 366
{ return static_cast< int_type>(4294967295U); } 
# 369
static int_type not_eof(const int_type &__c) 
# 370
{ return eq_int_type(__c, eof()) ? (0) : __c; } 
# 371
}; 
# 374
}
# 28 "/usr/include/bits/locale.h" 3
enum { 
# 29
__LC_CTYPE, 
# 30
__LC_NUMERIC, 
# 31
__LC_TIME, 
# 32
__LC_COLLATE, 
# 33
__LC_MONETARY, 
# 34
__LC_MESSAGES, 
# 35
__LC_ALL, 
# 36
__LC_PAPER, 
# 37
__LC_NAME, 
# 38
__LC_ADDRESS, 
# 39
__LC_TELEPHONE, 
# 40
__LC_MEASUREMENT, 
# 41
__LC_IDENTIFICATION
# 42
}; 
# 54 "/usr/include/locale.h" 3
extern "C" { struct lconv { 
# 58
char *decimal_point; 
# 59
char *thousands_sep; 
# 65
char *grouping; 
# 71
char *int_curr_symbol; 
# 72
char *currency_symbol; 
# 73
char *mon_decimal_point; 
# 74
char *mon_thousands_sep; 
# 75
char *mon_grouping; 
# 76
char *positive_sign; 
# 77
char *negative_sign; 
# 78
char int_frac_digits; 
# 79
char frac_digits; 
# 81
char p_cs_precedes; 
# 83
char p_sep_by_space; 
# 85
char n_cs_precedes; 
# 87
char n_sep_by_space; 
# 94
char p_sign_posn; 
# 95
char n_sign_posn; 
# 98
char int_p_cs_precedes; 
# 100
char int_p_sep_by_space; 
# 102
char int_n_cs_precedes; 
# 104
char int_n_sep_by_space; 
# 111
char int_p_sign_posn; 
# 112
char int_n_sign_posn; 
# 121 "/usr/include/locale.h" 3
}; }
# 125
extern "C" char *setlocale(int , const char * ) throw(); 
# 128
extern "C" lconv *localeconv() throw(); 
# 152 "/usr/include/locale.h" 3
extern "C" __locale_t newlocale(int , const char * , __locale_t ) throw(); 
# 187 "/usr/include/locale.h" 3
extern "C" __locale_t duplocale(__locale_t ) throw(); 
# 191
extern "C" void freelocale(__locale_t ) throw(); 
# 198
extern "C" __locale_t uselocale(__locale_t ) throw(); 
# 53 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/clocale" 3
namespace std __attribute((__visibility__("default"))) { 
# 55
using ::lconv;
# 56
using ::setlocale;
# 57
using ::localeconv;
# 59
}
# 50 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/x86_64-redhat-linux/bits/c++locale.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 52
extern "C" __typeof__(uselocale) __uselocale; 
# 54
}
# 57
namespace std __attribute((__visibility__("default"))) { 
# 59
typedef __locale_t __c_locale; 
# 66
inline int __convert_from_v(const __c_locale &__cloc __attribute((__unused__)), char *
# 67
__out, const int 
# 68
__size __attribute((__unused__)), const char *
# 69
__fmt, ...) 
# 70
{ 
# 72
__c_locale __old = __gnu_cxx::__uselocale(__cloc); 
# 85 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/x86_64-redhat-linux/bits/c++locale.h" 3
__builtin_va_list __args; 
# 86
__builtin_va_start(__args,__fmt); 
# 89
const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args); 
# 94
__builtin_va_end(__args); 
# 97
__gnu_cxx::__uselocale(__old); 
# 105
return __ret; 
# 106
} 
# 108
}
# 49 "/usr/include/ctype.h" 3
enum { 
# 50
_ISupper = 256, 
# 51
_ISlower = 512, 
# 52
_ISalpha = 1024, 
# 53
_ISdigit = 2048, 
# 54
_ISxdigit = 4096, 
# 55
_ISspace = 8192, 
# 56
_ISprint = 16384, 
# 57
_ISgraph = 32768, 
# 58
_ISblank = 1, 
# 59
_IScntrl, 
# 60
_ISpunct = 4, 
# 61
_ISalnum = 8
# 62
}; 
# 81 "/usr/include/ctype.h" 3
extern "C" const unsigned short **__ctype_b_loc() throw()
# 82
 __attribute((const)); 
# 83
extern "C" const __int32_t **__ctype_tolower_loc() throw()
# 84
 __attribute((const)); 
# 85
extern "C" const __int32_t **__ctype_toupper_loc() throw()
# 86
 __attribute((const)); 
# 102 "/usr/include/ctype.h" 3
extern "C" int isalnum(int) throw(); 
# 103
extern "C" int isalpha(int) throw(); 
# 104
extern "C" int iscntrl(int) throw(); 
# 105
extern "C" int isdigit(int) throw(); 
# 106
extern "C" int islower(int) throw(); 
# 107
extern "C" int isgraph(int) throw(); 
# 108
extern "C" int isprint(int) throw(); 
# 109
extern "C" int ispunct(int) throw(); 
# 110
extern "C" int isspace(int) throw(); 
# 111
extern "C" int isupper(int) throw(); 
# 112
extern "C" int isxdigit(int) throw(); 
# 116
extern "C" int tolower(int ) throw(); 
# 119
extern "C" int toupper(int ) throw(); 
# 128
extern "C" int isblank(int) throw(); 
# 135
extern "C" int isctype(int , int ) throw(); 
# 142
extern "C" int isascii(int ) throw(); 
# 146
extern "C" int toascii(int ) throw(); 
# 150
extern "C" int _toupper(int) throw(); 
# 151
extern "C" int _tolower(int) throw(); 
# 247 "/usr/include/ctype.h" 3
extern "C" int isalnum_l(int, __locale_t) throw(); 
# 248
extern "C" int isalpha_l(int, __locale_t) throw(); 
# 249
extern "C" int iscntrl_l(int, __locale_t) throw(); 
# 250
extern "C" int isdigit_l(int, __locale_t) throw(); 
# 251
extern "C" int islower_l(int, __locale_t) throw(); 
# 252
extern "C" int isgraph_l(int, __locale_t) throw(); 
# 253
extern "C" int isprint_l(int, __locale_t) throw(); 
# 254
extern "C" int ispunct_l(int, __locale_t) throw(); 
# 255
extern "C" int isspace_l(int, __locale_t) throw(); 
# 256
extern "C" int isupper_l(int, __locale_t) throw(); 
# 257
extern "C" int isxdigit_l(int, __locale_t) throw(); 
# 259
extern "C" int isblank_l(int, __locale_t) throw(); 
# 263
extern "C" int __tolower_l(int , __locale_t ) throw(); 
# 264
extern "C" int tolower_l(int , __locale_t ) throw(); 
# 267
extern "C" int __toupper_l(int , __locale_t ) throw(); 
# 268
extern "C" int toupper_l(int , __locale_t ) throw(); 
# 64 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/cctype" 3
namespace std __attribute((__visibility__("default"))) { 
# 66
using ::isalnum;
# 67
using ::isalpha;
# 68
using ::iscntrl;
# 69
using ::isdigit;
# 70
using ::isgraph;
# 71
using ::islower;
# 72
using ::isprint;
# 73
using ::ispunct;
# 74
using ::isspace;
# 75
using ::isupper;
# 76
using ::isxdigit;
# 77
using ::tolower;
# 78
using ::toupper;
# 80
}
# 46 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/localefwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 49
class locale; 
# 51
template < typename _Facet >
    bool
    has_facet ( const locale & ) throw ( );
# 55
template < typename _Facet >
    const _Facet &
    use_facet ( const locale & );
# 60
template < typename _CharT >
    bool
    isspace ( _CharT, const locale & );
# 64
template < typename _CharT >
    bool
    isprint ( _CharT, const locale & );
# 68
template < typename _CharT >
    bool
    iscntrl ( _CharT, const locale & );
# 72
template < typename _CharT >
    bool
    isupper ( _CharT, const locale & );
# 76
template < typename _CharT >
    bool
    islower ( _CharT, const locale & );
# 80
template < typename _CharT >
    bool
    isalpha ( _CharT, const locale & );
# 84
template < typename _CharT >
    bool
    isdigit ( _CharT, const locale & );
# 88
template < typename _CharT >
    bool
    ispunct ( _CharT, const locale & );
# 92
template < typename _CharT >
    bool
    isxdigit ( _CharT, const locale & );
# 96
template < typename _CharT >
    bool
    isalnum ( _CharT, const locale & );
# 100
template < typename _CharT >
    bool
    isgraph ( _CharT, const locale & );
# 104
template < typename _CharT >
    _CharT
    toupper ( _CharT, const locale & );
# 108
template < typename _CharT >
    _CharT
    tolower ( _CharT, const locale & );
# 113
struct ctype_base; 
# 114
template < typename _CharT >
    class ctype;
# 116
template<> class ctype< char> ; 
# 118
template<> class ctype< wchar_t> ; 
# 120
template < typename _CharT >
    class ctype_byname;
# 124
class codecvt_base; 
# 125
template< class _InternT, class _ExternT, class _StateT> class codecvt; 
# 127
template<> class codecvt< char, char, __mbstate_t> ; 
# 129
template<> class codecvt< wchar_t, char, __mbstate_t> ; 
# 131
template< class _InternT, class _ExternT, class _StateT> class codecvt_byname; 
# 136
template < typename _CharT, typename _InIter = istreambuf_iterator < _CharT > >
    class num_get;
# 138
template < typename _CharT, typename _OutIter = ostreambuf_iterator < _CharT > >
    class num_put;
# 141
template < typename _CharT > class numpunct;
# 142
template < typename _CharT > class numpunct_byname;
# 145
template < typename _CharT >
    class collate;
# 147
template < typename _CharT > class
    collate_byname;
# 151
class time_base; 
# 152
template< class _CharT, class _InIter = istreambuf_iterator< _CharT, char_traits< _CharT> > > class time_get; 
# 154
template< class _CharT, class _InIter = istreambuf_iterator< _CharT, char_traits< _CharT> > > class time_get_byname; 
# 156
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT, char_traits< _CharT> > > class time_put; 
# 158
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT, char_traits< _CharT> > > class time_put_byname; 
# 162
class money_base; 
# 164
template< class _CharT, class _InIter = istreambuf_iterator< _CharT, char_traits< _CharT> > > class money_get; 
# 166
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT, char_traits< _CharT> > > class money_put; 
# 169
template< class _CharT, bool _Intl = false> class moneypunct; 
# 171
template< class _CharT, bool _Intl = false> class moneypunct_byname; 
# 175
class messages_base; 
# 176
template< class _CharT> class messages; 
# 178
template< class _CharT> class messages_byname; 
# 181
}
# 74 "/usr/include/bits/sched.h" 3
struct sched_param { 
# 76
int __sched_priority; 
# 77
}; 
# 83
extern "C" int clone(int (* )(void * ), void * , int , void * , ...) throw(); 
# 87
extern "C" int unshare(int ) throw(); 
# 90
extern "C" int sched_getcpu() throw(); 
# 101
struct __sched_param { 
# 103
int __sched_priority; 
# 104
}; 
# 116 "/usr/include/bits/sched.h" 3
typedef unsigned long __cpu_mask; 
# 126
typedef 
# 124
struct { 
# 125
__cpu_mask __bits[(1024) / ((8) * sizeof(__cpu_mask))]; 
# 126
} cpu_set_t; 
# 201 "/usr/include/bits/sched.h" 3
extern "C" int __sched_cpucount(size_t , const cpu_set_t * ) throw(); 
# 203
extern "C" cpu_set_t *__sched_cpualloc(size_t ) throw(); 
# 204
extern "C" void __sched_cpufree(cpu_set_t * ) throw(); 
# 51 "/usr/include/sched.h" 3
extern "C" int sched_setparam(__pid_t , const sched_param * ) throw(); 
# 55
extern "C" int sched_getparam(__pid_t , sched_param * ) throw(); 
# 58
extern "C" int sched_setscheduler(__pid_t , int , const sched_param * ) throw(); 
# 62
extern "C" int sched_getscheduler(__pid_t ) throw(); 
# 65
extern "C" int sched_yield() throw(); 
# 68
extern "C" int sched_get_priority_max(int ) throw(); 
# 71
extern "C" int sched_get_priority_min(int ) throw(); 
# 74
extern "C" int sched_rr_get_interval(__pid_t , timespec * ) throw(); 
# 118 "/usr/include/sched.h" 3
extern "C" int sched_setaffinity(__pid_t , size_t , const cpu_set_t * ) throw(); 
# 122
extern "C" int sched_getaffinity(__pid_t , size_t , cpu_set_t * ) throw(); 
# 32 "/usr/include/bits/setjmp.h" 3
typedef long __jmp_buf[8]; 
# 35 "/usr/include/pthread.h" 3
enum { 
# 36
PTHREAD_CREATE_JOINABLE, 
# 38
PTHREAD_CREATE_DETACHED
# 40
}; 
# 45
enum { 
# 46
PTHREAD_MUTEX_TIMED_NP, 
# 47
PTHREAD_MUTEX_RECURSIVE_NP, 
# 48
PTHREAD_MUTEX_ERRORCHECK_NP, 
# 49
PTHREAD_MUTEX_ADAPTIVE_NP, 
# 52
PTHREAD_MUTEX_NORMAL = 0, 
# 53
PTHREAD_MUTEX_RECURSIVE, 
# 54
PTHREAD_MUTEX_ERRORCHECK, 
# 55
PTHREAD_MUTEX_DEFAULT = 0, 
# 59
PTHREAD_MUTEX_FAST_NP = 0
# 61
}; 
# 67
enum { 
# 68
PTHREAD_MUTEX_STALLED, 
# 69
PTHREAD_MUTEX_STALLED_NP = 0, 
# 70
PTHREAD_MUTEX_ROBUST, 
# 71
PTHREAD_MUTEX_ROBUST_NP = 1
# 72
}; 
# 79
enum { 
# 80
PTHREAD_PRIO_NONE, 
# 81
PTHREAD_PRIO_INHERIT, 
# 82
PTHREAD_PRIO_PROTECT
# 83
}; 
# 116 "/usr/include/pthread.h" 3
enum { 
# 117
PTHREAD_RWLOCK_PREFER_READER_NP, 
# 118
PTHREAD_RWLOCK_PREFER_WRITER_NP, 
# 119
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP, 
# 120
PTHREAD_RWLOCK_DEFAULT_NP = 0
# 121
}; 
# 148 "/usr/include/pthread.h" 3
enum { 
# 149
PTHREAD_INHERIT_SCHED, 
# 151
PTHREAD_EXPLICIT_SCHED
# 153
}; 
# 158
enum { 
# 159
PTHREAD_SCOPE_SYSTEM, 
# 161
PTHREAD_SCOPE_PROCESS
# 163
}; 
# 168
enum { 
# 169
PTHREAD_PROCESS_PRIVATE, 
# 171
PTHREAD_PROCESS_SHARED
# 173
}; 
# 182 "/usr/include/pthread.h" 3
struct _pthread_cleanup_buffer { 
# 184
void (*__routine)(void *); 
# 185
void *__arg; 
# 186
int __canceltype; 
# 187
_pthread_cleanup_buffer *__prev; 
# 188
}; 
# 192
enum { 
# 193
PTHREAD_CANCEL_ENABLE, 
# 195
PTHREAD_CANCEL_DISABLE
# 197
}; 
# 199
enum { 
# 200
PTHREAD_CANCEL_DEFERRED, 
# 202
PTHREAD_CANCEL_ASYNCHRONOUS
# 204
}; 
# 225 "/usr/include/pthread.h" 3
extern "C" int pthread_create(pthread_t *__restrict__ , const pthread_attr_t *__restrict__ , void *(* )(void *), void *__restrict__ ) throw()
# 228
 __attribute((__nonnull__(1, 3))); 
# 234
extern "C" void pthread_exit(void * ) __attribute((__noreturn__)); 
# 242
extern "C" int pthread_join(pthread_t , void ** ); 
# 247
extern "C" int pthread_tryjoin_np(pthread_t , void ** ) throw(); 
# 255
extern "C" int pthread_timedjoin_np(pthread_t , void ** , const timespec * ); 
# 263
extern "C" int pthread_detach(pthread_t ) throw(); 
# 267
extern "C" pthread_t pthread_self() throw() __attribute((const)); 
# 270
extern "C" int pthread_equal(pthread_t , pthread_t ) throw(); 
# 278
extern "C" int pthread_attr_init(pthread_attr_t * ) throw() __attribute((__nonnull__(1))); 
# 281
extern "C" int pthread_attr_destroy(pthread_attr_t * ) throw()
# 282
 __attribute((__nonnull__(1))); 
# 285
extern "C" int pthread_attr_getdetachstate(const pthread_attr_t * , int * ) throw()
# 287
 __attribute((__nonnull__(1, 2))); 
# 290
extern "C" int pthread_attr_setdetachstate(pthread_attr_t * , int ) throw()
# 292
 __attribute((__nonnull__(1))); 
# 296
extern "C" int pthread_attr_getguardsize(const pthread_attr_t * , size_t * ) throw()
# 298
 __attribute((__nonnull__(1, 2))); 
# 301
extern "C" int pthread_attr_setguardsize(pthread_attr_t * , size_t ) throw()
# 303
 __attribute((__nonnull__(1))); 
# 307
extern "C" int pthread_attr_getschedparam(const pthread_attr_t *__restrict__ , sched_param *__restrict__ ) throw()
# 310
 __attribute((__nonnull__(1, 2))); 
# 313
extern "C" int pthread_attr_setschedparam(pthread_attr_t *__restrict__ , const sched_param *__restrict__ ) throw()
# 315
 __attribute((__nonnull__(1, 2))); 
# 318
extern "C" int pthread_attr_getschedpolicy(const pthread_attr_t *__restrict__ , int *__restrict__ ) throw()
# 320
 __attribute((__nonnull__(1, 2))); 
# 323
extern "C" int pthread_attr_setschedpolicy(pthread_attr_t * , int ) throw()
# 324
 __attribute((__nonnull__(1))); 
# 327
extern "C" int pthread_attr_getinheritsched(const pthread_attr_t *__restrict__ , int *__restrict__ ) throw()
# 329
 __attribute((__nonnull__(1, 2))); 
# 332
extern "C" int pthread_attr_setinheritsched(pthread_attr_t * , int ) throw()
# 334
 __attribute((__nonnull__(1))); 
# 338
extern "C" int pthread_attr_getscope(const pthread_attr_t *__restrict__ , int *__restrict__ ) throw()
# 340
 __attribute((__nonnull__(1, 2))); 
# 343
extern "C" int pthread_attr_setscope(pthread_attr_t * , int ) throw()
# 344
 __attribute((__nonnull__(1))); 
# 347
extern "C" int pthread_attr_getstackaddr(const pthread_attr_t *__restrict__ , void **__restrict__ ) throw()
# 349
 __attribute((__nonnull__(1, 2))) __attribute((__deprecated__)); 
# 355
extern "C" int pthread_attr_setstackaddr(pthread_attr_t * , void * ) throw()
# 357
 __attribute((__nonnull__(1))) __attribute((__deprecated__)); 
# 360
extern "C" int pthread_attr_getstacksize(const pthread_attr_t *__restrict__ , size_t *__restrict__ ) throw()
# 362
 __attribute((__nonnull__(1, 2))); 
# 367
extern "C" int pthread_attr_setstacksize(pthread_attr_t * , size_t ) throw()
# 369
 __attribute((__nonnull__(1))); 
# 373
extern "C" int pthread_attr_getstack(const pthread_attr_t *__restrict__ , void **__restrict__ , size_t *__restrict__ ) throw()
# 376
 __attribute((__nonnull__(1, 2, 3))); 
# 381
extern "C" int pthread_attr_setstack(pthread_attr_t * , void * , size_t ) throw()
# 382
 __attribute((__nonnull__(1))); 
# 388
extern "C" int pthread_attr_setaffinity_np(pthread_attr_t * , size_t , const cpu_set_t * ) throw()
# 391
 __attribute((__nonnull__(1, 3))); 
# 395
extern "C" int pthread_attr_getaffinity_np(const pthread_attr_t * , size_t , cpu_set_t * ) throw()
# 398
 __attribute((__nonnull__(1, 3))); 
# 404
extern "C" int pthread_getattr_np(pthread_t , pthread_attr_t * ) throw()
# 405
 __attribute((__nonnull__(2))); 
# 413
extern "C" int pthread_setschedparam(pthread_t , int , const sched_param * ) throw()
# 415
 __attribute((__nonnull__(3))); 
# 418
extern "C" int pthread_getschedparam(pthread_t , int *__restrict__ , sched_param *__restrict__ ) throw()
# 421
 __attribute((__nonnull__(2, 3))); 
# 424
extern "C" int pthread_setschedprio(pthread_t , int ) throw(); 
# 430
extern "C" int pthread_getname_np(pthread_t , char * , size_t ) throw()
# 432
 __attribute((__nonnull__(2))); 
# 435
extern "C" int pthread_setname_np(pthread_t , const char * ) throw()
# 436
 __attribute((__nonnull__(2))); 
# 442
extern "C" int pthread_getconcurrency() throw(); 
# 445
extern "C" int pthread_setconcurrency(int ) throw(); 
# 453
extern "C" int pthread_yield() throw(); 
# 458
extern "C" int pthread_setaffinity_np(pthread_t , size_t , const cpu_set_t * ) throw()
# 460
 __attribute((__nonnull__(3))); 
# 463
extern "C" int pthread_getaffinity_np(pthread_t , size_t , cpu_set_t * ) throw()
# 465
 __attribute((__nonnull__(3))); 
# 478 "/usr/include/pthread.h" 3
extern "C" int pthread_once(pthread_once_t * , void (* )(void))
# 479
 __attribute((__nonnull__(1, 2))); 
# 490 "/usr/include/pthread.h" 3
extern "C" int pthread_setcancelstate(int , int * ); 
# 494
extern "C" int pthread_setcanceltype(int , int * ); 
# 497
extern "C" int pthread_cancel(pthread_t ); 
# 502
extern "C" void pthread_testcancel(); 
# 515
extern "C" { typedef 
# 508
struct { 
# 510
struct { 
# 511
__jmp_buf __cancel_jmp_buf; 
# 512
int __mask_was_saved; 
# 513
} __cancel_jmp_buf[1]; 
# 514
void *__pad[4]; 
# 515
} __pthread_unwind_buf_t __attribute((__aligned__)); }
# 524 "/usr/include/pthread.h" 3
extern "C" { struct __pthread_cleanup_frame { 
# 526
void (*__cancel_routine)(void *); 
# 527
void *__cancel_arg; 
# 528
int __do_it; 
# 529
int __cancel_type; 
# 530
}; }
# 535
extern "C" { class __pthread_cleanup_class { 
# 537
void (*__cancel_routine)(void *); 
# 538
void *__cancel_arg; 
# 539
int __do_it; 
# 540
int __cancel_type; 
# 543
public: __pthread_cleanup_class(void (*__fct)(void *), void *__arg) : __cancel_routine(__fct), __cancel_arg(__arg), __do_it(1) 
# 544
{ } 
# 545
~__pthread_cleanup_class() { if (__do_it) { (__cancel_routine)(__cancel_arg); }  } 
# 546
void __setdoit(int __newval) { (__do_it) = __newval; } 
# 547
void __defer() { pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &(__cancel_type)); 
# 548
} 
# 549
void __restore() const { pthread_setcanceltype(__cancel_type, 0); } 
# 550
}; }
# 726 "/usr/include/pthread.h" 3
struct __jmp_buf_tag; 
# 727
extern "C" int __sigsetjmp(__jmp_buf_tag * , int ) throw(); 
# 733
extern "C" int pthread_mutex_init(pthread_mutex_t * , const pthread_mutexattr_t * ) throw()
# 735
 __attribute((__nonnull__(1))); 
# 738
extern "C" int pthread_mutex_destroy(pthread_mutex_t * ) throw()
# 739
 __attribute((__nonnull__(1))); 
# 742
extern "C" int pthread_mutex_trylock(pthread_mutex_t * ) throw()
# 743
 __attribute((__nonnull__(1))); 
# 746
extern "C" int pthread_mutex_lock(pthread_mutex_t * ) throw()
# 747
 __attribute((__nonnull__(1))); 
# 751
extern "C" int pthread_mutex_timedlock(pthread_mutex_t *__restrict__ , const timespec *__restrict__ ) throw()
# 753
 __attribute((__nonnull__(1, 2))); 
# 757
extern "C" int pthread_mutex_unlock(pthread_mutex_t * ) throw()
# 758
 __attribute((__nonnull__(1))); 
# 762
extern "C" int pthread_mutex_getprioceiling(const pthread_mutex_t *__restrict__ , int *__restrict__ ) throw()
# 765
 __attribute((__nonnull__(1, 2))); 
# 769
extern "C" int pthread_mutex_setprioceiling(pthread_mutex_t *__restrict__ , int , int *__restrict__ ) throw()
# 772
 __attribute((__nonnull__(1, 3))); 
# 777
extern "C" int pthread_mutex_consistent(pthread_mutex_t * ) throw()
# 778
 __attribute((__nonnull__(1))); 
# 780
extern "C" int pthread_mutex_consistent_np(pthread_mutex_t * ) throw()
# 781
 __attribute((__nonnull__(1))); 
# 790 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_init(pthread_mutexattr_t * ) throw()
# 791
 __attribute((__nonnull__(1))); 
# 794
extern "C" int pthread_mutexattr_destroy(pthread_mutexattr_t * ) throw()
# 795
 __attribute((__nonnull__(1))); 
# 798
extern "C" int pthread_mutexattr_getpshared(const pthread_mutexattr_t *__restrict__ , int *__restrict__ ) throw()
# 801
 __attribute((__nonnull__(1, 2))); 
# 804
extern "C" int pthread_mutexattr_setpshared(pthread_mutexattr_t * , int ) throw()
# 806
 __attribute((__nonnull__(1))); 
# 810
extern "C" int pthread_mutexattr_gettype(const pthread_mutexattr_t *__restrict__ , int *__restrict__ ) throw()
# 812
 __attribute((__nonnull__(1, 2))); 
# 817
extern "C" int pthread_mutexattr_settype(pthread_mutexattr_t * , int ) throw()
# 818
 __attribute((__nonnull__(1))); 
# 822
extern "C" int pthread_mutexattr_getprotocol(const pthread_mutexattr_t *__restrict__ , int *__restrict__ ) throw()
# 825
 __attribute((__nonnull__(1, 2))); 
# 829
extern "C" int pthread_mutexattr_setprotocol(pthread_mutexattr_t * , int ) throw()
# 831
 __attribute((__nonnull__(1))); 
# 834
extern "C" int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *__restrict__ , int *__restrict__ ) throw()
# 837
 __attribute((__nonnull__(1, 2))); 
# 840
extern "C" int pthread_mutexattr_setprioceiling(pthread_mutexattr_t * , int ) throw()
# 842
 __attribute((__nonnull__(1))); 
# 846
extern "C" int pthread_mutexattr_getrobust(const pthread_mutexattr_t * , int * ) throw()
# 848
 __attribute((__nonnull__(1, 2))); 
# 850
extern "C" int pthread_mutexattr_getrobust_np(const pthread_mutexattr_t * , int * ) throw()
# 852
 __attribute((__nonnull__(1, 2))); 
# 856
extern "C" int pthread_mutexattr_setrobust(pthread_mutexattr_t * , int ) throw()
# 858
 __attribute((__nonnull__(1))); 
# 860
extern "C" int pthread_mutexattr_setrobust_np(pthread_mutexattr_t * , int ) throw()
# 862
 __attribute((__nonnull__(1))); 
# 872 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_init(pthread_rwlock_t *__restrict__ , const pthread_rwlockattr_t *__restrict__ ) throw()
# 874
 __attribute((__nonnull__(1))); 
# 877
extern "C" int pthread_rwlock_destroy(pthread_rwlock_t * ) throw()
# 878
 __attribute((__nonnull__(1))); 
# 881
extern "C" int pthread_rwlock_rdlock(pthread_rwlock_t * ) throw()
# 882
 __attribute((__nonnull__(1))); 
# 885
extern "C" int pthread_rwlock_tryrdlock(pthread_rwlock_t * ) throw()
# 886
 __attribute((__nonnull__(1))); 
# 890
extern "C" int pthread_rwlock_timedrdlock(pthread_rwlock_t *__restrict__ , const timespec *__restrict__ ) throw()
# 892
 __attribute((__nonnull__(1, 2))); 
# 896
extern "C" int pthread_rwlock_wrlock(pthread_rwlock_t * ) throw()
# 897
 __attribute((__nonnull__(1))); 
# 900
extern "C" int pthread_rwlock_trywrlock(pthread_rwlock_t * ) throw()
# 901
 __attribute((__nonnull__(1))); 
# 905
extern "C" int pthread_rwlock_timedwrlock(pthread_rwlock_t *__restrict__ , const timespec *__restrict__ ) throw()
# 907
 __attribute((__nonnull__(1, 2))); 
# 911
extern "C" int pthread_rwlock_unlock(pthread_rwlock_t * ) throw()
# 912
 __attribute((__nonnull__(1))); 
# 918
extern "C" int pthread_rwlockattr_init(pthread_rwlockattr_t * ) throw()
# 919
 __attribute((__nonnull__(1))); 
# 922
extern "C" int pthread_rwlockattr_destroy(pthread_rwlockattr_t * ) throw()
# 923
 __attribute((__nonnull__(1))); 
# 926
extern "C" int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *__restrict__ , int *__restrict__ ) throw()
# 929
 __attribute((__nonnull__(1, 2))); 
# 932
extern "C" int pthread_rwlockattr_setpshared(pthread_rwlockattr_t * , int ) throw()
# 934
 __attribute((__nonnull__(1))); 
# 937
extern "C" int pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t *__restrict__ , int *__restrict__ ) throw()
# 940
 __attribute((__nonnull__(1, 2))); 
# 943
extern "C" int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t * , int ) throw()
# 944
 __attribute((__nonnull__(1))); 
# 952
extern "C" int pthread_cond_init(pthread_cond_t *__restrict__ , const pthread_condattr_t *__restrict__ ) throw()
# 954
 __attribute((__nonnull__(1))); 
# 957
extern "C" int pthread_cond_destroy(pthread_cond_t * ) throw()
# 958
 __attribute((__nonnull__(1))); 
# 961
extern "C" int pthread_cond_signal(pthread_cond_t * ) throw()
# 962
 __attribute((__nonnull__(1))); 
# 965
extern "C" int pthread_cond_broadcast(pthread_cond_t * ) throw()
# 966
 __attribute((__nonnull__(1))); 
# 973
extern "C" int pthread_cond_wait(pthread_cond_t *__restrict__ , pthread_mutex_t *__restrict__ )
# 975
 __attribute((__nonnull__(1, 2))); 
# 984 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_timedwait(pthread_cond_t *__restrict__ , pthread_mutex_t *__restrict__ , const timespec *__restrict__ )
# 987
 __attribute((__nonnull__(1, 2, 3))); 
# 992
extern "C" int pthread_condattr_init(pthread_condattr_t * ) throw()
# 993
 __attribute((__nonnull__(1))); 
# 996
extern "C" int pthread_condattr_destroy(pthread_condattr_t * ) throw()
# 997
 __attribute((__nonnull__(1))); 
# 1000
extern "C" int pthread_condattr_getpshared(const pthread_condattr_t *__restrict__ , int *__restrict__ ) throw()
# 1003
 __attribute((__nonnull__(1, 2))); 
# 1006
extern "C" int pthread_condattr_setpshared(pthread_condattr_t * , int ) throw()
# 1007
 __attribute((__nonnull__(1))); 
# 1011
extern "C" int pthread_condattr_getclock(const pthread_condattr_t *__restrict__ , __clockid_t *__restrict__ ) throw()
# 1014
 __attribute((__nonnull__(1, 2))); 
# 1017
extern "C" int pthread_condattr_setclock(pthread_condattr_t * , __clockid_t ) throw()
# 1019
 __attribute((__nonnull__(1))); 
# 1028 "/usr/include/pthread.h" 3
extern "C" int pthread_spin_init(pthread_spinlock_t * , int ) throw()
# 1029
 __attribute((__nonnull__(1))); 
# 1032
extern "C" int pthread_spin_destroy(pthread_spinlock_t * ) throw()
# 1033
 __attribute((__nonnull__(1))); 
# 1036
extern "C" int pthread_spin_lock(pthread_spinlock_t * ) throw()
# 1037
 __attribute((__nonnull__(1))); 
# 1040
extern "C" int pthread_spin_trylock(pthread_spinlock_t * ) throw()
# 1041
 __attribute((__nonnull__(1))); 
# 1044
extern "C" int pthread_spin_unlock(pthread_spinlock_t * ) throw()
# 1045
 __attribute((__nonnull__(1))); 
# 1052
extern "C" int pthread_barrier_init(pthread_barrier_t *__restrict__ , const pthread_barrierattr_t *__restrict__ , unsigned ) throw()
# 1055
 __attribute((__nonnull__(1))); 
# 1058
extern "C" int pthread_barrier_destroy(pthread_barrier_t * ) throw()
# 1059
 __attribute((__nonnull__(1))); 
# 1062
extern "C" int pthread_barrier_wait(pthread_barrier_t * ) throw()
# 1063
 __attribute((__nonnull__(1))); 
# 1067
extern "C" int pthread_barrierattr_init(pthread_barrierattr_t * ) throw()
# 1068
 __attribute((__nonnull__(1))); 
# 1071
extern "C" int pthread_barrierattr_destroy(pthread_barrierattr_t * ) throw()
# 1072
 __attribute((__nonnull__(1))); 
# 1075
extern "C" int pthread_barrierattr_getpshared(const pthread_barrierattr_t *__restrict__ , int *__restrict__ ) throw()
# 1078
 __attribute((__nonnull__(1, 2))); 
# 1081
extern "C" int pthread_barrierattr_setpshared(pthread_barrierattr_t * , int ) throw()
# 1083
 __attribute((__nonnull__(1))); 
# 1095 "/usr/include/pthread.h" 3
extern "C" int pthread_key_create(pthread_key_t * , void (* )(void *)) throw()
# 1097
 __attribute((__nonnull__(1))); 
# 1100
extern "C" int pthread_key_delete(pthread_key_t ) throw(); 
# 1103
extern "C" void *pthread_getspecific(pthread_key_t ) throw(); 
# 1106
extern "C" int pthread_setspecific(pthread_key_t , const void * ) throw(); 
# 1112
extern "C" int pthread_getcpuclockid(pthread_t , __clockid_t * ) throw()
# 1114
 __attribute((__nonnull__(2))); 
# 1129 "/usr/include/pthread.h" 3
extern "C" int pthread_atfork(void (* )(void), void (* )(void), void (* )(void)) throw(); 
# 268 "/usr/include/unistd.h" 3
extern "C" { typedef __intptr_t intptr_t; }
# 275
extern "C" { typedef __socklen_t socklen_t; }
# 288 "/usr/include/unistd.h" 3
extern "C" int access(const char * , int ) throw() __attribute((__nonnull__(1))); 
# 293
extern "C" int euidaccess(const char * , int ) throw()
# 294
 __attribute((__nonnull__(1))); 
# 297
extern "C" int eaccess(const char * , int ) throw()
# 298
 __attribute((__nonnull__(1))); 
# 305
extern "C" int faccessat(int , const char * , int , int ) throw()
# 306
 __attribute((__nonnull__(2))); 
# 331 "/usr/include/unistd.h" 3
extern "C" __off_t lseek(int , __off_t , int ) throw(); 
# 342 "/usr/include/unistd.h" 3
extern "C" __off64_t lseek64(int , __off64_t , int ) throw(); 
# 350
extern "C" int close(int ); 
# 357
extern "C" ssize_t read(int , void * , size_t ); 
# 363
extern "C" ssize_t write(int , const void * , size_t ); 
# 373 "/usr/include/unistd.h" 3
extern "C" ssize_t pread(int , void * , size_t , __off_t ); 
# 381
extern "C" ssize_t pwrite(int , const void * , size_t , __off_t ); 
# 401 "/usr/include/unistd.h" 3
extern "C" ssize_t pread64(int , void * , size_t , __off64_t ); 
# 405
extern "C" ssize_t pwrite64(int , const void * , size_t , __off64_t ); 
# 414
extern "C" int pipe(int  [2]) throw(); 
# 419
extern "C" int pipe2(int  [2], int ) throw(); 
# 429 "/usr/include/unistd.h" 3
extern "C" unsigned alarm(unsigned ) throw(); 
# 441 "/usr/include/unistd.h" 3
extern "C" unsigned sleep(unsigned ); 
# 449
extern "C" __useconds_t ualarm(__useconds_t , __useconds_t ) throw(); 
# 457
extern "C" int usleep(__useconds_t ); 
# 466 "/usr/include/unistd.h" 3
extern "C" int pause(); 
# 470
extern "C" int chown(const char * , __uid_t , __gid_t ) throw()
# 471
 __attribute((__nonnull__(1))); 
# 475
extern "C" int fchown(int , __uid_t , __gid_t ) throw(); 
# 480
extern "C" int lchown(const char * , __uid_t , __gid_t ) throw()
# 481
 __attribute((__nonnull__(1))); 
# 488
extern "C" int fchownat(int , const char * , __uid_t , __gid_t , int ) throw()
# 490
 __attribute((__nonnull__(2))); 
# 494
extern "C" int chdir(const char * ) throw() __attribute((__nonnull__(1))); 
# 498
extern "C" int fchdir(int ) throw(); 
# 508 "/usr/include/unistd.h" 3
extern "C" char *getcwd(char * , size_t ) throw(); 
# 514
extern "C" char *get_current_dir_name() throw(); 
# 522
extern "C" char *getwd(char * ) throw()
# 523
 __attribute((__nonnull__(1))) __attribute((__deprecated__)); 
# 528
extern "C" int dup(int ) throw(); 
# 531
extern "C" int dup2(int , int ) throw(); 
# 536
extern "C" int dup3(int , int , int ) throw(); 
# 540
extern "C" { extern char **__environ; } 
# 542
extern "C" { extern char **environ; } 
# 548
extern "C" int execve(const char * , char *const  [], char *const  []) throw()
# 549
 __attribute((__nonnull__(1, 2))); 
# 554
extern "C" int fexecve(int , char *const  [], char *const  []) throw()
# 555
 __attribute((__nonnull__(2))); 
# 560
extern "C" int execv(const char * , char *const  []) throw()
# 561
 __attribute((__nonnull__(1, 2))); 
# 565
extern "C" int execle(const char * , const char * , ...) throw()
# 566
 __attribute((__nonnull__(1, 2))); 
# 570
extern "C" int execl(const char * , const char * , ...) throw()
# 571
 __attribute((__nonnull__(1, 2))); 
# 575
extern "C" int execvp(const char * , char *const  []) throw()
# 576
 __attribute((__nonnull__(1, 2))); 
# 581
extern "C" int execlp(const char * , const char * , ...) throw()
# 582
 __attribute((__nonnull__(1, 2))); 
# 587
extern "C" int execvpe(const char * , char *const  [], char *const  []) throw()
# 589
 __attribute((__nonnull__(1, 2))); 
# 595
extern "C" int nice(int ) throw(); 
# 600
extern "C" void _exit(int ) __attribute((__noreturn__)); 
# 27 "/usr/include/bits/confname.h" 3
enum { 
# 28
_PC_LINK_MAX, 
# 30
_PC_MAX_CANON, 
# 32
_PC_MAX_INPUT, 
# 34
_PC_NAME_MAX, 
# 36
_PC_PATH_MAX, 
# 38
_PC_PIPE_BUF, 
# 40
_PC_CHOWN_RESTRICTED, 
# 42
_PC_NO_TRUNC, 
# 44
_PC_VDISABLE, 
# 46
_PC_SYNC_IO, 
# 48
_PC_ASYNC_IO, 
# 50
_PC_PRIO_IO, 
# 52
_PC_SOCK_MAXBUF, 
# 54
_PC_FILESIZEBITS, 
# 56
_PC_REC_INCR_XFER_SIZE, 
# 58
_PC_REC_MAX_XFER_SIZE, 
# 60
_PC_REC_MIN_XFER_SIZE, 
# 62
_PC_REC_XFER_ALIGN, 
# 64
_PC_ALLOC_SIZE_MIN, 
# 66
_PC_SYMLINK_MAX, 
# 68
_PC_2_SYMLINKS
# 70
}; 
# 74
enum { 
# 75
_SC_ARG_MAX, 
# 77
_SC_CHILD_MAX, 
# 79
_SC_CLK_TCK, 
# 81
_SC_NGROUPS_MAX, 
# 83
_SC_OPEN_MAX, 
# 85
_SC_STREAM_MAX, 
# 87
_SC_TZNAME_MAX, 
# 89
_SC_JOB_CONTROL, 
# 91
_SC_SAVED_IDS, 
# 93
_SC_REALTIME_SIGNALS, 
# 95
_SC_PRIORITY_SCHEDULING, 
# 97
_SC_TIMERS, 
# 99
_SC_ASYNCHRONOUS_IO, 
# 101
_SC_PRIORITIZED_IO, 
# 103
_SC_SYNCHRONIZED_IO, 
# 105
_SC_FSYNC, 
# 107
_SC_MAPPED_FILES, 
# 109
_SC_MEMLOCK, 
# 111
_SC_MEMLOCK_RANGE, 
# 113
_SC_MEMORY_PROTECTION, 
# 115
_SC_MESSAGE_PASSING, 
# 117
_SC_SEMAPHORES, 
# 119
_SC_SHARED_MEMORY_OBJECTS, 
# 121
_SC_AIO_LISTIO_MAX, 
# 123
_SC_AIO_MAX, 
# 125
_SC_AIO_PRIO_DELTA_MAX, 
# 127
_SC_DELAYTIMER_MAX, 
# 129
_SC_MQ_OPEN_MAX, 
# 131
_SC_MQ_PRIO_MAX, 
# 133
_SC_VERSION, 
# 135
_SC_PAGESIZE, 
# 138
_SC_RTSIG_MAX, 
# 140
_SC_SEM_NSEMS_MAX, 
# 142
_SC_SEM_VALUE_MAX, 
# 144
_SC_SIGQUEUE_MAX, 
# 146
_SC_TIMER_MAX, 
# 151
_SC_BC_BASE_MAX, 
# 153
_SC_BC_DIM_MAX, 
# 155
_SC_BC_SCALE_MAX, 
# 157
_SC_BC_STRING_MAX, 
# 159
_SC_COLL_WEIGHTS_MAX, 
# 161
_SC_EQUIV_CLASS_MAX, 
# 163
_SC_EXPR_NEST_MAX, 
# 165
_SC_LINE_MAX, 
# 167
_SC_RE_DUP_MAX, 
# 169
_SC_CHARCLASS_NAME_MAX, 
# 172
_SC_2_VERSION, 
# 174
_SC_2_C_BIND, 
# 176
_SC_2_C_DEV, 
# 178
_SC_2_FORT_DEV, 
# 180
_SC_2_FORT_RUN, 
# 182
_SC_2_SW_DEV, 
# 184
_SC_2_LOCALEDEF, 
# 187
_SC_PII, 
# 189
_SC_PII_XTI, 
# 191
_SC_PII_SOCKET, 
# 193
_SC_PII_INTERNET, 
# 195
_SC_PII_OSI, 
# 197
_SC_POLL, 
# 199
_SC_SELECT, 
# 201
_SC_UIO_MAXIOV, 
# 203
_SC_IOV_MAX = 60, 
# 205
_SC_PII_INTERNET_STREAM, 
# 207
_SC_PII_INTERNET_DGRAM, 
# 209
_SC_PII_OSI_COTS, 
# 211
_SC_PII_OSI_CLTS, 
# 213
_SC_PII_OSI_M, 
# 215
_SC_T_IOV_MAX, 
# 219
_SC_THREADS, 
# 221
_SC_THREAD_SAFE_FUNCTIONS, 
# 223
_SC_GETGR_R_SIZE_MAX, 
# 225
_SC_GETPW_R_SIZE_MAX, 
# 227
_SC_LOGIN_NAME_MAX, 
# 229
_SC_TTY_NAME_MAX, 
# 231
_SC_THREAD_DESTRUCTOR_ITERATIONS, 
# 233
_SC_THREAD_KEYS_MAX, 
# 235
_SC_THREAD_STACK_MIN, 
# 237
_SC_THREAD_THREADS_MAX, 
# 239
_SC_THREAD_ATTR_STACKADDR, 
# 241
_SC_THREAD_ATTR_STACKSIZE, 
# 243
_SC_THREAD_PRIORITY_SCHEDULING, 
# 245
_SC_THREAD_PRIO_INHERIT, 
# 247
_SC_THREAD_PRIO_PROTECT, 
# 249
_SC_THREAD_PROCESS_SHARED, 
# 252
_SC_NPROCESSORS_CONF, 
# 254
_SC_NPROCESSORS_ONLN, 
# 256
_SC_PHYS_PAGES, 
# 258
_SC_AVPHYS_PAGES, 
# 260
_SC_ATEXIT_MAX, 
# 262
_SC_PASS_MAX, 
# 265
_SC_XOPEN_VERSION, 
# 267
_SC_XOPEN_XCU_VERSION, 
# 269
_SC_XOPEN_UNIX, 
# 271
_SC_XOPEN_CRYPT, 
# 273
_SC_XOPEN_ENH_I18N, 
# 275
_SC_XOPEN_SHM, 
# 278
_SC_2_CHAR_TERM, 
# 280
_SC_2_C_VERSION, 
# 282
_SC_2_UPE, 
# 285
_SC_XOPEN_XPG2, 
# 287
_SC_XOPEN_XPG3, 
# 289
_SC_XOPEN_XPG4, 
# 292
_SC_CHAR_BIT, 
# 294
_SC_CHAR_MAX, 
# 296
_SC_CHAR_MIN, 
# 298
_SC_INT_MAX, 
# 300
_SC_INT_MIN, 
# 302
_SC_LONG_BIT, 
# 304
_SC_WORD_BIT, 
# 306
_SC_MB_LEN_MAX, 
# 308
_SC_NZERO, 
# 310
_SC_SSIZE_MAX, 
# 312
_SC_SCHAR_MAX, 
# 314
_SC_SCHAR_MIN, 
# 316
_SC_SHRT_MAX, 
# 318
_SC_SHRT_MIN, 
# 320
_SC_UCHAR_MAX, 
# 322
_SC_UINT_MAX, 
# 324
_SC_ULONG_MAX, 
# 326
_SC_USHRT_MAX, 
# 329
_SC_NL_ARGMAX, 
# 331
_SC_NL_LANGMAX, 
# 333
_SC_NL_MSGMAX, 
# 335
_SC_NL_NMAX, 
# 337
_SC_NL_SETMAX, 
# 339
_SC_NL_TEXTMAX, 
# 342
_SC_XBS5_ILP32_OFF32, 
# 344
_SC_XBS5_ILP32_OFFBIG, 
# 346
_SC_XBS5_LP64_OFF64, 
# 348
_SC_XBS5_LPBIG_OFFBIG, 
# 351
_SC_XOPEN_LEGACY, 
# 353
_SC_XOPEN_REALTIME, 
# 355
_SC_XOPEN_REALTIME_THREADS, 
# 358
_SC_ADVISORY_INFO, 
# 360
_SC_BARRIERS, 
# 362
_SC_BASE, 
# 364
_SC_C_LANG_SUPPORT, 
# 366
_SC_C_LANG_SUPPORT_R, 
# 368
_SC_CLOCK_SELECTION, 
# 370
_SC_CPUTIME, 
# 372
_SC_THREAD_CPUTIME, 
# 374
_SC_DEVICE_IO, 
# 376
_SC_DEVICE_SPECIFIC, 
# 378
_SC_DEVICE_SPECIFIC_R, 
# 380
_SC_FD_MGMT, 
# 382
_SC_FIFO, 
# 384
_SC_PIPE, 
# 386
_SC_FILE_ATTRIBUTES, 
# 388
_SC_FILE_LOCKING, 
# 390
_SC_FILE_SYSTEM, 
# 392
_SC_MONOTONIC_CLOCK, 
# 394
_SC_MULTI_PROCESS, 
# 396
_SC_SINGLE_PROCESS, 
# 398
_SC_NETWORKING, 
# 400
_SC_READER_WRITER_LOCKS, 
# 402
_SC_SPIN_LOCKS, 
# 404
_SC_REGEXP, 
# 406
_SC_REGEX_VERSION, 
# 408
_SC_SHELL, 
# 410
_SC_SIGNALS, 
# 412
_SC_SPAWN, 
# 414
_SC_SPORADIC_SERVER, 
# 416
_SC_THREAD_SPORADIC_SERVER, 
# 418
_SC_SYSTEM_DATABASE, 
# 420
_SC_SYSTEM_DATABASE_R, 
# 422
_SC_TIMEOUTS, 
# 424
_SC_TYPED_MEMORY_OBJECTS, 
# 426
_SC_USER_GROUPS, 
# 428
_SC_USER_GROUPS_R, 
# 430
_SC_2_PBS, 
# 432
_SC_2_PBS_ACCOUNTING, 
# 434
_SC_2_PBS_LOCATE, 
# 436
_SC_2_PBS_MESSAGE, 
# 438
_SC_2_PBS_TRACK, 
# 440
_SC_SYMLOOP_MAX, 
# 442
_SC_STREAMS, 
# 444
_SC_2_PBS_CHECKPOINT, 
# 447
_SC_V6_ILP32_OFF32, 
# 449
_SC_V6_ILP32_OFFBIG, 
# 451
_SC_V6_LP64_OFF64, 
# 453
_SC_V6_LPBIG_OFFBIG, 
# 456
_SC_HOST_NAME_MAX, 
# 458
_SC_TRACE, 
# 460
_SC_TRACE_EVENT_FILTER, 
# 462
_SC_TRACE_INHERIT, 
# 464
_SC_TRACE_LOG, 
# 467
_SC_LEVEL1_ICACHE_SIZE, 
# 469
_SC_LEVEL1_ICACHE_ASSOC, 
# 471
_SC_LEVEL1_ICACHE_LINESIZE, 
# 473
_SC_LEVEL1_DCACHE_SIZE, 
# 475
_SC_LEVEL1_DCACHE_ASSOC, 
# 477
_SC_LEVEL1_DCACHE_LINESIZE, 
# 479
_SC_LEVEL2_CACHE_SIZE, 
# 481
_SC_LEVEL2_CACHE_ASSOC, 
# 483
_SC_LEVEL2_CACHE_LINESIZE, 
# 485
_SC_LEVEL3_CACHE_SIZE, 
# 487
_SC_LEVEL3_CACHE_ASSOC, 
# 489
_SC_LEVEL3_CACHE_LINESIZE, 
# 491
_SC_LEVEL4_CACHE_SIZE, 
# 493
_SC_LEVEL4_CACHE_ASSOC, 
# 495
_SC_LEVEL4_CACHE_LINESIZE, 
# 499
_SC_IPV6 = 235, 
# 501
_SC_RAW_SOCKETS, 
# 504
_SC_V7_ILP32_OFF32, 
# 506
_SC_V7_ILP32_OFFBIG, 
# 508
_SC_V7_LP64_OFF64, 
# 510
_SC_V7_LPBIG_OFFBIG, 
# 513
_SC_SS_REPL_MAX, 
# 516
_SC_TRACE_EVENT_NAME_MAX, 
# 518
_SC_TRACE_NAME_MAX, 
# 520
_SC_TRACE_SYS_MAX, 
# 522
_SC_TRACE_USER_EVENT_MAX, 
# 525
_SC_XOPEN_STREAMS, 
# 528
_SC_THREAD_ROBUST_PRIO_INHERIT, 
# 530
_SC_THREAD_ROBUST_PRIO_PROTECT
# 532
}; 
# 536
enum { 
# 537
_CS_PATH, 
# 540
_CS_V6_WIDTH_RESTRICTED_ENVS, 
# 544
_CS_GNU_LIBC_VERSION, 
# 546
_CS_GNU_LIBPTHREAD_VERSION, 
# 549
_CS_V5_WIDTH_RESTRICTED_ENVS, 
# 553
_CS_V7_WIDTH_RESTRICTED_ENVS, 
# 557
_CS_LFS_CFLAGS = 1000, 
# 559
_CS_LFS_LDFLAGS, 
# 561
_CS_LFS_LIBS, 
# 563
_CS_LFS_LINTFLAGS, 
# 565
_CS_LFS64_CFLAGS, 
# 567
_CS_LFS64_LDFLAGS, 
# 569
_CS_LFS64_LIBS, 
# 571
_CS_LFS64_LINTFLAGS, 
# 574
_CS_XBS5_ILP32_OFF32_CFLAGS = 1100, 
# 576
_CS_XBS5_ILP32_OFF32_LDFLAGS, 
# 578
_CS_XBS5_ILP32_OFF32_LIBS, 
# 580
_CS_XBS5_ILP32_OFF32_LINTFLAGS, 
# 582
_CS_XBS5_ILP32_OFFBIG_CFLAGS, 
# 584
_CS_XBS5_ILP32_OFFBIG_LDFLAGS, 
# 586
_CS_XBS5_ILP32_OFFBIG_LIBS, 
# 588
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS, 
# 590
_CS_XBS5_LP64_OFF64_CFLAGS, 
# 592
_CS_XBS5_LP64_OFF64_LDFLAGS, 
# 594
_CS_XBS5_LP64_OFF64_LIBS, 
# 596
_CS_XBS5_LP64_OFF64_LINTFLAGS, 
# 598
_CS_XBS5_LPBIG_OFFBIG_CFLAGS, 
# 600
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS, 
# 602
_CS_XBS5_LPBIG_OFFBIG_LIBS, 
# 604
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS, 
# 607
_CS_POSIX_V6_ILP32_OFF32_CFLAGS, 
# 609
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS, 
# 611
_CS_POSIX_V6_ILP32_OFF32_LIBS, 
# 613
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS, 
# 615
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS, 
# 617
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS, 
# 619
_CS_POSIX_V6_ILP32_OFFBIG_LIBS, 
# 621
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS, 
# 623
_CS_POSIX_V6_LP64_OFF64_CFLAGS, 
# 625
_CS_POSIX_V6_LP64_OFF64_LDFLAGS, 
# 627
_CS_POSIX_V6_LP64_OFF64_LIBS, 
# 629
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS, 
# 631
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS, 
# 633
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS, 
# 635
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS, 
# 637
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS, 
# 640
_CS_POSIX_V7_ILP32_OFF32_CFLAGS, 
# 642
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS, 
# 644
_CS_POSIX_V7_ILP32_OFF32_LIBS, 
# 646
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS, 
# 648
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS, 
# 650
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS, 
# 652
_CS_POSIX_V7_ILP32_OFFBIG_LIBS, 
# 654
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS, 
# 656
_CS_POSIX_V7_LP64_OFF64_CFLAGS, 
# 658
_CS_POSIX_V7_LP64_OFF64_LDFLAGS, 
# 660
_CS_POSIX_V7_LP64_OFF64_LIBS, 
# 662
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS, 
# 664
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS, 
# 666
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS, 
# 668
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS, 
# 670
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS, 
# 673
_CS_V6_ENV, 
# 675
_CS_V7_ENV
# 677
}; 
# 609 "/usr/include/unistd.h" 3
extern "C" long pathconf(const char * , int ) throw()
# 610
 __attribute((__nonnull__(1))); 
# 613
extern "C" long fpathconf(int , int ) throw(); 
# 616
extern "C" long sysconf(int ) throw(); 
# 620
extern "C" size_t confstr(int , char * , size_t ) throw(); 
# 625
extern "C" __pid_t getpid() throw(); 
# 628
extern "C" __pid_t getppid() throw(); 
# 633
extern "C" __pid_t getpgrp() throw(); 
# 643 "/usr/include/unistd.h" 3
extern "C" __pid_t __getpgid(__pid_t ) throw(); 
# 645
extern "C" __pid_t getpgid(__pid_t ) throw(); 
# 652
extern "C" int setpgid(__pid_t , __pid_t ) throw(); 
# 669 "/usr/include/unistd.h" 3
extern "C" int setpgrp() throw(); 
# 686 "/usr/include/unistd.h" 3
extern "C" __pid_t setsid() throw(); 
# 690
extern "C" __pid_t getsid(__pid_t ) throw(); 
# 694
extern "C" __uid_t getuid() throw(); 
# 697
extern "C" __uid_t geteuid() throw(); 
# 700
extern "C" __gid_t getgid() throw(); 
# 703
extern "C" __gid_t getegid() throw(); 
# 708
extern "C" int getgroups(int , __gid_t  []) throw(); 
# 712
extern "C" int group_member(__gid_t ) throw(); 
# 719
extern "C" int setuid(__uid_t ) throw(); 
# 724
extern "C" int setreuid(__uid_t , __uid_t ) throw(); 
# 729
extern "C" int seteuid(__uid_t ) throw(); 
# 736
extern "C" int setgid(__gid_t ) throw(); 
# 741
extern "C" int setregid(__gid_t , __gid_t ) throw(); 
# 746
extern "C" int setegid(__gid_t ) throw(); 
# 752
extern "C" int getresuid(__uid_t * , __uid_t * , __uid_t * ) throw(); 
# 757
extern "C" int getresgid(__gid_t * , __gid_t * , __gid_t * ) throw(); 
# 762
extern "C" int setresuid(__uid_t , __uid_t , __uid_t ) throw(); 
# 767
extern "C" int setresgid(__gid_t , __gid_t , __gid_t ) throw(); 
# 775
extern "C" __pid_t fork() throw(); 
# 783
extern "C" __pid_t vfork() throw(); 
# 789
extern "C" char *ttyname(int ) throw(); 
# 793
extern "C" int ttyname_r(int , char * , size_t ) throw()
# 794
 __attribute((__nonnull__(2))); 
# 798
extern "C" int isatty(int ) throw(); 
# 804
extern "C" int ttyslot() throw(); 
# 809
extern "C" int link(const char * , const char * ) throw()
# 810
 __attribute((__nonnull__(1, 2))); 
# 815
extern "C" int linkat(int , const char * , int , const char * , int ) throw()
# 817
 __attribute((__nonnull__(2, 4))); 
# 822
extern "C" int symlink(const char * , const char * ) throw()
# 823
 __attribute((__nonnull__(1, 2))); 
# 828
extern "C" ssize_t readlink(const char *__restrict__ , char *__restrict__ , size_t ) throw()
# 830
 __attribute((__nonnull__(1, 2))); 
# 835
extern "C" int symlinkat(const char * , int , const char * ) throw()
# 836
 __attribute((__nonnull__(1, 3))); 
# 839
extern "C" ssize_t readlinkat(int , const char *__restrict__ , char *__restrict__ , size_t ) throw()
# 841
 __attribute((__nonnull__(2, 3))); 
# 845
extern "C" int unlink(const char * ) throw() __attribute((__nonnull__(1))); 
# 849
extern "C" int unlinkat(int , const char * , int ) throw()
# 850
 __attribute((__nonnull__(2))); 
# 854
extern "C" int rmdir(const char * ) throw() __attribute((__nonnull__(1))); 
# 858
extern "C" __pid_t tcgetpgrp(int ) throw(); 
# 861
extern "C" int tcsetpgrp(int , __pid_t ) throw(); 
# 868
extern "C" char *getlogin(); 
# 876
extern "C" int getlogin_r(char * , size_t ) __attribute((__nonnull__(1))); 
# 881
extern "C" int setlogin(const char * ) throw() __attribute((__nonnull__(1))); 
# 59 "/usr/include/getopt.h" 3
extern "C" { extern char *optarg; } 
# 73 "/usr/include/getopt.h" 3
extern "C" { extern int optind; } 
# 78
extern "C" { extern int opterr; } 
# 82
extern "C" { extern int optopt; } 
# 152 "/usr/include/getopt.h" 3
extern "C" int getopt(int , char *const * , const char * ) throw(); 
# 898 "/usr/include/unistd.h" 3
extern "C" int gethostname(char * , size_t ) throw() __attribute((__nonnull__(1))); 
# 905
extern "C" int sethostname(const char * , size_t ) throw()
# 906
 __attribute((__nonnull__(1))); 
# 910
extern "C" int sethostid(long ) throw(); 
# 916
extern "C" int getdomainname(char * , size_t ) throw()
# 917
 __attribute((__nonnull__(1))); 
# 918
extern "C" int setdomainname(const char * , size_t ) throw()
# 919
 __attribute((__nonnull__(1))); 
# 925
extern "C" int vhangup() throw(); 
# 928
extern "C" int revoke(const char * ) throw() __attribute((__nonnull__(1))); 
# 936
extern "C" int profil(unsigned short * , size_t , size_t , unsigned ) throw()
# 938
 __attribute((__nonnull__(1))); 
# 944
extern "C" int acct(const char * ) throw(); 
# 948
extern "C" char *getusershell() throw(); 
# 949
extern "C" void endusershell() throw(); 
# 950
extern "C" void setusershell() throw(); 
# 956
extern "C" int daemon(int , int ) throw(); 
# 963
extern "C" int chroot(const char * ) throw() __attribute((__nonnull__(1))); 
# 967
extern "C" char *getpass(const char * ) __attribute((__nonnull__(1))); 
# 976 "/usr/include/unistd.h" 3
extern "C" int fsync(int ); 
# 983
extern "C" long gethostid(); 
# 986
extern "C" void sync() throw(); 
# 992
extern "C" int getpagesize() throw() __attribute((const)); 
# 997
extern "C" int getdtablesize() throw(); 
# 1007 "/usr/include/unistd.h" 3
extern "C" int truncate(const char * , __off_t ) throw()
# 1008
 __attribute((__nonnull__(1))); 
# 1019 "/usr/include/unistd.h" 3
extern "C" int truncate64(const char * , __off64_t ) throw()
# 1020
 __attribute((__nonnull__(1))); 
# 1026
extern "C" int ftruncate(int , __off_t ) throw(); 
# 1036 "/usr/include/unistd.h" 3
extern "C" int ftruncate64(int , __off64_t ) throw(); 
# 1047 "/usr/include/unistd.h" 3
extern "C" int brk(void * ) throw(); 
# 1053
extern "C" void *sbrk(intptr_t ) throw(); 
# 1068 "/usr/include/unistd.h" 3
extern "C" long syscall(long , ...) throw(); 
# 1091 "/usr/include/unistd.h" 3
extern "C" int lockf(int , int , __off_t ); 
# 1101 "/usr/include/unistd.h" 3
extern "C" int lockf64(int , int , __off64_t ); 
# 1122 "/usr/include/unistd.h" 3
extern "C" int fdatasync(int ); 
# 1130
extern "C" char *crypt(const char * , const char * ) throw()
# 1131
 __attribute((__nonnull__(1, 2))); 
# 1135
extern "C" void encrypt(char * , int ) throw() __attribute((__nonnull__(1))); 
# 1142
extern "C" void swab(const void *__restrict__ , void *__restrict__ , ssize_t ) throw()
# 1143
 __attribute((__nonnull__(1, 2))); 
# 1151
extern "C" char *ctermid(char * ) throw(); 
# 44 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/x86_64-redhat-linux/bits/gthr-default.h" 3
typedef pthread_t __gthread_t; 
# 45
typedef pthread_key_t __gthread_key_t; 
# 46
typedef pthread_once_t __gthread_once_t; 
# 47
typedef pthread_mutex_t __gthread_mutex_t; 
# 48
typedef pthread_mutex_t __gthread_recursive_mutex_t; 
# 49
typedef pthread_cond_t __gthread_cond_t; 
# 50
typedef timespec __gthread_time_t; 
# 118 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/x86_64-redhat-linux/bits/gthr-default.h" 3
static __typeof__(pthread_once) __gthrw_pthread_once __attribute((__weakref__("pthread_once"))); 
# 119
static __typeof__(pthread_getspecific) __gthrw_pthread_getspecific __attribute((__weakref__("pthread_getspecific"))); 
# 120
static __typeof__(pthread_setspecific) __gthrw_pthread_setspecific __attribute((__weakref__("pthread_setspecific"))); 
# 122
static __typeof__(pthread_create) __gthrw_pthread_create __attribute((__weakref__("pthread_create"))); 
# 123
static __typeof__(pthread_join) __gthrw_pthread_join __attribute((__weakref__("pthread_join"))); 
# 124
static __typeof__(pthread_equal) __gthrw_pthread_equal __attribute((__weakref__("pthread_equal"))); 
# 125
static __typeof__(pthread_self) __gthrw_pthread_self __attribute((__weakref__("pthread_self"))); 
# 126
static __typeof__(pthread_detach) __gthrw_pthread_detach __attribute((__weakref__("pthread_detach"))); 
# 127
static __typeof__(pthread_cancel) __gthrw_pthread_cancel __attribute((__weakref__("pthread_cancel"))); 
# 128
static __typeof__(sched_yield) __gthrw_sched_yield __attribute((__weakref__("sched_yield"))); 
# 130
static __typeof__(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute((__weakref__("pthread_mutex_lock"))); 
# 131
static __typeof__(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute((__weakref__("pthread_mutex_trylock"))); 
# 134
static __typeof__(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute((__weakref__("pthread_mutex_timedlock"))); 
# 137
static __typeof__(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute((__weakref__("pthread_mutex_unlock"))); 
# 138
static __typeof__(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute((__weakref__("pthread_mutex_init"))); 
# 139
static __typeof__(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute((__weakref__("pthread_mutex_destroy"))); 
# 141
static __typeof__(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute((__weakref__("pthread_cond_broadcast"))); 
# 142
static __typeof__(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute((__weakref__("pthread_cond_signal"))); 
# 143
static __typeof__(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute((__weakref__("pthread_cond_wait"))); 
# 144
static __typeof__(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute((__weakref__("pthread_cond_timedwait"))); 
# 145
static __typeof__(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute((__weakref__("pthread_cond_destroy"))); 
# 148
static __typeof__(pthread_key_create) __gthrw_pthread_key_create __attribute((__weakref__("pthread_key_create"))); 
# 149
static __typeof__(pthread_key_delete) __gthrw_pthread_key_delete __attribute((__weakref__("pthread_key_delete"))); 
# 150
static __typeof__(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute((__weakref__("pthread_mutexattr_init"))); 
# 151
static __typeof__(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute((__weakref__("pthread_mutexattr_settype"))); 
# 152
static __typeof__(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute((__weakref__("pthread_mutexattr_destroy"))); 
# 238 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/x86_64-redhat-linux/bits/gthr-default.h" 3
static inline int __gthread_active_p() 
# 239
{ 
# 240
static void *const __gthread_active_ptr = __extension__ ((void *)(&__gthrw_pthread_cancel)); 
# 242
return __gthread_active_ptr != (0); 
# 243
} 
# 649 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/x86_64-redhat-linux/bits/gthr-default.h" 3
static inline int __gthread_create(__gthread_t *__threadid, void *(*__func)(void *), void *
# 650
__args) 
# 651
{ 
# 652
return __gthrw_pthread_create(__threadid, __null, __func, __args); 
# 653
} 
# 656
static inline int __gthread_join(__gthread_t __threadid, void **__value_ptr) 
# 657
{ 
# 658
return __gthrw_pthread_join(__threadid, __value_ptr); 
# 659
} 
# 662
static inline int __gthread_detach(__gthread_t __threadid) 
# 663
{ 
# 664
return __gthrw_pthread_detach(__threadid); 
# 665
} 
# 668
static inline int __gthread_equal(__gthread_t __t1, __gthread_t __t2) 
# 669
{ 
# 670
return __gthrw_pthread_equal(__t1, __t2); 
# 671
} 
# 674
static inline __gthread_t __gthread_self() 
# 675
{ 
# 676
return __gthrw_pthread_self(); 
# 677
} 
# 680
static inline int __gthread_yield() 
# 681
{ 
# 682
return __gthrw_sched_yield(); 
# 683
} 
# 686
static inline int __gthread_once(__gthread_once_t *__once, void (*__func)(void)) 
# 687
{ 
# 688
if (__gthread_active_p()) { 
# 689
return __gthrw_pthread_once(__once, __func); } else { 
# 691
return -1; }  
# 692
} 
# 695
static inline int __gthread_key_create(__gthread_key_t *__key, void (*__dtor)(void *)) 
# 696
{ 
# 697
return __gthrw_pthread_key_create(__key, __dtor); 
# 698
} 
# 701
static inline int __gthread_key_delete(__gthread_key_t __key) 
# 702
{ 
# 703
return __gthrw_pthread_key_delete(__key); 
# 704
} 
# 707
static inline void *__gthread_getspecific(__gthread_key_t __key) 
# 708
{ 
# 709
return __gthrw_pthread_getspecific(__key); 
# 710
} 
# 713
static inline int __gthread_setspecific(__gthread_key_t __key, const void *__ptr) 
# 714
{ 
# 715
return __gthrw_pthread_setspecific(__key, __ptr); 
# 716
} 
# 719
static inline int __gthread_mutex_destroy(__gthread_mutex_t *__mutex) 
# 720
{ 
# 721
if (__gthread_active_p()) { 
# 722
return __gthrw_pthread_mutex_destroy(__mutex); } else { 
# 724
return 0; }  
# 725
} 
# 728
static inline int __gthread_mutex_lock(__gthread_mutex_t *__mutex) 
# 729
{ 
# 730
if (__gthread_active_p()) { 
# 731
return __gthrw_pthread_mutex_lock(__mutex); } else { 
# 733
return 0; }  
# 734
} 
# 737
static inline int __gthread_mutex_trylock(__gthread_mutex_t *__mutex) 
# 738
{ 
# 739
if (__gthread_active_p()) { 
# 740
return __gthrw_pthread_mutex_trylock(__mutex); } else { 
# 742
return 0; }  
# 743
} 
# 748
static inline int __gthread_mutex_timedlock(__gthread_mutex_t *__mutex, const __gthread_time_t *
# 749
__abs_timeout) 
# 750
{ 
# 751
if (__gthread_active_p()) { 
# 752
return __gthrw_pthread_mutex_timedlock(__mutex, __abs_timeout); } else { 
# 754
return 0; }  
# 755
} 
# 760
static inline int __gthread_mutex_unlock(__gthread_mutex_t *__mutex) 
# 761
{ 
# 762
if (__gthread_active_p()) { 
# 763
return __gthrw_pthread_mutex_unlock(__mutex); } else { 
# 765
return 0; }  
# 766
} 
# 792 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/x86_64-redhat-linux/bits/gthr-default.h" 3
static inline int __gthread_recursive_mutex_lock(__gthread_recursive_mutex_t *__mutex) 
# 793
{ 
# 794
return __gthread_mutex_lock(__mutex); 
# 795
} 
# 798
static inline int __gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t *__mutex) 
# 799
{ 
# 800
return __gthread_mutex_trylock(__mutex); 
# 801
} 
# 806
static inline int __gthread_recursive_mutex_timedlock(__gthread_recursive_mutex_t *__mutex, const __gthread_time_t *
# 807
__abs_timeout) 
# 808
{ 
# 809
return __gthread_mutex_timedlock(__mutex, __abs_timeout); 
# 810
} 
# 815
static inline int __gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t *__mutex) 
# 816
{ 
# 817
return __gthread_mutex_unlock(__mutex); 
# 818
} 
# 821
static inline int __gthread_cond_broadcast(__gthread_cond_t *__cond) 
# 822
{ 
# 823
return __gthrw_pthread_cond_broadcast(__cond); 
# 824
} 
# 827
static inline int __gthread_cond_signal(__gthread_cond_t *__cond) 
# 828
{ 
# 829
return __gthrw_pthread_cond_signal(__cond); 
# 830
} 
# 833
static inline int __gthread_cond_wait(__gthread_cond_t *__cond, __gthread_mutex_t *__mutex) 
# 834
{ 
# 835
return __gthrw_pthread_cond_wait(__cond, __mutex); 
# 836
} 
# 839
static inline int __gthread_cond_timedwait(__gthread_cond_t *__cond, __gthread_mutex_t *__mutex, const __gthread_time_t *
# 840
__abs_timeout) 
# 841
{ 
# 842
return __gthrw_pthread_cond_timedwait(__cond, __mutex, __abs_timeout); 
# 843
} 
# 846
static inline int __gthread_cond_wait_recursive(__gthread_cond_t *__cond, __gthread_recursive_mutex_t *
# 847
__mutex) 
# 848
{ 
# 849
return __gthread_cond_wait(__cond, __mutex); 
# 850
} 
# 853
static inline int __gthread_cond_timedwait_recursive(__gthread_cond_t *__cond, __gthread_recursive_mutex_t *
# 854
__mutex, const __gthread_time_t *
# 855
__abs_timeout) 
# 856
{ 
# 857
return __gthread_cond_timedwait(__cond, __mutex, __abs_timeout); 
# 858
} 
# 861
static inline int __gthread_cond_destroy(__gthread_cond_t *__cond) 
# 862
{ 
# 863
return __gthrw_pthread_cond_destroy(__cond); 
# 864
} 
# 32 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/x86_64-redhat-linux/bits/atomic_word.h" 3
typedef int _Atomic_word; 
# 37 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/atomicity.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 45
static inline _Atomic_word __exchange_and_add(volatile _Atomic_word *__mem, int __val) 
# 46
{ return __sync_fetch_and_add_4(__mem, __val); } 
# 49
static inline void __atomic_add(volatile _Atomic_word *__mem, int __val) 
# 50
{ __sync_fetch_and_add_4(__mem, __val); } 
# 62 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/atomicity.h" 3
static inline _Atomic_word __exchange_and_add_single(_Atomic_word *__mem, int __val) 
# 63
{ 
# 64
_Atomic_word __result = (*__mem); 
# 65
(*__mem) += __val; 
# 66
return __result; 
# 67
} 
# 70
static inline void __atomic_add_single(_Atomic_word *__mem, int __val) 
# 71
{ (*__mem) += __val; } 
# 74
__attribute((__unused__)) static inline _Atomic_word 
# 75
__exchange_and_add_dispatch(_Atomic_word *__mem, int __val) 
# 76
{ 
# 78
if (__gthread_active_p()) { 
# 79
return __exchange_and_add(__mem, __val); } else { 
# 81
return __exchange_and_add_single(__mem, __val); }  
# 85
} 
# 88
__attribute((__unused__)) static inline void 
# 89
__atomic_add_dispatch(_Atomic_word *__mem, int __val) 
# 90
{ 
# 92
if (__gthread_active_p()) { 
# 93
__atomic_add(__mem, __val); } else { 
# 95
__atomic_add_single(__mem, __val); }  
# 99
} 
# 101
}
# 46 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/new" 3
namespace std { 
# 54
class bad_alloc : public exception { 
# 57
public: bad_alloc() throw() { } 
# 61
virtual ~bad_alloc() throw(); 
# 64
virtual const char *what() const throw(); 
# 65
}; 
# 67
struct nothrow_t { }; 
# 69
extern const nothrow_t nothrow; 
# 73
typedef void (*new_handler)(void); 
# 77
new_handler set_new_handler(new_handler) throw(); 
# 78
}
# 91 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/new" 3
void *operator new(size_t) throw(std::bad_alloc); 
# 92
void *operator new[](size_t) throw(std::bad_alloc); 
# 93
void operator delete(void *) throw(); 
# 94
void operator delete[](void *) throw(); 
# 95
void *operator new(size_t, const std::nothrow_t &) throw(); 
# 96
void *operator new[](size_t, const std::nothrow_t &) throw(); 
# 97
void operator delete(void *, const std::nothrow_t &) throw(); 
# 98
void operator delete[](void *, const std::nothrow_t &) throw(); 
# 101
inline void *operator new(size_t, void *__p) throw() { return __p; } 
# 102
inline void *operator new[](size_t, void *__p) throw() { return __p; } 
# 105
inline void operator delete(void *, void *) throw() { } 
# 106
inline void operator delete[](void *, void *) throw() { } 
# 37 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 39
using std::size_t;
# 40
using std::ptrdiff_t;
# 50 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h" 3
template < typename _Tp >
    class new_allocator
    {
    public :
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp * pointer;
      typedef const _Tp * const_pointer;
      typedef _Tp & reference;
      typedef const _Tp & const_reference;
      typedef _Tp value_type;

      template < typename _Tp1 >
        struct rebind
        { typedef new_allocator < _Tp1 > other; };

      new_allocator ( ) throw ( ) { }

      new_allocator ( const new_allocator & ) throw ( ) { }

      template < typename _Tp1 >
        new_allocator ( const new_allocator < _Tp1 > & ) throw ( ) { }

      ~ new_allocator ( ) throw ( ) { }

      pointer
      address ( reference __x ) const { return & __x; }

      const_pointer
      address ( const_reference __x ) const { return & __x; }



      pointer
      allocate ( size_type __n, const void * = 0 )
      {
 if ( __builtin_expect ( __n > this -> max_size ( ), false ) )
   std :: __throw_bad_alloc ( );

 return static_cast < _Tp * > ( :: operator new ( __n * sizeof ( _Tp ) ) );
      }


      void
      deallocate ( pointer __p, size_type )
      { :: operator delete ( __p ); }

      size_type
      max_size ( ) const throw ( )
      { return size_t ( - 1 ) / sizeof ( _Tp ); }



      void
      construct ( pointer __p, const _Tp & __val )
      { :: new ( ( void * ) __p ) _Tp ( __val ); }

      void
      destroy ( pointer __p ) { __p -> ~ _Tp ( ); }
    };
# 118 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h" 3
template < typename _Tp >
    inline bool
    operator == ( const new_allocator < _Tp > &, const new_allocator < _Tp > & )
    { return true; }
# 123
template < typename _Tp >
    inline bool
    operator != ( const new_allocator < _Tp > &, const new_allocator < _Tp > & )
    { return false; }
# 128
}
# 50 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 59 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h" 3
template< class _Tp> class allocator; 
# 64
template<> class allocator< void>  { 
# 67
public: typedef size_t size_type; 
# 68
typedef ptrdiff_t difference_type; 
# 69
typedef void *pointer; 
# 70
typedef const void *const_pointer; 
# 71
typedef void value_type; 
# 73
template< class _Tp1> 
# 74
struct rebind { 
# 75
typedef std::allocator< _Tp1>  other; }; 
# 76
}; 
# 85 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h" 3
template < typename _Tp >
    class allocator : public __gnu_cxx :: new_allocator < _Tp >
    {
   public :
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp * pointer;
      typedef const _Tp * const_pointer;
      typedef _Tp & reference;
      typedef const _Tp & const_reference;
      typedef _Tp value_type;

      template < typename _Tp1 >
        struct rebind
        { typedef allocator < _Tp1 > other; };

      allocator ( ) throw ( ) { }

      allocator ( const allocator & __a ) throw ( )
      : __gnu_cxx :: new_allocator < _Tp > ( __a ) { }

      template < typename _Tp1 >
        allocator ( const allocator < _Tp1 > & ) throw ( ) { }

      ~ allocator ( ) throw ( ) { }


    };
# 114
template < typename _T1, typename _T2 >
    inline bool
    operator == ( const allocator < _T1 > &, const allocator < _T2 > & )
    { return true; }
# 119
template < typename _Tp >
    inline bool
    operator == ( const allocator < _Tp > &, const allocator < _Tp > & )
    { return true; }
# 124
template < typename _T1, typename _T2 >
    inline bool
    operator != ( const allocator < _T1 > &, const allocator < _T2 > & )
    { return false; }
# 129
template < typename _Tp >
    inline bool
    operator != ( const allocator < _Tp > &, const allocator < _Tp > & )
    { return false; }
# 138
extern template class allocator< char> ;
# 139
extern template class allocator< wchar_t> ;
# 146
template < typename _Alloc, bool = __is_empty ( _Alloc ) >
    struct __alloc_swap
    { static void _S_do_it ( _Alloc &, _Alloc & ) { } };
# 150
template < typename _Alloc >
    struct __alloc_swap < _Alloc, false >
    {
      static void
      _S_do_it ( _Alloc & __one, _Alloc & __two )
      {

 if ( __one != __two )
   swap ( __one, __two );
      }
    };
# 163
template < typename _Alloc, bool = __is_empty ( _Alloc ) >
    struct __alloc_neq
    {
      static bool
      _S_do_it ( const _Alloc &, const _Alloc & )
      { return false; }
    };
# 171
template < typename _Alloc >
    struct __alloc_neq < _Alloc, false >
    {
      static bool
      _S_do_it ( const _Alloc & __one, const _Alloc & __two )
      { return __one != __two; }
    };
# 179
}
# 32 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/cxxabi-forced.h" 3
namespace __cxxabiv1 { 
# 41
class __forced_unwind { 
# 43
virtual ~__forced_unwind() throw(); 
# 44
virtual void __pure_dummy() = 0; 
# 45
}; 
# 46
}
# 38 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/ostream_insert.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 40
template < typename _CharT, typename _Traits >
    inline void
    __ostream_write ( basic_ostream < _CharT, _Traits > & __out,
      const _CharT * __s, streamsize __n )
    {
      typedef basic_ostream < _CharT, _Traits > __ostream_type;
      typedef typename __ostream_type :: ios_base __ios_base;

      const streamsize __put = __out . rdbuf ( ) -> sputn ( __s, __n );
      if ( __put != __n )
 __out . setstate ( __ios_base :: badbit );
    }
# 53
template < typename _CharT, typename _Traits >
    inline void
    __ostream_fill ( basic_ostream < _CharT, _Traits > & __out, streamsize __n )
    {
      typedef basic_ostream < _CharT, _Traits > __ostream_type;
      typedef typename __ostream_type :: ios_base __ios_base;

      const _CharT __c = __out . fill ( );
      for (; __n > 0; -- __n )
 {
   const typename _Traits :: int_type __put = __out . rdbuf ( ) -> sputc ( __c );
   if ( _Traits :: eq_int_type ( __put, _Traits :: eof ( ) ) )
     {
       __out . setstate ( __ios_base :: badbit );
       break;
     }
 }
    }
# 72
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    __ostream_insert ( basic_ostream < _CharT, _Traits > & __out,
       const _CharT * __s, streamsize __n )
    {
      typedef basic_ostream < _CharT, _Traits > __ostream_type;
      typedef typename __ostream_type :: ios_base __ios_base;

      typename __ostream_type :: sentry __cerb ( __out );
      if ( __cerb )
 {
   try
     {
       const streamsize __w = __out . width ( );
       if ( __w > __n )
  {
    const bool __left = ( ( __out . flags ( )
     & __ios_base :: adjustfield )
           == __ios_base :: left );
    if ( ! __left )
      __ostream_fill ( __out, __w - __n );
    if ( __out . good ( ) )
      __ostream_write ( __out, __s, __n );
    if ( __left && __out . good ( ) )
      __ostream_fill ( __out, __w - __n );
  }
       else
  __ostream_write ( __out, __s, __n );
       __out . width ( 0 );
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       __out . _M_setstate ( __ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { __out . _M_setstate ( __ios_base :: badbit ); }
 }
      return __out;
    }
# 117
extern template basic_ostream< char>  &__ostream_insert(basic_ostream< char>  & , const char * , streamsize );
# 120
extern template basic_ostream< wchar_t>  &__ostream_insert(basic_ostream< wchar_t>  & , const wchar_t * , streamsize );
# 125
}
# 60 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 99 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h" 3
template< class _Arg, class _Result> 
# 100
struct unary_function { 
# 102
typedef _Arg argument_type; 
# 105
typedef _Result result_type; 
# 106
}; 
# 111
template< class _Arg1, class _Arg2, class _Result> 
# 112
struct binary_function { 
# 114
typedef _Arg1 first_argument_type; 
# 117
typedef _Arg2 second_argument_type; 
# 118
typedef _Result result_type; 
# 119
}; 
# 134 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h" 3
template < typename _Tp >
    struct plus : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x + __y; }
    };
# 143
template < typename _Tp >
    struct minus : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x - __y; }
    };
# 152
template < typename _Tp >
    struct multiplies : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x * __y; }
    };
# 161
template < typename _Tp >
    struct divides : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x / __y; }
    };
# 170
template < typename _Tp >
    struct modulus : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x % __y; }
    };
# 179
template < typename _Tp >
    struct negate : public unary_function < _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x ) const
      { return - __x; }
    };
# 198 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h" 3
template < typename _Tp >
    struct equal_to : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x == __y; }
    };
# 207
template < typename _Tp >
    struct not_equal_to : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x != __y; }
    };
# 216
template < typename _Tp >
    struct greater : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x > __y; }
    };
# 225
template < typename _Tp >
    struct less : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x < __y; }
    };
# 234
template < typename _Tp >
    struct greater_equal : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x >= __y; }
    };
# 243
template < typename _Tp >
    struct less_equal : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x <= __y; }
    };
# 262 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h" 3
template < typename _Tp >
    struct logical_and : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x && __y; }
    };
# 271
template < typename _Tp >
    struct logical_or : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x || __y; }
    };
# 280
template < typename _Tp >
    struct logical_not : public unary_function < _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x ) const
      { return ! __x; }
    };
# 291
template < typename _Tp >
    struct bit_and : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x & __y; }
    };
# 299
template < typename _Tp >
    struct bit_or : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x | __y; }
    };
# 307
template < typename _Tp >
    struct bit_xor : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x ^ __y; }
    };
# 345 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h" 3
template < typename _Predicate >
    class unary_negate
    : public unary_function < typename _Predicate :: argument_type, bool >
    {
    protected :
      _Predicate _M_pred;

    public :
      explicit
      unary_negate ( const _Predicate & __x ) : _M_pred ( __x ) { }

      bool
      operator ( ) ( const typename _Predicate :: argument_type & __x ) const
      { return ! _M_pred ( __x ); }
    };
# 362
template < typename _Predicate >
    inline unary_negate < _Predicate >
    not1 ( const _Predicate & __pred )
    { return unary_negate < _Predicate > ( __pred ); }
# 368
template < typename _Predicate >
    class binary_negate
    : public binary_function < typename _Predicate :: first_argument_type,
        typename _Predicate :: second_argument_type, bool >
    {
    protected :
      _Predicate _M_pred;

    public :
      explicit
      binary_negate ( const _Predicate & __x ) : _M_pred ( __x ) { }

      bool
      operator ( ) ( const typename _Predicate :: first_argument_type & __x,
   const typename _Predicate :: second_argument_type & __y ) const
      { return ! _M_pred ( __x, __y ); }
    };
# 387
template < typename _Predicate >
    inline binary_negate < _Predicate >
    not2 ( const _Predicate & __pred )
    { return binary_negate < _Predicate > ( __pred ); }
# 416 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h" 3
template < typename _Arg, typename _Result >
    class pointer_to_unary_function : public unary_function < _Arg, _Result >
    {
    protected :
      _Result ( * _M_ptr ) ( _Arg );

    public :
      pointer_to_unary_function ( ) { }

      explicit
      pointer_to_unary_function ( _Result ( * __x ) ( _Arg ) )
      : _M_ptr ( __x ) { }

      _Result
      operator ( ) ( _Arg __x ) const
      { return _M_ptr ( __x ); }
    };
# 435
template < typename _Arg, typename _Result >
    inline pointer_to_unary_function < _Arg, _Result >
    ptr_fun ( _Result ( * __x ) ( _Arg ) )
    { return pointer_to_unary_function < _Arg, _Result > ( __x ); }
# 441
template < typename _Arg1, typename _Arg2, typename _Result >
    class pointer_to_binary_function
    : public binary_function < _Arg1, _Arg2, _Result >
    {
    protected :
      _Result ( * _M_ptr ) ( _Arg1, _Arg2 );

    public :
      pointer_to_binary_function ( ) { }

      explicit
      pointer_to_binary_function ( _Result ( * __x ) ( _Arg1, _Arg2 ) )
      : _M_ptr ( __x ) { }

      _Result
      operator ( ) ( _Arg1 __x, _Arg2 __y ) const
      { return _M_ptr ( __x, __y ); }
    };
# 461
template < typename _Arg1, typename _Arg2, typename _Result >
    inline pointer_to_binary_function < _Arg1, _Arg2, _Result >
    ptr_fun ( _Result ( * __x ) ( _Arg1, _Arg2 ) )
    { return pointer_to_binary_function < _Arg1, _Arg2, _Result > ( __x ); }
# 467
template < typename _Tp >
    struct _Identity : public unary_function < _Tp, _Tp >
    {
      _Tp &
      operator ( ) ( _Tp & __x ) const
      { return __x; }

      const _Tp &
      operator ( ) ( const _Tp & __x ) const
      { return __x; }
    };
# 479
template < typename _Pair >
    struct _Select1st : public unary_function < _Pair,
           typename _Pair :: first_type >
    {
      typename _Pair :: first_type &
      operator ( ) ( _Pair & __x ) const
      { return __x . first; }

      const typename _Pair :: first_type &
      operator ( ) ( const _Pair & __x ) const
      { return __x . first; }
    };
# 492
template < typename _Pair >
    struct _Select2nd : public unary_function < _Pair,
           typename _Pair :: second_type >
    {
      typename _Pair :: second_type &
      operator ( ) ( _Pair & __x ) const
      { return __x . second; }

      const typename _Pair :: second_type &
      operator ( ) ( const _Pair & __x ) const
      { return __x . second; }
    };
# 523 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h" 3
template < typename _Ret, typename _Tp >
    class mem_fun_t : public unary_function < _Tp *, _Ret >
    {
    public :
      explicit
      mem_fun_t ( _Ret ( _Tp :: * __pf ) ( ) )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( _Tp * __p ) const
      { return ( __p ->* _M_f ) ( ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( );
    };
# 541
template < typename _Ret, typename _Tp >
    class const_mem_fun_t : public unary_function < const _Tp *, _Ret >
    {
    public :
      explicit
      const_mem_fun_t ( _Ret ( _Tp :: * __pf ) ( ) const )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( const _Tp * __p ) const
      { return ( __p ->* _M_f ) ( ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( ) const;
    };
# 559
template < typename _Ret, typename _Tp >
    class mem_fun_ref_t : public unary_function < _Tp, _Ret >
    {
    public :
      explicit
      mem_fun_ref_t ( _Ret ( _Tp :: * __pf ) ( ) )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( _Tp & __r ) const
      { return ( __r .* _M_f ) ( ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( );
  };
# 577
template < typename _Ret, typename _Tp >
    class const_mem_fun_ref_t : public unary_function < _Tp, _Ret >
    {
    public :
      explicit
      const_mem_fun_ref_t ( _Ret ( _Tp :: * __pf ) ( ) const )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( const _Tp & __r ) const
      { return ( __r .* _M_f ) ( ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( ) const;
    };
# 595
template < typename _Ret, typename _Tp, typename _Arg >
    class mem_fun1_t : public binary_function < _Tp *, _Arg, _Ret >
    {
    public :
      explicit
      mem_fun1_t ( _Ret ( _Tp :: * __pf ) ( _Arg ) )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( _Tp * __p, _Arg __x ) const
      { return ( __p ->* _M_f ) ( __x ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( _Arg );
    };
# 613
template < typename _Ret, typename _Tp, typename _Arg >
    class const_mem_fun1_t : public binary_function < const _Tp *, _Arg, _Ret >
    {
    public :
      explicit
      const_mem_fun1_t ( _Ret ( _Tp :: * __pf ) ( _Arg ) const )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( const _Tp * __p, _Arg __x ) const
      { return ( __p ->* _M_f ) ( __x ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( _Arg ) const;
    };
# 631
template < typename _Ret, typename _Tp, typename _Arg >
    class mem_fun1_ref_t : public binary_function < _Tp, _Arg, _Ret >
    {
    public :
      explicit
      mem_fun1_ref_t ( _Ret ( _Tp :: * __pf ) ( _Arg ) )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( _Tp & __r, _Arg __x ) const
      { return ( __r .* _M_f ) ( __x ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( _Arg );
    };
# 649
template < typename _Ret, typename _Tp, typename _Arg >
    class const_mem_fun1_ref_t : public binary_function < _Tp, _Arg, _Ret >
    {
    public :
      explicit
      const_mem_fun1_ref_t ( _Ret ( _Tp :: * __pf ) ( _Arg ) const )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( const _Tp & __r, _Arg __x ) const
      { return ( __r .* _M_f ) ( __x ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( _Arg ) const;
    };
# 667
template < typename _Ret, typename _Tp >
    inline mem_fun_t < _Ret, _Tp >
    mem_fun ( _Ret ( _Tp :: * __f ) ( ) )
    { return mem_fun_t < _Ret, _Tp > ( __f ); }
# 672
template < typename _Ret, typename _Tp >
    inline const_mem_fun_t < _Ret, _Tp >
    mem_fun ( _Ret ( _Tp :: * __f ) ( ) const )
    { return const_mem_fun_t < _Ret, _Tp > ( __f ); }
# 677
template < typename _Ret, typename _Tp >
    inline mem_fun_ref_t < _Ret, _Tp >
    mem_fun_ref ( _Ret ( _Tp :: * __f ) ( ) )
    { return mem_fun_ref_t < _Ret, _Tp > ( __f ); }
# 682
template < typename _Ret, typename _Tp >
    inline const_mem_fun_ref_t < _Ret, _Tp >
    mem_fun_ref ( _Ret ( _Tp :: * __f ) ( ) const )
    { return const_mem_fun_ref_t < _Ret, _Tp > ( __f ); }
# 687
template < typename _Ret, typename _Tp, typename _Arg >
    inline mem_fun1_t < _Ret, _Tp, _Arg >
    mem_fun ( _Ret ( _Tp :: * __f ) ( _Arg ) )
    { return mem_fun1_t < _Ret, _Tp, _Arg > ( __f ); }
# 692
template < typename _Ret, typename _Tp, typename _Arg >
    inline const_mem_fun1_t < _Ret, _Tp, _Arg >
    mem_fun ( _Ret ( _Tp :: * __f ) ( _Arg ) const )
    { return const_mem_fun1_t < _Ret, _Tp, _Arg > ( __f ); }
# 697
template < typename _Ret, typename _Tp, typename _Arg >
    inline mem_fun1_ref_t < _Ret, _Tp, _Arg >
    mem_fun_ref ( _Ret ( _Tp :: * __f ) ( _Arg ) )
    { return mem_fun1_ref_t < _Ret, _Tp, _Arg > ( __f ); }
# 702
template < typename _Ret, typename _Tp, typename _Arg >
    inline const_mem_fun1_ref_t < _Ret, _Tp, _Arg >
    mem_fun_ref ( _Ret ( _Tp :: * __f ) ( _Arg ) const )
    { return const_mem_fun1_ref_t < _Ret, _Tp, _Arg > ( __f ); }
# 709
}
# 60 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/backward/binders.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 96 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/backward/binders.h" 3
template < typename _Operation >
    class binder1st
    : public unary_function < typename _Operation :: second_argument_type,
       typename _Operation :: result_type >
    {
    protected :
      _Operation op;
      typename _Operation :: first_argument_type value;

    public :
      binder1st ( const _Operation & __x,
  const typename _Operation :: first_argument_type & __y )
      : op ( __x ), value ( __y ) { }

      typename _Operation :: result_type
      operator ( ) ( const typename _Operation :: second_argument_type & __x ) const
      { return op ( value, __x ); }



      typename _Operation :: result_type
      operator ( ) ( typename _Operation :: second_argument_type & __x ) const
      { return op ( value, __x ); }
    };
# 122
template < typename _Operation, typename _Tp >
    inline binder1st < _Operation >
    bind1st ( const _Operation & __fn, const _Tp & __x )
    {
      typedef typename _Operation :: first_argument_type _Arg1_type;
      return binder1st < _Operation > ( __fn, _Arg1_type ( __x ) );
    }
# 131
template < typename _Operation >
    class binder2nd
    : public unary_function < typename _Operation :: first_argument_type,
       typename _Operation :: result_type >
    {
    protected :
      _Operation op;
      typename _Operation :: second_argument_type value;

    public :
      binder2nd ( const _Operation & __x,
  const typename _Operation :: second_argument_type & __y )
      : op ( __x ), value ( __y ) { }

      typename _Operation :: result_type
      operator ( ) ( const typename _Operation :: first_argument_type & __x ) const
      { return op ( __x, value ); }



      typename _Operation :: result_type
      operator ( ) ( typename _Operation :: first_argument_type & __x ) const
      { return op ( __x, value ); }
    };
# 157
template < typename _Operation, typename _Tp >
    inline binder2nd < _Operation >
    bind2nd ( const _Operation & __fn, const _Tp & __x )
    {
      typedef typename _Operation :: second_argument_type _Arg2_type;
      return binder2nd < _Operation > ( __fn, _Arg2_type ( __x ) );
    }
# 166
}
# 45 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 103 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    class basic_string
    {
      typedef typename _Alloc :: template rebind < _CharT > :: other _CharT_alloc_type;


    public :
      typedef _Traits traits_type;
      typedef typename _Traits :: char_type value_type;
      typedef _Alloc allocator_type;
      typedef typename _CharT_alloc_type :: size_type size_type;
      typedef typename _CharT_alloc_type :: difference_type difference_type;
      typedef typename _CharT_alloc_type :: reference reference;
      typedef typename _CharT_alloc_type :: const_reference const_reference;
      typedef typename _CharT_alloc_type :: pointer pointer;
      typedef typename _CharT_alloc_type :: const_pointer const_pointer;
      typedef __gnu_cxx :: __normal_iterator < pointer, basic_string > iterator;
      typedef __gnu_cxx :: __normal_iterator < const_pointer, basic_string >
                                                            const_iterator;
      typedef std :: reverse_iterator < const_iterator > const_reverse_iterator;
      typedef std :: reverse_iterator < iterator > reverse_iterator;

    private :

      struct _Rep_base
      {
 size_type _M_length;
 size_type _M_capacity;
 _Atomic_word _M_refcount;
      };

      struct _Rep : _Rep_base
      {

 typedef typename _Alloc :: template rebind < char > :: other _Raw_bytes_alloc;

 static const size_type _S_max_size;
 static const _CharT _S_terminal;



        static size_type _S_empty_rep_storage [ ];

        static _Rep &
        _S_empty_rep ( )
        {



   void * __p = reinterpret_cast < void * > ( & _S_empty_rep_storage );
   return * reinterpret_cast < _Rep * > ( __p );
 }

        bool
 _M_is_leaked ( ) const
        { return this -> _M_refcount < 0; }

        bool
 _M_is_shared ( ) const
        { return this -> _M_refcount > 0; }

        void
 _M_set_leaked ( )
        { this -> _M_refcount = - 1; }

        void
 _M_set_sharable ( )
        { this -> _M_refcount = 0; }

 void
 _M_set_length_and_sharable ( size_type __n )
 {

   if ( __builtin_expect ( this != & _S_empty_rep ( ), false ) )

     {
       this -> _M_set_sharable ( );
       this -> _M_length = __n;
       traits_type :: assign ( this -> _M_refdata ( ) [ __n ], _S_terminal );


     }
 }

 _CharT *
 _M_refdata ( ) throw ( )
 { return reinterpret_cast < _CharT * > ( this + 1 ); }

 _CharT *
 _M_grab ( const _Alloc & __alloc1, const _Alloc & __alloc2 )
 {
   return ( ! _M_is_leaked ( ) && __alloc1 == __alloc2 )
           ? _M_refcopy ( ) : _M_clone ( __alloc1 );
 }


 static _Rep *
 _S_create ( size_type, size_type, const _Alloc & );

 void
 _M_dispose ( const _Alloc & __a )
 {

   if ( __builtin_expect ( this != & _S_empty_rep ( ), false ) )

     if ( __gnu_cxx :: __exchange_and_add_dispatch ( & this -> _M_refcount,
             - 1 ) <= 0 )
       _M_destroy ( __a );
 }

 void
 _M_destroy ( const _Alloc & ) throw ( );

 _CharT *
 _M_refcopy ( ) throw ( )
 {

   if ( __builtin_expect ( this != & _S_empty_rep ( ), false ) )

            __gnu_cxx :: __atomic_add_dispatch ( & this -> _M_refcount, 1 );
   return _M_refdata ( );
 }

 _CharT *
 _M_clone ( const _Alloc &, size_type __res = 0 );
      };


      struct _Alloc_hider : _Alloc
      {
 _Alloc_hider ( _CharT * __dat, const _Alloc & __a )
 : _Alloc ( __a ), _M_p ( __dat ) { }

 _CharT * _M_p;
      };

    public :




      static const size_type npos = static_cast < size_type > ( - 1 );

    private :

      mutable _Alloc_hider _M_dataplus;

      _CharT *
      _M_data ( ) const
      { return _M_dataplus . _M_p; }

      _CharT *
      _M_data ( _CharT * __p )
      { return ( _M_dataplus . _M_p = __p ); }

      _Rep *
      _M_rep ( ) const
      { return & ( ( reinterpret_cast < _Rep * > ( _M_data ( ) ) ) [ - 1 ] ); }



      iterator
      _M_ibegin ( ) const
      { return iterator ( _M_data ( ) ); }

      iterator
      _M_iend ( ) const
      { return iterator ( _M_data ( ) + this -> size ( ) ); }

      void
      _M_leak ( )
      {
 if ( ! _M_rep ( ) -> _M_is_leaked ( ) )
   _M_leak_hard ( );
      }

      size_type
      _M_check ( size_type __pos, const char * __s ) const
      {
 if ( __pos > this -> size ( ) )
   __throw_out_of_range ( ( __s ) );
 return __pos;
      }

      void
      _M_check_length ( size_type __n1, size_type __n2, const char * __s ) const
      {
 if ( this -> max_size ( ) - ( this -> size ( ) - __n1 ) < __n2 )
   __throw_length_error ( ( __s ) );
      }


      size_type
      _M_limit ( size_type __pos, size_type __off ) const
      {
 const bool __testoff = __off < this -> size ( ) - __pos;
 return __testoff ? __off : this -> size ( ) - __pos;
      }


      bool
      _M_disjunct ( const _CharT * __s ) const
      {
 return ( less < const _CharT * > ( ) ( __s, _M_data ( ) )
  || less < const _CharT * > ( ) ( _M_data ( ) + this -> size ( ), __s ) );
      }



      static void
      _M_copy ( _CharT * __d, const _CharT * __s, size_type __n )
      {
 if ( __n == 1 )
   traits_type :: assign ( * __d, * __s );
 else
   traits_type :: copy ( __d, __s, __n );
      }

      static void
      _M_move ( _CharT * __d, const _CharT * __s, size_type __n )
      {
 if ( __n == 1 )
   traits_type :: assign ( * __d, * __s );
 else
   traits_type :: move ( __d, __s, __n );
      }

      static void
      _M_assign ( _CharT * __d, size_type __n, _CharT __c )
      {
 if ( __n == 1 )
   traits_type :: assign ( * __d, __c );
 else
   traits_type :: assign ( __d, __n, __c );
      }



      template < class _Iterator >
        static void
        _S_copy_chars ( _CharT * __p, _Iterator __k1, _Iterator __k2 )
        {
   for (; __k1 != __k2; ++ __k1, ++ __p )
     traits_type :: assign ( * __p, * __k1 );
 }

      static void
      _S_copy_chars ( _CharT * __p, iterator __k1, iterator __k2 )
      { _S_copy_chars ( __p, __k1 . base ( ), __k2 . base ( ) ); }

      static void
      _S_copy_chars ( _CharT * __p, const_iterator __k1, const_iterator __k2 )
      { _S_copy_chars ( __p, __k1 . base ( ), __k2 . base ( ) ); }

      static void
      _S_copy_chars ( _CharT * __p, _CharT * __k1, _CharT * __k2 )
      { _M_copy ( __p, __k1, __k2 - __k1 ); }

      static void
      _S_copy_chars ( _CharT * __p, const _CharT * __k1, const _CharT * __k2 )
      { _M_copy ( __p, __k1, __k2 - __k1 ); }

      static int
      _S_compare ( size_type __n1, size_type __n2 )
      {
 const difference_type __d = difference_type ( __n1 - __n2 );

 if ( __d > __gnu_cxx :: __numeric_traits < int > :: __max )
   return __gnu_cxx :: __numeric_traits < int > :: __max;
 else if ( __d < __gnu_cxx :: __numeric_traits < int > :: __min )
   return __gnu_cxx :: __numeric_traits < int > :: __min;
 else
   return int ( __d );
      }

      void
      _M_mutate ( size_type __pos, size_type __len1, size_type __len2 );

      void
      _M_leak_hard ( );

      static _Rep &
      _S_empty_rep ( )
      { return _Rep :: _S_empty_rep ( ); }

    public :







      inline
      basic_string ( );




      explicit
      basic_string ( const _Alloc & __a );






      basic_string ( const basic_string & __str );






      basic_string ( const basic_string & __str, size_type __pos,
     size_type __n = npos );







      basic_string ( const basic_string & __str, size_type __pos,
     size_type __n, const _Alloc & __a );

      basic_string ( const _CharT * __s, size_type __n,
     const _Alloc & __a = _Alloc ( ) );





      basic_string ( const _CharT * __s, const _Alloc & __a = _Alloc ( ) );






      basic_string ( size_type __n, _CharT __c, const _Alloc & __a = _Alloc ( ) );

      template < class _InputIterator >
        basic_string ( _InputIterator __beg, _InputIterator __end,
       const _Alloc & __a = _Alloc ( ) );




      ~ basic_string ( )
      { _M_rep ( ) -> _M_dispose ( this -> get_allocator ( ) ); }





      basic_string &
      operator = ( const basic_string & __str )
      { return this -> assign ( __str ); }





      basic_string &
      operator = ( const _CharT * __s )
      { return this -> assign ( __s ); }

      basic_string &
      operator = ( _CharT __c )
      {
 this -> assign ( 1, __c );
 return * this;
      }

      iterator
      begin ( )
      {
 _M_leak ( );
 return iterator ( _M_data ( ) );
      }





      const_iterator
      begin ( ) const
      { return const_iterator ( _M_data ( ) ); }





      iterator
      end ( )
      {
 _M_leak ( );
 return iterator ( _M_data ( ) + this -> size ( ) );
      }





      const_iterator
      end ( ) const
      { return const_iterator ( _M_data ( ) + this -> size ( ) ); }






      reverse_iterator
      rbegin ( )
      { return reverse_iterator ( this -> end ( ) ); }






      const_reverse_iterator
      rbegin ( ) const
      { return const_reverse_iterator ( this -> end ( ) ); }






      reverse_iterator
      rend ( )
      { return reverse_iterator ( this -> begin ( ) ); }






      const_reverse_iterator
      rend ( ) const
      { return const_reverse_iterator ( this -> begin ( ) ); }

    public :



      size_type
      size ( ) const
      { return _M_rep ( ) -> _M_length; }



      size_type
      length ( ) const
      { return _M_rep ( ) -> _M_length; }


      size_type
      max_size ( ) const
      { return _Rep :: _S_max_size; }

      void
      resize ( size_type __n, _CharT __c );

      void
      resize ( size_type __n )
      { this -> resize ( __n, _CharT ( ) ); }





      size_type
      capacity ( ) const
      { return _M_rep ( ) -> _M_capacity; }

      void
      reserve ( size_type __res_arg = 0 );




      void
      clear ( )
      { _M_mutate ( 0, this -> size ( ), 0 ); }




      bool
      empty ( ) const
      { return this -> size ( ) == 0; }

      const_reference
      operator [ ] ( size_type __pos ) const
      {
 ;
 return _M_data ( ) [ __pos ];
      }

      reference
      operator [ ] ( size_type __pos )
      {

 ;

 ;
 _M_leak ( );
 return _M_data ( ) [ __pos ];
      }

      const_reference
      at ( size_type __n ) const
      {
 if ( __n >= this -> size ( ) )
   __throw_out_of_range ( ( "basic_string::at" ) );
 return _M_data ( ) [ __n ];
      }

      reference
      at ( size_type __n )
      {
 if ( __n >= size ( ) )
   __throw_out_of_range ( ( "basic_string::at" ) );
 _M_leak ( );
 return _M_data ( ) [ __n ];
      }







      basic_string &
      operator += ( const basic_string & __str )
      { return this -> append ( __str ); }






      basic_string &
      operator += ( const _CharT * __s )
      { return this -> append ( __s ); }






      basic_string &
      operator += ( _CharT __c )
      {
 this -> push_back ( __c );
 return * this;
      }

      basic_string &
      append ( const basic_string & __str );

      basic_string &
      append ( const basic_string & __str, size_type __pos, size_type __n );







      basic_string &
      append ( const _CharT * __s, size_type __n );






      basic_string &
      append ( const _CharT * __s )
      {
 ;
 return this -> append ( __s, traits_type :: length ( __s ) );
      }

      basic_string &
      append ( size_type __n, _CharT __c );

      template < class _InputIterator >
        basic_string &
        append ( _InputIterator __first, _InputIterator __last )
        { return this -> replace ( _M_iend ( ), _M_iend ( ), __first, __last ); }





      void
      push_back ( _CharT __c )
      {
 const size_type __len = 1 + this -> size ( );
 if ( __len > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
   this -> reserve ( __len );
 traits_type :: assign ( _M_data ( ) [ this -> size ( ) ], __c );
 _M_rep ( ) -> _M_set_length_and_sharable ( __len );
      }






      basic_string &
      assign ( const basic_string & __str );

      basic_string &
      assign ( const basic_string & __str, size_type __pos, size_type __n )
      { return this -> assign ( __str . _M_data ( )
       + __str . _M_check ( __pos, "basic_string::assign" ),
       __str . _M_limit ( __pos, __n ) ); }

      basic_string &
      assign ( const _CharT * __s, size_type __n );

      basic_string &
      assign ( const _CharT * __s )
      {
 ;
 return this -> assign ( __s, traits_type :: length ( __s ) );
      }

      basic_string &
      assign ( size_type __n, _CharT __c )
      { return _M_replace_aux ( size_type ( 0 ), this -> size ( ), __n, __c ); }

      template < class _InputIterator >
        basic_string &
        assign ( _InputIterator __first, _InputIterator __last )
        { return this -> replace ( _M_ibegin ( ), _M_iend ( ), __first, __last ); }

      void
      insert ( iterator __p, size_type __n, _CharT __c )
      { this -> replace ( __p, __p, __n, __c ); }

      template < class _InputIterator >
        void
        insert ( iterator __p, _InputIterator __beg, _InputIterator __end )
        { this -> replace ( __p, __p, __beg, __end ); }

      basic_string &
      insert ( size_type __pos1, const basic_string & __str )
      { return this -> insert ( __pos1, __str, size_type ( 0 ), __str . size ( ) ); }

      basic_string &
      insert ( size_type __pos1, const basic_string & __str,
      size_type __pos2, size_type __n )
      { return this -> insert ( __pos1, __str . _M_data ( )
       + __str . _M_check ( __pos2, "basic_string::insert" ),
       __str . _M_limit ( __pos2, __n ) ); }

      basic_string &
      insert ( size_type __pos, const _CharT * __s, size_type __n );

      basic_string &
      insert ( size_type __pos, const _CharT * __s )
      {
 ;
 return this -> insert ( __pos, __s, traits_type :: length ( __s ) );
      }

      basic_string &
      insert ( size_type __pos, size_type __n, _CharT __c )
      { return _M_replace_aux ( _M_check ( __pos, "basic_string::insert" ),
         size_type ( 0 ), __n, __c ); }

      iterator
      insert ( iterator __p, _CharT __c )
      {
 ;
 const size_type __pos = __p - _M_ibegin ( );
 _M_replace_aux ( __pos, size_type ( 0 ), size_type ( 1 ), __c );
 _M_rep ( ) -> _M_set_leaked ( );
 return iterator ( _M_data ( ) + __pos );
      }

      basic_string &
      erase ( size_type __pos = 0, size_type __n = npos )
      {
 _M_mutate ( _M_check ( __pos, "basic_string::erase" ),
    _M_limit ( __pos, __n ), size_type ( 0 ) );
 return * this;
      }

      iterator
      erase ( iterator __position )
      {

                               ;
 const size_type __pos = __position - _M_ibegin ( );
 _M_mutate ( __pos, size_type ( 1 ), size_type ( 0 ) );
 _M_rep ( ) -> _M_set_leaked ( );
 return iterator ( _M_data ( ) + __pos );
      }

      iterator
      erase ( iterator __first, iterator __last );

      basic_string &
      replace ( size_type __pos, size_type __n, const basic_string & __str )
      { return this -> replace ( __pos, __n, __str . _M_data ( ), __str . size ( ) ); }

      basic_string &
      replace ( size_type __pos1, size_type __n1, const basic_string & __str,
       size_type __pos2, size_type __n2 )
      { return this -> replace ( __pos1, __n1, __str . _M_data ( )
        + __str . _M_check ( __pos2, "basic_string::replace" ),
        __str . _M_limit ( __pos2, __n2 ) ); }

      basic_string &
      replace ( size_type __pos, size_type __n1, const _CharT * __s,
       size_type __n2 );

      basic_string &
      replace ( size_type __pos, size_type __n1, const _CharT * __s )
      {
 ;
 return this -> replace ( __pos, __n1, __s, traits_type :: length ( __s ) );
      }

      basic_string &
      replace ( size_type __pos, size_type __n1, size_type __n2, _CharT __c )
      { return _M_replace_aux ( _M_check ( __pos, "basic_string::replace" ),
         _M_limit ( __pos, __n1 ), __n2, __c ); }

      basic_string &
      replace ( iterator __i1, iterator __i2, const basic_string & __str )
      { return this -> replace ( __i1, __i2, __str . _M_data ( ), __str . size ( ) ); }

      basic_string &
      replace ( iterator __i1, iterator __i2, const _CharT * __s, size_type __n )
      {

                          ;
 return this -> replace ( __i1 - _M_ibegin ( ), __i2 - __i1, __s, __n );
      }

      basic_string &
      replace ( iterator __i1, iterator __i2, const _CharT * __s )
      {
 ;
 return this -> replace ( __i1, __i2, __s, traits_type :: length ( __s ) );
      }

      basic_string &
      replace ( iterator __i1, iterator __i2, size_type __n, _CharT __c )
      {

                          ;
 return _M_replace_aux ( __i1 - _M_ibegin ( ), __i2 - __i1, __n, __c );
      }

      template < class _InputIterator >
        basic_string &
        replace ( iterator __i1, iterator __i2,
  _InputIterator __k1, _InputIterator __k2 )
        {

                            ;
   ;
   typedef typename std :: __is_integer < _InputIterator > :: __type _Integral;
   return _M_replace_dispatch ( __i1, __i2, __k1, __k2, _Integral ( ) );
 }



      basic_string &
      replace ( iterator __i1, iterator __i2, _CharT * __k1, _CharT * __k2 )
      {

                          ;
 ;
 return this -> replace ( __i1 - _M_ibegin ( ), __i2 - __i1,
        __k1, __k2 - __k1 );
      }

      basic_string &
      replace ( iterator __i1, iterator __i2,
       const _CharT * __k1, const _CharT * __k2 )
      {

                          ;
 ;
 return this -> replace ( __i1 - _M_ibegin ( ), __i2 - __i1,
        __k1, __k2 - __k1 );
      }

      basic_string &
      replace ( iterator __i1, iterator __i2, iterator __k1, iterator __k2 )
      {

                          ;
 ;
 return this -> replace ( __i1 - _M_ibegin ( ), __i2 - __i1,
        __k1 . base ( ), __k2 - __k1 );
      }

      basic_string &
      replace ( iterator __i1, iterator __i2,
       const_iterator __k1, const_iterator __k2 )
      {

                          ;
 ;
 return this -> replace ( __i1 - _M_ibegin ( ), __i2 - __i1,
        __k1 . base ( ), __k2 - __k1 );
      }

    private :
      template < class _Integer >
 basic_string &
 _M_replace_dispatch ( iterator __i1, iterator __i2, _Integer __n,
       _Integer __val, __true_type )
        { return _M_replace_aux ( __i1 - _M_ibegin ( ), __i2 - __i1, __n, __val ); }

      template < class _InputIterator >
 basic_string &
 _M_replace_dispatch ( iterator __i1, iterator __i2, _InputIterator __k1,
       _InputIterator __k2, __false_type );

      basic_string &
      _M_replace_aux ( size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c );

      basic_string &
      _M_replace_safe ( size_type __pos1, size_type __n1, const _CharT * __s,
        size_type __n2 );



      template < class _InIterator >
        static _CharT *
        _S_construct_aux ( _InIterator __beg, _InIterator __end,
    const _Alloc & __a, __false_type )
 {
          typedef typename iterator_traits < _InIterator > :: iterator_category _Tag;
          return _S_construct ( __beg, __end, __a, _Tag ( ) );
 }



      template < class _Integer >
        static _CharT *
        _S_construct_aux ( _Integer __beg, _Integer __end,
    const _Alloc & __a, __true_type )
        { return _S_construct ( static_cast < size_type > ( __beg ), __end, __a ); }

      template < class _InIterator >
        static _CharT *
        _S_construct ( _InIterator __beg, _InIterator __end, const _Alloc & __a )
 {
   typedef typename std :: __is_integer < _InIterator > :: __type _Integral;
   return _S_construct_aux ( __beg, __end, __a, _Integral ( ) );
        }


      template < class _InIterator >
        static _CharT *
         _S_construct ( _InIterator __beg, _InIterator __end, const _Alloc & __a,
        input_iterator_tag );



      template < class _FwdIterator >
        static _CharT *
        _S_construct ( _FwdIterator __beg, _FwdIterator __end, const _Alloc & __a,
       forward_iterator_tag );

      static _CharT *
      _S_construct ( size_type __req, _CharT __c, const _Alloc & __a );

    public :

      size_type
      copy ( _CharT * __s, size_type __n, size_type __pos = 0 ) const;

      void
      swap ( basic_string & __s );

      const _CharT *
      c_str ( ) const
      { return _M_data ( ); }







      const _CharT *
      data ( ) const
      { return _M_data ( ); }




      allocator_type
      get_allocator ( ) const
      { return _M_dataplus; }

      size_type
      find ( const _CharT * __s, size_type __pos, size_type __n ) const;

      size_type
      find ( const basic_string & __str, size_type __pos = 0 ) const
      { return this -> find ( __str . data ( ), __pos, __str . size ( ) ); }

      size_type
      find ( const _CharT * __s, size_type __pos = 0 ) const
      {
 ;
 return this -> find ( __s, __pos, traits_type :: length ( __s ) );
      }

      size_type
      find ( _CharT __c, size_type __pos = 0 ) const;

      size_type
      rfind ( const basic_string & __str, size_type __pos = npos ) const
      { return this -> rfind ( __str . data ( ), __pos, __str . size ( ) ); }

      size_type
      rfind ( const _CharT * __s, size_type __pos, size_type __n ) const;

      size_type
      rfind ( const _CharT * __s, size_type __pos = npos ) const
      {
 ;
 return this -> rfind ( __s, __pos, traits_type :: length ( __s ) );
      }

      size_type
      rfind ( _CharT __c, size_type __pos = npos ) const;

      size_type
      find_first_of ( const basic_string & __str, size_type __pos = 0 ) const
      { return this -> find_first_of ( __str . data ( ), __pos, __str . size ( ) ); }

      size_type
      find_first_of ( const _CharT * __s, size_type __pos, size_type __n ) const;

      size_type
      find_first_of ( const _CharT * __s, size_type __pos = 0 ) const
      {
 ;
 return this -> find_first_of ( __s, __pos, traits_type :: length ( __s ) );
      }

      size_type
      find_first_of ( _CharT __c, size_type __pos = 0 ) const
      { return this -> find ( __c, __pos ); }

      size_type
      find_last_of ( const basic_string & __str, size_type __pos = npos ) const
      { return this -> find_last_of ( __str . data ( ), __pos, __str . size ( ) ); }

      size_type
      find_last_of ( const _CharT * __s, size_type __pos, size_type __n ) const;

      size_type
      find_last_of ( const _CharT * __s, size_type __pos = npos ) const
      {
 ;
 return this -> find_last_of ( __s, __pos, traits_type :: length ( __s ) );
      }

      size_type
      find_last_of ( _CharT __c, size_type __pos = npos ) const
      { return this -> rfind ( __c, __pos ); }

      size_type
      find_first_not_of ( const basic_string & __str, size_type __pos = 0 ) const
      { return this -> find_first_not_of ( __str . data ( ), __pos, __str . size ( ) ); }

      size_type
      find_first_not_of ( const _CharT * __s, size_type __pos,
   size_type __n ) const;

      size_type
      find_first_not_of ( const _CharT * __s, size_type __pos = 0 ) const
      {
 ;
 return this -> find_first_not_of ( __s, __pos, traits_type :: length ( __s ) );
      }

      size_type
      find_first_not_of ( _CharT __c, size_type __pos = 0 ) const;

      size_type
      find_last_not_of ( const basic_string & __str, size_type __pos = npos ) const
      { return this -> find_last_not_of ( __str . data ( ), __pos, __str . size ( ) ); }

      size_type
      find_last_not_of ( const _CharT * __s, size_type __pos,
         size_type __n ) const;

      size_type
      find_last_not_of ( const _CharT * __s, size_type __pos = npos ) const
      {
 ;
 return this -> find_last_not_of ( __s, __pos, traits_type :: length ( __s ) );
      }

      size_type
      find_last_not_of ( _CharT __c, size_type __pos = npos ) const;

      basic_string
      substr ( size_type __pos = 0, size_type __n = npos ) const
      { return basic_string ( * this,
       _M_check ( __pos, "basic_string::substr" ), __n ); }

      int
      compare ( const basic_string & __str ) const
      {
 const size_type __size = this -> size ( );
 const size_type __osize = __str . size ( );
 const size_type __len = std :: min ( __size, __osize );

 int __r = traits_type :: compare ( _M_data ( ), __str . data ( ), __len );
 if ( ! __r )
   __r = _S_compare ( __size, __osize );
 return __r;
      }

      int
      compare ( size_type __pos, size_type __n, const basic_string & __str ) const;

      int
      compare ( size_type __pos1, size_type __n1, const basic_string & __str,
       size_type __pos2, size_type __n2 ) const;

      int
      compare ( const _CharT * __s ) const;

      int
      compare ( size_type __pos, size_type __n1, const _CharT * __s ) const;

      int
      compare ( size_type __pos, size_type __n1, const _CharT * __s,
       size_type __n2 ) const;
  };
# 2143 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( )

    : _M_dataplus ( _S_empty_rep ( ) . _M_refdata ( ), _Alloc ( ) ) { }
# 2159 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc >
    operator + ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    {
      basic_string < _CharT, _Traits, _Alloc > __str ( __lhs );
      __str . append ( __rhs );
      return __str;
    }
# 2175
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc >
    operator + ( const _CharT * __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs );
# 2186
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc >
    operator + ( _CharT __lhs, const basic_string < _CharT, _Traits, _Alloc > & __rhs );
# 2196
template < typename _CharT, typename _Traits, typename _Alloc >
    inline basic_string < _CharT, _Traits, _Alloc >
    operator + ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
      const _CharT * __rhs )
    {
      basic_string < _CharT, _Traits, _Alloc > __str ( __lhs );
      __str . append ( __rhs );
      return __str;
    }
# 2212
template < typename _CharT, typename _Traits, typename _Alloc >
    inline basic_string < _CharT, _Traits, _Alloc >
    operator + ( const basic_string < _CharT, _Traits, _Alloc > & __lhs, _CharT __rhs )
    {
      typedef basic_string < _CharT, _Traits, _Alloc > __string_type;
      typedef typename __string_type :: size_type __size_type;
      __string_type __str ( __lhs );
      __str . append ( __size_type ( 1 ), __rhs );
      return __str;
    }
# 2230 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator == ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __lhs . compare ( __rhs ) == 0; }
# 2236
template < typename _CharT >
    inline
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value, bool > :: __type
    operator == ( const basic_string < _CharT > & __lhs,
        const basic_string < _CharT > & __rhs )
    { return ( __lhs . size ( ) == __rhs . size ( )
       && ! std :: char_traits < _CharT > :: compare ( __lhs . data ( ), __rhs . data ( ),
          __lhs . size ( ) ) ); }
# 2251
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator == ( const _CharT * __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __rhs . compare ( __lhs ) == 0; }
# 2263
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator == ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const _CharT * __rhs )
    { return __lhs . compare ( __rhs ) == 0; }
# 2276 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator != ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return ! ( __lhs == __rhs ); }
# 2288
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator != ( const _CharT * __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return ! ( __lhs == __rhs ); }
# 2300
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator != ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const _CharT * __rhs )
    { return ! ( __lhs == __rhs ); }
# 2313 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator < ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __lhs . compare ( __rhs ) < 0; }
# 2325
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator < ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
       const _CharT * __rhs )
    { return __lhs . compare ( __rhs ) < 0; }
# 2337
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator < ( const _CharT * __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __rhs . compare ( __lhs ) > 0; }
# 2350 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator > ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __lhs . compare ( __rhs ) > 0; }
# 2362
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator > ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
       const _CharT * __rhs )
    { return __lhs . compare ( __rhs ) > 0; }
# 2374
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator > ( const _CharT * __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __rhs . compare ( __lhs ) < 0; }
# 2387 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator <= ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __lhs . compare ( __rhs ) <= 0; }
# 2399
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator <= ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const _CharT * __rhs )
    { return __lhs . compare ( __rhs ) <= 0; }
# 2411
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator <= ( const _CharT * __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __rhs . compare ( __lhs ) >= 0; }
# 2424 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator >= ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __lhs . compare ( __rhs ) >= 0; }
# 2436
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator >= ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const _CharT * __rhs )
    { return __lhs . compare ( __rhs ) >= 0; }
# 2448
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator >= ( const _CharT * __lhs,
      const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __rhs . compare ( __lhs ) <= 0; }
# 2461 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline void
    swap ( basic_string < _CharT, _Traits, _Alloc > & __lhs,
  basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { __lhs . swap ( __rhs ); }
# 2478 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __is,
        basic_string < _CharT, _Traits, _Alloc > & __str );
# 2485
template<> basic_istream< char>  &operator>>(basic_istream< char>  & , basic_string< char, char_traits< char> , allocator< char> >  & ); 
# 2496 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __os,
        const basic_string < _CharT, _Traits, _Alloc > & __str )
    {


      return __ostream_insert ( __os, __str . data ( ), __str . size ( ) );
    }
# 2519 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_istream < _CharT, _Traits > &
    getline ( basic_istream < _CharT, _Traits > & __is,
     basic_string < _CharT, _Traits, _Alloc > & __str, _CharT __delim );
# 2536 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline basic_istream < _CharT, _Traits > &
    getline ( basic_istream < _CharT, _Traits > & __is,
     basic_string < _CharT, _Traits, _Alloc > & __str )
    { return getline ( __is, __str, __is . widen ( '\n' ) ); }
# 2544
template<> basic_istream< char>  &getline(basic_istream< char>  & , basic_string< char, char_traits< char> , allocator< char> >  & , char ); 
# 2550
template<> basic_istream< wchar_t>  &getline(basic_istream< wchar_t>  & , basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  & , wchar_t ); 
# 2554
}
# 46 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 48
template< class _CharT, class _Traits, class _Alloc> const typename basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 51
basic_string< _CharT, _Traits, _Alloc> ::_Rep::_S_max_size = ((((npos - sizeof(typename ::std::basic_string< _CharT, _Traits, _Alloc> ::_Rep_base)) / sizeof(_CharT)) - 1) / 4); 
# 53
template< class _CharT, class _Traits, class _Alloc> const _CharT 
# 56
basic_string< _CharT, _Traits, _Alloc> ::_Rep::_S_terminal = (_CharT()); 
# 58
template< class _CharT, class _Traits, class _Alloc> const typename basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 60
basic_string< _CharT, _Traits, _Alloc> ::npos; 
# 64
template< class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 66
basic_string< _CharT, _Traits, _Alloc> ::_Rep::_S_empty_rep_storage[(((sizeof(typename ::std::basic_string< _CharT, _Traits, _Alloc> ::_Rep_base) + sizeof(_CharT)) + sizeof(typename ::std::basic_string< _CharT, _Traits, _Alloc> ::size_type)) - (1)) / sizeof(typename ::std::basic_string< _CharT, _Traits, _Alloc> ::size_type)]; 
# 74
template < typename _CharT, typename _Traits, typename _Alloc >
    template < typename _InIterator >
      _CharT *
      basic_string < _CharT, _Traits, _Alloc > ::
      _S_construct ( _InIterator __beg, _InIterator __end, const _Alloc & __a,
     input_iterator_tag )
      {

 if ( __beg == __end && __a == _Alloc ( ) )
   return _S_empty_rep ( ) . _M_refdata ( );


 _CharT __buf [ 128 ];
 size_type __len = 0;
 while ( __beg != __end && __len < sizeof ( __buf ) / sizeof ( _CharT ) )
   {
     __buf [ __len ++ ] = * __beg;
     ++ __beg;
   }
 _Rep * __r = _Rep :: _S_create ( __len, size_type ( 0 ), __a );
 _M_copy ( __r -> _M_refdata ( ), __buf, __len );
 try
   {
     while ( __beg != __end )
       {
  if ( __len == __r -> _M_capacity )
    {

      _Rep * __another = _Rep :: _S_create ( __len + 1, __len, __a );
      _M_copy ( __another -> _M_refdata ( ), __r -> _M_refdata ( ), __len );
      __r -> _M_destroy ( __a );
      __r = __another;
    }
  __r -> _M_refdata ( ) [ __len ++ ] = * __beg;
  ++ __beg;
       }
   }
 catch ( ... )
   {
     __r -> _M_destroy ( __a );
     throw;
   }
 __r -> _M_set_length_and_sharable ( __len );
 return __r -> _M_refdata ( );
      }
# 120
template < typename _CharT, typename _Traits, typename _Alloc >
    template < typename _InIterator >
      _CharT *
      basic_string < _CharT, _Traits, _Alloc > ::
      _S_construct ( _InIterator __beg, _InIterator __end, const _Alloc & __a,
     forward_iterator_tag )
      {

 if ( __beg == __end && __a == _Alloc ( ) )
   return _S_empty_rep ( ) . _M_refdata ( );


 if ( __builtin_expect ( __gnu_cxx :: __is_null_pointer ( __beg )
        && __beg != __end, 0 ) )
   __throw_logic_error ( ( "basic_string::_S_construct NULL not valid" ) );

 const size_type __dnew = static_cast < size_type > ( std :: distance ( __beg,
              __end ) );

 _Rep * __r = _Rep :: _S_create ( __dnew, size_type ( 0 ), __a );
 try
   { _S_copy_chars ( __r -> _M_refdata ( ), __beg, __end ); }
 catch ( ... )
   {
     __r -> _M_destroy ( __a );
     throw;
   }
 __r -> _M_set_length_and_sharable ( __dnew );
 return __r -> _M_refdata ( );
      }
# 151
template < typename _CharT, typename _Traits, typename _Alloc >
    _CharT *
    basic_string < _CharT, _Traits, _Alloc > ::
    _S_construct ( size_type __n, _CharT __c, const _Alloc & __a )
    {

      if ( __n == 0 && __a == _Alloc ( ) )
 return _S_empty_rep ( ) . _M_refdata ( );


      _Rep * __r = _Rep :: _S_create ( __n, size_type ( 0 ), __a );
      if ( __n )
 _M_assign ( __r -> _M_refdata ( ), __n, __c );

      __r -> _M_set_length_and_sharable ( __n );
      return __r -> _M_refdata ( );
    }
# 169
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const basic_string & __str )
    : _M_dataplus ( __str . _M_rep ( ) -> _M_grab ( _Alloc ( __str . get_allocator ( ) ),
       __str . get_allocator ( ) ),
    __str . get_allocator ( ) )
    { }
# 177
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const _Alloc & __a )
    : _M_dataplus ( _S_construct ( size_type ( ), _CharT ( ), __a ), __a )
    { }
# 183
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const basic_string & __str, size_type __pos, size_type __n )
    : _M_dataplus ( _S_construct ( __str . _M_data ( )
          + __str . _M_check ( __pos,
      "basic_string::basic_string" ),
          __str . _M_data ( ) + __str . _M_limit ( __pos, __n )
          + __pos, _Alloc ( ) ), _Alloc ( ) )
    { }
# 193
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const basic_string & __str, size_type __pos,
   size_type __n, const _Alloc & __a )
    : _M_dataplus ( _S_construct ( __str . _M_data ( )
          + __str . _M_check ( __pos,
      "basic_string::basic_string" ),
          __str . _M_data ( ) + __str . _M_limit ( __pos, __n )
          + __pos, __a ), __a )
    { }
# 205
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const _CharT * __s, size_type __n, const _Alloc & __a )
    : _M_dataplus ( _S_construct ( __s, __s + __n, __a ), __a )
    { }
# 212
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const _CharT * __s, const _Alloc & __a )
    : _M_dataplus ( _S_construct ( __s, __s ? __s + traits_type :: length ( __s ) :
          __s + npos, __a ), __a )
    { }
# 219
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( size_type __n, _CharT __c, const _Alloc & __a )
    : _M_dataplus ( _S_construct ( __n, __c, __a ), __a )
    { }
# 226
template < typename _CharT, typename _Traits, typename _Alloc >
    template < typename _InputIterator >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( _InputIterator __beg, _InputIterator __end, const _Alloc & __a )
    : _M_dataplus ( _S_construct ( __beg, __end, __a ), __a )
    { }
# 241 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    assign ( const basic_string & __str )
    {
      if ( _M_rep ( ) != __str . _M_rep ( ) )
 {

   const allocator_type __a = this -> get_allocator ( );
   _CharT * __tmp = __str . _M_rep ( ) -> _M_grab ( __a, __str . get_allocator ( ) );
   _M_rep ( ) -> _M_dispose ( __a );
   _M_data ( __tmp );
 }
      return * this;
    }
# 257
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    assign ( const _CharT * __s, size_type __n )
    {
      ;
      _M_check_length ( this -> size ( ), __n, "basic_string::assign" );
      if ( _M_disjunct ( __s ) || _M_rep ( ) -> _M_is_shared ( ) )
 return _M_replace_safe ( size_type ( 0 ), this -> size ( ), __s, __n );
      else
 {

   const size_type __pos = __s - _M_data ( );
   if ( __pos >= __n )
     _M_copy ( _M_data ( ), __s, __n );
   else if ( __pos )
     _M_move ( _M_data ( ), __s, __n );
   _M_rep ( ) -> _M_set_length_and_sharable ( __n );
   return * this;
 }
     }
# 279
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    append ( size_type __n, _CharT __c )
    {
      if ( __n )
 {
   _M_check_length ( size_type ( 0 ), __n, "basic_string::append" );
   const size_type __len = __n + this -> size ( );
   if ( __len > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
     this -> reserve ( __len );
   _M_assign ( _M_data ( ) + this -> size ( ), __n, __c );
   _M_rep ( ) -> _M_set_length_and_sharable ( __len );
 }
      return * this;
    }
# 296
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    append ( const _CharT * __s, size_type __n )
    {
      ;
      if ( __n )
 {
   _M_check_length ( size_type ( 0 ), __n, "basic_string::append" );
   const size_type __len = __n + this -> size ( );
   if ( __len > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
     {
       if ( _M_disjunct ( __s ) )
  this -> reserve ( __len );
       else
  {
    const size_type __off = __s - _M_data ( );
    this -> reserve ( __len );
    __s = _M_data ( ) + __off;
  }
     }
   _M_copy ( _M_data ( ) + this -> size ( ), __s, __n );
   _M_rep ( ) -> _M_set_length_and_sharable ( __len );
 }
      return * this;
    }
# 323
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    append ( const basic_string & __str )
    {
      const size_type __size = __str . size ( );
      if ( __size )
 {
   const size_type __len = __size + this -> size ( );
   if ( __len > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
     this -> reserve ( __len );
   _M_copy ( _M_data ( ) + this -> size ( ), __str . _M_data ( ), __size );
   _M_rep ( ) -> _M_set_length_and_sharable ( __len );
 }
      return * this;
    }
# 340
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    append ( const basic_string & __str, size_type __pos, size_type __n )
    {
      __str . _M_check ( __pos, "basic_string::append" );
      __n = __str . _M_limit ( __pos, __n );
      if ( __n )
 {
   const size_type __len = __n + this -> size ( );
   if ( __len > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
     this -> reserve ( __len );
   _M_copy ( _M_data ( ) + this -> size ( ), __str . _M_data ( ) + __pos, __n );
   _M_rep ( ) -> _M_set_length_and_sharable ( __len );
 }
      return * this;
    }
# 358
template < typename _CharT, typename _Traits, typename _Alloc >
     basic_string < _CharT, _Traits, _Alloc > &
     basic_string < _CharT, _Traits, _Alloc > ::
     insert ( size_type __pos, const _CharT * __s, size_type __n )
     {
       ;
       _M_check ( __pos, "basic_string::insert" );
       _M_check_length ( size_type ( 0 ), __n, "basic_string::insert" );
       if ( _M_disjunct ( __s ) || _M_rep ( ) -> _M_is_shared ( ) )
         return _M_replace_safe ( __pos, size_type ( 0 ), __s, __n );
       else
         {

           const size_type __off = __s - _M_data ( );
           _M_mutate ( __pos, 0, __n );
           __s = _M_data ( ) + __off;
           _CharT * __p = _M_data ( ) + __pos;
           if ( __s + __n <= __p )
             _M_copy ( __p, __s, __n );
           else if ( __s >= __p )
             _M_copy ( __p, __s + __n, __n );
           else
             {
        const size_type __nleft = __p - __s;
               _M_copy ( __p, __s, __nleft );
               _M_copy ( __p + __nleft, __p + __n, __n - __nleft );
             }
           return * this;
         }
     }
# 389
template < typename _CharT, typename _Traits, typename _Alloc >
     typename basic_string < _CharT, _Traits, _Alloc > :: iterator
     basic_string < _CharT, _Traits, _Alloc > ::
     erase ( iterator __first, iterator __last )
     {

                           ;




       const size_type __size = __last - __first;
       if ( __size )
  {
    const size_type __pos = __first - _M_ibegin ( );
    _M_mutate ( __pos, __size, size_type ( 0 ) );
    _M_rep ( ) -> _M_set_leaked ( );
    return iterator ( _M_data ( ) + __pos );
  }
       else
  return __first;
     }
# 412
template < typename _CharT, typename _Traits, typename _Alloc >
     basic_string < _CharT, _Traits, _Alloc > &
     basic_string < _CharT, _Traits, _Alloc > ::
     replace ( size_type __pos, size_type __n1, const _CharT * __s,
      size_type __n2 )
     {
       ;
       _M_check ( __pos, "basic_string::replace" );
       __n1 = _M_limit ( __pos, __n1 );
       _M_check_length ( __n1, __n2, "basic_string::replace" );
       bool __left;
       if ( _M_disjunct ( __s ) || _M_rep ( ) -> _M_is_shared ( ) )
         return _M_replace_safe ( __pos, __n1, __s, __n2 );
       else if ( ( __left = __s + __n2 <= _M_data ( ) + __pos )
  || _M_data ( ) + __pos + __n1 <= __s )
  {

    size_type __off = __s - _M_data ( );
    __left ? __off : ( __off += __n2 - __n1 );
    _M_mutate ( __pos, __n1, __n2 );
    _M_copy ( _M_data ( ) + __pos, _M_data ( ) + __off, __n2 );
    return * this;
  }
       else
  {

    const basic_string __tmp ( __s, __n2 );
    return _M_replace_safe ( __pos, __n1, __tmp . _M_data ( ), __n2 );
  }
     }
# 443
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > :: _Rep ::
    _M_destroy ( const _Alloc & __a ) throw ( )
    {
      const size_type __size = sizeof ( _Rep_base ) +
                        ( this -> _M_capacity + 1 ) * sizeof ( _CharT );
      _Raw_bytes_alloc ( __a ) . deallocate ( reinterpret_cast < char * > ( this ), __size );
    }
# 453
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > ::
    _M_leak_hard ( )
    {

      if ( _M_rep ( ) == & _S_empty_rep ( ) )
 return;

      if ( _M_rep ( ) -> _M_is_shared ( ) )
 _M_mutate ( 0, 0, 0 );
      _M_rep ( ) -> _M_set_leaked ( );
    }
# 467
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > ::
    _M_mutate ( size_type __pos, size_type __len1, size_type __len2 )
    {
      const size_type __old_size = this -> size ( );
      const size_type __new_size = __old_size + __len2 - __len1;
      const size_type __how_much = __old_size - __pos - __len1;

      if ( __new_size > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
 {

   const allocator_type __a = get_allocator ( );
   _Rep * __r = _Rep :: _S_create ( __new_size, this -> capacity ( ), __a );

   if ( __pos )
     _M_copy ( __r -> _M_refdata ( ), _M_data ( ), __pos );
   if ( __how_much )
     _M_copy ( __r -> _M_refdata ( ) + __pos + __len2,
      _M_data ( ) + __pos + __len1, __how_much );

   _M_rep ( ) -> _M_dispose ( __a );
   _M_data ( __r -> _M_refdata ( ) );
 }
      else if ( __how_much && __len1 != __len2 )
 {

   _M_move ( _M_data ( ) + __pos + __len2,
    _M_data ( ) + __pos + __len1, __how_much );
 }
      _M_rep ( ) -> _M_set_length_and_sharable ( __new_size );
    }
# 500
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > ::
    reserve ( size_type __res )
    {
      if ( __res != this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
        {

   if ( __res < this -> size ( ) )
     __res = this -> size ( );
   const allocator_type __a = get_allocator ( );
   _CharT * __tmp = _M_rep ( ) -> _M_clone ( __a, __res - this -> size ( ) );
   _M_rep ( ) -> _M_dispose ( __a );
   _M_data ( __tmp );
        }
    }
# 517
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > ::
    swap ( basic_string & __s )
    {
      if ( _M_rep ( ) -> _M_is_leaked ( ) )
 _M_rep ( ) -> _M_set_sharable ( );
      if ( __s . _M_rep ( ) -> _M_is_leaked ( ) )
 __s . _M_rep ( ) -> _M_set_sharable ( );
      if ( this -> get_allocator ( ) == __s . get_allocator ( ) )
 {
   _CharT * __tmp = _M_data ( );
   _M_data ( __s . _M_data ( ) );
   __s . _M_data ( __tmp );
 }

      else
 {
   const basic_string __tmp1 ( _M_ibegin ( ), _M_iend ( ),
        __s . get_allocator ( ) );
   const basic_string __tmp2 ( __s . _M_ibegin ( ), __s . _M_iend ( ),
        this -> get_allocator ( ) );
   * this = __tmp2;
   __s = __tmp1;
 }
    }
# 544
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: _Rep *
    basic_string < _CharT, _Traits, _Alloc > :: _Rep ::
    _S_create ( size_type __capacity, size_type __old_capacity,
       const _Alloc & __alloc )
    {


      if ( __capacity > _S_max_size )
 __throw_length_error ( ( "basic_string::_S_create" ) );

      const size_type __pagesize = 4096;
      const size_type __malloc_header_size = 4 * sizeof ( void * );







      if ( __capacity > __old_capacity && __capacity < 2 * __old_capacity )
 __capacity = 2 * __old_capacity;




      size_type __size = ( __capacity + 1 ) * sizeof ( _CharT ) + sizeof ( _Rep );

      const size_type __adj_size = __size + __malloc_header_size;
      if ( __adj_size > __pagesize && __capacity > __old_capacity )
 {
   const size_type __extra = __pagesize - __adj_size % __pagesize;
   __capacity += __extra / sizeof ( _CharT );

   if ( __capacity > _S_max_size )
     __capacity = _S_max_size;
   __size = ( __capacity + 1 ) * sizeof ( _CharT ) + sizeof ( _Rep );
 }



      void * __place = _Raw_bytes_alloc ( __alloc ) . allocate ( __size );
      _Rep * __p = new ( __place ) _Rep;
      __p -> _M_capacity = __capacity;







      __p -> _M_set_sharable ( );
      return __p;
    }
# 622 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    _CharT *
    basic_string < _CharT, _Traits, _Alloc > :: _Rep ::
    _M_clone ( const _Alloc & __alloc, size_type __res )
    {

      const size_type __requested_cap = this -> _M_length + __res;
      _Rep * __r = _Rep :: _S_create ( __requested_cap, this -> _M_capacity,
      __alloc );
      if ( this -> _M_length )
 _M_copy ( __r -> _M_refdata ( ), _M_refdata ( ), this -> _M_length );

      __r -> _M_set_length_and_sharable ( this -> _M_length );
      return __r -> _M_refdata ( );
    }
# 638
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > ::
    resize ( size_type __n, _CharT __c )
    {
      const size_type __size = this -> size ( );
      _M_check_length ( __size, __n, "basic_string::resize" );
      if ( __size < __n )
 this -> append ( __n - __size, __c );
      else if ( __n < __size )
 this -> erase ( __n );

    }
# 652
template < typename _CharT, typename _Traits, typename _Alloc >
    template < typename _InputIterator >
      basic_string < _CharT, _Traits, _Alloc > &
      basic_string < _CharT, _Traits, _Alloc > ::
      _M_replace_dispatch ( iterator __i1, iterator __i2, _InputIterator __k1,
     _InputIterator __k2, __false_type )
      {
 const basic_string __s ( __k1, __k2 );
 const size_type __n1 = __i2 - __i1;
 _M_check_length ( __n1, __s . size ( ), "basic_string::_M_replace_dispatch" );
 return _M_replace_safe ( __i1 - _M_ibegin ( ), __n1, __s . _M_data ( ),
          __s . size ( ) );
      }
# 666
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    _M_replace_aux ( size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c )
    {
      _M_check_length ( __n1, __n2, "basic_string::_M_replace_aux" );
      _M_mutate ( __pos1, __n1, __n2 );
      if ( __n2 )
 _M_assign ( _M_data ( ) + __pos1, __n2, __c );
      return * this;
    }
# 679
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    _M_replace_safe ( size_type __pos1, size_type __n1, const _CharT * __s,
      size_type __n2 )
    {
      _M_mutate ( __pos1, __n1, __n2 );
      if ( __n2 )
 _M_copy ( _M_data ( ) + __pos1, __s, __n2 );
      return * this;
    }
# 691
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc >
    operator + ( const _CharT * __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    {
      ;
      typedef basic_string < _CharT, _Traits, _Alloc > __string_type;
      typedef typename __string_type :: size_type __size_type;
      const __size_type __len = _Traits :: length ( __lhs );
      __string_type __str;
      __str . reserve ( __len + __rhs . size ( ) );
      __str . append ( __lhs, __len );
      __str . append ( __rhs );
      return __str;
    }
# 707
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc >
    operator + ( _CharT __lhs, const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    {
      typedef basic_string < _CharT, _Traits, _Alloc > __string_type;
      typedef typename __string_type :: size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs . size ( );
      __str . reserve ( __len + 1 );
      __str . append ( __size_type ( 1 ), __lhs );
      __str . append ( __rhs );
      return __str;
    }
# 721
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    copy ( _CharT * __s, size_type __n, size_type __pos ) const
    {
      _M_check ( __pos, "basic_string::copy" );
      __n = _M_limit ( __pos, __n );
      ;
      if ( __n )
 _M_copy ( __s, _M_data ( ) + __pos, __n );

      return __n;
    }
# 735
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      const size_type __size = this -> size ( );
      const _CharT * __data = _M_data ( );

      if ( __n == 0 )
 return __pos <= __size ? __pos : npos;

      if ( __n <= __size )
 {
   for (; __pos <= __size - __n; ++ __pos )
     if ( traits_type :: eq ( __data [ __pos ], __s [ 0 ] )
  && traits_type :: compare ( __data + __pos + 1,
     __s + 1, __n - 1 ) == 0 )
       return __pos;
 }
      return npos;
    }
# 758
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find ( _CharT __c, size_type __pos ) const
    {
      size_type __ret = npos;
      const size_type __size = this -> size ( );
      if ( __pos < __size )
 {
   const _CharT * __data = _M_data ( );
   const size_type __n = __size - __pos;
   const _CharT * __p = traits_type :: find ( __data + __pos, __n, __c );
   if ( __p )
     __ret = __p - __data;
 }
      return __ret;
    }
# 776
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    rfind ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      const size_type __size = this -> size ( );
      if ( __n <= __size )
 {
   __pos = std :: min ( size_type ( __size - __n ), __pos );
   const _CharT * __data = _M_data ( );
   do
     {
       if ( traits_type :: compare ( __data + __pos, __s, __n ) == 0 )
  return __pos;
     }
   while ( __pos -- > 0 );
 }
      return npos;
    }
# 797
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    rfind ( _CharT __c, size_type __pos ) const
    {
      size_type __size = this -> size ( );
      if ( __size )
 {
   if ( -- __size > __pos )
     __size = __pos;
   for ( ++ __size; __size -- > 0; )
     if ( traits_type :: eq ( _M_data ( ) [ __size ], __c ) )
       return __size;
 }
      return npos;
    }
# 814
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_first_of ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      for (; __n && __pos < this -> size ( ); ++ __pos )
 {
   const _CharT * __p = traits_type :: find ( __s, __n, _M_data ( ) [ __pos ] );
   if ( __p )
     return __pos;
 }
      return npos;
    }
# 829
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_last_of ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      size_type __size = this -> size ( );
      if ( __size && __n )
 {
   if ( -- __size > __pos )
     __size = __pos;
   do
     {
       if ( traits_type :: find ( __s, __n, _M_data ( ) [ __size ] ) )
  return __size;
     }
   while ( __size -- != 0 );
 }
      return npos;
    }
# 850
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_first_not_of ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      for (; __pos < this -> size ( ); ++ __pos )
 if ( ! traits_type :: find ( __s, __n, _M_data ( ) [ __pos ] ) )
   return __pos;
      return npos;
    }
# 862
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_first_not_of ( _CharT __c, size_type __pos ) const
    {
      for (; __pos < this -> size ( ); ++ __pos )
 if ( ! traits_type :: eq ( _M_data ( ) [ __pos ], __c ) )
   return __pos;
      return npos;
    }
# 873
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_last_not_of ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      size_type __size = this -> size ( );
      if ( __size )
 {
   if ( -- __size > __pos )
     __size = __pos;
   do
     {
       if ( ! traits_type :: find ( __s, __n, _M_data ( ) [ __size ] ) )
  return __size;
     }
   while ( __size -- );
 }
      return npos;
    }
# 894
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_last_not_of ( _CharT __c, size_type __pos ) const
    {
      size_type __size = this -> size ( );
      if ( __size )
 {
   if ( -- __size > __pos )
     __size = __pos;
   do
     {
       if ( ! traits_type :: eq ( _M_data ( ) [ __size ], __c ) )
  return __size;
     }
   while ( __size -- );
 }
      return npos;
    }
# 914
template < typename _CharT, typename _Traits, typename _Alloc >
    int
    basic_string < _CharT, _Traits, _Alloc > ::
    compare ( size_type __pos, size_type __n, const basic_string & __str ) const
    {
      _M_check ( __pos, "basic_string::compare" );
      __n = _M_limit ( __pos, __n );
      const size_type __osize = __str . size ( );
      const size_type __len = std :: min ( __n, __osize );
      int __r = traits_type :: compare ( _M_data ( ) + __pos, __str . data ( ), __len );
      if ( ! __r )
 __r = _S_compare ( __n, __osize );
      return __r;
    }
# 929
template < typename _CharT, typename _Traits, typename _Alloc >
    int
    basic_string < _CharT, _Traits, _Alloc > ::
    compare ( size_type __pos1, size_type __n1, const basic_string & __str,
     size_type __pos2, size_type __n2 ) const
    {
      _M_check ( __pos1, "basic_string::compare" );
      __str . _M_check ( __pos2, "basic_string::compare" );
      __n1 = _M_limit ( __pos1, __n1 );
      __n2 = __str . _M_limit ( __pos2, __n2 );
      const size_type __len = std :: min ( __n1, __n2 );
      int __r = traits_type :: compare ( _M_data ( ) + __pos1,
         __str . data ( ) + __pos2, __len );
      if ( ! __r )
 __r = _S_compare ( __n1, __n2 );
      return __r;
    }
# 947
template < typename _CharT, typename _Traits, typename _Alloc >
    int
    basic_string < _CharT, _Traits, _Alloc > ::
    compare ( const _CharT * __s ) const
    {
      ;
      const size_type __size = this -> size ( );
      const size_type __osize = traits_type :: length ( __s );
      const size_type __len = std :: min ( __size, __osize );
      int __r = traits_type :: compare ( _M_data ( ), __s, __len );
      if ( ! __r )
 __r = _S_compare ( __size, __osize );
      return __r;
    }
# 962
template < typename _CharT, typename _Traits, typename _Alloc >
    int
    basic_string < _CharT, _Traits, _Alloc > ::
    compare ( size_type __pos, size_type __n1, const _CharT * __s ) const
    {
      ;
      _M_check ( __pos, "basic_string::compare" );
      __n1 = _M_limit ( __pos, __n1 );
      const size_type __osize = traits_type :: length ( __s );
      const size_type __len = std :: min ( __n1, __osize );
      int __r = traits_type :: compare ( _M_data ( ) + __pos, __s, __len );
      if ( ! __r )
 __r = _S_compare ( __n1, __osize );
      return __r;
    }
# 978
template < typename _CharT, typename _Traits, typename _Alloc >
    int
    basic_string < _CharT, _Traits, _Alloc > ::
    compare ( size_type __pos, size_type __n1, const _CharT * __s,
     size_type __n2 ) const
    {
      ;
      _M_check ( __pos, "basic_string::compare" );
      __n1 = _M_limit ( __pos, __n1 );
      const size_type __len = std :: min ( __n1, __n2 );
      int __r = traits_type :: compare ( _M_data ( ) + __pos, __s, __len );
      if ( ! __r )
 __r = _S_compare ( __n1, __n2 );
      return __r;
    }
# 995
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __in,
        basic_string < _CharT, _Traits, _Alloc > & __str )
    {
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef basic_string < _CharT, _Traits, _Alloc > __string_type;
      typedef typename __istream_type :: ios_base __ios_base;
      typedef typename __istream_type :: int_type __int_type;
      typedef typename __string_type :: size_type __size_type;
      typedef ctype < _CharT > __ctype_type;
      typedef typename __ctype_type :: ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base :: iostate __err = __ios_base :: goodbit;
      typename __istream_type :: sentry __cerb ( __in, false );
      if ( __cerb )
 {
   try
     {

       __str . erase ( );
       _CharT __buf [ 128 ];
       __size_type __len = 0;
       const streamsize __w = __in . width ( );
       const __size_type __n = __w > 0 ? static_cast < __size_type > ( __w )
                                : __str . max_size ( );
       const __ctype_type & __ct = use_facet < __ctype_type > ( __in . getloc ( ) );
       const __int_type __eof = _Traits :: eof ( );
       __int_type __c = __in . rdbuf ( ) -> sgetc ( );

       while ( __extracted < __n
       && ! _Traits :: eq_int_type ( __c, __eof )
       && ! __ct . is ( __ctype_base :: space,
     _Traits :: to_char_type ( __c ) ) )
  {
    if ( __len == sizeof ( __buf ) / sizeof ( _CharT ) )
      {
        __str . append ( __buf, sizeof ( __buf ) / sizeof ( _CharT ) );
        __len = 0;
      }
    __buf [ __len ++ ] = _Traits :: to_char_type ( __c );
    ++ __extracted;
    __c = __in . rdbuf ( ) -> snextc ( );
  }
       __str . append ( __buf, __len );

       if ( _Traits :: eq_int_type ( __c, __eof ) )
  __err |= __ios_base :: eofbit;
       __in . width ( 0 );
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       __in . _M_setstate ( __ios_base :: badbit );
       throw;
     }
   catch ( ... )
     {



       __in . _M_setstate ( __ios_base :: badbit );
     }
 }

      if ( ! __extracted )
 __err |= __ios_base :: failbit;
      if ( __err )
 __in . setstate ( __err );
      return __in;
    }
# 1067
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_istream < _CharT, _Traits > &
    getline ( basic_istream < _CharT, _Traits > & __in,
     basic_string < _CharT, _Traits, _Alloc > & __str, _CharT __delim )
    {
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef basic_string < _CharT, _Traits, _Alloc > __string_type;
      typedef typename __istream_type :: ios_base __ios_base;
      typedef typename __istream_type :: int_type __int_type;
      typedef typename __string_type :: size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str . max_size ( );
      typename __ios_base :: iostate __err = __ios_base :: goodbit;
      typename __istream_type :: sentry __cerb ( __in, true );
      if ( __cerb )
 {
   try
     {
       __str . erase ( );
       const __int_type __idelim = _Traits :: to_int_type ( __delim );
       const __int_type __eof = _Traits :: eof ( );
       __int_type __c = __in . rdbuf ( ) -> sgetc ( );

       while ( __extracted < __n
       && ! _Traits :: eq_int_type ( __c, __eof )
       && ! _Traits :: eq_int_type ( __c, __idelim ) )
  {
    __str += _Traits :: to_char_type ( __c );
    ++ __extracted;
    __c = __in . rdbuf ( ) -> snextc ( );
  }

       if ( _Traits :: eq_int_type ( __c, __eof ) )
  __err |= __ios_base :: eofbit;
       else if ( _Traits :: eq_int_type ( __c, __idelim ) )
  {
    ++ __extracted;
    __in . rdbuf ( ) -> sbumpc ( );
  }
       else
  __err |= __ios_base :: failbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       __in . _M_setstate ( __ios_base :: badbit );
       throw;
     }
   catch ( ... )
     {



       __in . _M_setstate ( __ios_base :: badbit );
     }
 }
      if ( ! __extracted )
 __err |= __ios_base :: failbit;
      if ( __err )
 __in . setstate ( __err );
      return __in;
    }
# 1134
extern template class basic_string< char, char_traits< char> , allocator< char> > ;
# 1135
extern template basic_istream< char>  &operator>>(basic_istream< char>  & , basic_string< char, char_traits< char> , allocator< char> >  & );
# 1138
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & , const basic_string< char, char_traits< char> , allocator< char> >  & );
# 1141
extern template basic_istream< char>  &getline(basic_istream< char>  & , basic_string< char, char_traits< char> , allocator< char> >  & , char );
# 1144
extern template basic_istream< char>  &getline(basic_istream< char>  & , basic_string< char, char_traits< char> , allocator< char> >  & );
# 1149
extern template class basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > ;
# 1150
extern template basic_istream< wchar_t>  &operator>>(basic_istream< wchar_t>  & , basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  & );
# 1153
extern template basic_ostream< wchar_t>  &operator<<(basic_ostream< wchar_t>  & , const basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  & );
# 1156
extern template basic_istream< wchar_t>  &getline(basic_istream< wchar_t>  & , basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  & , wchar_t );
# 1159
extern template basic_istream< wchar_t>  &getline(basic_istream< wchar_t>  & , basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  & );
# 1165
}
# 45 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_classes.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 61 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_classes.h" 3
class locale { 
# 66
public: typedef int category; 
# 69
class facet; 
# 70
class id; 
# 71
class _Impl; 
# 73
friend class facet; 
# 74
friend class _Impl; 
# 76
template< class _Facet> friend bool has_facet(const locale &) throw(); 
# 80
template< class _Facet> friend const _Facet &use_facet(const locale &); 
# 84
template< class _Cache> friend struct __use_cache; 
# 97 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_classes.h" 3
static const category none = 0; 
# 98
static const category ctype = (1L << 0); 
# 99
static const category numeric = (1L << 1); 
# 100
static const category collate = (1L << 2); 
# 101
static const category time = (1L << 3); 
# 102
static const category monetary = (1L << 4); 
# 103
static const category messages = (1L << 5); 
# 104
static const category all = (((((ctype | numeric) | collate) | time) | monetary) | messages); 
# 116 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_classes.h" 3
locale() throw(); 
# 125 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_classes.h" 3
locale(const locale & ) throw(); 
# 136 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_classes.h" 3
explicit locale(const char * ); 
# 150 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_classes.h" 3
locale(const locale & , const char * , category ); 
# 163 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_classes.h" 3
locale(const locale & , const locale & , category ); 
# 175 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_classes.h" 3
template < typename _Facet >
      locale ( const locale & __other, _Facet * __f );
# 179
~locale() throw(); 
# 190 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_classes.h" 3
const locale &operator=(const locale & ) throw(); 
# 204 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_classes.h" 3
template < typename _Facet >
      locale
      combine ( const locale & __other ) const;
# 214
string name() const; 
# 224 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_classes.h" 3
bool operator==(const locale & ) const throw(); 
# 233
bool operator!=(const locale &__other) const throw() 
# 234
{ return !this->operator==(__other); } 
# 251 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_classes.h" 3
template < typename _Char, typename _Traits, typename _Alloc >
      bool
      operator ( ) ( const basic_string < _Char, _Traits, _Alloc > & __s1,
   const basic_string < _Char, _Traits, _Alloc > & __s2 ) const;
# 268 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_classes.h" 3
static locale global(const locale &); 
# 274
static const locale &classic(); 
# 278
private: _Impl *_M_impl; 
# 281
static _Impl *_S_classic; 
# 284
static _Impl *_S_global; 
# 290
static const char *const *const _S_categories; 
# 302 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_classes.h" 3
enum { _S_categories_size = 12}; 
# 305
static __gthread_once_t _S_once; 
# 309
explicit locale(_Impl *) throw(); 
# 312
static void _S_initialize(); 
# 315
static void _S_initialize_once(); 
# 318
static category _S_normalize_category(category); 
# 321
void _M_coalesce(const locale & , const locale & , category ); 
# 322
}; 
# 335 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_classes.h" 3
class locale::facet { 
# 338
friend class locale; 
# 339
friend class locale::_Impl; 
# 341
mutable _Atomic_word _M_refcount; 
# 344
static __c_locale _S_c_locale; 
# 347
static const char _S_c_name[2]; 
# 350
static __gthread_once_t _S_once; 
# 354
static void _S_initialize_once(); 
# 367 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_classes.h" 3
protected: explicit facet(size_t __refs = (0)) throw() : _M_refcount(((__refs) ? 1 : 0)) 
# 368
{ } 
# 372
virtual ~facet(); 
# 375
static void _S_create_c_locale(__c_locale & , const char * , __c_locale  = 0); 
# 379
static __c_locale _S_clone_c_locale(__c_locale & ); 
# 382
static void _S_destroy_c_locale(__c_locale & ); 
# 387
static __c_locale _S_get_c_locale(); 
# 390
static const char *_S_get_c_name(); 
# 394
private: void _M_add_reference() const throw() 
# 395
{ __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); } 
# 398
void _M_remove_reference() const throw() 
# 399
{ 
# 400
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1) == 1) 
# 401
{ 
# 402
try 
# 403
{ delete this; } 
# 404
catch (...) 
# 405
{ }  
# 406
}  
# 407
} 
# 409
facet(const locale::facet &); 
# 412
locale::facet &operator=(const locale::facet &); 
# 413
}; 
# 426 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_classes.h" 3
class locale::id { 
# 429
friend class locale; 
# 430
friend class locale::_Impl; 
# 432
template< class _Facet> friend const _Facet &use_facet(const locale &); 
# 436
template< class _Facet> friend bool has_facet(const locale &) throw(); 
# 443
mutable size_t _M_index; 
# 446
static _Atomic_word _S_refcount; 
# 449
void operator=(const locale::id &); 
# 451
id(const locale::id &); 
# 457
public: id() { } 
# 460
size_t _M_id() const; 
# 461
}; 
# 465
class locale::_Impl { 
# 469
friend class locale; 
# 470
friend class locale::facet; 
# 472
template< class _Facet> friend bool has_facet(const locale &) throw(); 
# 476
template< class _Facet> friend const _Facet &use_facet(const locale &); 
# 480
template< class _Cache> friend struct __use_cache; 
# 485
_Atomic_word _M_refcount; 
# 486
const locale::facet **_M_facets; 
# 487
size_t _M_facets_size; 
# 488
const locale::facet **_M_caches; 
# 489
char **_M_names; 
# 490
static const locale::id *const _S_id_ctype[]; 
# 491
static const locale::id *const _S_id_numeric[]; 
# 492
static const locale::id *const _S_id_collate[]; 
# 493
static const locale::id *const _S_id_time[]; 
# 494
static const locale::id *const _S_id_monetary[]; 
# 495
static const locale::id *const _S_id_messages[]; 
# 496
static const locale::id *const *const _S_facet_categories[]; 
# 499
void _M_add_reference() throw() 
# 500
{ __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); } 
# 503
void _M_remove_reference() throw() 
# 504
{ 
# 505
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1) == 1) 
# 506
{ 
# 507
try 
# 508
{ delete this; } 
# 509
catch (...) 
# 510
{ }  
# 511
}  
# 512
} 
# 514
_Impl(const locale::_Impl &, size_t); 
# 515
_Impl(const char *, size_t); 
# 516
_Impl(size_t) throw(); 
# 518
~_Impl() throw(); 
# 520
_Impl(const locale::_Impl &); 
# 523
void operator=(const locale::_Impl &); 
# 526
bool _M_check_same_name() 
# 527
{ 
# 528
bool __ret = true; 
# 529
if ((_M_names)[1]) { 
# 531
for (size_t __i = (0); __ret && (__i < ((_S_categories_size) - 1)); ++__i) { 
# 532
__ret = (__builtin_strcmp((_M_names)[__i], (_M_names)[__i + (1)]) == 0); }  }  
# 533
return __ret; 
# 534
} 
# 537
void _M_replace_categories(const locale::_Impl *, locale::category); 
# 540
void _M_replace_category(const locale::_Impl *, const locale::id *const *); 
# 543
void _M_replace_facet(const locale::_Impl *, const locale::id *); 
# 546
void _M_install_facet(const locale::id *, const locale::facet *); 
# 548
template < typename _Facet >
      void
      _M_init_facet ( _Facet * __facet )
      { _M_install_facet ( & _Facet :: id, __facet ); }
# 554
void _M_install_cache(const locale::facet *, size_t); 
# 555
}; 
# 569 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_classes.h" 3
template< class _Facet> bool has_facet(const locale & ) throw(); 
# 586 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_classes.h" 3
template< class _Facet> const _Facet &use_facet(const locale & ); 
# 603 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_classes.h" 3
template < typename _CharT >
    class collate : public locale :: facet
    {
    public :



      typedef _CharT char_type;
      typedef basic_string < _CharT > string_type;


    protected :


      __c_locale _M_c_locale_collate;

    public :

      static locale :: id id;

      explicit
      collate ( size_t __refs = 0 )
      : facet ( __refs ), _M_c_locale_collate ( _S_get_c_locale ( ) )
      { }

      explicit
      collate ( __c_locale __cloc, size_t __refs = 0 )
      : facet ( __refs ), _M_c_locale_collate ( _S_clone_c_locale ( __cloc ) )
      { }

      int
      compare ( const _CharT * __lo1, const _CharT * __hi1,
       const _CharT * __lo2, const _CharT * __hi2 ) const
      { return this -> do_compare ( __lo1, __hi1, __lo2, __hi2 ); }

      string_type
      transform ( const _CharT * __lo, const _CharT * __hi ) const
      { return this -> do_transform ( __lo, __hi ); }

      long
      hash ( const _CharT * __lo, const _CharT * __hi ) const
      { return this -> do_hash ( __lo, __hi ); }


      int
      _M_compare ( const _CharT *, const _CharT * ) const;

      size_t
      _M_transform ( _CharT *, const _CharT *, size_t ) const;

  protected :

      virtual
      ~ collate ( )
      { _S_destroy_c_locale ( _M_c_locale_collate ); }

      virtual int
      do_compare ( const _CharT * __lo1, const _CharT * __hi1,
   const _CharT * __lo2, const _CharT * __hi2 ) const;

      virtual string_type
      do_transform ( const _CharT * __lo, const _CharT * __hi ) const;

      virtual long
      do_hash ( const _CharT * __lo, const _CharT * __hi ) const;
    };
# 756 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_classes.h" 3
template< class _CharT> locale::id 
# 757
collate< _CharT> ::id; 
# 762
template<> int collate< char> ::_M_compare(const char *, const char *) const; 
# 766
template<> size_t collate< char> ::_M_transform(char *, const char *, size_t) const; 
# 771
template<> int collate< wchar_t> ::_M_compare(const wchar_t *, const wchar_t *) const; 
# 775
template<> size_t collate< wchar_t> ::_M_transform(wchar_t *, const wchar_t *, size_t) const; 
# 779
template < typename _CharT >
    class collate_byname : public collate < _CharT >
    {
    public :


      typedef _CharT char_type;
      typedef basic_string < _CharT > string_type;


      explicit
      collate_byname ( const char * __s, size_t __refs = 0 )
      : collate < _CharT > ( __refs )
      {
 if ( __builtin_strcmp ( __s, "C" ) != 0
     && __builtin_strcmp ( __s, "POSIX" ) != 0 )
   {
     this -> _S_destroy_c_locale ( this -> _M_c_locale_collate );
     this -> _S_create_c_locale ( this -> _M_c_locale_collate, __s );
   }
      }

    protected :
      virtual
      ~ collate_byname ( ) { }
    };
# 806
}
# 39 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_classes.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
template < typename _Facet >
    locale ::
    locale ( const locale & __other, _Facet * __f )
    {
      _M_impl = new _Impl ( * __other . _M_impl, 1 );

      try
 { _M_impl -> _M_install_facet ( & _Facet :: id, __f ); }
      catch ( ... )
 {
   _M_impl -> _M_remove_reference ( );
   throw;
 }
      delete [ ] _M_impl -> _M_names [ 0 ];
      _M_impl -> _M_names [ 0 ] = 0;
    }
# 58
template < typename _Facet >
    locale
    locale ::
    combine ( const locale & __other ) const
    {
      _Impl * __tmp = new _Impl ( * _M_impl, 1 );
      try
 {
   __tmp -> _M_replace_facet ( __other . _M_impl, & _Facet :: id );
 }
      catch ( ... )
 {
   __tmp -> _M_remove_reference ( );
   throw;
 }
      return locale ( __tmp );
    }
# 76
template < typename _CharT, typename _Traits, typename _Alloc >
    bool
    locale ::
    operator ( ) ( const basic_string < _CharT, _Traits, _Alloc > & __s1,
        const basic_string < _CharT, _Traits, _Alloc > & __s2 ) const
    {
      typedef std :: collate < _CharT > __collate_type;
      const __collate_type & __collate = use_facet < __collate_type > ( * this );
      return ( __collate . compare ( __s1 . data ( ), __s1 . data ( ) + __s1 . length ( ),
    __s2 . data ( ), __s2 . data ( ) + __s2 . length ( ) ) < 0 );
    }
# 89
template < typename _Facet >
    bool
    has_facet ( const locale & __loc ) throw ( )
    {
      const size_t __i = _Facet :: id . _M_id ( );
      const locale :: facet * * __facets = __loc . _M_impl -> _M_facets;
      return ( __i < __loc . _M_impl -> _M_facets_size

       && dynamic_cast < const _Facet * > ( __facets [ __i ] ) );



    }
# 103
template < typename _Facet >
    const _Facet &
    use_facet ( const locale & __loc )
    {
      const size_t __i = _Facet :: id . _M_id ( );
      const locale :: facet * * __facets = __loc . _M_impl -> _M_facets;
      if ( __i >= __loc . _M_impl -> _M_facets_size || ! __facets [ __i ] )
        __throw_bad_cast ( );

      return dynamic_cast < const _Facet & > ( * __facets [ __i ] );



    }
# 120
template < typename _CharT >
    int
    collate < _CharT > :: _M_compare ( const _CharT *, const _CharT * ) const
    { return 0; }
# 126
template < typename _CharT >
    size_t
    collate < _CharT > :: _M_transform ( _CharT *, const _CharT *, size_t ) const
    { return 0; }
# 131
template < typename _CharT >
    int
    collate < _CharT > ::
    do_compare ( const _CharT * __lo1, const _CharT * __hi1,
        const _CharT * __lo2, const _CharT * __hi2 ) const
    {


      const string_type __one ( __lo1, __hi1 );
      const string_type __two ( __lo2, __hi2 );

      const _CharT * __p = __one . c_str ( );
      const _CharT * __pend = __one . data ( ) + __one . length ( );
      const _CharT * __q = __two . c_str ( );
      const _CharT * __qend = __two . data ( ) + __two . length ( );




      for (;; )
 {
   const int __res = _M_compare ( __p, __q );
   if ( __res )
     return __res;

   __p += char_traits < _CharT > :: length ( __p );
   __q += char_traits < _CharT > :: length ( __q );
   if ( __p == __pend && __q == __qend )
     return 0;
   else if ( __p == __pend )
     return - 1;
   else if ( __q == __qend )
     return 1;

   __p ++;
   __q ++;
 }
    }
# 170
template < typename _CharT >
    typename collate < _CharT > :: string_type
    collate < _CharT > ::
    do_transform ( const _CharT * __lo, const _CharT * __hi ) const
    {
      string_type __ret;


      const string_type __str ( __lo, __hi );

      const _CharT * __p = __str . c_str ( );
      const _CharT * __pend = __str . data ( ) + __str . length ( );

      size_t __len = ( __hi - __lo ) * 2;

      _CharT * __c = new _CharT [ __len ];

      try
 {



   for (;; )
     {

       size_t __res = _M_transform ( __c, __p, __len );


       if ( __res >= __len )
  {
    __len = __res + 1;
    delete [ ] __c, __c = 0;
    __c = new _CharT [ __len ];
    __res = _M_transform ( __c, __p, __len );
  }

       __ret . append ( __c, __res );
       __p += char_traits < _CharT > :: length ( __p );
       if ( __p == __pend )
  break;

       __p ++;
       __ret . push_back ( _CharT ( ) );
     }
 }
      catch ( ... )
 {
   delete [ ] __c;
   throw;
 }

      delete [ ] __c;

      return __ret;
    }
# 226
template < typename _CharT >
    long
    collate < _CharT > ::
    do_hash ( const _CharT * __lo, const _CharT * __hi ) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++ __lo )
 __val =
   * __lo + ( ( __val << 7 )
     | ( __val >> ( __gnu_cxx :: __numeric_traits < unsigned long > ::
    __digits - 7 ) ) );
      return static_cast < long > ( __val );
    }
# 244
extern template class collate< char> ;
# 245
extern template class collate_byname< char> ;
# 247
extern template const collate< char>  &use_facet< collate< char> > (const locale &);
# 251
extern template bool has_facet< collate< char> > (const locale &) throw();
# 256
extern template class collate< wchar_t> ;
# 257
extern template class collate_byname< wchar_t> ;
# 259
extern template const collate< wchar_t>  &use_facet< collate< wchar_t> > (const locale &);
# 263
extern template bool has_facet< collate< wchar_t> > (const locale &) throw();
# 269
}
# 54 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/ios_base.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 60
enum _Ios_Fmtflags { 
# 62
_S_boolalpha = 1, 
# 63
_S_dec, 
# 64
_S_fixed = 4, 
# 65
_S_hex = 8, 
# 66
_S_internal = 16, 
# 67
_S_left = 32, 
# 68
_S_oct = 64, 
# 69
_S_right = 128, 
# 70
_S_scientific = 256, 
# 71
_S_showbase = 512, 
# 72
_S_showpoint = 1024, 
# 73
_S_showpos = 2048, 
# 74
_S_skipws = 4096, 
# 75
_S_unitbuf = 8192, 
# 76
_S_uppercase = 16384, 
# 77
_S_adjustfield = 176, 
# 78
_S_basefield = 74, 
# 79
_S_floatfield = 260, 
# 80
_S_ios_fmtflags_end = 65536
# 81
}; 
# 84
inline _Ios_Fmtflags operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b) 
# 85
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) & (static_cast< int>(__b))); } 
# 88
inline _Ios_Fmtflags operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b) 
# 89
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) | (static_cast< int>(__b))); } 
# 92
inline _Ios_Fmtflags operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b) 
# 93
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); } 
# 96
inline _Ios_Fmtflags &operator|=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b) 
# 97
{ return __a = ((__a | __b)); } 
# 100
inline _Ios_Fmtflags &operator&=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b) 
# 101
{ return __a = ((__a & __b)); } 
# 104
inline _Ios_Fmtflags &operator^=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b) 
# 105
{ return __a = ((__a ^ __b)); } 
# 108
inline _Ios_Fmtflags operator~(_Ios_Fmtflags __a) 
# 109
{ return (_Ios_Fmtflags)(~(static_cast< int>(__a))); } 
# 112
enum _Ios_Openmode { 
# 114
_S_app = 1, 
# 115
_S_ate, 
# 116
_S_bin = 4, 
# 117
_S_in = 8, 
# 118
_S_out = 16, 
# 119
_S_trunc = 32, 
# 120
_S_ios_openmode_end = 65536
# 121
}; 
# 124
inline _Ios_Openmode operator&(_Ios_Openmode __a, _Ios_Openmode __b) 
# 125
{ return (_Ios_Openmode)((static_cast< int>(__a)) & (static_cast< int>(__b))); } 
# 128
inline _Ios_Openmode operator|(_Ios_Openmode __a, _Ios_Openmode __b) 
# 129
{ return (_Ios_Openmode)((static_cast< int>(__a)) | (static_cast< int>(__b))); } 
# 132
inline _Ios_Openmode operator^(_Ios_Openmode __a, _Ios_Openmode __b) 
# 133
{ return (_Ios_Openmode)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); } 
# 136
inline _Ios_Openmode &operator|=(_Ios_Openmode &__a, _Ios_Openmode __b) 
# 137
{ return __a = ((__a | __b)); } 
# 140
inline _Ios_Openmode &operator&=(_Ios_Openmode &__a, _Ios_Openmode __b) 
# 141
{ return __a = ((__a & __b)); } 
# 144
inline _Ios_Openmode &operator^=(_Ios_Openmode &__a, _Ios_Openmode __b) 
# 145
{ return __a = ((__a ^ __b)); } 
# 148
inline _Ios_Openmode operator~(_Ios_Openmode __a) 
# 149
{ return (_Ios_Openmode)(~(static_cast< int>(__a))); } 
# 152
enum _Ios_Iostate { 
# 154
_S_goodbit, 
# 155
_S_badbit, 
# 156
_S_eofbit, 
# 157
_S_failbit = 4, 
# 158
_S_ios_iostate_end = 65536
# 159
}; 
# 162
inline _Ios_Iostate operator&(_Ios_Iostate __a, _Ios_Iostate __b) 
# 163
{ return (_Ios_Iostate)((static_cast< int>(__a)) & (static_cast< int>(__b))); } 
# 166
inline _Ios_Iostate operator|(_Ios_Iostate __a, _Ios_Iostate __b) 
# 167
{ return (_Ios_Iostate)((static_cast< int>(__a)) | (static_cast< int>(__b))); } 
# 170
inline _Ios_Iostate operator^(_Ios_Iostate __a, _Ios_Iostate __b) 
# 171
{ return (_Ios_Iostate)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); } 
# 174
inline _Ios_Iostate &operator|=(_Ios_Iostate &__a, _Ios_Iostate __b) 
# 175
{ return __a = ((__a | __b)); } 
# 178
inline _Ios_Iostate &operator&=(_Ios_Iostate &__a, _Ios_Iostate __b) 
# 179
{ return __a = ((__a & __b)); } 
# 182
inline _Ios_Iostate &operator^=(_Ios_Iostate &__a, _Ios_Iostate __b) 
# 183
{ return __a = ((__a ^ __b)); } 
# 186
inline _Ios_Iostate operator~(_Ios_Iostate __a) 
# 187
{ return (_Ios_Iostate)(~(static_cast< int>(__a))); } 
# 189
enum _Ios_Seekdir { 
# 191
_S_beg, 
# 192
_S_cur, 
# 193
_S_end, 
# 194
_S_ios_seekdir_end = 65536
# 195
}; 
# 207 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/ios_base.h" 3
class ios_base { 
# 217
public: class failure : public exception { 
# 223
public: explicit failure(const string & ) throw(); 
# 228
virtual ~failure() throw(); 
# 231
virtual const char *what() const throw(); 
# 234
private: string _M_msg; 
# 235
}; 
# 263 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/ios_base.h" 3
typedef _Ios_Fmtflags fmtflags; 
# 266
static const fmtflags boolalpha = ((fmtflags)1); 
# 269
static const fmtflags dec = ((fmtflags)2); 
# 272
static const fmtflags fixed = ((fmtflags)4); 
# 275
static const fmtflags hex = ((fmtflags)8); 
# 280
static const fmtflags internal = ((fmtflags)16); 
# 284
static const fmtflags left = ((fmtflags)32); 
# 287
static const fmtflags oct = ((fmtflags)64); 
# 291
static const fmtflags right = ((fmtflags)128); 
# 294
static const fmtflags scientific = ((fmtflags)256); 
# 298
static const fmtflags showbase = ((fmtflags)512); 
# 302
static const fmtflags showpoint = ((fmtflags)1024); 
# 305
static const fmtflags showpos = ((fmtflags)2048); 
# 308
static const fmtflags skipws = ((fmtflags)4096); 
# 311
static const fmtflags unitbuf = ((fmtflags)8192); 
# 315
static const fmtflags uppercase = ((fmtflags)16384); 
# 318
static const fmtflags adjustfield = ((fmtflags)176); 
# 321
static const fmtflags basefield = ((fmtflags)74); 
# 324
static const fmtflags floatfield = ((fmtflags)260); 
# 338 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/ios_base.h" 3
typedef _Ios_Iostate iostate; 
# 342
static const iostate badbit = ((iostate)1); 
# 345
static const iostate eofbit = ((iostate)2); 
# 350
static const iostate failbit = ((iostate)4); 
# 353
static const iostate goodbit = ((iostate)0); 
# 369 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/ios_base.h" 3
typedef _Ios_Openmode openmode; 
# 372
static const openmode app = ((openmode)1); 
# 375
static const openmode ate = ((openmode)2); 
# 380
static const openmode binary = ((openmode)4); 
# 383
static const openmode in = ((openmode)8); 
# 386
static const openmode out = ((openmode)16); 
# 389
static const openmode trunc = ((openmode)32); 
# 401 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/ios_base.h" 3
typedef _Ios_Seekdir seekdir; 
# 404
static const seekdir beg = ((seekdir)0); 
# 407
static const seekdir cur = ((seekdir)1); 
# 410
static const seekdir end = ((seekdir)2); 
# 413
typedef int io_state; 
# 414
typedef int open_mode; 
# 415
typedef int seek_dir; 
# 417
typedef std::streampos streampos; 
# 418
typedef std::streamoff streamoff; 
# 427 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/ios_base.h" 3
enum event { 
# 429
erase_event, 
# 430
imbue_event, 
# 431
copyfmt_event
# 432
}; 
# 444 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/ios_base.h" 3
typedef void (*event_callback)(event, ios_base &, int); 
# 457 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/ios_base.h" 3
void register_callback(event_callback , int ); 
# 464
protected: streamsize _M_precision; 
# 465
streamsize _M_width; 
# 466
fmtflags _M_flags; 
# 467
iostate _M_exception; 
# 468
iostate _M_streambuf_state; 
# 473
struct _Callback_list { 
# 476
_Callback_list *_M_next; 
# 477
event_callback _M_fn; 
# 478
int _M_index; 
# 479
_Atomic_word _M_refcount; 
# 481
_Callback_list(event_callback __fn, int __index, _Callback_list *
# 482
__cb) : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) 
# 483
{ } 
# 486
void _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); } 
# 490
int _M_remove_reference() 
# 491
{ return __gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1); } 
# 492
}; 
# 494
_Callback_list *_M_callbacks; 
# 497
void _M_call_callbacks(event ) throw(); 
# 500
void _M_dispose_callbacks(); 
# 503
struct _Words { 
# 505
void *_M_pword; 
# 506
long _M_iword; 
# 507
_Words() : _M_pword((0)), _M_iword((0)) { } 
# 508
}; 
# 511
_Words _M_word_zero; 
# 515
enum { _S_local_word_size = 8}; 
# 516
_Words _M_local_word[_S_local_word_size]; 
# 519
int _M_word_size; 
# 520
_Words *_M_word; 
# 523
_Words &_M_grow_words(int , bool ); 
# 526
locale _M_ios_locale; 
# 529
void _M_init(); 
# 537
public: class Init { 
# 539
friend class ios_base; 
# 541
public: Init(); 
# 542
~Init(); 
# 545
private: static _Atomic_word _S_refcount; 
# 546
static bool _S_synced_with_stdio; 
# 547
}; 
# 555
fmtflags flags() const 
# 556
{ return _M_flags; } 
# 566 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/ios_base.h" 3
fmtflags flags(fmtflags __fmtfl) 
# 567
{ 
# 568
fmtflags __old = (_M_flags); 
# 569
(_M_flags) = __fmtfl; 
# 570
return __old; 
# 571
} 
# 582 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/ios_base.h" 3
fmtflags setf(fmtflags __fmtfl) 
# 583
{ 
# 584
fmtflags __old = (_M_flags); 
# 585
((_M_flags) |= __fmtfl); 
# 586
return __old; 
# 587
} 
# 599 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/ios_base.h" 3
fmtflags setf(fmtflags __fmtfl, fmtflags __mask) 
# 600
{ 
# 601
fmtflags __old = (_M_flags); 
# 602
((_M_flags) &= ((~__mask))); 
# 603
((_M_flags) |= ((__fmtfl & __mask))); 
# 604
return __old; 
# 605
} 
# 614
void unsetf(fmtflags __mask) 
# 615
{ ((_M_flags) &= ((~__mask))); } 
# 625 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/ios_base.h" 3
streamsize precision() const 
# 626
{ return _M_precision; } 
# 634
streamsize precision(streamsize __prec) 
# 635
{ 
# 636
streamsize __old = (_M_precision); 
# 637
(_M_precision) = __prec; 
# 638
return __old; 
# 639
} 
# 648
streamsize width() const 
# 649
{ return _M_width; } 
# 657
streamsize width(streamsize __wide) 
# 658
{ 
# 659
streamsize __old = (_M_width); 
# 660
(_M_width) = __wide; 
# 661
return __old; 
# 662
} 
# 676 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/ios_base.h" 3
static bool sync_with_stdio(bool  = (true)); 
# 688 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/ios_base.h" 3
locale imbue(const locale & ); 
# 699 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/ios_base.h" 3
locale getloc() const 
# 700
{ return _M_ios_locale; } 
# 710 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/ios_base.h" 3
const locale &_M_getloc() const 
# 711
{ return _M_ios_locale; } 
# 729 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/ios_base.h" 3
static int xalloc() throw(); 
# 745 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/ios_base.h" 3
long &iword(int __ix) 
# 746
{ 
# 747
_Words &__word = ((__ix < (_M_word_size)) ? ((_M_word)[__ix]) : this->_M_grow_words(__ix, true)); 
# 749
return __word._M_iword; 
# 750
} 
# 766 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/ios_base.h" 3
void *&pword(int __ix) 
# 767
{ 
# 768
_Words &__word = ((__ix < (_M_word_size)) ? ((_M_word)[__ix]) : this->_M_grow_words(__ix, false)); 
# 770
return __word._M_pword; 
# 771
} 
# 782 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/ios_base.h" 3
virtual ~ios_base(); 
# 785
protected: ios_base(); 
# 790
private: ios_base(const ios_base &); 
# 793
ios_base &operator=(const ios_base &); 
# 794
}; 
# 799
inline ios_base &boolalpha(ios_base &__base) 
# 800
{ 
# 801
__base.setf(ios_base::boolalpha); 
# 802
return __base; 
# 803
} 
# 807
inline ios_base &noboolalpha(ios_base &__base) 
# 808
{ 
# 809
__base.unsetf(ios_base::boolalpha); 
# 810
return __base; 
# 811
} 
# 815
inline ios_base &showbase(ios_base &__base) 
# 816
{ 
# 817
__base.setf(ios_base::showbase); 
# 818
return __base; 
# 819
} 
# 823
inline ios_base &noshowbase(ios_base &__base) 
# 824
{ 
# 825
__base.unsetf(ios_base::showbase); 
# 826
return __base; 
# 827
} 
# 831
inline ios_base &showpoint(ios_base &__base) 
# 832
{ 
# 833
__base.setf(ios_base::showpoint); 
# 834
return __base; 
# 835
} 
# 839
inline ios_base &noshowpoint(ios_base &__base) 
# 840
{ 
# 841
__base.unsetf(ios_base::showpoint); 
# 842
return __base; 
# 843
} 
# 847
inline ios_base &showpos(ios_base &__base) 
# 848
{ 
# 849
__base.setf(ios_base::showpos); 
# 850
return __base; 
# 851
} 
# 855
inline ios_base &noshowpos(ios_base &__base) 
# 856
{ 
# 857
__base.unsetf(ios_base::showpos); 
# 858
return __base; 
# 859
} 
# 863
inline ios_base &skipws(ios_base &__base) 
# 864
{ 
# 865
__base.setf(ios_base::skipws); 
# 866
return __base; 
# 867
} 
# 871
inline ios_base &noskipws(ios_base &__base) 
# 872
{ 
# 873
__base.unsetf(ios_base::skipws); 
# 874
return __base; 
# 875
} 
# 879
inline ios_base &uppercase(ios_base &__base) 
# 880
{ 
# 881
__base.setf(ios_base::uppercase); 
# 882
return __base; 
# 883
} 
# 887
inline ios_base &nouppercase(ios_base &__base) 
# 888
{ 
# 889
__base.unsetf(ios_base::uppercase); 
# 890
return __base; 
# 891
} 
# 895
inline ios_base &unitbuf(ios_base &__base) 
# 896
{ 
# 897
__base.setf(ios_base::unitbuf); 
# 898
return __base; 
# 899
} 
# 903
inline ios_base &nounitbuf(ios_base &__base) 
# 904
{ 
# 905
__base.unsetf(ios_base::unitbuf); 
# 906
return __base; 
# 907
} 
# 912
inline ios_base &internal(ios_base &__base) 
# 913
{ 
# 914
__base.setf(ios_base::internal, ios_base::adjustfield); 
# 915
return __base; 
# 916
} 
# 920
inline ios_base &left(ios_base &__base) 
# 921
{ 
# 922
__base.setf(ios_base::left, ios_base::adjustfield); 
# 923
return __base; 
# 924
} 
# 928
inline ios_base &right(ios_base &__base) 
# 929
{ 
# 930
__base.setf(ios_base::right, ios_base::adjustfield); 
# 931
return __base; 
# 932
} 
# 937
inline ios_base &dec(ios_base &__base) 
# 938
{ 
# 939
__base.setf(ios_base::dec, ios_base::basefield); 
# 940
return __base; 
# 941
} 
# 945
inline ios_base &hex(ios_base &__base) 
# 946
{ 
# 947
__base.setf(ios_base::hex, ios_base::basefield); 
# 948
return __base; 
# 949
} 
# 953
inline ios_base &oct(ios_base &__base) 
# 954
{ 
# 955
__base.setf(ios_base::oct, ios_base::basefield); 
# 956
return __base; 
# 957
} 
# 962
inline ios_base &fixed(ios_base &__base) 
# 963
{ 
# 964
__base.setf(ios_base::fixed, ios_base::floatfield); 
# 965
return __base; 
# 966
} 
# 970
inline ios_base &scientific(ios_base &__base) 
# 971
{ 
# 972
__base.setf(ios_base::scientific, ios_base::floatfield); 
# 973
return __base; 
# 974
} 
# 976
}
# 46 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/streambuf" 3
namespace std __attribute((__visibility__("default"))) { 
# 48
template < typename _CharT, typename _Traits >
    streamsize
    __copy_streambufs_eof ( basic_streambuf < _CharT, _Traits > *,
     basic_streambuf < _CharT, _Traits > *, bool & );
# 113 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/streambuf" 3
template < typename _CharT, typename _Traits >
    class basic_streambuf
    {
    public :






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type :: int_type int_type;
      typedef typename traits_type :: pos_type pos_type;
      typedef typename traits_type :: off_type off_type;




      typedef basic_streambuf < char_type, traits_type > __streambuf_type;


      friend class basic_ios < char_type, traits_type >;
      friend class basic_istream < char_type, traits_type >;
      friend class basic_ostream < char_type, traits_type >;
      friend class istreambuf_iterator < char_type, traits_type >;
      friend class ostreambuf_iterator < char_type, traits_type >;

      friend streamsize
      __copy_streambufs_eof < > ( __streambuf_type *, __streambuf_type *, bool & );

      template < bool _IsMove, typename _CharT2 >
        friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
            _CharT2 * > :: __type
        __copy_move_a2 ( istreambuf_iterator < _CharT2 >,
         istreambuf_iterator < _CharT2 >, _CharT2 * );

      template < typename _CharT2 >
        friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
      istreambuf_iterator < _CharT2 > > :: __type
        find ( istreambuf_iterator < _CharT2 >, istreambuf_iterator < _CharT2 >,
      const _CharT2 & );

      template < typename _CharT2, typename _Traits2 >
        friend basic_istream < _CharT2, _Traits2 > &
        operator >> ( basic_istream < _CharT2, _Traits2 > &, _CharT2 * );

      template < typename _CharT2, typename _Traits2, typename _Alloc >
        friend basic_istream < _CharT2, _Traits2 > &
        operator >> ( basic_istream < _CharT2, _Traits2 > &,
     basic_string < _CharT2, _Traits2, _Alloc > & );

      template < typename _CharT2, typename _Traits2, typename _Alloc >
        friend basic_istream < _CharT2, _Traits2 > &
        getline ( basic_istream < _CharT2, _Traits2 > &,
  basic_string < _CharT2, _Traits2, _Alloc > &, _CharT2 );

    protected :

      char_type * _M_in_beg;
      char_type * _M_in_cur;
      char_type * _M_in_end;
      char_type * _M_out_beg;
      char_type * _M_out_cur;
      char_type * _M_out_end;


      locale _M_buf_locale;

  public :

      virtual
      ~ basic_streambuf ( )
      { }

      locale
      pubimbue ( const locale & __loc )
      {
 locale __tmp ( this -> getloc ( ) );
 this -> imbue ( __loc );
 _M_buf_locale = __loc;
 return __tmp;
      }

      locale
      getloc ( ) const
      { return _M_buf_locale; }

      __streambuf_type *
      pubsetbuf ( char_type * __s, streamsize __n )
      { return this -> setbuf ( __s, __n ); }

      pos_type
      pubseekoff ( off_type __off, ios_base :: seekdir __way,
   ios_base :: openmode __mode = ios_base :: in | ios_base :: out )
      { return this -> seekoff ( __off, __way, __mode ); }

      pos_type
      pubseekpos ( pos_type __sp,
   ios_base :: openmode __mode = ios_base :: in | ios_base :: out )
      { return this -> seekpos ( __sp, __mode ); }

      int
      pubsync ( ) { return this -> sync ( ); }

      streamsize
      in_avail ( )
      {
 const streamsize __ret = this -> egptr ( ) - this -> gptr ( );
 return __ret ? __ret : this -> showmanyc ( );
      }

      int_type
      snextc ( )
      {
 int_type __ret = traits_type :: eof ( );
 if ( __builtin_expect ( ! traits_type :: eq_int_type ( this -> sbumpc ( ),
             __ret ), true ) )
   __ret = this -> sgetc ( );
 return __ret;
      }

      int_type
      sbumpc ( )
      {
 int_type __ret;
 if ( __builtin_expect ( this -> gptr ( ) < this -> egptr ( ), true ) )
   {
     __ret = traits_type :: to_int_type ( * this -> gptr ( ) );
     this -> gbump ( 1 );
   }
 else
   __ret = this -> uflow ( );
 return __ret;
      }

      int_type
      sgetc ( )
      {
 int_type __ret;
 if ( __builtin_expect ( this -> gptr ( ) < this -> egptr ( ), true ) )
   __ret = traits_type :: to_int_type ( * this -> gptr ( ) );
 else
   __ret = this -> underflow ( );
 return __ret;
      }

      streamsize
      sgetn ( char_type * __s, streamsize __n )
      { return this -> xsgetn ( __s, __n ); }

      int_type
      sputbackc ( char_type __c )
      {
 int_type __ret;
 const bool __testpos = this -> eback ( ) < this -> gptr ( );
 if ( __builtin_expect ( ! __testpos ||
        ! traits_type :: eq ( __c, this -> gptr ( ) [ - 1 ] ), false ) )
   __ret = this -> pbackfail ( traits_type :: to_int_type ( __c ) );
 else
   {
     this -> gbump ( - 1 );
     __ret = traits_type :: to_int_type ( * this -> gptr ( ) );
   }
 return __ret;
      }

      int_type
      sungetc ( )
      {
 int_type __ret;
 if ( __builtin_expect ( this -> eback ( ) < this -> gptr ( ), true ) )
   {
     this -> gbump ( - 1 );
     __ret = traits_type :: to_int_type ( * this -> gptr ( ) );
   }
 else
   __ret = this -> pbackfail ( );
 return __ret;
      }

      int_type
      sputc ( char_type __c )
      {
 int_type __ret;
 if ( __builtin_expect ( this -> pptr ( ) < this -> epptr ( ), true ) )
   {
     * this -> pptr ( ) = __c;
     this -> pbump ( 1 );
     __ret = traits_type :: to_int_type ( __c );
   }
 else
   __ret = this -> overflow ( traits_type :: to_int_type ( __c ) );
 return __ret;
      }

      streamsize
      sputn ( const char_type * __s, streamsize __n )
      { return this -> xsputn ( __s, __n ); }

    protected :

      basic_streambuf ( )
      : _M_in_beg ( 0 ), _M_in_cur ( 0 ), _M_in_end ( 0 ),
      _M_out_beg ( 0 ), _M_out_cur ( 0 ), _M_out_end ( 0 ),
      _M_buf_locale ( locale ( ) )
      { }

      char_type *
      eback ( ) const { return _M_in_beg; }

      char_type *
      gptr ( ) const { return _M_in_cur; }

      char_type *
      egptr ( ) const { return _M_in_end; }

      void
      gbump ( int __n ) { _M_in_cur += __n; }

      void
      setg ( char_type * __gbeg, char_type * __gnext, char_type * __gend )
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }

      char_type *
      pbase ( ) const { return _M_out_beg; }

      char_type *
      pptr ( ) const { return _M_out_cur; }

      char_type *
      epptr ( ) const { return _M_out_end; }

      void
      pbump ( int __n ) { _M_out_cur += __n; }

      void
      setp ( char_type * __pbeg, char_type * __pend )
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }

      virtual void
      imbue ( const locale & )
      { }

      virtual basic_streambuf < char_type, _Traits > *
      setbuf ( char_type *, streamsize )
      { return this; }

      virtual pos_type
      seekoff ( off_type, ios_base :: seekdir,
       ios_base :: openmode = ios_base :: in | ios_base :: out )
      { return pos_type ( off_type ( - 1 ) ); }

      virtual pos_type
      seekpos ( pos_type,
       ios_base :: openmode = ios_base :: in | ios_base :: out )
      { return pos_type ( off_type ( - 1 ) ); }

      virtual int
      sync ( ) { return 0; }

      virtual streamsize
      showmanyc ( ) { return 0; }

      virtual streamsize
      xsgetn ( char_type * __s, streamsize __n );

      virtual int_type
      underflow ( )
      { return traits_type :: eof ( ); }

      virtual int_type
      uflow ( )
      {
 int_type __ret = traits_type :: eof ( );
 const bool __testeof = traits_type :: eq_int_type ( this -> underflow ( ),
       __ret );
 if ( ! __testeof )
   {
     __ret = traits_type :: to_int_type ( * this -> gptr ( ) );
     this -> gbump ( 1 );
   }
 return __ret;
      }

      virtual int_type
      pbackfail ( int_type = traits_type :: eof ( ) )
      { return traits_type :: eof ( ); }

      virtual streamsize
      xsputn ( const char_type * __s, streamsize __n );

      virtual int_type
      overflow ( int_type = traits_type :: eof ( ) )
      { return traits_type :: eof ( ); }



    public :

      void
      stossc ( )
      {
 if ( this -> gptr ( ) < this -> egptr ( ) )
   this -> gbump ( 1 );
 else
   this -> uflow ( );
      }


    private :


      basic_streambuf ( const __streambuf_type & __sb )
      : _M_in_beg ( __sb . _M_in_beg ), _M_in_cur ( __sb . _M_in_cur ),
      _M_in_end ( __sb . _M_in_end ), _M_out_beg ( __sb . _M_out_beg ),
      _M_out_cur ( __sb . _M_out_cur ), _M_out_end ( __sb . _M_out_cur ),
      _M_buf_locale ( __sb . _M_buf_locale )
      { }

      __streambuf_type &
      operator = ( const __streambuf_type & ) { return * this; };
    };
# 784 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/streambuf" 3
template<> streamsize __copy_streambufs_eof(basic_streambuf< char, char_traits< char> >  * , basic_streambuf< char, char_traits< char> >  * , bool & ); 
# 789
template<> streamsize __copy_streambufs_eof(basic_streambuf< wchar_t, char_traits< wchar_t> >  * , basic_streambuf< wchar_t, char_traits< wchar_t> >  * , bool & ); 
# 793
}
# 40 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/streambuf.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 42
template < typename _CharT, typename _Traits >
    streamsize
    basic_streambuf < _CharT, _Traits > ::
    xsgetn ( char_type * __s, streamsize __n )
    {
      streamsize __ret = 0;
      while ( __ret < __n )
 {
   const streamsize __buf_len = this -> egptr ( ) - this -> gptr ( );
   if ( __buf_len )
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std :: min ( __buf_len, __remaining );
       traits_type :: copy ( __s, this -> gptr ( ), __len );
       __ret += __len;
       __s += __len;
       this -> gbump ( __len );
     }

   if ( __ret < __n )
     {
       const int_type __c = this -> uflow ( );
       if ( ! traits_type :: eq_int_type ( __c, traits_type :: eof ( ) ) )
  {
    traits_type :: assign ( * __s ++, traits_type :: to_char_type ( __c ) );
    ++ __ret;
  }
       else
  break;
     }
 }
      return __ret;
    }
# 76
template < typename _CharT, typename _Traits >
    streamsize
    basic_streambuf < _CharT, _Traits > ::
    xsputn ( const char_type * __s, streamsize __n )
    {
      streamsize __ret = 0;
      while ( __ret < __n )
 {
   const streamsize __buf_len = this -> epptr ( ) - this -> pptr ( );
   if ( __buf_len )
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std :: min ( __buf_len, __remaining );
       traits_type :: copy ( this -> pptr ( ), __s, __len );
       __ret += __len;
       __s += __len;
       this -> pbump ( __len );
     }

   if ( __ret < __n )
     {
       int_type __c = this -> overflow ( traits_type :: to_int_type ( * __s ) );
       if ( ! traits_type :: eq_int_type ( __c, traits_type :: eof ( ) ) )
  {
    ++ __ret;
    ++ __s;
  }
       else
  break;
     }
 }
      return __ret;
    }
# 113
template < typename _CharT, typename _Traits >
    streamsize
    __copy_streambufs_eof ( basic_streambuf < _CharT, _Traits > * __sbin,
     basic_streambuf < _CharT, _Traits > * __sbout,
     bool & __ineof )
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits :: int_type __c = __sbin -> sgetc ( );
      while ( ! _Traits :: eq_int_type ( __c, _Traits :: eof ( ) ) )
 {
   __c = __sbout -> sputc ( _Traits :: to_char_type ( __c ) );
   if ( _Traits :: eq_int_type ( __c, _Traits :: eof ( ) ) )
     {
       __ineof = false;
       break;
     }
   ++ __ret;
   __c = __sbin -> snextc ( );
 }
      return __ret;
    }
# 136
template < typename _CharT, typename _Traits >
    inline streamsize
    __copy_streambufs ( basic_streambuf < _CharT, _Traits > * __sbin,
        basic_streambuf < _CharT, _Traits > * __sbout )
    {
      bool __ineof;
      return __copy_streambufs_eof ( __sbin, __sbout, __ineof );
    }
# 149
extern template class basic_streambuf< char, char_traits< char> > ;
# 150
extern template streamsize __copy_streambufs(basic_streambuf< char, char_traits< char> >  * , basic_streambuf< char, char_traits< char> >  * );
# 154
extern template streamsize __copy_streambufs_eof< char, char_traits< char> > (basic_streambuf< char, char_traits< char> >  *, basic_streambuf< char, char_traits< char> >  *, bool &);
# 160
extern template class basic_streambuf< wchar_t, char_traits< wchar_t> > ;
# 161
extern template streamsize __copy_streambufs(basic_streambuf< wchar_t, char_traits< wchar_t> >  * , basic_streambuf< wchar_t, char_traits< wchar_t> >  * );
# 165
extern template streamsize __copy_streambufs_eof< wchar_t, char_traits< wchar_t> > (basic_streambuf< wchar_t, char_traits< wchar_t> >  *, basic_streambuf< wchar_t, char_traits< wchar_t> >  *, bool &);
# 172
}
# 53 "/usr/include/wctype.h" 3
typedef unsigned long wctype_t; 
# 73 "/usr/include/wctype.h" 3
enum { 
# 74
__ISwupper, 
# 75
__ISwlower, 
# 76
__ISwalpha, 
# 77
__ISwdigit, 
# 78
__ISwxdigit, 
# 79
__ISwspace, 
# 80
__ISwprint, 
# 81
__ISwgraph, 
# 82
__ISwblank, 
# 83
__ISwcntrl, 
# 84
__ISwpunct, 
# 85
__ISwalnum, 
# 87
_ISwupper = 16777216, 
# 88
_ISwlower = 33554432, 
# 89
_ISwalpha = 67108864, 
# 90
_ISwdigit = 134217728, 
# 91
_ISwxdigit = 268435456, 
# 92
_ISwspace = 536870912, 
# 93
_ISwprint = 1073741824, 
# 94
_ISwgraph = (-2147483647-1), 
# 95
_ISwblank = 65536, 
# 96
_ISwcntrl = 131072, 
# 97
_ISwpunct = 262144, 
# 98
_ISwalnum = 524288
# 99
}; 
# 112
extern "C" int iswalnum(wint_t ) throw(); 
# 118
extern "C" int iswalpha(wint_t ) throw(); 
# 121
extern "C" int iswcntrl(wint_t ) throw(); 
# 125
extern "C" int iswdigit(wint_t ) throw(); 
# 129
extern "C" int iswgraph(wint_t ) throw(); 
# 134
extern "C" int iswlower(wint_t ) throw(); 
# 137
extern "C" int iswprint(wint_t ) throw(); 
# 142
extern "C" int iswpunct(wint_t ) throw(); 
# 147
extern "C" int iswspace(wint_t ) throw(); 
# 152
extern "C" int iswupper(wint_t ) throw(); 
# 157
extern "C" int iswxdigit(wint_t ) throw(); 
# 163
extern "C" int iswblank(wint_t ) throw(); 
# 172 "/usr/include/wctype.h" 3
extern "C" wctype_t wctype(const char * ) throw(); 
# 176
extern "C" int iswctype(wint_t , wctype_t ) throw(); 
# 187
extern "C" { typedef const __int32_t *wctrans_t; }
# 195
extern "C" wint_t towlower(wint_t ) throw(); 
# 198
extern "C" wint_t towupper(wint_t ) throw(); 
# 219 "/usr/include/wctype.h" 3
extern "C" wctrans_t wctrans(const char * ) throw(); 
# 222
extern "C" wint_t towctrans(wint_t , wctrans_t ) throw(); 
# 231
extern "C" int iswalnum_l(wint_t , __locale_t ) throw(); 
# 237
extern "C" int iswalpha_l(wint_t , __locale_t ) throw(); 
# 240
extern "C" int iswcntrl_l(wint_t , __locale_t ) throw(); 
# 244
extern "C" int iswdigit_l(wint_t , __locale_t ) throw(); 
# 248
extern "C" int iswgraph_l(wint_t , __locale_t ) throw(); 
# 253
extern "C" int iswlower_l(wint_t , __locale_t ) throw(); 
# 256
extern "C" int iswprint_l(wint_t , __locale_t ) throw(); 
# 261
extern "C" int iswpunct_l(wint_t , __locale_t ) throw(); 
# 266
extern "C" int iswspace_l(wint_t , __locale_t ) throw(); 
# 271
extern "C" int iswupper_l(wint_t , __locale_t ) throw(); 
# 276
extern "C" int iswxdigit_l(wint_t , __locale_t ) throw(); 
# 281
extern "C" int iswblank_l(wint_t , __locale_t ) throw(); 
# 285
extern "C" wctype_t wctype_l(const char * , __locale_t ) throw(); 
# 290
extern "C" int iswctype_l(wint_t , wctype_t , __locale_t ) throw(); 
# 299
extern "C" wint_t towlower_l(wint_t , __locale_t ) throw(); 
# 302
extern "C" wint_t towupper_l(wint_t , __locale_t ) throw(); 
# 306
extern "C" wctrans_t wctrans_l(const char * , __locale_t ) throw(); 
# 310
extern "C" wint_t towctrans_l(wint_t , wctrans_t , __locale_t ) throw(); 
# 76 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/cwctype" 3
namespace std __attribute((__visibility__("default"))) { 
# 78
using ::wctrans_t;
# 79
using ::wctype_t;
# 82
using ::iswalnum;
# 83
using ::iswalpha;
# 85
using ::iswblank;
# 87
using ::iswcntrl;
# 88
using ::iswctype;
# 89
using ::iswdigit;
# 90
using ::iswgraph;
# 91
using ::iswlower;
# 92
using ::iswprint;
# 93
using ::iswpunct;
# 94
using ::iswspace;
# 95
using ::iswupper;
# 96
using ::iswxdigit;
# 97
using ::towctrans;
# 98
using ::towlower;
# 99
using ::towupper;
# 100
using ::wctrans;
# 101
using ::wctype;
# 103
}
# 37 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/x86_64-redhat-linux/bits/ctype_base.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 40
struct ctype_base { 
# 43
typedef const int *__to_type; 
# 47
typedef unsigned short mask; 
# 48
static const mask upper = (_ISupper); 
# 49
static const mask lower = (_ISlower); 
# 50
static const mask alpha = (_ISalpha); 
# 51
static const mask digit = (_ISdigit); 
# 52
static const mask xdigit = (_ISxdigit); 
# 53
static const mask space = (_ISspace); 
# 54
static const mask print = (_ISprint); 
# 55
static const mask graph = (((_ISalpha) | (_ISdigit)) | (_ISpunct)); 
# 56
static const mask cntrl = (_IScntrl); 
# 57
static const mask punct = (_ISpunct); 
# 58
static const mask alnum = ((_ISalpha) | (_ISdigit)); 
# 59
}; 
# 61
}
# 40 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/streambuf_iterator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 44
template < typename _CharT, typename _Traits >
    class istreambuf_iterator
    : public iterator < input_iterator_tag, _CharT, typename _Traits :: off_type,
        _CharT *, _CharT & >
    {
    public :



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits :: int_type int_type;
      typedef basic_streambuf < _CharT, _Traits > streambuf_type;
      typedef basic_istream < _CharT, _Traits > istream_type;


      template < typename _CharT2 >
 friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
                      ostreambuf_iterator < _CharT2 > > :: __type
 copy ( istreambuf_iterator < _CharT2 >, istreambuf_iterator < _CharT2 >,
      ostreambuf_iterator < _CharT2 > );

      template < bool _IsMove, typename _CharT2 >
 friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
            _CharT2 * > :: __type
 __copy_move_a2 ( istreambuf_iterator < _CharT2 >,
         istreambuf_iterator < _CharT2 >, _CharT2 * );

      template < typename _CharT2 >
 friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
               istreambuf_iterator < _CharT2 > > :: __type
 find ( istreambuf_iterator < _CharT2 >, istreambuf_iterator < _CharT2 >,
      const _CharT2 & );

    private :







      mutable streambuf_type * _M_sbuf;
      mutable int_type _M_c;

    public :

      istreambuf_iterator ( ) throw ( )
      : _M_sbuf ( 0 ), _M_c ( traits_type :: eof ( ) ) { }


      istreambuf_iterator ( istream_type & __s ) throw ( )
      : _M_sbuf ( __s . rdbuf ( ) ), _M_c ( traits_type :: eof ( ) ) { }


      istreambuf_iterator ( streambuf_type * __s ) throw ( )
      : _M_sbuf ( __s ), _M_c ( traits_type :: eof ( ) ) { }




      char_type
      operator * ( ) const
      {







 return traits_type :: to_char_type ( _M_get ( ) );
      }


      istreambuf_iterator &
      operator ++ ( )
      {


                        ;
 if ( _M_sbuf )
   {
     _M_sbuf -> sbumpc ( );
     _M_c = traits_type :: eof ( );
   }
 return * this;
      }


      istreambuf_iterator
      operator ++ ( int )
      {


                        ;

 istreambuf_iterator __old = * this;
 if ( _M_sbuf )
   {
     __old . _M_c = _M_sbuf -> sbumpc ( );
     _M_c = traits_type :: eof ( );
   }
 return __old;
      }





      bool
      equal ( const istreambuf_iterator & __b ) const
      { return _M_at_eof ( ) == __b . _M_at_eof ( ); }

    private :
      int_type
      _M_get ( ) const
      {
 const int_type __eof = traits_type :: eof ( );
 int_type __ret = __eof;
 if ( _M_sbuf )
   {
     if ( ! traits_type :: eq_int_type ( _M_c, __eof ) )
       __ret = _M_c;
     else if ( ! traits_type :: eq_int_type ( ( __ret = _M_sbuf -> sgetc ( ) ),
            __eof ) )
       _M_c = __ret;
     else
       _M_sbuf = 0;
   }
 return __ret;
      }

      bool
      _M_at_eof ( ) const
      {
 const int_type __eof = traits_type :: eof ( );
 return traits_type :: eq_int_type ( _M_get ( ), __eof );
      }
    };
# 185
template < typename _CharT, typename _Traits >
    inline bool
    operator == ( const istreambuf_iterator < _CharT, _Traits > & __a,
        const istreambuf_iterator < _CharT, _Traits > & __b )
    { return __a . equal ( __b ); }
# 191
template < typename _CharT, typename _Traits >
    inline bool
    operator != ( const istreambuf_iterator < _CharT, _Traits > & __a,
        const istreambuf_iterator < _CharT, _Traits > & __b )
    { return ! __a . equal ( __b ); }
# 198
template < typename _CharT, typename _Traits >
    class ostreambuf_iterator
    : public iterator < output_iterator_tag, void, void, void, void >
    {
    public :



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf < _CharT, _Traits > streambuf_type;
      typedef basic_ostream < _CharT, _Traits > ostream_type;


      template < typename _CharT2 >
 friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
                      ostreambuf_iterator < _CharT2 > > :: __type
 copy ( istreambuf_iterator < _CharT2 >, istreambuf_iterator < _CharT2 >,
      ostreambuf_iterator < _CharT2 > );

    private :
      streambuf_type * _M_sbuf;
      bool _M_failed;

    public :

      ostreambuf_iterator ( ostream_type & __s ) throw ( )
      : _M_sbuf ( __s . rdbuf ( ) ), _M_failed ( ! _M_sbuf ) { }


      ostreambuf_iterator ( streambuf_type * __s ) throw ( )
      : _M_sbuf ( __s ), _M_failed ( ! _M_sbuf ) { }


      ostreambuf_iterator &
      operator = ( _CharT __c )
      {
 if ( ! _M_failed &&
     _Traits :: eq_int_type ( _M_sbuf -> sputc ( __c ), _Traits :: eof ( ) ) )
   _M_failed = true;
 return * this;
      }


      ostreambuf_iterator &
      operator * ( )
      { return * this; }


      ostreambuf_iterator &
      operator ++ ( int )
      { return * this; }


      ostreambuf_iterator &
      operator ++ ( )
      { return * this; }


      bool
      failed ( ) const throw ( )
      { return _M_failed; }

      ostreambuf_iterator &
      _M_put ( const _CharT * __ws, streamsize __len )
      {
 if ( __builtin_expect ( ! _M_failed, true )
     && __builtin_expect ( this -> _M_sbuf -> sputn ( __ws, __len ) != __len,
    false ) )
   _M_failed = true;
 return * this;
      }
    };
# 273
template < typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
                           ostreambuf_iterator < _CharT > > :: __type
    copy ( istreambuf_iterator < _CharT > __first,
  istreambuf_iterator < _CharT > __last,
  ostreambuf_iterator < _CharT > __result )
    {
      if ( __first . _M_sbuf && ! __last . _M_sbuf && ! __result . _M_failed )
 {
   bool __ineof;
   __copy_streambufs_eof ( __first . _M_sbuf, __result . _M_sbuf, __ineof );
   if ( ! __ineof )
     __result . _M_failed = true;
 }
      return __result;
    }
# 290
template < bool _IsMove, typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
            ostreambuf_iterator < _CharT > > :: __type
    __copy_move_a2 ( _CharT * __first, _CharT * __last,
     ostreambuf_iterator < _CharT > __result )
    {
      const streamsize __num = __last - __first;
      if ( __num > 0 )
 __result . _M_put ( __first, __num );
      return __result;
    }
# 302
template < bool _IsMove, typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
        ostreambuf_iterator < _CharT > > :: __type
    __copy_move_a2 ( const _CharT * __first, const _CharT * __last,
     ostreambuf_iterator < _CharT > __result )
    {
      const streamsize __num = __last - __first;
      if ( __num > 0 )
 __result . _M_put ( __first, __num );
      return __result;
    }
# 314
template < bool _IsMove, typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
            _CharT * > :: __type
    __copy_move_a2 ( istreambuf_iterator < _CharT > __first,
     istreambuf_iterator < _CharT > __last, _CharT * __result )
    {
      typedef istreambuf_iterator < _CharT > __is_iterator_type;
      typedef typename __is_iterator_type :: traits_type traits_type;
      typedef typename __is_iterator_type :: streambuf_type streambuf_type;
      typedef typename traits_type :: int_type int_type;

      if ( __first . _M_sbuf && ! __last . _M_sbuf )
 {
   streambuf_type * __sb = __first . _M_sbuf;
   int_type __c = __sb -> sgetc ( );
   while ( ! traits_type :: eq_int_type ( __c, traits_type :: eof ( ) ) )
     {
       const streamsize __n = __sb -> egptr ( ) - __sb -> gptr ( );
       if ( __n > 1 )
  {
    traits_type :: copy ( __result, __sb -> gptr ( ), __n );
    __sb -> gbump ( __n );
    __result += __n;
    __c = __sb -> underflow ( );
  }
       else
  {
    * __result ++ = traits_type :: to_char_type ( __c );
    __c = __sb -> snextc ( );
  }
     }
 }
      return __result;
    }
# 349
template < typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
          istreambuf_iterator < _CharT > > :: __type
    find ( istreambuf_iterator < _CharT > __first,
  istreambuf_iterator < _CharT > __last, const _CharT & __val )
    {
      typedef istreambuf_iterator < _CharT > __is_iterator_type;
      typedef typename __is_iterator_type :: traits_type traits_type;
      typedef typename __is_iterator_type :: streambuf_type streambuf_type;
      typedef typename traits_type :: int_type int_type;

      if ( __first . _M_sbuf && ! __last . _M_sbuf )
 {
   const int_type __ival = traits_type :: to_int_type ( __val );
   streambuf_type * __sb = __first . _M_sbuf;
   int_type __c = __sb -> sgetc ( );
   while ( ! traits_type :: eq_int_type ( __c, traits_type :: eof ( ) )
   && ! traits_type :: eq_int_type ( __c, __ival ) )
     {
       streamsize __n = __sb -> egptr ( ) - __sb -> gptr ( );
       if ( __n > 1 )
  {
    const _CharT * __p = traits_type :: find ( __sb -> gptr ( ),
       __n, __val );
    if ( __p )
      __n = __p - __sb -> gptr ( );
    __sb -> gbump ( __n );
    __c = __sb -> sgetc ( );
  }
       else
  __c = __sb -> snextc ( );
     }

   if ( ! traits_type :: eq_int_type ( __c, traits_type :: eof ( ) ) )
     __first . _M_c = __c;
   else
     __first . _M_sbuf = 0;
 }
      return __first;
    }
# 390
}
# 52 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 64 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
template< class _Tv> void __convert_to_v(const char * , _Tv & , ios_base::iostate & , const __c_locale & ); 
# 72
template<> void __convert_to_v(const char *, float &, ios_base::iostate &, const __c_locale &); 
# 77
template<> void __convert_to_v(const char *, double &, ios_base::iostate &, const __c_locale &); 
# 82
template<> void __convert_to_v(const char *, long double &, ios_base::iostate &, const __c_locale &); 
# 87
template< class _CharT, class _Traits> 
# 88
struct __pad { 
# 91
static void _S_pad(ios_base & , _CharT , _CharT * , const _CharT * , streamsize , streamsize ); 
# 93
}; 
# 100
template < typename _CharT >
    _CharT *
    __add_grouping ( _CharT * __s, _CharT __sep,
     const char * __gbeg, size_t __gsize,
     const _CharT * __first, const _CharT * __last );
# 109
template < typename _CharT >
    inline
    ostreambuf_iterator < _CharT >
    __write ( ostreambuf_iterator < _CharT > __s, const _CharT * __ws, int __len )
    {
      __s . _M_put ( __ws, __len );
      return __s;
    }
# 119
template < typename _CharT, typename _OutIter >
    inline
    _OutIter
    __write ( _OutIter __s, const _CharT * __ws, int __len )
    {
      for ( int __j = 0; __j < __len; __j ++, ++ __s )
 * __s = __ws [ __j ];
      return __s;
    }
# 143 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
template < typename _CharT >
    class __ctype_abstract_base : public locale :: facet, public ctype_base
    {
    public :


      typedef _CharT char_type;

      bool
      is ( mask __m, char_type __c ) const
      { return this -> do_is ( __m, __c ); }

      const char_type *
      is ( const char_type * __lo, const char_type * __hi, mask * __vec ) const
      { return this -> do_is ( __lo, __hi, __vec ); }

      const char_type *
      scan_is ( mask __m, const char_type * __lo, const char_type * __hi ) const
      { return this -> do_scan_is ( __m, __lo, __hi ); }

      const char_type *
      scan_not ( mask __m, const char_type * __lo, const char_type * __hi ) const
      { return this -> do_scan_not ( __m, __lo, __hi ); }

      char_type
      toupper ( char_type __c ) const
      { return this -> do_toupper ( __c ); }

      const char_type *
      toupper ( char_type * __lo, const char_type * __hi ) const
      { return this -> do_toupper ( __lo, __hi ); }

      char_type
      tolower ( char_type __c ) const
      { return this -> do_tolower ( __c ); }

      const char_type *
      tolower ( char_type * __lo, const char_type * __hi ) const
      { return this -> do_tolower ( __lo, __hi ); }

      char_type
      widen ( char __c ) const
      { return this -> do_widen ( __c ); }

      const char *
      widen ( const char * __lo, const char * __hi, char_type * __to ) const
      { return this -> do_widen ( __lo, __hi, __to ); }

      char
      narrow ( char_type __c, char __dfault ) const
      { return this -> do_narrow ( __c, __dfault ); }

      const char_type *
      narrow ( const char_type * __lo, const char_type * __hi,
       char __dfault, char * __to ) const
      { return this -> do_narrow ( __lo, __hi, __dfault, __to ); }

    protected :
      explicit
      __ctype_abstract_base ( size_t __refs = 0 ) : facet ( __refs ) { }

      virtual
      ~ __ctype_abstract_base ( ) { }

      virtual bool
      do_is ( mask __m, char_type __c ) const = 0;

      virtual const char_type *
      do_is ( const char_type * __lo, const char_type * __hi,
     mask * __vec ) const = 0;

      virtual const char_type *
      do_scan_is ( mask __m, const char_type * __lo,
   const char_type * __hi ) const = 0;

      virtual const char_type *
      do_scan_not ( mask __m, const char_type * __lo,
    const char_type * __hi ) const = 0;

      virtual char_type
      do_toupper ( char_type ) const = 0;

      virtual const char_type *
      do_toupper ( char_type * __lo, const char_type * __hi ) const = 0;

      virtual char_type
      do_tolower ( char_type ) const = 0;

      virtual const char_type *
      do_tolower ( char_type * __lo, const char_type * __hi ) const = 0;

      virtual char_type
      do_widen ( char ) const = 0;

      virtual const char *
      do_widen ( const char * __lo, const char * __hi,
        char_type * __dest ) const = 0;

      virtual char
      do_narrow ( char_type, char __dfault ) const = 0;

      virtual const char_type *
      do_narrow ( const char_type * __lo, const char_type * __hi,
  char __dfault, char * __dest ) const = 0;
    };
# 604 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
template < typename _CharT >
    class ctype : public __ctype_abstract_base < _CharT >
    {
    public :

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base < _CharT > :: mask mask;


      static locale :: id id;

      explicit
      ctype ( size_t __refs = 0 ) : __ctype_abstract_base < _CharT > ( __refs ) { }

   protected :
      virtual
      ~ ctype ( );

      virtual bool
      do_is ( mask __m, char_type __c ) const;

      virtual const char_type *
      do_is ( const char_type * __lo, const char_type * __hi, mask * __vec ) const;

      virtual const char_type *
      do_scan_is ( mask __m, const char_type * __lo, const char_type * __hi ) const;

      virtual const char_type *
      do_scan_not ( mask __m, const char_type * __lo,
    const char_type * __hi ) const;

      virtual char_type
      do_toupper ( char_type __c ) const;

      virtual const char_type *
      do_toupper ( char_type * __lo, const char_type * __hi ) const;

      virtual char_type
      do_tolower ( char_type __c ) const;

      virtual const char_type *
      do_tolower ( char_type * __lo, const char_type * __hi ) const;

      virtual char_type
      do_widen ( char __c ) const;

      virtual const char *
      do_widen ( const char * __lo, const char * __hi, char_type * __dest ) const;

      virtual char
      do_narrow ( char_type, char __dfault ) const;

      virtual const char_type *
      do_narrow ( const char_type * __lo, const char_type * __hi,
  char __dfault, char * __dest ) const;
    };
# 661
template< class _CharT> locale::id 
# 662
ctype< _CharT> ::id; 
# 674 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
template<> class ctype< char>  : public locale::facet, public ctype_base { 
# 679
public: typedef char char_type; 
# 683
protected: __c_locale _M_c_locale_ctype; 
# 684
bool _M_del; 
# 685
__to_type _M_toupper; 
# 686
__to_type _M_tolower; 
# 687
const mask *_M_table; 
# 688
mutable char _M_widen_ok; 
# 689
mutable char _M_widen[1 + (static_cast< unsigned char>((-1)))]; 
# 690
mutable char _M_narrow[1 + (static_cast< unsigned char>((-1)))]; 
# 691
mutable char _M_narrow_ok; 
# 696
public: static locale::id id; 
# 698
static const size_t table_size = (1 + (static_cast< unsigned char>((-1)))); 
# 711 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
explicit ctype(const mask *  = 0, bool  = (false), size_t  = (0)); 
# 724 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
explicit ctype(__c_locale , const mask *  = 0, bool  = (false), size_t  = (0)); 
# 737 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
inline bool is(mask , char ) const; 
# 752 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
inline const char *is(const char * , const char * , mask * ) const; 
# 766 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
inline const char *scan_is(mask , const char * , const char * ) const; 
# 780 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
inline const char *scan_not(mask , const char * , const char * ) const; 
# 795 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
char_type toupper(char_type __c) const 
# 796
{ return this->do_toupper(__c); } 
# 812 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
const char_type *toupper(char_type *__lo, const char_type *__hi) const 
# 813
{ return this->do_toupper(__lo, __hi); } 
# 828 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
char_type tolower(char_type __c) const 
# 829
{ return this->do_tolower(__c); } 
# 845 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
const char_type *tolower(char_type *__lo, const char_type *__hi) const 
# 846
{ return this->do_tolower(__lo, __hi); } 
# 865 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
char_type widen(char __c) const 
# 866
{ 
# 867
if (_M_widen_ok) { 
# 868
return (_M_widen)[static_cast< unsigned char>(__c)]; }  
# 869
this->_M_widen_init(); 
# 870
return this->do_widen(__c); 
# 871
} 
# 892 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
const char *widen(const char *__lo, const char *__hi, char_type *__to) const 
# 893
{ 
# 894
if ((_M_widen_ok) == 1) 
# 895
{ 
# 896
__builtin_memcpy(__to, __lo, __hi - __lo); 
# 897
return __hi; 
# 898
}  
# 899
if (!(_M_widen_ok)) { 
# 900
this->_M_widen_init(); }  
# 901
return this->do_widen(__lo, __hi, __to); 
# 902
} 
# 923 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
char narrow(char_type __c, char __dfault) const 
# 924
{ 
# 925
if ((_M_narrow)[static_cast< unsigned char>(__c)]) { 
# 926
return (_M_narrow)[static_cast< unsigned char>(__c)]; }  
# 927
const char __t = this->do_narrow(__c, __dfault); 
# 928
if (__t != __dfault) { 
# 929
((_M_narrow)[static_cast< unsigned char>(__c)]) = __t; }  
# 930
return __t; 
# 931
} 
# 956 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
const char_type *narrow(const char_type *__lo, const char_type *__hi, char 
# 957
__dfault, char *__to) const 
# 958
{ 
# 959
if (__builtin_expect((_M_narrow_ok) == 1, true)) 
# 960
{ 
# 961
__builtin_memcpy(__to, __lo, __hi - __lo); 
# 962
return __hi; 
# 963
}  
# 964
if (!(_M_narrow_ok)) { 
# 965
this->_M_narrow_init(); }  
# 966
return this->do_narrow(__lo, __hi, __dfault, __to); 
# 967
} 
# 974
const mask *table() const throw() 
# 975
{ return _M_table; } 
# 979
static const mask *classic_table() throw(); 
# 989
protected: virtual ~ctype(); 
# 1005 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type) const; 
# 1022 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type * , const char_type * ) const; 
# 1038 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type) const; 
# 1055 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type * , const char_type * ) const; 
# 1075 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
virtual char_type do_widen(char __c) const 
# 1076
{ return __c; } 
# 1098 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
virtual const char *do_widen(const char *__lo, const char *__hi, char_type *__dest) const 
# 1099
{ 
# 1100
__builtin_memcpy(__dest, __lo, __hi - __lo); 
# 1101
return __hi; 
# 1102
} 
# 1124 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
virtual char do_narrow(char_type __c, char) const 
# 1125
{ return __c; } 
# 1150 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type *__lo, const char_type *__hi, char, char *
# 1151
__dest) const 
# 1152
{ 
# 1153
__builtin_memcpy(__dest, __lo, __hi - __lo); 
# 1154
return __hi; 
# 1155
} 
# 1158
private: void _M_narrow_init() const; 
# 1159
void _M_widen_init() const; 
# 1160
}; 
# 1175 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
template<> class ctype< wchar_t>  : public __ctype_abstract_base< wchar_t>  { 
# 1180
public: typedef wchar_t char_type; 
# 1181
typedef wctype_t __wmask_type; 
# 1184
protected: __c_locale _M_c_locale_ctype; 
# 1187
bool _M_narrow_ok; 
# 1188
char _M_narrow[128]; 
# 1189
wint_t _M_widen[1 + (static_cast< unsigned char>((-1)))]; 
# 1192
mask _M_bit[16]; 
# 1193
__wmask_type _M_wmask[16]; 
# 1198
public: static locale::id id; 
# 1208 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
explicit ctype(size_t  = (0)); 
# 1219 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
explicit ctype(__c_locale , size_t  = (0)); 
# 1223
protected: __wmask_type _M_convert_to_wmask(const mask ) const; 
# 1227
virtual ~ctype(); 
# 1243 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
virtual bool do_is(mask , char_type ) const; 
# 1262 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
virtual const char_type *do_is(const char_type * , const char_type * , mask * ) const; 
# 1280 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
virtual const char_type *do_scan_is(mask , const char_type * , const char_type * ) const; 
# 1298 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
virtual const char_type *do_scan_not(mask , const char_type * , const char_type * ) const; 
# 1315 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type) const; 
# 1332 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type * , const char_type * ) const; 
# 1348 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type) const; 
# 1365 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type * , const char_type * ) const; 
# 1385 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
virtual char_type do_widen(char) const; 
# 1407 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
virtual const char *do_widen(const char * , const char * , char_type * ) const; 
# 1430 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
virtual char do_narrow(char_type, char ) const; 
# 1456 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type * , const char_type * , char , char * ) const; 
# 1461
void _M_initialize_ctype(); 
# 1462
}; 
# 1466
template < typename _CharT >
    class ctype_byname : public ctype < _CharT >
    {
    public :
      typedef typename ctype < _CharT > :: mask mask;

      explicit
      ctype_byname ( const char * __s, size_t __refs = 0 );

    protected :
      virtual
      ~ ctype_byname ( ) { };
    };
# 1482
template<> class ctype_byname< char>  : public ctype< char>  { 
# 1486
public: explicit ctype_byname(const char * , size_t  = (0)); 
# 1490
protected: virtual ~ctype_byname(); 
# 1491
}; 
# 1495
template<> class ctype_byname< wchar_t>  : public ctype< wchar_t>  { 
# 1499
public: explicit ctype_byname(const char * , size_t  = (0)); 
# 1503
protected: virtual ~ctype_byname(); 
# 1504
}; 
# 1507
}
# 37 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/x86_64-redhat-linux/bits/ctype_inline.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
inline bool ctype< char> ::is(mask __m, char __c) const 
# 42
{ return ((_M_table)[static_cast< unsigned char>(__c)]) & __m; } 
# 46
inline const char *ctype< char> ::is(const char *__low, const char *__high, mask *__vec) const 
# 47
{ 
# 48
while (__low < __high) { 
# 49
(*(__vec++)) = ((_M_table)[static_cast< unsigned char>((*(__low++)))]); }  
# 50
return __high; 
# 51
} 
# 55
inline const char *ctype< char> ::scan_is(mask __m, const char *__low, const char *__high) const 
# 56
{ 
# 57
while ((__low < __high) && (!(((_M_table)[static_cast< unsigned char>((*__low))]) & __m))) { 
# 59
++__low; }  
# 60
return __low; 
# 61
} 
# 65
inline const char *ctype< char> ::scan_not(mask __m, const char *__low, const char *__high) const 
# 66
{ 
# 67
while ((__low < __high) && ((((_M_table)[static_cast< unsigned char>((*__low))]) & __m) != 0)) { 
# 69
++__low; }  
# 70
return __low; 
# 71
} 
# 73
}
# 1512 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 1515
class __num_base { 
# 1521
public: enum { 
# 1522
_S_ominus, 
# 1523
_S_oplus, 
# 1524
_S_ox, 
# 1525
_S_oX, 
# 1526
_S_odigits, 
# 1527
_S_odigits_end = 20, 
# 1528
_S_oudigits = 20, 
# 1529
_S_oudigits_end = 36, 
# 1530
_S_oe = 18, 
# 1531
_S_oE = 34, 
# 1532
_S_oend = 36
# 1533
}; 
# 1540
static const char *_S_atoms_out; 
# 1544
static const char *_S_atoms_in; 
# 1547
enum { 
# 1548
_S_iminus, 
# 1549
_S_iplus, 
# 1550
_S_ix, 
# 1551
_S_iX, 
# 1552
_S_izero, 
# 1553
_S_ie = 18, 
# 1554
_S_iE = 24, 
# 1555
_S_iend = 26
# 1556
}; 
# 1561
static void _S_format_float(const ios_base & , char * , char ); 
# 1562
}; 
# 1564
template < typename _CharT >
    struct __numpunct_cache : public locale :: facet
    {
      const char * _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT * _M_truename;
      size_t _M_truename_size;
      const _CharT * _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out [ __num_base :: _S_oend ];





      _CharT _M_atoms_in [ __num_base :: _S_iend ];

      bool _M_allocated;

      __numpunct_cache ( size_t __refs = 0 ) : facet ( __refs ),
      _M_grouping ( __null ), _M_grouping_size ( 0 ), _M_use_grouping ( false ),
      _M_truename ( __null ), _M_truename_size ( 0 ), _M_falsename ( __null ),
      _M_falsename_size ( 0 ), _M_decimal_point ( _CharT ( ) ),
      _M_thousands_sep ( _CharT ( ) ), _M_allocated ( false )
      { }

      ~ __numpunct_cache ( );

      void
      _M_cache ( const locale & __loc );

    private :
      __numpunct_cache &
      operator = ( const __numpunct_cache & );

      explicit
      __numpunct_cache ( const __numpunct_cache & );
    };
# 1611
template < typename _CharT >
    __numpunct_cache < _CharT > :: ~ __numpunct_cache ( )
    {
      if ( _M_allocated )
 {
   delete [ ] _M_grouping;
   delete [ ] _M_truename;
   delete [ ] _M_falsename;
 }
    }
# 1635 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
template < typename _CharT >
    class numpunct : public locale :: facet
    {
    public :



      typedef _CharT char_type;
      typedef basic_string < _CharT > string_type;

      typedef __numpunct_cache < _CharT > __cache_type;

    protected :
      __cache_type * _M_data;

    public :

      static locale :: id id;






      explicit
      numpunct ( size_t __refs = 0 ) : facet ( __refs ), _M_data ( __null )
      { _M_initialize_numpunct ( ); }

      explicit
      numpunct ( __cache_type * __cache, size_t __refs = 0 )
      : facet ( __refs ), _M_data ( __cache )
      { _M_initialize_numpunct ( ); }

      explicit
      numpunct ( __c_locale __cloc, size_t __refs = 0 )
      : facet ( __refs ), _M_data ( __null )
      { _M_initialize_numpunct ( __cloc ); }

      char_type
      decimal_point ( ) const
      { return this -> do_decimal_point ( ); }

      char_type
      thousands_sep ( ) const
      { return this -> do_thousands_sep ( ); }

      string
      grouping ( ) const
      { return this -> do_grouping ( ); }

      string_type
      truename ( ) const
      { return this -> do_truename ( ); }

      string_type
      falsename ( ) const
      { return this -> do_falsename ( ); }

    protected :

      virtual
      ~ numpunct ( );

      virtual char_type
      do_decimal_point ( ) const
      { return _M_data -> _M_decimal_point; }

      virtual char_type
      do_thousands_sep ( ) const
      { return _M_data -> _M_thousands_sep; }

      virtual string
      do_grouping ( ) const
      { return _M_data -> _M_grouping; }

      virtual string_type
      do_truename ( ) const
      { return _M_data -> _M_truename; }

      virtual string_type
      do_falsename ( ) const
      { return _M_data -> _M_falsename; }


      void
      _M_initialize_numpunct ( __c_locale __cloc = __null );
    };
# 1847 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
template< class _CharT> locale::id 
# 1848
numpunct< _CharT> ::id; 
# 1851
template<> numpunct< char> ::~numpunct(); 
# 1855
template<> void numpunct< char> ::_M_initialize_numpunct(__c_locale ); 
# 1859
template<> numpunct< wchar_t> ::~numpunct(); 
# 1863
template<> void numpunct< wchar_t> ::_M_initialize_numpunct(__c_locale ); 
# 1867
template < typename _CharT >
    class numpunct_byname : public numpunct < _CharT >
    {
    public :
      typedef _CharT char_type;
      typedef basic_string < _CharT > string_type;

      explicit
      numpunct_byname ( const char * __s, size_t __refs = 0 )
      : numpunct < _CharT > ( __refs )
      {
 if ( __builtin_strcmp ( __s, "C" ) != 0
     && __builtin_strcmp ( __s, "POSIX" ) != 0 )
   {
     __c_locale __tmp;
     this -> _S_create_c_locale ( __tmp, __s );
     this -> _M_initialize_numpunct ( __tmp );
     this -> _S_destroy_c_locale ( __tmp );
   }
      }

    protected :
      virtual
      ~ numpunct_byname ( ) { }
    };
# 1907 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
template < typename _CharT, typename _InIter >
    class num_get : public locale :: facet
    {
    public :



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale :: id id;

      explicit
      num_get ( size_t __refs = 0 ) : facet ( __refs ) { }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, bool & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, long & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, unsigned short & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, unsigned int & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, unsigned long & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }


      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, long long & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, unsigned long long & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, float & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, double & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, long double & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, void * & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

    protected :

      virtual ~ num_get ( ) { }

      iter_type
      _M_extract_float ( iter_type, iter_type, ios_base &, ios_base :: iostate &,
         string & ) const;

      template < typename _ValueT >
        iter_type
        _M_extract_int ( iter_type, iter_type, ios_base &, ios_base :: iostate &,
         _ValueT & ) const;

      template < typename _CharT2 >
      typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value, int > :: __type
        _M_find ( const _CharT2 *, size_t __len, _CharT2 __c ) const
        {
   int __ret = - 1;
   if ( __len <= 10 )
     {
       if ( __c >= _CharT2 ( '0' ) && __c < _CharT2 ( _CharT2 ( '0' ) + __len ) )
  __ret = __c - _CharT2 ( '0' );
     }
   else
     {
       if ( __c >= _CharT2 ( '0' ) && __c <= _CharT2 ( '9' ) )
  __ret = __c - _CharT2 ( '0' );
       else if ( __c >= _CharT2 ( 'a' ) && __c <= _CharT2 ( 'f' ) )
  __ret = 10 + ( __c - _CharT2 ( 'a' ) );
       else if ( __c >= _CharT2 ( 'A' ) && __c <= _CharT2 ( 'F' ) )
  __ret = 10 + ( __c - _CharT2 ( 'A' ) );
     }
   return __ret;
 }

      template < typename _CharT2 >
      typename __gnu_cxx :: __enable_if < ! __is_char < _CharT2 > :: __value,
          int > :: __type
        _M_find ( const _CharT2 * __zero, size_t __len, _CharT2 __c ) const
        {
   int __ret = - 1;
   const char_type * __q = char_traits < _CharT2 > :: find ( __zero, __len, __c );
   if ( __q )
     {
       __ret = __q - __zero;
       if ( __ret > 15 )
  __ret -= 6;
     }
   return __ret;
 }

      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate &, bool & ) const;

      virtual iter_type
      do_get ( iter_type __beg, iter_type __end, ios_base & __io,
      ios_base :: iostate & __err, long & __v ) const
      { return _M_extract_int ( __beg, __end, __io, __err, __v ); }

      virtual iter_type
      do_get ( iter_type __beg, iter_type __end, ios_base & __io,
      ios_base :: iostate & __err, unsigned short & __v ) const
      { return _M_extract_int ( __beg, __end, __io, __err, __v ); }

      virtual iter_type
      do_get ( iter_type __beg, iter_type __end, ios_base & __io,
      ios_base :: iostate & __err, unsigned int & __v ) const
      { return _M_extract_int ( __beg, __end, __io, __err, __v ); }

      virtual iter_type
      do_get ( iter_type __beg, iter_type __end, ios_base & __io,
      ios_base :: iostate & __err, unsigned long & __v ) const
      { return _M_extract_int ( __beg, __end, __io, __err, __v ); }


      virtual iter_type
      do_get ( iter_type __beg, iter_type __end, ios_base & __io,
      ios_base :: iostate & __err, long long & __v ) const
      { return _M_extract_int ( __beg, __end, __io, __err, __v ); }

      virtual iter_type
      do_get ( iter_type __beg, iter_type __end, ios_base & __io,
      ios_base :: iostate & __err, unsigned long long & __v ) const
      { return _M_extract_int ( __beg, __end, __io, __err, __v ); }


      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate & __err,
      float & ) const;

      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate & __err,
      double & ) const;







      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate & __err,
      long double & ) const;


      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate & __err,
      void * & ) const;

    };
# 2229 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
template< class _CharT, class _InIter> locale::id 
# 2230
num_get< _CharT, _InIter> ::id; 
# 2244 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
template < typename _CharT, typename _OutIter >
    class num_put : public locale :: facet
    {
    public :



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale :: id id;

      explicit
      num_put ( size_t __refs = 0 ) : facet ( __refs ) { }

      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill, bool __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }

      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill, long __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }

      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill,
   unsigned long __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }


      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill, long long __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }

      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill,
   unsigned long long __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }

      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill, double __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }

      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill,
   long double __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }

      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill,
   const void * __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }

    protected :
      template < typename _ValueT >
        iter_type
        _M_insert_float ( iter_type, ios_base & __io, char_type __fill,
   char __mod, _ValueT __v ) const;

      void
      _M_group_float ( const char * __grouping, size_t __grouping_size,
       char_type __sep, const char_type * __p, char_type * __new,
       char_type * __cs, int & __len ) const;

      template < typename _ValueT >
        iter_type
        _M_insert_int ( iter_type, ios_base & __io, char_type __fill,
        _ValueT __v ) const;

      void
      _M_group_int ( const char * __grouping, size_t __grouping_size,
     char_type __sep, ios_base & __io, char_type * __new,
     char_type * __cs, int & __len ) const;

      void
      _M_pad ( char_type __fill, streamsize __w, ios_base & __io,
      char_type * __new, const char_type * __cs, int & __len ) const;


      virtual
      ~ num_put ( ) { };

      virtual iter_type
      do_put ( iter_type, ios_base &, char_type __fill, bool __v ) const;

      virtual iter_type
      do_put ( iter_type __s, ios_base & __io, char_type __fill, long __v ) const
      { return _M_insert_int ( __s, __io, __fill, __v ); }

      virtual iter_type
      do_put ( iter_type __s, ios_base & __io, char_type __fill,
      unsigned long __v ) const
      { return _M_insert_int ( __s, __io, __fill, __v ); }


      virtual iter_type
      do_put ( iter_type __s, ios_base & __io, char_type __fill,
      long long __v ) const
      { return _M_insert_int ( __s, __io, __fill, __v ); }

      virtual iter_type
      do_put ( iter_type __s, ios_base & __io, char_type __fill,
      unsigned long long __v ) const
      { return _M_insert_int ( __s, __io, __fill, __v ); }


      virtual iter_type
      do_put ( iter_type, ios_base &, char_type __fill, double __v ) const;






      virtual iter_type
      do_put ( iter_type, ios_base &, char_type __fill, long double __v ) const;


      virtual iter_type
      do_put ( iter_type, ios_base &, char_type __fill, const void * __v ) const;







    };
# 2508 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.h" 3
template< class _CharT, class _OutIter> locale::id 
# 2509
num_put< _CharT, _OutIter> ::id; 
# 2519
template < typename _CharT >
    inline bool
    isspace ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: space, __c ); }
# 2525
template < typename _CharT >
    inline bool
    isprint ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: print, __c ); }
# 2531
template < typename _CharT >
    inline bool
    iscntrl ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: cntrl, __c ); }
# 2537
template < typename _CharT >
    inline bool
    isupper ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: upper, __c ); }
# 2543
template < typename _CharT >
    inline bool
    islower ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: lower, __c ); }
# 2549
template < typename _CharT >
    inline bool
    isalpha ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: alpha, __c ); }
# 2555
template < typename _CharT >
    inline bool
    isdigit ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: digit, __c ); }
# 2561
template < typename _CharT >
    inline bool
    ispunct ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: punct, __c ); }
# 2567
template < typename _CharT >
    inline bool
    isxdigit ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: xdigit, __c ); }
# 2573
template < typename _CharT >
    inline bool
    isalnum ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: alnum, __c ); }
# 2579
template < typename _CharT >
    inline bool
    isgraph ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: graph, __c ); }
# 2585
template < typename _CharT >
    inline _CharT
    toupper ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . toupper ( __c ); }
# 2591
template < typename _CharT >
    inline _CharT
    tolower ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . tolower ( __c ); }
# 2596
}
# 37 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
template< class _Facet> 
# 42
struct __use_cache { 
# 45
const _Facet *operator()(const locale & ) const; 
# 46
}; 
# 49
template < typename _CharT >
    struct __use_cache < __numpunct_cache < _CharT > >
    {
      const __numpunct_cache < _CharT > *
      operator ( ) ( const locale & __loc ) const
      {
 const size_t __i = numpunct < _CharT > :: id . _M_id ( );
 const locale :: facet * * __caches = __loc . _M_impl -> _M_caches;
 if ( ! __caches [ __i ] )
   {
     __numpunct_cache < _CharT > * __tmp = __null;
     try
       {
  __tmp = new __numpunct_cache < _CharT >;
  __tmp -> _M_cache ( __loc );
       }
     catch ( ... )
       {
  delete __tmp;
  throw;
       }
     __loc . _M_impl -> _M_install_cache ( __tmp, __i );
   }
 return static_cast < const __numpunct_cache < _CharT > * > ( __caches [ __i ] );
      }
    };
# 76
template < typename _CharT >
    void
    __numpunct_cache < _CharT > :: _M_cache ( const locale & __loc )
    {
      _M_allocated = true;

      const numpunct < _CharT > & __np = use_facet < numpunct < _CharT > > ( __loc );

      _M_grouping_size = __np . grouping ( ) . size ( );
      char * __grouping = new char [ _M_grouping_size ];
      __np . grouping ( ) . copy ( __grouping, _M_grouping_size );
      _M_grouping = __grouping;
      _M_use_grouping = ( _M_grouping_size
    && static_cast < signed char > ( _M_grouping [ 0 ] ) > 0
    && ( _M_grouping [ 0 ]
        != __gnu_cxx :: __numeric_traits < char > :: __max ) );

      _M_truename_size = __np . truename ( ) . size ( );
      _CharT * __truename = new _CharT [ _M_truename_size ];
      __np . truename ( ) . copy ( __truename, _M_truename_size );
      _M_truename = __truename;

      _M_falsename_size = __np . falsename ( ) . size ( );
      _CharT * __falsename = new _CharT [ _M_falsename_size ];
      __np . falsename ( ) . copy ( __falsename, _M_falsename_size );
      _M_falsename = __falsename;

      _M_decimal_point = __np . decimal_point ( );
      _M_thousands_sep = __np . thousands_sep ( );

      const ctype < _CharT > & __ct = use_facet < ctype < _CharT > > ( __loc );
      __ct . widen ( __num_base :: _S_atoms_out,
   __num_base :: _S_atoms_out + __num_base :: _S_oend, _M_atoms_out );
      __ct . widen ( __num_base :: _S_atoms_in,
   __num_base :: _S_atoms_in + __num_base :: _S_iend, _M_atoms_in );
    }
# 122 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.tcc" 3
bool __verify_grouping(const char * , size_t , const string & ); 
# 127
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    _M_extract_float ( _InIter __beg, _InIter __end, ios_base & __io,
       ios_base :: iostate & __err, string & __xtrc ) const
    {
      typedef char_traits < _CharT > __traits_type;
      typedef __numpunct_cache < _CharT > __cache_type;
      __use_cache < __cache_type > __uc;
      const locale & __loc = __io . _M_getloc ( );
      const __cache_type * __lc = __uc ( __loc );
      const _CharT * __lit = __lc -> _M_atoms_in;
      char_type __c = char_type ( );


      bool __testeof = __beg == __end;


      if ( ! __testeof )
 {
   __c = * __beg;
   const bool __plus = __c == __lit [ __num_base :: _S_iplus ];
   if ( ( __plus || __c == __lit [ __num_base :: _S_iminus ] )
       && ! ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep )
       && ! ( __c == __lc -> _M_decimal_point ) )
     {
       __xtrc += __plus ? '+' : '-';
       if ( ++ __beg != __end )
  __c = * __beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while ( ! __testeof )
 {
   if ( ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep )
       || __c == __lc -> _M_decimal_point )
     break;
   else if ( __c == __lit [ __num_base :: _S_izero ] )
     {
       if ( ! __found_mantissa )
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++ __sep_pos;

       if ( ++ __beg != __end )
  __c = * __beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if ( __lc -> _M_use_grouping )
 __found_grouping . reserve ( 32 );
      const char_type * __lit_zero = __lit + __num_base :: _S_izero;

      if ( ! __lc -> _M_allocated )

 while ( ! __testeof )
   {
     const int __digit = _M_find ( __lit_zero, 10, __c );
     if ( __digit != - 1 )
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if ( __c == __lc -> _M_decimal_point
       && ! __found_dec && ! __found_sci )
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ( ( __c == __lit [ __num_base :: _S_ie ]
        || __c == __lit [ __num_base :: _S_iE ] )
       && ! __found_sci && __found_mantissa )
       {

  __xtrc += 'e';
  __found_sci = true;


  if ( ++ __beg != __end )
    {
      __c = * __beg;
      const bool __plus = __c == __lit [ __num_base :: _S_iplus ];
      if ( __plus || __c == __lit [ __num_base :: _S_iminus ] )
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if ( ++ __beg != __end )
       __c = * __beg;
     else
       __testeof = true;
   }
      else
 while ( ! __testeof )
   {


     if ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep )
       {
  if ( ! __found_dec && ! __found_sci )
    {


      if ( __sep_pos )
        {
   __found_grouping += static_cast < char > ( __sep_pos );
   __sep_pos = 0;
        }
      else
        {


   __xtrc . clear ( );
   break;
        }
    }
  else
    break;
       }
     else if ( __c == __lc -> _M_decimal_point )
       {
  if ( ! __found_dec && ! __found_sci )
    {



      if ( __found_grouping . size ( ) )
        __found_grouping += static_cast < char > ( __sep_pos );
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type * __q =
    __traits_type :: find ( __lit_zero, 10, __c );
  if ( __q )
    {
      __xtrc += '0' + ( __q - __lit_zero );
      __found_mantissa = true;
      ++ __sep_pos;
    }
  else if ( ( __c == __lit [ __num_base :: _S_ie ]
     || __c == __lit [ __num_base :: _S_iE ] )
    && ! __found_sci && __found_mantissa )
    {

      if ( __found_grouping . size ( ) && ! __found_dec )
        __found_grouping += static_cast < char > ( __sep_pos );
      __xtrc += 'e';
      __found_sci = true;


      if ( ++ __beg != __end )
        {
   __c = * __beg;
   const bool __plus = __c == __lit [ __num_base :: _S_iplus ];
   if ( ( __plus || __c == __lit [ __num_base :: _S_iminus ] )
       && ! ( __lc -> _M_use_grouping
     && __c == __lc -> _M_thousands_sep )
       && ! ( __c == __lc -> _M_decimal_point ) )
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if ( ++ __beg != __end )
       __c = * __beg;
     else
       __testeof = true;
   }



      if ( __found_grouping . size ( ) )
        {

   if ( ! __found_dec && ! __found_sci )
     __found_grouping += static_cast < char > ( __sep_pos );

          if ( ! std :: __verify_grouping ( __lc -> _M_grouping,
          __lc -> _M_grouping_size,
          __found_grouping ) )
     __err = ios_base :: failbit;
        }

      return __beg;
    }
# 351
template < typename _CharT, typename _InIter >
    template < typename _ValueT >
      _InIter
      num_get < _CharT, _InIter > ::
      _M_extract_int ( _InIter __beg, _InIter __end, ios_base & __io,
       ios_base :: iostate & __err, _ValueT & __v ) const
      {
        typedef char_traits < _CharT > __traits_type;
 using __gnu_cxx :: __add_unsigned;
 typedef typename __add_unsigned < _ValueT > :: __type __unsigned_type;
 typedef __numpunct_cache < _CharT > __cache_type;
 __use_cache < __cache_type > __uc;
 const locale & __loc = __io . _M_getloc ( );
 const __cache_type * __lc = __uc ( __loc );
 const _CharT * __lit = __lc -> _M_atoms_in;
 char_type __c = char_type ( );


 const ios_base :: fmtflags __basefield = __io . flags ( )
                                        & ios_base :: basefield;
 const bool __oct = __basefield == ios_base :: oct;
 int __base = __oct ? 8 : ( __basefield == ios_base :: hex ? 16 : 10 );


 bool __testeof = __beg == __end;


 bool __negative = false;
 if ( ! __testeof )
   {
     __c = * __beg;
     __negative = __c == __lit [ __num_base :: _S_iminus ];
     if ( ( __negative || __c == __lit [ __num_base :: _S_iplus ] )
  && ! ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep )
  && ! ( __c == __lc -> _M_decimal_point ) )
       {
  if ( ++ __beg != __end )
    __c = * __beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while ( ! __testeof )
   {
     if ( ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep )
  || __c == __lc -> _M_decimal_point )
       break;
     else if ( __c == __lit [ __num_base :: _S_izero ]
       && ( ! __found_zero || __base == 10 ) )
       {
  __found_zero = true;
  ++ __sep_pos;
  if ( __basefield == 0 )
    __base = 8;
  if ( __base == 8 )
    __sep_pos = 0;
       }
     else if ( __found_zero
       && ( __c == __lit [ __num_base :: _S_ix ]
    || __c == __lit [ __num_base :: _S_iX ] ) )
       {
  if ( __basefield == 0 )
    __base = 16;
  if ( __base == 16 )
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if ( ++ __beg != __end )
       {
  __c = * __beg;
  if ( ! __found_zero )
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = ( __base == 16 ? __num_base :: _S_iend
         - __num_base :: _S_izero : __base );


 string __found_grouping;
 if ( __lc -> _M_use_grouping )
   __found_grouping . reserve ( 32 );
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   ( __negative && __gnu_cxx :: __numeric_traits < _ValueT > :: __is_signed )
   ? - __gnu_cxx :: __numeric_traits < _ValueT > :: __min
   : __gnu_cxx :: __numeric_traits < _ValueT > :: __max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type * __lit_zero = __lit + __num_base :: _S_izero;

 if ( ! __lc -> _M_allocated )

   while ( ! __testeof )
     {
       __digit = _M_find ( __lit_zero, __len, __c );
       if ( __digit == - 1 )
  break;

       if ( __result > __smax )
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++ __sep_pos;
  }

       if ( ++ __beg != __end )
  __c = * __beg;
       else
  __testeof = true;
     }
 else
   while ( ! __testeof )
     {


       if ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep )
  {


    if ( __sep_pos )
      {
        __found_grouping += static_cast < char > ( __sep_pos );
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if ( __c == __lc -> _M_decimal_point )
  break;
       else
  {
    const char_type * __q =
      __traits_type :: find ( __lit_zero, __len, __c );
    if ( ! __q )
      break;

    __digit = __q - __lit_zero;
    if ( __digit > 15 )
      __digit -= 6;
    if ( __result > __smax )
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++ __sep_pos;
      }
  }

       if ( ++ __beg != __end )
  __c = * __beg;
       else
  __testeof = true;
     }



 if ( __found_grouping . size ( ) )
   {

     __found_grouping += static_cast < char > ( __sep_pos );

     if ( ! std :: __verify_grouping ( __lc -> _M_grouping,
     __lc -> _M_grouping_size,
     __found_grouping ) )
       __err = ios_base :: failbit;
   }



 if ( ( ! __sep_pos && ! __found_zero && ! __found_grouping . size ( ) )
     || __testfail )
   {
     __v = 0;
     __err = ios_base :: failbit;
   }
 else if ( __testoverflow )
   {
     if ( __negative
  && __gnu_cxx :: __numeric_traits < _ValueT > :: __is_signed )
       __v = __gnu_cxx :: __numeric_traits < _ValueT > :: __min;
     else
       __v = __gnu_cxx :: __numeric_traits < _ValueT > :: __max;
     __err = ios_base :: failbit;
   }
 else
   __v = __negative ? - __result : __result;

 if ( __testeof )
   __err |= ios_base :: eofbit;
 return __beg;
      }
# 572
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
           ios_base :: iostate & __err, bool & __v ) const
    {
      if ( ! ( __io . flags ( ) & ios_base :: boolalpha ) )
        {



   long __l = - 1;
          __beg = _M_extract_int ( __beg, __end, __io, __err, __l );
   if ( __l == 0 || __l == 1 )
     __v = bool ( __l );
   else
     {


       __v = true;
       __err = ios_base :: failbit;
       if ( __beg == __end )
  __err |= ios_base :: eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache < _CharT > __cache_type;
   __use_cache < __cache_type > __uc;
   const locale & __loc = __io . _M_getloc ( );
   const __cache_type * __lc = __uc ( __loc );

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc -> _M_falsename_size == 0;
   bool __donet = __lc -> _M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while ( ! __donef || ! __donet )
     {
       if ( __beg == __end )
  {
    __testeof = true;
    break;
  }

       const char_type __c = * __beg;

       if ( ! __donef )
  __testf = __c == __lc -> _M_falsename [ __n ];

       if ( ! __testf && __donet )
  break;

       if ( ! __donet )
  __testt = __c == __lc -> _M_truename [ __n ];

       if ( ! __testt && __donef )
  break;

       if ( ! __testt && ! __testf )
  break;

       ++ __n;
       ++ __beg;

       __donef = ! __testf || __n >= __lc -> _M_falsename_size;
       __donet = ! __testt || __n >= __lc -> _M_truename_size;
     }
   if ( __testf && __n == __lc -> _M_falsename_size && __n )
     {
       __v = false;
       if ( __testt && __n == __lc -> _M_truename_size )
  __err = ios_base :: failbit;
       else
  __err = __testeof ? ios_base :: eofbit : ios_base :: goodbit;
     }
   else if ( __testt && __n == __lc -> _M_truename_size && __n )
     {
       __v = true;
       __err = __testeof ? ios_base :: eofbit : ios_base :: goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base :: failbit;
       if ( __testeof )
  __err |= ios_base :: eofbit;
     }
 }
      return __beg;
    }
# 668
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
    ios_base :: iostate & __err, float & __v ) const
    {
      string __xtrc;
      __xtrc . reserve ( 32 );
      __beg = _M_extract_float ( __beg, __end, __io, __err, __xtrc );
      std :: __convert_to_v ( __xtrc . c_str ( ), __v, __err, _S_get_c_locale ( ) );
      if ( __beg == __end )
 __err |= ios_base :: eofbit;
      return __beg;
    }
# 683
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
           ios_base :: iostate & __err, double & __v ) const
    {
      string __xtrc;
      __xtrc . reserve ( 32 );
      __beg = _M_extract_float ( __beg, __end, __io, __err, __xtrc );
      std :: __convert_to_v ( __xtrc . c_str ( ), __v, __err, _S_get_c_locale ( ) );
      if ( __beg == __end )
 __err |= ios_base :: eofbit;
      return __beg;
    }
# 715 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
           ios_base :: iostate & __err, long double & __v ) const
    {
      string __xtrc;
      __xtrc . reserve ( 32 );
      __beg = _M_extract_float ( __beg, __end, __io, __err, __xtrc );
      std :: __convert_to_v ( __xtrc . c_str ( ), __v, __err, _S_get_c_locale ( ) );
      if ( __beg == __end )
 __err |= ios_base :: eofbit;
      return __beg;
    }
# 730
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
           ios_base :: iostate & __err, void * & __v ) const
    {

      typedef ios_base :: fmtflags fmtflags;
      const fmtflags __fmt = __io . flags ( );
      __io . flags ( ( __fmt & ~ ios_base :: basefield ) | ios_base :: hex );

      typedef __gnu_cxx :: __conditional_type < ( sizeof ( void * )
          <= sizeof ( unsigned long ) ),
 unsigned long, unsigned long long > :: __type _UIntPtrType;

      _UIntPtrType __ul;
      __beg = _M_extract_int ( __beg, __end, __io, __err, __ul );


      __io . flags ( __fmt );

      __v = reinterpret_cast < void * > ( __ul );
      return __beg;
    }
# 757
template < typename _CharT, typename _OutIter >
    void
    num_put < _CharT, _OutIter > ::
    _M_pad ( _CharT __fill, streamsize __w, ios_base & __io,
    _CharT * __new, const _CharT * __cs, int & __len ) const
    {


      __pad < _CharT, char_traits < _CharT > > :: _S_pad ( __io, __fill, __new,
        __cs, __w, __len );
      __len = static_cast < int > ( __w );
    }
# 772
template < typename _CharT, typename _ValueT >
    int
    __int_to_char ( _CharT * __bufend, _ValueT __v, const _CharT * __lit,
    ios_base :: fmtflags __flags, bool __dec )
    {
      _CharT * __buf = __bufend;
      if ( __builtin_expect ( __dec, true ) )
 {

   do
     {
       * -- __buf = __lit [ ( __v % 10 ) + __num_base :: _S_odigits ];
       __v /= 10;
     }
   while ( __v != 0 );
 }
      else if ( ( __flags & ios_base :: basefield ) == ios_base :: oct )
 {

   do
     {
       * -- __buf = __lit [ ( __v & 7 ) + __num_base :: _S_odigits ];
       __v >>= 3;
     }
   while ( __v != 0 );
 }
      else
 {

   const bool __uppercase = __flags & ios_base :: uppercase;
   const int __case_offset = __uppercase ? __num_base :: _S_oudigits
                                         : __num_base :: _S_odigits;
   do
     {
       * -- __buf = __lit [ ( __v & 15 ) + __case_offset ];
       __v >>= 4;
     }
   while ( __v != 0 );
 }
      return __bufend - __buf;
    }
# 816
template < typename _CharT, typename _OutIter >
    void
    num_put < _CharT, _OutIter > ::
    _M_group_int ( const char * __grouping, size_t __grouping_size, _CharT __sep,
   ios_base &, _CharT * __new, _CharT * __cs, int & __len ) const
    {
      _CharT * __p = std :: __add_grouping ( __new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len );
      __len = __p - __new;
    }
# 827
template < typename _CharT, typename _OutIter >
    template < typename _ValueT >
      _OutIter
      num_put < _CharT, _OutIter > ::
      _M_insert_int ( _OutIter __s, ios_base & __io, _CharT __fill,
      _ValueT __v ) const
      {
 using __gnu_cxx :: __add_unsigned;
 typedef typename __add_unsigned < _ValueT > :: __type __unsigned_type;
 typedef __numpunct_cache < _CharT > __cache_type;
 __use_cache < __cache_type > __uc;
 const locale & __loc = __io . _M_getloc ( );
 const __cache_type * __lc = __uc ( __loc );
 const _CharT * __lit = __lc -> _M_atoms_out;
 const ios_base :: fmtflags __flags = __io . flags ( );


 const int __ilen = 5 * sizeof ( _ValueT );
 _CharT * __cs = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
            * __ilen ) );



 const ios_base :: fmtflags __basefield = __flags & ios_base :: basefield;
 const bool __dec = ( __basefield != ios_base :: oct
       && __basefield != ios_base :: hex );
 const __unsigned_type __u = ( ( __v > 0 || ! __dec )
         ? __unsigned_type ( __v )
         : - __unsigned_type ( __v ) );
  int __len = __int_to_char ( __cs + __ilen, __u, __lit, __flags, __dec );
 __cs += __ilen - __len;


 if ( __lc -> _M_use_grouping )
   {


     _CharT * __cs2 = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
          * ( __len + 1 )
          * 2 ) );
     _M_group_int ( __lc -> _M_grouping, __lc -> _M_grouping_size,
    __lc -> _M_thousands_sep, __io, __cs2 + 2, __cs, __len );
     __cs = __cs2 + 2;
   }


 if ( __builtin_expect ( __dec, true ) )
   {

     if ( __v >= 0 )
       {
  if ( bool ( __flags & ios_base :: showpos )
      && __gnu_cxx :: __numeric_traits < _ValueT > :: __is_signed )
    * -- __cs = __lit [ __num_base :: _S_oplus ], ++ __len;
       }
     else
       * -- __cs = __lit [ __num_base :: _S_ominus ], ++ __len;
   }
 else if ( bool ( __flags & ios_base :: showbase ) && __v )
   {
     if ( __basefield == ios_base :: oct )
       * -- __cs = __lit [ __num_base :: _S_odigits ], ++ __len;
     else
       {

  const bool __uppercase = __flags & ios_base :: uppercase;
  * -- __cs = __lit [ __num_base :: _S_ox + __uppercase ];

  * -- __cs = __lit [ __num_base :: _S_odigits ];
  __len += 2;
       }
   }


 const streamsize __w = __io . width ( );
 if ( __w > static_cast < streamsize > ( __len ) )
   {
     _CharT * __cs3 = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
          * __w ) );
     _M_pad ( __fill, __w, __io, __cs3, __cs, __len );
     __cs = __cs3;
   }
 __io . width ( 0 );



 return std :: __write ( __s, __cs, __len );
      }
# 916
template < typename _CharT, typename _OutIter >
    void
    num_put < _CharT, _OutIter > ::
    _M_group_float ( const char * __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT * __p, _CharT * __new,
     _CharT * __cs, int & __len ) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT * __p2 = std :: __add_grouping ( __new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen );


      int __newlen = __p2 - __new;
      if ( __p )
 {
   char_traits < _CharT > :: copy ( __p2, __p, __len - __declen );
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 951 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    template < typename _ValueT >
      _OutIter
      num_put < _CharT, _OutIter > ::
      _M_insert_float ( _OutIter __s, ios_base & __io, _CharT __fill, char __mod,
         _ValueT __v ) const
      {
 typedef __numpunct_cache < _CharT > __cache_type;
 __use_cache < __cache_type > __uc;
 const locale & __loc = __io . _M_getloc ( );
 const __cache_type * __lc = __uc ( __loc );


 const streamsize __prec = __io . precision ( ) < 0 ? 6 : __io . precision ( );

 const int __max_digits =
   __gnu_cxx :: __numeric_traits < _ValueT > :: __digits10;


 int __len;

 char __fbuf [ 16 ];
 __num_base :: _S_format_float ( __io, __fbuf, __mod );




 int __cs_size = __max_digits * 3;
 char * __cs = static_cast < char * > ( __builtin_alloca ( __cs_size ) );
 __len = std :: __convert_from_v ( _S_get_c_locale ( ), __cs, __cs_size,
          __fbuf, __prec, __v );


 if ( __len >= __cs_size )
   {
     __cs_size = __len + 1;
     __cs = static_cast < char * > ( __builtin_alloca ( __cs_size ) );
     __len = std :: __convert_from_v ( _S_get_c_locale ( ), __cs, __cs_size,
       __fbuf, __prec, __v );
   }

 const ctype < _CharT > & __ctype = use_facet < ctype < _CharT > > ( __loc );

 _CharT * __ws = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
            * __len ) );
 __ctype . widen ( __cs, __cs + __len, __ws );


 _CharT * __wp = 0;
 const char * __p = char_traits < char > :: find ( __cs, __len, '.' );
 if ( __p )
   {
     __wp = __ws + ( __p - __cs );
     * __wp = __lc -> _M_decimal_point;
   }




 if ( __lc -> _M_use_grouping
     && ( __wp || __len < 3 || ( __cs [ 1 ] <= '9' && __cs [ 2 ] <= '9'
          && __cs [ 1 ] >= '0' && __cs [ 2 ] >= '0' ) ) )
   {


     _CharT * __ws2 = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
          * __len * 2 ) );

     streamsize __off = 0;
     if ( __cs [ 0 ] == '-' || __cs [ 0 ] == '+' )
       {
  __off = 1;
  __ws2 [ 0 ] = __ws [ 0 ];
  __len -= 1;
       }

     _M_group_float ( __lc -> _M_grouping, __lc -> _M_grouping_size,
      __lc -> _M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len );
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io . width ( );
 if ( __w > static_cast < streamsize > ( __len ) )
   {
     _CharT * __ws3 = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
          * __w ) );
     _M_pad ( __fill, __w, __io, __ws3, __ws, __len );
     __ws = __ws3;
   }
 __io . width ( 0 );



 return std :: __write ( __s, __ws, __len );
      }
# 1071 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    _OutIter
    num_put < _CharT, _OutIter > ::
    do_put ( iter_type __s, ios_base & __io, char_type __fill, bool __v ) const
    {
      const ios_base :: fmtflags __flags = __io . flags ( );
      if ( ( __flags & ios_base :: boolalpha ) == 0 )
        {
          const long __l = __v;
          __s = _M_insert_int ( __s, __io, __fill, __l );
        }
      else
        {
   typedef __numpunct_cache < _CharT > __cache_type;
   __use_cache < __cache_type > __uc;
   const locale & __loc = __io . _M_getloc ( );
   const __cache_type * __lc = __uc ( __loc );

   const _CharT * __name = __v ? __lc -> _M_truename
                              : __lc -> _M_falsename;
   int __len = __v ? __lc -> _M_truename_size
                   : __lc -> _M_falsename_size;

   const streamsize __w = __io . width ( );
   if ( __w > static_cast < streamsize > ( __len ) )
     {
       const streamsize __plen = __w - __len;
       _CharT * __ps
  = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
       * __plen ) );

       char_traits < _CharT > :: assign ( __ps, __plen, __fill );
       __io . width ( 0 );

       if ( ( __flags & ios_base :: adjustfield ) == ios_base :: left )
  {
    __s = std :: __write ( __s, __name, __len );
    __s = std :: __write ( __s, __ps, __plen );
  }
       else
  {
    __s = std :: __write ( __s, __ps, __plen );
    __s = std :: __write ( __s, __name, __len );
  }
       return __s;
     }
   __io . width ( 0 );
   __s = std :: __write ( __s, __name, __len );
 }
      return __s;
    }
# 1123
template < typename _CharT, typename _OutIter >
    _OutIter
    num_put < _CharT, _OutIter > ::
    do_put ( iter_type __s, ios_base & __io, char_type __fill, double __v ) const
    { return _M_insert_float ( __s, __io, __fill, char ( ), __v ); }
# 1137 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    _OutIter
    num_put < _CharT, _OutIter > ::
    do_put ( iter_type __s, ios_base & __io, char_type __fill,
    long double __v ) const
    { return _M_insert_float ( __s, __io, __fill, 'L', __v ); }
# 1144
template < typename _CharT, typename _OutIter >
    _OutIter
    num_put < _CharT, _OutIter > ::
    do_put ( iter_type __s, ios_base & __io, char_type __fill,
           const void * __v ) const
    {
      const ios_base :: fmtflags __flags = __io . flags ( );
      const ios_base :: fmtflags __fmt = ~ ( ios_base :: basefield
      | ios_base :: uppercase );
      __io . flags ( ( __flags & __fmt ) | ( ios_base :: hex | ios_base :: showbase ) );

      typedef __gnu_cxx :: __conditional_type < ( sizeof ( const void * )
          <= sizeof ( unsigned long ) ),
 unsigned long, unsigned long long > :: __type _UIntPtrType;

      __s = _M_insert_int ( __s, __io, __fill,
     reinterpret_cast < _UIntPtrType > ( __v ) );
      __io . flags ( __flags );
      return __s;
    }
# 1174 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/locale_facets.tcc" 3
template < typename _CharT, typename _Traits >
    void
    __pad < _CharT, _Traits > :: _S_pad ( ios_base & __io, _CharT __fill,
       _CharT * __news, const _CharT * __olds,
       streamsize __newlen, streamsize __oldlen )
    {
      const size_t __plen = static_cast < size_t > ( __newlen - __oldlen );
      const ios_base :: fmtflags __adjust = __io . flags ( ) & ios_base :: adjustfield;


      if ( __adjust == ios_base :: left )
 {
   _Traits :: copy ( __news, __olds, __oldlen );
   _Traits :: assign ( __news + __oldlen, __plen, __fill );
   return;
 }

      size_t __mod = 0;
      if ( __adjust == ios_base :: internal )
 {



          const locale & __loc = __io . _M_getloc ( );
   const ctype < _CharT > & __ctype = use_facet < ctype < _CharT > > ( __loc );

   if ( __ctype . widen ( '-' ) == __olds [ 0 ]
       || __ctype . widen ( '+' ) == __olds [ 0 ] )
     {
       __news [ 0 ] = __olds [ 0 ];
       __mod = 1;
       ++ __news;
     }
   else if ( __ctype . widen ( '0' ) == __olds [ 0 ]
     && __oldlen > 1
     && ( __ctype . widen ( 'x' ) == __olds [ 1 ]
         || __ctype . widen ( 'X' ) == __olds [ 1 ] ) )
     {
       __news [ 0 ] = __olds [ 0 ];
       __news [ 1 ] = __olds [ 1 ];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits :: assign ( __news, __plen, __fill );
      _Traits :: copy ( __news + __plen, __olds + __mod, __oldlen - __mod );
    }
# 1223
template < typename _CharT >
    _CharT *
    __add_grouping ( _CharT * __s, _CharT __sep,
     const char * __gbeg, size_t __gsize,
     const _CharT * __first, const _CharT * __last )
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while ( __last - __first > __gbeg [ __idx ]
      && static_cast < signed char > ( __gbeg [ __idx ] ) > 0
      && __gbeg [ __idx ] != __gnu_cxx :: __numeric_traits < char > :: __max )
 {
   __last -= __gbeg [ __idx ];
   __idx < __gsize - 1 ? ++ __idx : ++ __ctr;
 }

      while ( __first != __last )
 * __s ++ = * __first ++;

      while ( __ctr -- )
 {
   * __s ++ = __sep;
   for ( char __i = __gbeg [ __idx ]; __i > 0; -- __i )
     * __s ++ = * __first ++;
 }

      while ( __idx -- )
 {
   * __s ++ = __sep;
   for ( char __i = __gbeg [ __idx ]; __i > 0; -- __i )
     * __s ++ = * __first ++;
 }

      return __s;
    }
# 1264
extern template class numpunct< char> ;
# 1265
extern template class numpunct_byname< char> ;
# 1266
extern template class num_get< char, istreambuf_iterator< char, char_traits< char> > > ;
# 1267
extern template class num_put< char, ostreambuf_iterator< char, char_traits< char> > > ;
# 1270
extern template const ctype< char>  &use_facet< ctype< char> > (const locale &);
# 1274
extern template const numpunct< char>  &use_facet< numpunct< char> > (const locale &);
# 1278
extern template const num_put< char, ostreambuf_iterator< char, char_traits< char> > >  &use_facet< num_put< char, ostreambuf_iterator< char, char_traits< char> > > > (const locale &);
# 1282
extern template const num_get< char, istreambuf_iterator< char, char_traits< char> > >  &use_facet< num_get< char, istreambuf_iterator< char, char_traits< char> > > > (const locale &);
# 1286
extern template bool has_facet< ctype< char> > (const locale &) throw();
# 1290
extern template bool has_facet< numpunct< char> > (const locale &) throw();
# 1294
extern template bool has_facet< num_put< char, ostreambuf_iterator< char, char_traits< char> > > > (const locale &) throw();
# 1298
extern template bool has_facet< num_get< char, istreambuf_iterator< char, char_traits< char> > > > (const locale &) throw();
# 1303
extern template class numpunct< wchar_t> ;
# 1304
extern template class numpunct_byname< wchar_t> ;
# 1305
extern template class num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 1306
extern template class num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 1309
extern template const ctype< wchar_t>  &use_facet< ctype< wchar_t> > (const locale &);
# 1313
extern template const numpunct< wchar_t>  &use_facet< numpunct< wchar_t> > (const locale &);
# 1317
extern template const num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > >  &use_facet< num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &);
# 1321
extern template const num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > >  &use_facet< num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &);
# 1325
extern template bool has_facet< ctype< wchar_t> > (const locale &) throw();
# 1329
extern template bool has_facet< numpunct< wchar_t> > (const locale &) throw();
# 1333
extern template bool has_facet< num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &) throw();
# 1337
extern template bool has_facet< num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &) throw();
# 1343
}
# 42 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_ios.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 44
template < typename _Facet >
    inline const _Facet &
    __check_facet ( const _Facet * __f )
    {
      if ( ! __f )
 __throw_bad_cast ( );
      return * __f;
    }
# 61 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_ios.h" 3
template < typename _CharT, typename _Traits >
    class basic_ios : public ios_base
    {
    public :






      typedef _CharT char_type;
      typedef typename _Traits :: int_type int_type;
      typedef typename _Traits :: pos_type pos_type;
      typedef typename _Traits :: off_type off_type;
      typedef _Traits traits_type;






      typedef ctype < _CharT > __ctype_type;
      typedef num_put < _CharT, ostreambuf_iterator < _CharT, _Traits > >
           __num_put_type;
      typedef num_get < _CharT, istreambuf_iterator < _CharT, _Traits > >
           __num_get_type;



    protected :
      basic_ostream < _CharT, _Traits > * _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf < _CharT, _Traits > * _M_streambuf;


      const __ctype_type * _M_ctype;

      const __num_put_type * _M_num_put;

      const __num_get_type * _M_num_get;

    public :







      operator void * ( ) const
      { return this -> fail ( ) ? 0 : const_cast < basic_ios * > ( this ); }

      bool
      operator ! ( ) const
      { return this -> fail ( ); }

      iostate
      rdstate ( ) const
      { return _M_streambuf_state; }

      void
      clear ( iostate __state = goodbit );







      void
      setstate ( iostate __state )
      { this -> clear ( this -> rdstate ( ) | __state ); }




      void
      _M_setstate ( iostate __state )
      {


 _M_streambuf_state |= __state;
 if ( this -> exceptions ( ) & __state )
   throw;
      }







      bool
      good ( ) const
      { return this -> rdstate ( ) == 0; }







      bool
      eof ( ) const
      { return ( this -> rdstate ( ) & eofbit ) != 0; }

      bool
      fail ( ) const
      { return ( this -> rdstate ( ) & ( badbit | failbit ) ) != 0; }







      bool
      bad ( ) const
      { return ( this -> rdstate ( ) & badbit ) != 0; }

      iostate
      exceptions ( ) const
      { return _M_exception; }

      void
      exceptions ( iostate __except )
      {
        _M_exception = __except;
        this -> clear ( _M_streambuf_state );
      }







      explicit
      basic_ios ( basic_streambuf < _CharT, _Traits > * __sb )
      : ios_base ( ), _M_tie ( 0 ), _M_fill ( ), _M_fill_init ( false ), _M_streambuf ( 0 ),
 _M_ctype ( 0 ), _M_num_put ( 0 ), _M_num_get ( 0 )
      { this -> init ( __sb ); }







      virtual
      ~ basic_ios ( ) { }

      basic_ostream < _CharT, _Traits > *
      tie ( ) const
      { return _M_tie; }

      basic_ostream < _CharT, _Traits > *
      tie ( basic_ostream < _CharT, _Traits > * __tiestr )
      {
        basic_ostream < _CharT, _Traits > * __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf < _CharT, _Traits > *
      rdbuf ( ) const
      { return _M_streambuf; }

      basic_streambuf < _CharT, _Traits > *
      rdbuf ( basic_streambuf < _CharT, _Traits > * __sb );

      basic_ios &
      copyfmt ( const basic_ios & __rhs );







      char_type
      fill ( ) const
      {
 if ( ! _M_fill_init )
   {
     _M_fill = this -> widen ( ' ' );
     _M_fill_init = true;
   }
 return _M_fill;
      }

      char_type
      fill ( char_type __ch )
      {
 char_type __old = this -> fill ( );
 _M_fill = __ch;
 return __old;
      }

      locale
      imbue ( const locale & __loc );

      char
      narrow ( char_type __c, char __dfault ) const
      { return __check_facet ( _M_ctype ) . narrow ( __c, __dfault ); }

      char_type
      widen ( char __c ) const
      { return __check_facet ( _M_ctype ) . widen ( __c ); }

    protected :







      basic_ios ( )
      : ios_base ( ), _M_tie ( 0 ), _M_fill ( char_type ( ) ), _M_fill_init ( false ),
 _M_streambuf ( 0 ), _M_ctype ( 0 ), _M_num_put ( 0 ), _M_num_get ( 0 )
      { }







      void
      init ( basic_streambuf < _CharT, _Traits > * __sb );

      void
      _M_cache_locale ( const locale & __loc );
    };
# 468 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_ios.h" 3
}
# 36 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_ios.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 38
template < typename _CharT, typename _Traits >
    void
    basic_ios < _CharT, _Traits > :: clear ( iostate __state )
    {
      if ( this -> rdbuf ( ) )
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if ( this -> exceptions ( ) & this -> rdstate ( ) )
 __throw_ios_failure ( ( "basic_ios::clear" ) );
    }
# 50
template < typename _CharT, typename _Traits >
    basic_streambuf < _CharT, _Traits > *
    basic_ios < _CharT, _Traits > :: rdbuf ( basic_streambuf < _CharT, _Traits > * __sb )
    {
      basic_streambuf < _CharT, _Traits > * __old = _M_streambuf;
      _M_streambuf = __sb;
      this -> clear ( );
      return __old;
    }
# 60
template < typename _CharT, typename _Traits >
    basic_ios < _CharT, _Traits > &
    basic_ios < _CharT, _Traits > :: copyfmt ( const basic_ios & __rhs )
    {


      if ( this != & __rhs )
 {




   _Words * __words = ( __rhs . _M_word_size <= _S_local_word_size ) ?
                      _M_local_word : new _Words [ __rhs . _M_word_size ];


   _Callback_list * __cb = __rhs . _M_callbacks;
   if ( __cb )
     __cb -> _M_add_reference ( );
   _M_call_callbacks ( erase_event );
   if ( _M_word != _M_local_word )
     {
       delete [ ] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks ( );


   _M_callbacks = __cb;
   for ( int __i = 0; __i < __rhs . _M_word_size; ++ __i )
     __words [ __i ] = __rhs . _M_word [ __i ];
   _M_word = __words;
   _M_word_size = __rhs . _M_word_size;

   this -> flags ( __rhs . flags ( ) );
   this -> width ( __rhs . width ( ) );
   this -> precision ( __rhs . precision ( ) );
   this -> tie ( __rhs . tie ( ) );
   this -> fill ( __rhs . fill ( ) );
   _M_ios_locale = __rhs . getloc ( );
   _M_cache_locale ( _M_ios_locale );

   _M_call_callbacks ( copyfmt_event );


   this -> exceptions ( __rhs . exceptions ( ) );
 }
      return * this;
    }
# 111
template < typename _CharT, typename _Traits >
    locale
    basic_ios < _CharT, _Traits > :: imbue ( const locale & __loc )
    {
      locale __old ( this -> getloc ( ) );
      ios_base :: imbue ( __loc );
      _M_cache_locale ( __loc );
      if ( this -> rdbuf ( ) != 0 )
 this -> rdbuf ( ) -> pubimbue ( __loc );
      return __old;
    }
# 123
template < typename _CharT, typename _Traits >
    void
    basic_ios < _CharT, _Traits > :: init ( basic_streambuf < _CharT, _Traits > * __sb )
    {

      ios_base :: _M_init ( );


      _M_cache_locale ( _M_ios_locale );

      _M_fill = _CharT ( );
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }
# 154 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_ios.tcc" 3
template < typename _CharT, typename _Traits >
    void
    basic_ios < _CharT, _Traits > :: _M_cache_locale ( const locale & __loc )
    {
      if ( __builtin_expect ( has_facet < __ctype_type > ( __loc ), true ) )
 _M_ctype = & use_facet < __ctype_type > ( __loc );
      else
 _M_ctype = 0;

      if ( __builtin_expect ( has_facet < __num_put_type > ( __loc ), true ) )
 _M_num_put = & use_facet < __num_put_type > ( __loc );
      else
 _M_num_put = 0;

      if ( __builtin_expect ( has_facet < __num_get_type > ( __loc ), true ) )
 _M_num_get = & use_facet < __num_get_type > ( __loc );
      else
 _M_num_get = 0;
    }
# 178
extern template class basic_ios< char, char_traits< char> > ;
# 181
extern template class basic_ios< wchar_t, char_traits< wchar_t> > ;
# 185
}
# 43 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ostream" 3
namespace std __attribute((__visibility__("default"))) { 
# 54 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ostream" 3
template < typename _CharT, typename _Traits >
    class basic_ostream : virtual public basic_ios < _CharT, _Traits >
    {
    public :

      typedef _CharT char_type;
      typedef typename _Traits :: int_type int_type;
      typedef typename _Traits :: pos_type pos_type;
      typedef typename _Traits :: off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf < _CharT, _Traits > __streambuf_type;
      typedef basic_ios < _CharT, _Traits > __ios_type;
      typedef basic_ostream < _CharT, _Traits > __ostream_type;
      typedef num_put < _CharT, ostreambuf_iterator < _CharT, _Traits > >
             __num_put_type;
      typedef ctype < _CharT > __ctype_type;

      explicit
      basic_ostream ( __streambuf_type * __sb )
      { this -> init ( __sb ); }






      virtual
      ~ basic_ostream ( ) { }


      class sentry;
      friend class sentry;

      __ostream_type &
      operator << ( __ostream_type & ( * __pf ) ( __ostream_type & ) )
      {



 return __pf ( * this );
      }

      __ostream_type &
      operator << ( __ios_type & ( * __pf ) ( __ios_type & ) )
      {



 __pf ( * this );
 return * this;
      }

      __ostream_type &
      operator << ( ios_base & ( * __pf ) ( ios_base & ) )
      {



 __pf ( * this );
 return * this;
      }

      __ostream_type &
      operator << ( long __n )
      { return _M_insert ( __n ); }

      __ostream_type &
      operator << ( unsigned long __n )
      { return _M_insert ( __n ); }

      __ostream_type &
      operator << ( bool __n )
      { return _M_insert ( __n ); }

      __ostream_type &
      operator << ( short __n );

      __ostream_type &
      operator << ( unsigned short __n )
      {


 return _M_insert ( static_cast < unsigned long > ( __n ) );
      }

      __ostream_type &
      operator << ( int __n );

      __ostream_type &
      operator << ( unsigned int __n )
      {


 return _M_insert ( static_cast < unsigned long > ( __n ) );
      }


      __ostream_type &
      operator << ( long long __n )
      { return _M_insert ( __n ); }

      __ostream_type &
      operator << ( unsigned long long __n )
      { return _M_insert ( __n ); }


      __ostream_type &
      operator << ( double __f )
      { return _M_insert ( __f ); }

      __ostream_type &
      operator << ( float __f )
      {


 return _M_insert ( static_cast < double > ( __f ) );
      }

      __ostream_type &
      operator << ( long double __f )
      { return _M_insert ( __f ); }

      __ostream_type &
      operator << ( const void * __p )
      { return _M_insert ( __p ); }

      __ostream_type &
      operator << ( __streambuf_type * __sb );

      __ostream_type &
      put ( char_type __c );


      void
      _M_write ( const char_type * __s, streamsize __n )
      {
 const streamsize __put = this -> rdbuf ( ) -> sputn ( __s, __n );
 if ( __put != __n )
   this -> setstate ( ios_base :: badbit );
      }

      __ostream_type &
      write ( const char_type * __s, streamsize __n );

      __ostream_type &
      flush ( );

      pos_type
      tellp ( );

      __ostream_type &
      seekp ( pos_type );

       __ostream_type &
      seekp ( off_type, ios_base :: seekdir );

    protected :
      basic_ostream ( )
      { this -> init ( 0 ); }

      template < typename _ValueT >
        __ostream_type &
        _M_insert ( _ValueT __v );
    };
# 376 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ostream" 3
template < typename _CharT, typename _Traits >
    class basic_ostream < _CharT, _Traits > :: sentry
    {

      bool _M_ok;
      basic_ostream < _CharT, _Traits > & _M_os;

    public :

      explicit
      sentry ( basic_ostream < _CharT, _Traits > & __os );

      ~ sentry ( )
      {

 if ( bool ( _M_os . flags ( ) & ios_base :: unitbuf ) && ! uncaught_exception ( ) )
   {

     if ( _M_os . rdbuf ( ) && _M_os . rdbuf ( ) -> pubsync ( ) == - 1 )
       _M_os . setstate ( ios_base :: badbit );
   }
      }

      operator bool ( ) const
      { return _M_ok; }
    };
# 444 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ostream" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __out, _CharT __c )
    { return __ostream_insert ( __out, & __c, 1 ); }
# 449
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __out, char __c )
    { return ( __out << __out . widen ( __c ) ); }
# 455
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, char __c )
    { return __ostream_insert ( __out, & __c, 1 ); }
# 461
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, signed char __c )
    { return ( __out << static_cast < char > ( __c ) ); }
# 466
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, unsigned char __c )
    { return ( __out << static_cast < char > ( __c ) ); }
# 486 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ostream" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __out, const _CharT * __s )
    {
      if ( ! __s )
 __out . setstate ( ios_base :: badbit );
      else
 __ostream_insert ( __out, __s,
    static_cast < streamsize > ( _Traits :: length ( __s ) ) );
      return __out;
    }
# 498
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __out, const char * __s );
# 503
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, const char * __s )
    {
      if ( ! __s )
 __out . setstate ( ios_base :: badbit );
      else
 __ostream_insert ( __out, __s,
    static_cast < streamsize > ( _Traits :: length ( __s ) ) );
      return __out;
    }
# 516
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, const signed char * __s )
    { return ( __out << reinterpret_cast < const char * > ( __s ) ); }
# 521
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, const unsigned char * __s )
    { return ( __out << reinterpret_cast < const char * > ( __s ) ); }
# 536 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ostream" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    endl ( basic_ostream < _CharT, _Traits > & __os )
    { return flush ( __os . put ( __os . widen ( '\n' ) ) ); }
# 547
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    ends ( basic_ostream < _CharT, _Traits > & __os )
    { return __os . put ( _CharT ( ) ); }
# 557
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    flush ( basic_ostream < _CharT, _Traits > & __os )
    { return __os . flush ( ); }
# 562
}
# 43 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/ostream.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > :: sentry ::
    sentry ( basic_ostream < _CharT, _Traits > & __os )
    : _M_ok ( false ), _M_os ( __os )
    {

      if ( __os . tie ( ) && __os . good ( ) )
 __os . tie ( ) -> flush ( );

      if ( __os . good ( ) )
 _M_ok = true;
      else
 __os . setstate ( ios_base :: failbit );
    }
# 60
template < typename _CharT, typename _Traits >
    template < typename _ValueT >
      basic_ostream < _CharT, _Traits > &
      basic_ostream < _CharT, _Traits > ::
      _M_insert ( _ValueT __v )
      {
 sentry __cerb ( * this );
 if ( __cerb )
   {
     ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
     try
       {
  const __num_put_type & __np = __check_facet ( this -> _M_num_put );
  if ( __np . put ( * this, * this, this -> fill ( ), __v ) . failed ( ) )
    __err |= ios_base :: badbit;
       }
     catch ( __cxxabiv1 :: __forced_unwind & )
       {
  this -> _M_setstate ( ios_base :: badbit );
  throw;
       }
     catch ( ... )
       { this -> _M_setstate ( ios_base :: badbit ); }
     if ( __err )
       this -> setstate ( __err );
   }
 return * this;
      }
# 89
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    operator << ( short __n )
    {


      const ios_base :: fmtflags __fmt = this -> flags ( ) & ios_base :: basefield;
      if ( __fmt == ios_base :: oct || __fmt == ios_base :: hex )
 return _M_insert ( static_cast < long > ( static_cast < unsigned short > ( __n ) ) );
      else
 return _M_insert ( static_cast < long > ( __n ) );
    }
# 103
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    operator << ( int __n )
    {


      const ios_base :: fmtflags __fmt = this -> flags ( ) & ios_base :: basefield;
      if ( __fmt == ios_base :: oct || __fmt == ios_base :: hex )
 return _M_insert ( static_cast < long > ( static_cast < unsigned int > ( __n ) ) );
      else
 return _M_insert ( static_cast < long > ( __n ) );
    }
# 117
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    operator << ( __streambuf_type * __sbin )
    {
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this );
      if ( __cerb && __sbin )
 {
   try
     {
       if ( ! __copy_streambufs ( __sbin, this -> rdbuf ( ) ) )
  __err |= ios_base :: failbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: failbit ); }
 }
      else if ( ! __sbin )
 __err |= ios_base :: badbit;
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 146
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    put ( char_type __c )
    {






      sentry __cerb ( * this );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       const int_type __put = this -> rdbuf ( ) -> sputc ( __c );
       if ( traits_type :: eq_int_type ( __put, traits_type :: eof ( ) ) )
  __err |= ios_base :: badbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return * this;
    }
# 180
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    write ( const _CharT * __s, streamsize __n )
    {







      sentry __cerb ( * this );
      if ( __cerb )
 {
   try
     { _M_write ( __s, __n ); }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
 }
      return * this;
    }
# 208
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    flush ( )
    {



      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      try
 {
   if ( this -> rdbuf ( ) && this -> rdbuf ( ) -> pubsync ( ) == - 1 )
     __err |= ios_base :: badbit;
 }
      catch ( __cxxabiv1 :: __forced_unwind & )
 {
   this -> _M_setstate ( ios_base :: badbit );
   throw;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 234
template < typename _CharT, typename _Traits >
    typename basic_ostream < _CharT, _Traits > :: pos_type
    basic_ostream < _CharT, _Traits > ::
    tellp ( )
    {
      pos_type __ret = pos_type ( - 1 );
      try
 {
   if ( ! this -> fail ( ) )
     __ret = this -> rdbuf ( ) -> pubseekoff ( 0, ios_base :: cur, ios_base :: out );
 }
      catch ( __cxxabiv1 :: __forced_unwind & )
 {
   this -> _M_setstate ( ios_base :: badbit );
   throw;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      return __ret;
    }
# 255
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    seekp ( pos_type __pos )
    {
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      try
 {
   if ( ! this -> fail ( ) )
     {


       const pos_type __p = this -> rdbuf ( ) -> pubseekpos ( __pos,
            ios_base :: out );


       if ( __p == pos_type ( off_type ( - 1 ) ) )
  __err |= ios_base :: failbit;
     }
 }
      catch ( __cxxabiv1 :: __forced_unwind & )
 {
   this -> _M_setstate ( ios_base :: badbit );
   throw;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 287
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    seekp ( off_type __off, ios_base :: seekdir __dir )
    {
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      try
 {
   if ( ! this -> fail ( ) )
     {


       const pos_type __p = this -> rdbuf ( ) -> pubseekoff ( __off, __dir,
            ios_base :: out );


       if ( __p == pos_type ( off_type ( - 1 ) ) )
  __err |= ios_base :: failbit;
     }
 }
      catch ( __cxxabiv1 :: __forced_unwind & )
 {
   this -> _M_setstate ( ios_base :: badbit );
   throw;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 319
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __out, const char * __s )
    {
      if ( ! __s )
 __out . setstate ( ios_base :: badbit );
      else
 {


   const size_t __clen = char_traits < char > :: length ( __s );
   try
     {
       struct __ptr_guard
       {
  _CharT * __p;
  __ptr_guard ( _CharT * __ip ) : __p ( __ip ) { }
  ~ __ptr_guard ( ) { delete [ ] __p; }
  _CharT * __get ( ) { return __p; }
       } __pg ( new _CharT [ __clen ] );

       _CharT * __ws = __pg . __get ( );
       for ( size_t __i = 0; __i < __clen; ++ __i )
  __ws [ __i ] = __out . widen ( __s [ __i ] );
       __ostream_insert ( __out, __ws, __clen );
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       __out . _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { __out . _M_setstate ( ios_base :: badbit ); }
 }
      return __out;
    }
# 360
extern template class basic_ostream< char, char_traits< char> > ;
# 361
extern template basic_ostream< char, char_traits< char> >  &endl(basic_ostream< char, char_traits< char> >  & );
# 362
extern template basic_ostream< char, char_traits< char> >  &ends(basic_ostream< char, char_traits< char> >  & );
# 363
extern template basic_ostream< char, char_traits< char> >  &flush(basic_ostream< char, char_traits< char> >  & );
# 364
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & , char );
# 365
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & , unsigned char );
# 366
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & , signed char );
# 367
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & , const char * );
# 368
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & , const unsigned char * );
# 369
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & , const signed char * );
# 371
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(long );
# 372
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(unsigned long );
# 373
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(bool );
# 375
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(long long );
# 376
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(unsigned long long );
# 378
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(double );
# 379
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(long double );
# 380
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(const void * );
# 383
extern template class basic_ostream< wchar_t, char_traits< wchar_t> > ;
# 384
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &endl(basic_ostream< wchar_t, char_traits< wchar_t> >  & );
# 385
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &ends(basic_ostream< wchar_t, char_traits< wchar_t> >  & );
# 386
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &flush(basic_ostream< wchar_t, char_traits< wchar_t> >  & );
# 387
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> >  & , wchar_t );
# 388
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> >  & , char );
# 389
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> >  & , const wchar_t * );
# 390
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> >  & , const char * );
# 392
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(long );
# 393
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(unsigned long );
# 394
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(bool );
# 396
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(long long );
# 397
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(unsigned long long );
# 399
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(double );
# 400
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(long double );
# 401
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(const void * );
# 405
}
# 43 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/istream" 3
namespace std __attribute((__visibility__("default"))) { 
# 54 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/istream" 3
template < typename _CharT, typename _Traits >
    class basic_istream : virtual public basic_ios < _CharT, _Traits >
    {
    public :

      typedef _CharT char_type;
      typedef typename _Traits :: int_type int_type;
      typedef typename _Traits :: pos_type pos_type;
      typedef typename _Traits :: off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf < _CharT, _Traits > __streambuf_type;
      typedef basic_ios < _CharT, _Traits > __ios_type;
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef num_get < _CharT, istreambuf_iterator < _CharT, _Traits > >
        __num_get_type;
      typedef ctype < _CharT > __ctype_type;

    protected :





      streamsize _M_gcount;

    public :

      explicit
      basic_istream ( __streambuf_type * __sb )
      : _M_gcount ( streamsize ( 0 ) )
      { this -> init ( __sb ); }






      virtual
      ~ basic_istream ( )
      { _M_gcount = streamsize ( 0 ); }


      class sentry;
      friend class sentry;

      __istream_type &
      operator >> ( __istream_type & ( * __pf ) ( __istream_type & ) )
      { return __pf ( * this ); }

      __istream_type &
      operator >> ( __ios_type & ( * __pf ) ( __ios_type & ) )
      {
 __pf ( * this );
 return * this;
      }

      __istream_type &
      operator >> ( ios_base & ( * __pf ) ( ios_base & ) )
      {
 __pf ( * this );
 return * this;
      }

      __istream_type &
      operator >> ( bool & __n )
      { return _M_extract ( __n ); }

      __istream_type &
      operator >> ( short & __n );

      __istream_type &
      operator >> ( unsigned short & __n )
      { return _M_extract ( __n ); }

      __istream_type &
      operator >> ( int & __n );

      __istream_type &
      operator >> ( unsigned int & __n )
      { return _M_extract ( __n ); }

      __istream_type &
      operator >> ( long & __n )
      { return _M_extract ( __n ); }

      __istream_type &
      operator >> ( unsigned long & __n )
      { return _M_extract ( __n ); }


      __istream_type &
      operator >> ( long long & __n )
      { return _M_extract ( __n ); }

      __istream_type &
      operator >> ( unsigned long long & __n )
      { return _M_extract ( __n ); }


      __istream_type &
      operator >> ( float & __f )
      { return _M_extract ( __f ); }

      __istream_type &
      operator >> ( double & __f )
      { return _M_extract ( __f ); }

      __istream_type &
      operator >> ( long double & __f )
      { return _M_extract ( __f ); }

      __istream_type &
      operator >> ( void * & __p )
      { return _M_extract ( __p ); }

      __istream_type &
      operator >> ( __streambuf_type * __sb );

      streamsize
      gcount ( ) const
      { return _M_gcount; }

      int_type
      get ( );

      __istream_type &
      get ( char_type & __c );

      __istream_type &
      get ( char_type * __s, streamsize __n, char_type __delim );

      __istream_type &
      get ( char_type * __s, streamsize __n )
      { return this -> get ( __s, __n, this -> widen ( '\n' ) ); }

      __istream_type &
      get ( __streambuf_type & __sb, char_type __delim );

      __istream_type &
      get ( __streambuf_type & __sb )
      { return this -> get ( __sb, this -> widen ( '\n' ) ); }

      __istream_type &
      getline ( char_type * __s, streamsize __n, char_type __delim );

      __istream_type &
      getline ( char_type * __s, streamsize __n )
      { return this -> getline ( __s, __n, this -> widen ( '\n' ) ); }

      __istream_type &
      ignore ( );

      __istream_type &
      ignore ( streamsize __n );

      __istream_type &
      ignore ( streamsize __n, int_type __delim );

      int_type
      peek ( );

      __istream_type &
      read ( char_type * __s, streamsize __n );

      streamsize
      readsome ( char_type * __s, streamsize __n );

      __istream_type &
      putback ( char_type __c );

      __istream_type &
      unget ( );

      int
      sync ( );

      pos_type
      tellg ( );

      __istream_type &
      seekg ( pos_type );

      __istream_type &
      seekg ( off_type, ios_base :: seekdir );


    protected :
      basic_istream ( )
      : _M_gcount ( streamsize ( 0 ) )
      { this -> init ( 0 ); }

      template < typename _ValueT >
        __istream_type &
        _M_extract ( _ValueT & __v );
    };
# 594 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/istream" 3
template<> basic_istream< char, char_traits< char> >  &basic_istream< char, char_traits< char> > ::getline(char_type * , streamsize , char_type ); 
# 599
template<> basic_istream< char, char_traits< char> >  &basic_istream< char, char_traits< char> > ::ignore(streamsize ); 
# 604
template<> basic_istream< char, char_traits< char> >  &basic_istream< char, char_traits< char> > ::ignore(streamsize , int_type ); 
# 610
template<> basic_istream< wchar_t, char_traits< wchar_t> >  &basic_istream< wchar_t, char_traits< wchar_t> > ::getline(char_type * , streamsize , char_type ); 
# 615
template<> basic_istream< wchar_t, char_traits< wchar_t> >  &basic_istream< wchar_t, char_traits< wchar_t> > ::ignore(streamsize ); 
# 620
template<> basic_istream< wchar_t, char_traits< wchar_t> >  &basic_istream< wchar_t, char_traits< wchar_t> > ::ignore(streamsize , int_type ); 
# 631 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/istream" 3
template < typename _CharT, typename _Traits >
    class basic_istream < _CharT, _Traits > :: sentry
    {
    public :

      typedef _Traits traits_type;
      typedef basic_streambuf < _CharT, _Traits > __streambuf_type;
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef typename __istream_type :: __ctype_type __ctype_type;
      typedef typename _Traits :: int_type __int_type;

      explicit
      sentry ( basic_istream < _CharT, _Traits > & __is, bool __noskipws = false );

      operator bool ( ) const
      { return _M_ok; }

    private :
      bool _M_ok;
    };
# 693 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/istream" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __in, _CharT & __c );
# 697
template < class _Traits >
    inline basic_istream < char, _Traits > &
    operator >> ( basic_istream < char, _Traits > & __in, unsigned char & __c )
    { return ( __in >> reinterpret_cast < char & > ( __c ) ); }
# 702
template < class _Traits >
    inline basic_istream < char, _Traits > &
    operator >> ( basic_istream < char, _Traits > & __in, signed char & __c )
    { return ( __in >> reinterpret_cast < char & > ( __c ) ); }
# 734 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/istream" 3
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & , _CharT * ); 
# 741
template<> basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & , char * ); 
# 743
template < class _Traits >
    inline basic_istream < char, _Traits > &
    operator >> ( basic_istream < char, _Traits > & __in, unsigned char * __s )
    { return ( __in >> reinterpret_cast < char * > ( __s ) ); }
# 748
template < class _Traits >
    inline basic_istream < char, _Traits > &
    operator >> ( basic_istream < char, _Traits > & __in, signed char * __s )
    { return ( __in >> reinterpret_cast < char * > ( __s ) ); }
# 762 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/istream" 3
template < typename _CharT, typename _Traits >
    class basic_iostream
    : public basic_istream < _CharT, _Traits >,
      public basic_ostream < _CharT, _Traits >
    {
    public :



      typedef _CharT char_type;
      typedef typename _Traits :: int_type int_type;
      typedef typename _Traits :: pos_type pos_type;
      typedef typename _Traits :: off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef basic_ostream < _CharT, _Traits > __ostream_type;







      explicit
      basic_iostream ( basic_streambuf < _CharT, _Traits > * __sb )
      : __istream_type ( __sb ), __ostream_type ( __sb ) { }




      virtual
      ~ basic_iostream ( ) { }

    protected :
      basic_iostream ( )
      : __istream_type ( ), __ostream_type ( ) { }
    };
# 823 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/istream" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    ws ( basic_istream < _CharT, _Traits > & __is );
# 827
}
# 43 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/istream.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > :: sentry ::
    sentry ( basic_istream < _CharT, _Traits > & __in, bool __noskip ) : _M_ok ( false )
    {
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      if ( __in . good ( ) )
 {
   if ( __in . tie ( ) )
     __in . tie ( ) -> flush ( );
   if ( ! __noskip && bool ( __in . flags ( ) & ios_base :: skipws ) )
     {
       const __int_type __eof = traits_type :: eof ( );
       __streambuf_type * __sb = __in . rdbuf ( );
       __int_type __c = __sb -> sgetc ( );

       const __ctype_type & __ct = __check_facet ( __in . _M_ctype );
       while ( ! traits_type :: eq_int_type ( __c, __eof )
       && __ct . is ( ctype_base :: space,
    traits_type :: to_char_type ( __c ) ) )
  __c = __sb -> snextc ( );




       if ( traits_type :: eq_int_type ( __c, __eof ) )
  __err |= ios_base :: eofbit;
     }
 }

      if ( __in . good ( ) && __err == ios_base :: goodbit )
 _M_ok = true;
      else
 {
   __err |= ios_base :: failbit;
   __in . setstate ( __err );
 }
    }
# 83
template < typename _CharT, typename _Traits >
    template < typename _ValueT >
      basic_istream < _CharT, _Traits > &
      basic_istream < _CharT, _Traits > ::
      _M_extract ( _ValueT & __v )
      {
 sentry __cerb ( * this, false );
 if ( __cerb )
   {
     ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
     try
       {
  const __num_get_type & __ng = __check_facet ( this -> _M_num_get );
  __ng . get ( * this, 0, * this, __err, __v );
       }
     catch ( __cxxabiv1 :: __forced_unwind & )
       {
  this -> _M_setstate ( ios_base :: badbit );
  throw;
       }
     catch ( ... )
       { this -> _M_setstate ( ios_base :: badbit ); }
     if ( __err )
       this -> setstate ( __err );
   }
 return * this;
      }
# 111
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    operator >> ( short & __n )
    {


      long __l;
      _M_extract ( __l );
      if ( ! this -> fail ( ) )
 {
   if ( __gnu_cxx :: __numeric_traits < short > :: __min <= __l
       && __l <= __gnu_cxx :: __numeric_traits < short > :: __max )
     __n = short ( __l );
   else
     this -> setstate ( ios_base :: failbit );
 }
      return * this;
    }
# 131
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    operator >> ( int & __n )
    {


      long __l;
      _M_extract ( __l );
      if ( ! this -> fail ( ) )
 {
   if ( __gnu_cxx :: __numeric_traits < int > :: __min <= __l
       && __l <= __gnu_cxx :: __numeric_traits < int > :: __max )
     __n = int ( __l );
   else
     this -> setstate ( ios_base :: failbit );
 }
      return * this;
    }
# 151
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    operator >> ( __streambuf_type * __sbout )
    {
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, false );
      if ( __cerb && __sbout )
 {
   try
     {
       bool __ineof;
       if ( ! __copy_streambufs_eof ( this -> rdbuf ( ), __sbout, __ineof ) )
  __err |= ios_base :: failbit;
       if ( __ineof )
  __err |= ios_base :: eofbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: failbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: failbit ); }
 }
      else if ( ! __sbout )
 __err |= ios_base :: failbit;
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 183
template < typename _CharT, typename _Traits >
    typename basic_istream < _CharT, _Traits > :: int_type
    basic_istream < _CharT, _Traits > ::
    get ( void )
    {
      const int_type __eof = traits_type :: eof ( );
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   try
     {
       __c = this -> rdbuf ( ) -> sbumpc ( );

       if ( ! traits_type :: eq_int_type ( __c, __eof ) )
  _M_gcount = 1;
       else
  __err |= ios_base :: eofbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
 }
      if ( ! _M_gcount )
 __err |= ios_base :: failbit;
      if ( __err )
 this -> setstate ( __err );
      return __c;
    }
# 219
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    get ( char_type & __c )
    {
      _M_gcount = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   try
     {
       const int_type __cb = this -> rdbuf ( ) -> sbumpc ( );

       if ( ! traits_type :: eq_int_type ( __cb, traits_type :: eof ( ) ) )
  {
    _M_gcount = 1;
    __c = traits_type :: to_char_type ( __cb );
  }
       else
  __err |= ios_base :: eofbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
 }
      if ( ! _M_gcount )
 __err |= ios_base :: failbit;
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 256
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    get ( char_type * __s, streamsize __n, char_type __delim )
    {
      _M_gcount = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   try
     {
       const int_type __idelim = traits_type :: to_int_type ( __delim );
       const int_type __eof = traits_type :: eof ( );
       __streambuf_type * __sb = this -> rdbuf ( );
       int_type __c = __sb -> sgetc ( );

       while ( _M_gcount + 1 < __n
       && ! traits_type :: eq_int_type ( __c, __eof )
       && ! traits_type :: eq_int_type ( __c, __idelim ) )
  {
    * __s ++ = traits_type :: to_char_type ( __c );
    ++ _M_gcount;
    __c = __sb -> snextc ( );
  }
       if ( traits_type :: eq_int_type ( __c, __eof ) )
  __err |= ios_base :: eofbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
 }


      if ( __n > 0 )
 * __s = char_type ( );
      if ( ! _M_gcount )
 __err |= ios_base :: failbit;
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 303
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    get ( __streambuf_type & __sb, char_type __delim )
    {
      _M_gcount = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   try
     {
       const int_type __idelim = traits_type :: to_int_type ( __delim );
       const int_type __eof = traits_type :: eof ( );
       __streambuf_type * __this_sb = this -> rdbuf ( );
       int_type __c = __this_sb -> sgetc ( );
       char_type __c2 = traits_type :: to_char_type ( __c );

       while ( ! traits_type :: eq_int_type ( __c, __eof )
       && ! traits_type :: eq_int_type ( __c, __idelim )
       && ! traits_type :: eq_int_type ( __sb . sputc ( __c2 ), __eof ) )
  {
    ++ _M_gcount;
    __c = __this_sb -> snextc ( );
    __c2 = traits_type :: to_char_type ( __c );
  }
       if ( traits_type :: eq_int_type ( __c, __eof ) )
  __err |= ios_base :: eofbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
 }
      if ( ! _M_gcount )
 __err |= ios_base :: failbit;
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 347
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    getline ( char_type * __s, streamsize __n, char_type __delim )
    {
      _M_gcount = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, true );
      if ( __cerb )
        {
          try
            {
              const int_type __idelim = traits_type :: to_int_type ( __delim );
              const int_type __eof = traits_type :: eof ( );
              __streambuf_type * __sb = this -> rdbuf ( );
              int_type __c = __sb -> sgetc ( );

              while ( _M_gcount + 1 < __n
                     && ! traits_type :: eq_int_type ( __c, __eof )
                     && ! traits_type :: eq_int_type ( __c, __idelim ) )
                {
                  * __s ++ = traits_type :: to_char_type ( __c );
                  __c = __sb -> snextc ( );
                  ++ _M_gcount;
                }
              if ( traits_type :: eq_int_type ( __c, __eof ) )
                __err |= ios_base :: eofbit;
              else
                {
                  if ( traits_type :: eq_int_type ( __c, __idelim ) )
                    {
                      __sb -> sbumpc ( );
                      ++ _M_gcount;
                    }
                  else
                    __err |= ios_base :: failbit;
                }
            }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
          catch ( ... )
            { this -> _M_setstate ( ios_base :: badbit ); }
        }


      if ( __n > 0 )
 * __s = char_type ( );
      if ( ! _M_gcount )
        __err |= ios_base :: failbit;
      if ( __err )
        this -> setstate ( __err );
      return * this;
    }
# 407
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    ignore ( void )
    {
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       const int_type __eof = traits_type :: eof ( );
       __streambuf_type * __sb = this -> rdbuf ( );

       if ( traits_type :: eq_int_type ( __sb -> sbumpc ( ), __eof ) )
  __err |= ios_base :: eofbit;
       else
  _M_gcount = 1;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return * this;
    }
# 440
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    ignore ( streamsize __n )
    {
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb && __n > 0 )
        {
          ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
          try
            {
              const int_type __eof = traits_type :: eof ( );
              __streambuf_type * __sb = this -> rdbuf ( );
              int_type __c = __sb -> sgetc ( );

       bool __large_ignore = false;
       while ( true )
  {
    while ( _M_gcount < __n
    && ! traits_type :: eq_int_type ( __c, __eof ) )
      {
        ++ _M_gcount;
        __c = __sb -> snextc ( );
      }
    if ( __n == __gnu_cxx :: __numeric_traits < streamsize > :: __max
        && ! traits_type :: eq_int_type ( __c, __eof ) )
      {
        _M_gcount =
   __gnu_cxx :: __numeric_traits < streamsize > :: __min;
        __large_ignore = true;
      }
    else
      break;
  }

       if ( __large_ignore )
  _M_gcount = __gnu_cxx :: __numeric_traits < streamsize > :: __max;

       if ( traits_type :: eq_int_type ( __c, __eof ) )
                __err |= ios_base :: eofbit;
            }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
          catch ( ... )
            { this -> _M_setstate ( ios_base :: badbit ); }
          if ( __err )
            this -> setstate ( __err );
        }
      return * this;
    }
# 502 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    ignore ( streamsize __n, int_type __delim )
    {
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb && __n > 0 )
        {
          ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
          try
            {
              const int_type __eof = traits_type :: eof ( );
              __streambuf_type * __sb = this -> rdbuf ( );
              int_type __c = __sb -> sgetc ( );


       bool __large_ignore = false;
       while ( true )
  {
    while ( _M_gcount < __n
    && ! traits_type :: eq_int_type ( __c, __eof )
    && ! traits_type :: eq_int_type ( __c, __delim ) )
      {
        ++ _M_gcount;
        __c = __sb -> snextc ( );
      }
    if ( __n == __gnu_cxx :: __numeric_traits < streamsize > :: __max
        && ! traits_type :: eq_int_type ( __c, __eof )
        && ! traits_type :: eq_int_type ( __c, __delim ) )
      {
        _M_gcount =
   __gnu_cxx :: __numeric_traits < streamsize > :: __min;
        __large_ignore = true;
      }
    else
      break;
  }

       if ( __large_ignore )
  _M_gcount = __gnu_cxx :: __numeric_traits < streamsize > :: __max;

              if ( traits_type :: eq_int_type ( __c, __eof ) )
                __err |= ios_base :: eofbit;
       else if ( traits_type :: eq_int_type ( __c, __delim ) )
  {
    if ( _M_gcount
        < __gnu_cxx :: __numeric_traits < streamsize > :: __max )
      ++ _M_gcount;
    __sb -> sbumpc ( );
  }
            }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
          catch ( ... )
            { this -> _M_setstate ( ios_base :: badbit ); }
          if ( __err )
            this -> setstate ( __err );
        }
      return * this;
    }
# 567
template < typename _CharT, typename _Traits >
    typename basic_istream < _CharT, _Traits > :: int_type
    basic_istream < _CharT, _Traits > ::
    peek ( void )
    {
      int_type __c = traits_type :: eof ( );
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       __c = this -> rdbuf ( ) -> sgetc ( );
       if ( traits_type :: eq_int_type ( __c, traits_type :: eof ( ) ) )
  __err |= ios_base :: eofbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return __c;
    }
# 597
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    read ( char_type * __s, streamsize __n )
    {
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       _M_gcount = this -> rdbuf ( ) -> sgetn ( __s, __n );
       if ( _M_gcount != __n )
  __err |= ( ios_base :: eofbit | ios_base :: failbit );
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return * this;
    }
# 626
template < typename _CharT, typename _Traits >
    streamsize
    basic_istream < _CharT, _Traits > ::
    readsome ( char_type * __s, streamsize __n )
    {
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {

       const streamsize __num = this -> rdbuf ( ) -> in_avail ( );
       if ( __num > 0 )
  _M_gcount = this -> rdbuf ( ) -> sgetn ( __s, std :: min ( __num, __n ) );
       else if ( __num == - 1 )
  __err |= ios_base :: eofbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return _M_gcount;
    }
# 658
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    putback ( char_type __c )
    {


      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       const int_type __eof = traits_type :: eof ( );
       __streambuf_type * __sb = this -> rdbuf ( );
       if ( ! __sb
    || traits_type :: eq_int_type ( __sb -> sputbackc ( __c ), __eof ) )
  __err |= ios_base :: badbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return * this;
    }
# 691
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    unget ( void )
    {


      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       const int_type __eof = traits_type :: eof ( );
       __streambuf_type * __sb = this -> rdbuf ( );
       if ( ! __sb
    || traits_type :: eq_int_type ( __sb -> sungetc ( ), __eof ) )
  __err |= ios_base :: badbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return * this;
    }
# 724
template < typename _CharT, typename _Traits >
    int
    basic_istream < _CharT, _Traits > ::
    sync ( void )
    {


      int __ret = - 1;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       __streambuf_type * __sb = this -> rdbuf ( );
       if ( __sb )
  {
    if ( __sb -> pubsync ( ) == - 1 )
      __err |= ios_base :: badbit;
    else
      __ret = 0;
  }
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return __ret;
    }
# 760
template < typename _CharT, typename _Traits >
    typename basic_istream < _CharT, _Traits > :: pos_type
    basic_istream < _CharT, _Traits > ::
    tellg ( void )
    {


      pos_type __ret = pos_type ( - 1 );
      try
 {
   if ( ! this -> fail ( ) )
     __ret = this -> rdbuf ( ) -> pubseekoff ( 0, ios_base :: cur,
           ios_base :: in );
 }
      catch ( __cxxabiv1 :: __forced_unwind & )
 {
   this -> _M_setstate ( ios_base :: badbit );
   throw;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      return __ret;
    }
# 784
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    seekg ( pos_type __pos )
    {


      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      try
 {
   if ( ! this -> fail ( ) )
     {

       const pos_type __p = this -> rdbuf ( ) -> pubseekpos ( __pos,
            ios_base :: in );


       if ( __p == pos_type ( off_type ( - 1 ) ) )
  __err |= ios_base :: failbit;
     }
 }
      catch ( __cxxabiv1 :: __forced_unwind & )
 {
   this -> _M_setstate ( ios_base :: badbit );
   throw;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 817
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    seekg ( off_type __off, ios_base :: seekdir __dir )
    {


      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      try
 {
   if ( ! this -> fail ( ) )
     {

       const pos_type __p = this -> rdbuf ( ) -> pubseekoff ( __off, __dir,
            ios_base :: in );


       if ( __p == pos_type ( off_type ( - 1 ) ) )
  __err |= ios_base :: failbit;
     }
 }
      catch ( __cxxabiv1 :: __forced_unwind & )
 {
   this -> _M_setstate ( ios_base :: badbit );
   throw;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 851
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __in, _CharT & __c )
    {
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef typename __istream_type :: int_type __int_type;

      typename __istream_type :: sentry __cerb ( __in, false );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       const __int_type __cb = __in . rdbuf ( ) -> sbumpc ( );
       if ( ! _Traits :: eq_int_type ( __cb, _Traits :: eof ( ) ) )
  __c = _Traits :: to_char_type ( __cb );
       else
  __err |= ( ios_base :: eofbit | ios_base :: failbit );
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       __in . _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { __in . _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     __in . setstate ( __err );
 }
      return __in;
    }
# 883
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __in, _CharT * __s )
    {
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef basic_streambuf < _CharT, _Traits > __streambuf_type;
      typedef typename _Traits :: int_type int_type;
      typedef _CharT char_type;
      typedef ctype < _CharT > __ctype_type;

      streamsize __extracted = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      typename __istream_type :: sentry __cerb ( __in, false );
      if ( __cerb )
 {
   try
     {

       streamsize __num = __in . width ( );
       if ( __num <= 0 )
  __num = __gnu_cxx :: __numeric_traits < streamsize > :: __max;

       const __ctype_type & __ct = use_facet < __ctype_type > ( __in . getloc ( ) );

       const int_type __eof = _Traits :: eof ( );
       __streambuf_type * __sb = __in . rdbuf ( );
       int_type __c = __sb -> sgetc ( );

       while ( __extracted < __num - 1
       && ! _Traits :: eq_int_type ( __c, __eof )
       && ! __ct . is ( ctype_base :: space,
     _Traits :: to_char_type ( __c ) ) )
  {
    * __s ++ = _Traits :: to_char_type ( __c );
    ++ __extracted;
    __c = __sb -> snextc ( );
  }
       if ( _Traits :: eq_int_type ( __c, __eof ) )
  __err |= ios_base :: eofbit;



       * __s = char_type ( );
       __in . width ( 0 );
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       __in . _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { __in . _M_setstate ( ios_base :: badbit ); }
 }
      if ( ! __extracted )
 __err |= ios_base :: failbit;
      if ( __err )
 __in . setstate ( __err );
      return __in;
    }
# 944
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    ws ( basic_istream < _CharT, _Traits > & __in )
    {
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef basic_streambuf < _CharT, _Traits > __streambuf_type;
      typedef typename __istream_type :: int_type __int_type;
      typedef ctype < _CharT > __ctype_type;

      const __ctype_type & __ct = use_facet < __ctype_type > ( __in . getloc ( ) );
      const __int_type __eof = _Traits :: eof ( );
      __streambuf_type * __sb = __in . rdbuf ( );
      __int_type __c = __sb -> sgetc ( );

      while ( ! _Traits :: eq_int_type ( __c, __eof )
      && __ct . is ( ctype_base :: space, _Traits :: to_char_type ( __c ) ) )
 __c = __sb -> snextc ( );

       if ( _Traits :: eq_int_type ( __c, __eof ) )
  __in . setstate ( ios_base :: eofbit );
      return __in;
    }
# 971
extern template class basic_istream< char, char_traits< char> > ;
# 972
extern template basic_istream< char, char_traits< char> >  &ws(basic_istream< char, char_traits< char> >  & );
# 973
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & , char & );
# 974
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  &, char *);
# 975
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & , unsigned char & );
# 976
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & , signed char & );
# 977
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & , unsigned char * );
# 978
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & , signed char * );
# 980
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned short & );
# 981
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned & );
# 982
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(long & );
# 983
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned long & );
# 984
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(bool & );
# 986
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(long long & );
# 987
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned long long & );
# 989
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(float & );
# 990
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(double & );
# 991
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(long double & );
# 992
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(void *& );
# 994
extern template class basic_iostream< char, char_traits< char> > ;
# 997
extern template class basic_istream< wchar_t, char_traits< wchar_t> > ;
# 998
extern template basic_istream< wchar_t, char_traits< wchar_t> >  &ws(basic_istream< wchar_t, char_traits< wchar_t> >  & );
# 999
extern template basic_istream< wchar_t, char_traits< wchar_t> >  &operator>>(basic_istream< wchar_t, char_traits< wchar_t> >  & , wchar_t & );
# 1000
extern template basic_istream< wchar_t, char_traits< wchar_t> >  &operator>>(basic_istream< wchar_t, char_traits< wchar_t> >  &, wchar_t *);
# 1002
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned short & );
# 1003
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned & );
# 1004
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(long & );
# 1005
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned long & );
# 1006
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(bool & );
# 1008
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(long long & );
# 1009
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned long long & );
# 1011
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(float & );
# 1012
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(double & );
# 1013
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(long double & );
# 1014
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(void *& );
# 1016
extern template class basic_iostream< wchar_t, char_traits< wchar_t> > ;
# 1020
}
# 43 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/iostream" 3
namespace std __attribute((__visibility__("default"))) { 
# 58 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/iostream" 3
extern istream cin; 
# 59
extern ostream cout; 
# 60
extern ostream cerr; 
# 61
extern ostream clog; 
# 64
extern wistream wcin; 
# 65
extern wostream wcout; 
# 66
extern wostream wcerr; 
# 67
extern wostream wclog; 
# 72
static ios_base::Init __ioinit; 
# 74
}
# 26 "/usr/include/_G_config.h" 3
extern "C" { typedef 
# 23
struct { 
# 24
__off_t __pos; 
# 25
__mbstate_t __state; 
# 26
} _G_fpos_t; }
# 31
extern "C" { typedef 
# 28
struct { 
# 29
__off64_t __pos; 
# 30
__mbstate_t __state; 
# 31
} _G_fpos64_t; }
# 53 "/usr/include/_G_config.h" 3
extern "C" { typedef short _G_int16_t __attribute((__mode__(__HI__))); }
# 54
extern "C" { typedef int _G_int32_t __attribute((__mode__(__SI__))); }
# 55
extern "C" { typedef unsigned short _G_uint16_t __attribute((__mode__(__HI__))); }
# 56
extern "C" { typedef unsigned _G_uint32_t __attribute((__mode__(__SI__))); }
# 170 "/usr/include/libio.h" 3
struct _IO_jump_t; struct _IO_FILE; 
# 180 "/usr/include/libio.h" 3
extern "C" { typedef void _IO_lock_t; }
# 186
extern "C" { struct _IO_marker { 
# 187
_IO_marker *_next; 
# 188
_IO_FILE *_sbuf; 
# 192
int _pos; 
# 203 "/usr/include/libio.h" 3
}; }
# 206
enum __codecvt_result { 
# 208
__codecvt_ok, 
# 209
__codecvt_partial, 
# 210
__codecvt_error, 
# 211
__codecvt_noconv
# 212
}; 
# 271 "/usr/include/libio.h" 3
extern "C" { struct _IO_FILE { 
# 272
int _flags; 
# 277
char *_IO_read_ptr; 
# 278
char *_IO_read_end; 
# 279
char *_IO_read_base; 
# 280
char *_IO_write_base; 
# 281
char *_IO_write_ptr; 
# 282
char *_IO_write_end; 
# 283
char *_IO_buf_base; 
# 284
char *_IO_buf_end; 
# 286
char *_IO_save_base; 
# 287
char *_IO_backup_base; 
# 288
char *_IO_save_end; 
# 290
_IO_marker *_markers; 
# 292
_IO_FILE *_chain; 
# 294
int _fileno; 
# 298
int _flags2; 
# 300
__off_t _old_offset; 
# 304
unsigned short _cur_column; 
# 305
signed char _vtable_offset; 
# 306
char _shortbuf[1]; 
# 310
_IO_lock_t *_lock; 
# 319 "/usr/include/libio.h" 3
__off64_t _offset; 
# 328 "/usr/include/libio.h" 3
void *__pad1; 
# 329
void *__pad2; 
# 330
void *__pad3; 
# 331
void *__pad4; 
# 332
size_t __pad5; 
# 334
int _mode; 
# 336
char _unused2[(((15) * sizeof(int)) - ((4) * sizeof(void *))) - sizeof(size_t)]; 
# 338
}; }
# 344
struct _IO_FILE_plus; 
# 346
extern "C" { extern _IO_FILE_plus _IO_2_1_stdin_; } 
# 347
extern "C" { extern _IO_FILE_plus _IO_2_1_stdout_; } 
# 348
extern "C" { extern _IO_FILE_plus _IO_2_1_stderr_; } 
# 364 "/usr/include/libio.h" 3
extern "C" { typedef __ssize_t __io_read_fn(void * , char * , size_t ); }
# 372
extern "C" { typedef __ssize_t __io_write_fn(void * , const char * , size_t ); }
# 381
extern "C" { typedef int __io_seek_fn(void * , __off64_t * , int ); }
# 384
extern "C" { typedef int __io_close_fn(void * ); }
# 389
extern "C" { typedef __io_read_fn cookie_read_function_t; }
# 390
extern "C" { typedef __io_write_fn cookie_write_function_t; }
# 391
extern "C" { typedef __io_seek_fn cookie_seek_function_t; }
# 392
extern "C" { typedef __io_close_fn cookie_close_function_t; }
# 401
extern "C" { typedef 
# 396
struct { 
# 397
__io_read_fn *read; 
# 398
__io_write_fn *write; 
# 399
__io_seek_fn *seek; 
# 400
__io_close_fn *close; 
# 401
} _IO_cookie_io_functions_t; }
# 402
extern "C" { typedef _IO_cookie_io_functions_t cookie_io_functions_t; }
# 404
struct _IO_cookie_file; 
# 407
extern "C" void _IO_cookie_init(_IO_cookie_file * , int , void * , _IO_cookie_io_functions_t ); 
# 416
extern "C" int __underflow(_IO_FILE *); 
# 417
extern "C" int __uflow(_IO_FILE *); 
# 418
extern "C" int __overflow(_IO_FILE *, int); 
# 460 "/usr/include/libio.h" 3
extern "C" int _IO_getc(_IO_FILE * ); 
# 461
extern "C" int _IO_putc(int , _IO_FILE * ); 
# 462
extern "C" int _IO_feof(_IO_FILE * ) throw(); 
# 463
extern "C" int _IO_ferror(_IO_FILE * ) throw(); 
# 465
extern "C" int _IO_peekc_locked(_IO_FILE * ); 
# 471
extern "C" void _IO_flockfile(_IO_FILE *) throw(); 
# 472
extern "C" void _IO_funlockfile(_IO_FILE *) throw(); 
# 473
extern "C" int _IO_ftrylockfile(_IO_FILE *) throw(); 
# 490 "/usr/include/libio.h" 3
extern "C" int _IO_vfscanf(_IO_FILE *__restrict__, const char *__restrict__, __gnuc_va_list, int *__restrict__); 
# 492
extern "C" int _IO_vfprintf(_IO_FILE *__restrict__, const char *__restrict__, __gnuc_va_list); 
# 494
extern "C" __ssize_t _IO_padn(_IO_FILE *, int, __ssize_t); 
# 495
extern "C" size_t _IO_sgetn(_IO_FILE *, void *, size_t); 
# 497
extern "C" __off64_t _IO_seekoff(_IO_FILE *, __off64_t, int, int); 
# 498
extern "C" __off64_t _IO_seekpos(_IO_FILE *, __off64_t, int); 
# 500
extern "C" void _IO_free_backup_area(_IO_FILE *) throw(); 
# 111 "/usr/include/stdio.h" 3
extern "C" { typedef _G_fpos_t fpos_t; }
# 117
extern "C" { typedef _G_fpos64_t fpos64_t; }
# 165 "/usr/include/stdio.h" 3
extern "C" { extern _IO_FILE *stdin; } 
# 166
extern "C" { extern _IO_FILE *stdout; } 
# 167
extern "C" { extern _IO_FILE *stderr; } 
# 177
extern "C" int remove(const char * ) throw(); 
# 179
extern "C" int rename(const char * , const char * ) throw(); 
# 184
extern "C" int renameat(int , const char * , int , const char * ) throw(); 
# 194
extern "C" FILE *tmpfile(); 
# 204 "/usr/include/stdio.h" 3
extern "C" FILE *tmpfile64(); 
# 208
extern "C" char *tmpnam(char * ) throw(); 
# 214
extern "C" char *tmpnam_r(char * ) throw(); 
# 226 "/usr/include/stdio.h" 3
extern "C" char *tempnam(const char * , const char * ) throw()
# 227
 __attribute((__malloc__)); 
# 236
extern "C" int fclose(FILE * ); 
# 241
extern "C" int fflush(FILE * ); 
# 251 "/usr/include/stdio.h" 3
extern "C" int fflush_unlocked(FILE * ); 
# 261 "/usr/include/stdio.h" 3
extern "C" int fcloseall(); 
# 271
extern "C" FILE *fopen(const char *__restrict__ , const char *__restrict__ ); 
# 277
extern "C" FILE *freopen(const char *__restrict__ , const char *__restrict__ , FILE *__restrict__ ); 
# 296 "/usr/include/stdio.h" 3
extern "C" FILE *fopen64(const char *__restrict__ , const char *__restrict__ ); 
# 298
extern "C" FILE *freopen64(const char *__restrict__ , const char *__restrict__ , FILE *__restrict__ ); 
# 305
extern "C" FILE *fdopen(int , const char * ) throw(); 
# 311
extern "C" FILE *fopencookie(void *__restrict__ , const char *__restrict__ , _IO_cookie_io_functions_t ) throw(); 
# 318
extern "C" FILE *fmemopen(void * , size_t , const char * ) throw(); 
# 324
extern "C" FILE *open_memstream(char ** , size_t * ) throw(); 
# 331
extern "C" void setbuf(FILE *__restrict__ , char *__restrict__ ) throw(); 
# 335
extern "C" int setvbuf(FILE *__restrict__ , char *__restrict__ , int , size_t ) throw(); 
# 342
extern "C" void setbuffer(FILE *__restrict__ , char *__restrict__ , size_t ) throw(); 
# 346
extern "C" void setlinebuf(FILE * ) throw(); 
# 355
extern "C" int fprintf(FILE *__restrict__ , const char *__restrict__ , ...); 
# 361
extern "C" int printf(const char *__restrict__ , ...); 
# 363
extern "C" int sprintf(char *__restrict__ , const char *__restrict__ , ...) throw(); 
# 370
extern "C" int vfprintf(FILE *__restrict__ , const char *__restrict__ , __gnuc_va_list ); 
# 376
extern "C" int vprintf(const char *__restrict__ , __gnuc_va_list ); 
# 378
extern "C" int vsprintf(char *__restrict__ , const char *__restrict__ , __gnuc_va_list ) throw(); 
# 385
extern "C" int snprintf(char *__restrict__ , size_t , const char *__restrict__ , ...) throw()
# 387
 __attribute((__format__(__printf__, 3, 4))); 
# 389
extern "C" int vsnprintf(char *__restrict__ , size_t , const char *__restrict__ , __gnuc_va_list ) throw()
# 391
 __attribute((__format__(__printf__, 3, 0))); 
# 398
extern "C" int vasprintf(char **__restrict__ , const char *__restrict__ , __gnuc_va_list ) throw()
# 400
 __attribute((__format__(__printf__, 2, 0))); 
# 401
extern "C" int __asprintf(char **__restrict__ , const char *__restrict__ , ...) throw()
# 403
 __attribute((__format__(__printf__, 2, 3))); 
# 404
extern "C" int asprintf(char **__restrict__ , const char *__restrict__ , ...) throw()
# 406
 __attribute((__format__(__printf__, 2, 3))); 
# 416 "/usr/include/stdio.h" 3
extern "C" int vdprintf(int , const char *__restrict__ , __gnuc_va_list )
# 418
 __attribute((__format__(__printf__, 2, 0))); 
# 419
extern "C" int dprintf(int , const char *__restrict__ , ...)
# 420
 __attribute((__format__(__printf__, 2, 3))); 
# 429
extern "C" int fscanf(FILE *__restrict__ , const char *__restrict__ , ...); 
# 435
extern "C" int scanf(const char *__restrict__ , ...); 
# 437
extern "C" int sscanf(const char *__restrict__ , const char *__restrict__ , ...) throw(); 
# 475 "/usr/include/stdio.h" 3
extern "C" int vfscanf(FILE *__restrict__ , const char *__restrict__ , __gnuc_va_list )
# 477
 __attribute((__format__(__scanf__, 2, 0))); 
# 483
extern "C" int vscanf(const char *__restrict__ , __gnuc_va_list )
# 484
 __attribute((__format__(__scanf__, 1, 0))); 
# 487
extern "C" int vsscanf(const char *__restrict__ , const char *__restrict__ , __gnuc_va_list ) throw()
# 489
 __attribute((__format__(__scanf__, 2, 0))); 
# 535 "/usr/include/stdio.h" 3
extern "C" int fgetc(FILE * ); 
# 536
extern "C" int getc(FILE * ); 
# 542
extern "C" int getchar(); 
# 554 "/usr/include/stdio.h" 3
extern "C" int getc_unlocked(FILE * ); 
# 555
extern "C" int getchar_unlocked(); 
# 565 "/usr/include/stdio.h" 3
extern "C" int fgetc_unlocked(FILE * ); 
# 577
extern "C" int fputc(int , FILE * ); 
# 578
extern "C" int putc(int , FILE * ); 
# 584
extern "C" int putchar(int ); 
# 598 "/usr/include/stdio.h" 3
extern "C" int fputc_unlocked(int , FILE * ); 
# 606
extern "C" int putc_unlocked(int , FILE * ); 
# 607
extern "C" int putchar_unlocked(int ); 
# 614
extern "C" int getw(FILE * ); 
# 617
extern "C" int putw(int , FILE * ); 
# 626
extern "C" char *fgets(char *__restrict__ , int , FILE *__restrict__ ); 
# 634
extern "C" char *gets(char * ); 
# 644 "/usr/include/stdio.h" 3
extern "C" char *fgets_unlocked(char *__restrict__ , int , FILE *__restrict__ ); 
# 660 "/usr/include/stdio.h" 3
extern "C" __ssize_t __getdelim(char **__restrict__ , size_t *__restrict__ , int , FILE *__restrict__ ); 
# 663
extern "C" __ssize_t getdelim(char **__restrict__ , size_t *__restrict__ , int , FILE *__restrict__ ); 
# 673
extern "C" __ssize_t getline(char **__restrict__ , size_t *__restrict__ , FILE *__restrict__ ); 
# 684
extern "C" int fputs(const char *__restrict__ , FILE *__restrict__ ); 
# 690
extern "C" int puts(const char * ); 
# 697
extern "C" int ungetc(int , FILE * ); 
# 704
extern "C" size_t fread(void *__restrict__ , size_t , size_t , FILE *__restrict__ ); 
# 710
extern "C" size_t fwrite(const void *__restrict__ , size_t , size_t , FILE *__restrict__ ); 
# 721 "/usr/include/stdio.h" 3
extern "C" int fputs_unlocked(const char *__restrict__ , FILE *__restrict__ ); 
# 732 "/usr/include/stdio.h" 3
extern "C" size_t fread_unlocked(void *__restrict__ , size_t , size_t , FILE *__restrict__ ); 
# 734
extern "C" size_t fwrite_unlocked(const void *__restrict__ , size_t , size_t , FILE *__restrict__ ); 
# 744
extern "C" int fseek(FILE * , long , int ); 
# 749
extern "C" long ftell(FILE * ); 
# 754
extern "C" void rewind(FILE * ); 
# 768 "/usr/include/stdio.h" 3
extern "C" int fseeko(FILE * , __off_t , int ); 
# 773
extern "C" __off_t ftello(FILE * ); 
# 793 "/usr/include/stdio.h" 3
extern "C" int fgetpos(FILE *__restrict__ , fpos_t *__restrict__ ); 
# 798
extern "C" int fsetpos(FILE * , const fpos_t * ); 
# 813 "/usr/include/stdio.h" 3
extern "C" int fseeko64(FILE * , __off64_t , int ); 
# 814
extern "C" __off64_t ftello64(FILE * ); 
# 815
extern "C" int fgetpos64(FILE *__restrict__ , fpos64_t *__restrict__ ); 
# 816
extern "C" int fsetpos64(FILE * , const fpos64_t * ); 
# 821
extern "C" void clearerr(FILE * ) throw(); 
# 823
extern "C" int feof(FILE * ) throw(); 
# 825
extern "C" int ferror(FILE * ) throw(); 
# 830
extern "C" void clearerr_unlocked(FILE * ) throw(); 
# 831
extern "C" int feof_unlocked(FILE * ) throw(); 
# 832
extern "C" int ferror_unlocked(FILE * ) throw(); 
# 841
extern "C" void perror(const char * ); 
# 27 "/usr/include/bits/sys_errlist.h" 3
extern "C" { extern int sys_nerr; } 
# 28
extern "C" { extern const char *const sys_errlist[]; } 
# 31
extern "C" { extern int _sys_nerr; } 
# 32
extern "C" { extern const char *const _sys_errlist[]; } 
# 853 "/usr/include/stdio.h" 3
extern "C" int fileno(FILE * ) throw(); 
# 858
extern "C" int fileno_unlocked(FILE * ) throw(); 
# 868 "/usr/include/stdio.h" 3
extern "C" FILE *popen(const char * , const char * ); 
# 874
extern "C" int pclose(FILE * ); 
# 880
extern "C" char *ctermid(char * ) throw(); 
# 886
extern "C" char *cuserid(char * ); 
# 891
struct obstack; 
# 894
extern "C" int obstack_printf(obstack *__restrict__ , const char *__restrict__ , ...) throw()
# 896
 __attribute((__format__(__printf__, 2, 3))); 
# 897
extern "C" int obstack_vprintf(obstack *__restrict__ , const char *__restrict__ , __gnuc_va_list ) throw()
# 900
 __attribute((__format__(__printf__, 2, 0))); 
# 908
extern "C" void flockfile(FILE * ) throw(); 
# 912
extern "C" int ftrylockfile(FILE * ) throw(); 
# 915
extern "C" void funlockfile(FILE * ) throw(); 
# 148 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" { typedef unsigned long long CUdeviceptr; }
# 155
extern "C" { typedef int CUdevice; }
# 156
extern "C" { typedef struct CUctx_st *CUcontext; }
# 157
extern "C" { typedef struct CUmod_st *CUmodule; }
# 158
extern "C" { typedef struct CUfunc_st *CUfunction; }
# 159
extern "C" { typedef struct CUarray_st *CUarray; }
# 160
extern "C" { typedef struct CUmipmappedArray_st *CUmipmappedArray; }
# 161
extern "C" { typedef struct CUtexref_st *CUtexref; }
# 162
extern "C" { typedef struct CUsurfref_st *CUsurfref; }
# 163
extern "C" { typedef CUevent_st *CUevent; }
# 164
extern "C" { typedef CUstream_st *CUstream; }
# 165
extern "C" { typedef struct CUgraphicsResource_st *CUgraphicsResource; }
# 166
extern "C" { typedef unsigned long long CUtexObject; }
# 167
extern "C" { typedef unsigned long long CUsurfObject; }
# 171
extern "C" { typedef 
# 169
struct CUuuid_st { 
# 170
char bytes[16]; 
# 171
} CUuuid; }
# 186 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" { typedef 
# 184
struct CUipcEventHandle_st { 
# 185
char reserved[64]; 
# 186
} CUipcEventHandle; }
# 193
extern "C" { typedef 
# 191
struct CUipcMemHandle_st { 
# 192
char reserved[64]; 
# 193
} CUipcMemHandle; }
# 200
extern "C" { typedef 
# 198
enum CUipcMem_flags_enum { 
# 199
CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS = 1
# 200
} CUipcMem_flags; }
# 219
extern "C" { typedef 
# 207
enum CUctx_flags_enum { 
# 208
CU_CTX_SCHED_AUTO, 
# 209
CU_CTX_SCHED_SPIN, 
# 210
CU_CTX_SCHED_YIELD, 
# 211
CU_CTX_SCHED_BLOCKING_SYNC = 4, 
# 212
CU_CTX_BLOCKING_SYNC = 4, 
# 215
CU_CTX_SCHED_MASK = 7, 
# 216
CU_CTX_MAP_HOST, 
# 217
CU_CTX_LMEM_RESIZE_TO_MAX = 16, 
# 218
CU_CTX_FLAGS_MASK = 31
# 219
} CUctx_flags; }
# 227
extern "C" { typedef 
# 224
enum CUstream_flags_enum { 
# 225
CU_STREAM_DEFAULT, 
# 226
CU_STREAM_NON_BLOCKING
# 227
} CUstream_flags; }
# 237
extern "C" { typedef 
# 232
enum CUevent_flags_enum { 
# 233
CU_EVENT_DEFAULT, 
# 234
CU_EVENT_BLOCKING_SYNC, 
# 235
CU_EVENT_DISABLE_TIMING, 
# 236
CU_EVENT_INTERPROCESS = 4
# 237
} CUevent_flags; }
# 251
extern "C" { typedef 
# 242
enum CUarray_format_enum { 
# 243
CU_AD_FORMAT_UNSIGNED_INT8 = 1, 
# 244
CU_AD_FORMAT_UNSIGNED_INT16, 
# 245
CU_AD_FORMAT_UNSIGNED_INT32, 
# 246
CU_AD_FORMAT_SIGNED_INT8 = 8, 
# 247
CU_AD_FORMAT_SIGNED_INT16, 
# 248
CU_AD_FORMAT_SIGNED_INT32, 
# 249
CU_AD_FORMAT_HALF = 16, 
# 250
CU_AD_FORMAT_FLOAT = 32
# 251
} CUarray_format; }
# 261
extern "C" { typedef 
# 256
enum CUaddress_mode_enum { 
# 257
CU_TR_ADDRESS_MODE_WRAP, 
# 258
CU_TR_ADDRESS_MODE_CLAMP, 
# 259
CU_TR_ADDRESS_MODE_MIRROR, 
# 260
CU_TR_ADDRESS_MODE_BORDER
# 261
} CUaddress_mode; }
# 269
extern "C" { typedef 
# 266
enum CUfilter_mode_enum { 
# 267
CU_TR_FILTER_MODE_POINT, 
# 268
CU_TR_FILTER_MODE_LINEAR
# 269
} CUfilter_mode; }
# 358
extern "C" { typedef 
# 274
enum CUdevice_attribute_enum { 
# 275
CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 1, 
# 276
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X, 
# 277
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y, 
# 278
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z, 
# 279
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X, 
# 280
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y, 
# 281
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z, 
# 282
CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK, 
# 283
CU_DEVICE_ATTRIBUTE_SHARED_MEMORY_PER_BLOCK = 8, 
# 284
CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY, 
# 285
CU_DEVICE_ATTRIBUTE_WARP_SIZE, 
# 286
CU_DEVICE_ATTRIBUTE_MAX_PITCH, 
# 287
CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK, 
# 288
CU_DEVICE_ATTRIBUTE_REGISTERS_PER_BLOCK = 12, 
# 289
CU_DEVICE_ATTRIBUTE_CLOCK_RATE, 
# 290
CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT, 
# 291
CU_DEVICE_ATTRIBUTE_GPU_OVERLAP, 
# 292
CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT, 
# 293
CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT, 
# 294
CU_DEVICE_ATTRIBUTE_INTEGRATED, 
# 295
CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY, 
# 296
CU_DEVICE_ATTRIBUTE_COMPUTE_MODE, 
# 297
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH, 
# 298
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH, 
# 299
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT, 
# 300
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH, 
# 301
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT, 
# 302
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH, 
# 303
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH, 
# 304
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT, 
# 305
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS, 
# 306
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_WIDTH = 27, 
# 307
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_HEIGHT, 
# 308
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_NUMSLICES, 
# 309
CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT, 
# 310
CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS, 
# 311
CU_DEVICE_ATTRIBUTE_ECC_ENABLED, 
# 312
CU_DEVICE_ATTRIBUTE_PCI_BUS_ID, 
# 313
CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID, 
# 314
CU_DEVICE_ATTRIBUTE_TCC_DRIVER, 
# 315
CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE, 
# 316
CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH, 
# 317
CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE, 
# 318
CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR, 
# 319
CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT, 
# 320
CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING, 
# 321
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH, 
# 322
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS, 
# 323
CU_DEVICE_ATTRIBUTE_CAN_TEX2D_GATHER, 
# 324
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_WIDTH, 
# 325
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_HEIGHT, 
# 326
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH_ALTERNATE, 
# 327
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT_ALTERNATE, 
# 328
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH_ALTERNATE, 
# 329
CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID, 
# 330
CU_DEVICE_ATTRIBUTE_TEXTURE_PITCH_ALIGNMENT, 
# 331
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_WIDTH, 
# 332
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_WIDTH, 
# 333
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_LAYERS, 
# 334
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_WIDTH, 
# 335
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_WIDTH, 
# 336
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_HEIGHT, 
# 337
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_WIDTH, 
# 338
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_HEIGHT, 
# 339
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_DEPTH, 
# 340
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_WIDTH, 
# 341
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_LAYERS, 
# 342
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_WIDTH, 
# 343
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_HEIGHT, 
# 344
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_LAYERS, 
# 345
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_WIDTH, 
# 346
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_WIDTH, 
# 347
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_LAYERS, 
# 348
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LINEAR_WIDTH, 
# 349
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_WIDTH, 
# 350
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_HEIGHT, 
# 351
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_PITCH, 
# 352
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_WIDTH, 
# 353
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_HEIGHT, 
# 354
CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR, 
# 355
CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR, 
# 356
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_MIPMAPPED_WIDTH, 
# 357
CU_DEVICE_ATTRIBUTE_MAX
# 358
} CUdevice_attribute; }
# 374
extern "C" { typedef 
# 363
struct CUdevprop_st { 
# 364
int maxThreadsPerBlock; 
# 365
int maxThreadsDim[3]; 
# 366
int maxGridSize[3]; 
# 367
int sharedMemPerBlock; 
# 368
int totalConstantMemory; 
# 369
int SIMDWidth; 
# 370
int memPitch; 
# 371
int regsPerBlock; 
# 372
int clockRate; 
# 373
int textureAlign; 
# 374
} CUdevprop; }
# 385
extern "C" { typedef 
# 379
enum CUpointer_attribute_enum { 
# 380
CU_POINTER_ATTRIBUTE_CONTEXT = 1, 
# 381
CU_POINTER_ATTRIBUTE_MEMORY_TYPE, 
# 382
CU_POINTER_ATTRIBUTE_DEVICE_POINTER, 
# 383
CU_POINTER_ATTRIBUTE_HOST_POINTER, 
# 384
CU_POINTER_ATTRIBUTE_P2P_TOKENS
# 385
} CUpointer_attribute; }
# 440 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" { typedef 
# 390 "/usr/local/cuda-5.0/include/cuda.h"
enum CUfunction_attribute_enum { 
# 396
CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK, 
# 403
CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES, 
# 409
CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES, 
# 414
CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES, 
# 419
CU_FUNC_ATTRIBUTE_NUM_REGS, 
# 428 "/usr/local/cuda-5.0/include/cuda.h"
CU_FUNC_ATTRIBUTE_PTX_VERSION, 
# 437 "/usr/local/cuda-5.0/include/cuda.h"
CU_FUNC_ATTRIBUTE_BINARY_VERSION, 
# 439
CU_FUNC_ATTRIBUTE_MAX
# 440
} CUfunction_attribute; }
# 450
extern "C" { typedef 
# 445
enum CUfunc_cache_enum { 
# 446
CU_FUNC_CACHE_PREFER_NONE, 
# 447
CU_FUNC_CACHE_PREFER_SHARED, 
# 448
CU_FUNC_CACHE_PREFER_L1, 
# 449
CU_FUNC_CACHE_PREFER_EQUAL
# 450
} CUfunc_cache; }
# 459
extern "C" { typedef 
# 455
enum CUsharedconfig_enum { 
# 456
CU_SHARED_MEM_CONFIG_DEFAULT_BANK_SIZE, 
# 457
CU_SHARED_MEM_CONFIG_FOUR_BYTE_BANK_SIZE, 
# 458
CU_SHARED_MEM_CONFIG_EIGHT_BYTE_BANK_SIZE
# 459
} CUsharedconfig; }
# 469
extern "C" { typedef 
# 464
enum CUmemorytype_enum { 
# 465
CU_MEMORYTYPE_HOST = 1, 
# 466
CU_MEMORYTYPE_DEVICE, 
# 467
CU_MEMORYTYPE_ARRAY, 
# 468
CU_MEMORYTYPE_UNIFIED
# 469
} CUmemorytype; }
# 479
extern "C" { typedef 
# 474
enum CUcomputemode_enum { 
# 475
CU_COMPUTEMODE_DEFAULT, 
# 476
CU_COMPUTEMODE_EXCLUSIVE, 
# 477
CU_COMPUTEMODE_PROHIBITED, 
# 478
CU_COMPUTEMODE_EXCLUSIVE_PROCESS
# 479
} CUcomputemode; }
# 571 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" { typedef 
# 484 "/usr/local/cuda-5.0/include/cuda.h"
enum CUjit_option_enum { 
# 490
CU_JIT_MAX_REGISTERS, 
# 503 "/usr/local/cuda-5.0/include/cuda.h"
CU_JIT_THREADS_PER_BLOCK, 
# 510
CU_JIT_WALL_TIME, 
# 518
CU_JIT_INFO_LOG_BUFFER, 
# 526
CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES, 
# 534
CU_JIT_ERROR_LOG_BUFFER, 
# 542
CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES, 
# 549
CU_JIT_OPTIMIZATION_LEVEL, 
# 556
CU_JIT_TARGET_FROM_CUCONTEXT, 
# 562
CU_JIT_TARGET, 
# 569
CU_JIT_FALLBACK_STRATEGY
# 571
} CUjit_option; }
# 586
extern "C" { typedef 
# 576
enum CUjit_target_enum { 
# 578
CU_TARGET_COMPUTE_10, 
# 579
CU_TARGET_COMPUTE_11, 
# 580
CU_TARGET_COMPUTE_12, 
# 581
CU_TARGET_COMPUTE_13, 
# 582
CU_TARGET_COMPUTE_20, 
# 583
CU_TARGET_COMPUTE_21, 
# 584
CU_TARGET_COMPUTE_30, 
# 585
CU_TARGET_COMPUTE_35
# 586
} CUjit_target; }
# 597
extern "C" { typedef 
# 591
enum CUjit_fallback_enum { 
# 593
CU_PREFER_PTX, 
# 595
CU_PREFER_BINARY
# 597
} CUjit_fallback; }
# 608
extern "C" { typedef 
# 602
enum CUgraphicsRegisterFlags_enum { 
# 603
CU_GRAPHICS_REGISTER_FLAGS_NONE, 
# 604
CU_GRAPHICS_REGISTER_FLAGS_READ_ONLY, 
# 605
CU_GRAPHICS_REGISTER_FLAGS_WRITE_DISCARD, 
# 606
CU_GRAPHICS_REGISTER_FLAGS_SURFACE_LDST = 4, 
# 607
CU_GRAPHICS_REGISTER_FLAGS_TEXTURE_GATHER = 8
# 608
} CUgraphicsRegisterFlags; }
# 617
extern "C" { typedef 
# 613
enum CUgraphicsMapResourceFlags_enum { 
# 614
CU_GRAPHICS_MAP_RESOURCE_FLAGS_NONE, 
# 615
CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY, 
# 616
CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD
# 617
} CUgraphicsMapResourceFlags; }
# 629
extern "C" { typedef 
# 622
enum CUarray_cubemap_face_enum { 
# 623
CU_CUBEMAP_FACE_POSITIVE_X, 
# 624
CU_CUBEMAP_FACE_NEGATIVE_X, 
# 625
CU_CUBEMAP_FACE_POSITIVE_Y, 
# 626
CU_CUBEMAP_FACE_NEGATIVE_Y, 
# 627
CU_CUBEMAP_FACE_POSITIVE_Z, 
# 628
CU_CUBEMAP_FACE_NEGATIVE_Z
# 629
} CUarray_cubemap_face; }
# 640
extern "C" { typedef 
# 634
enum CUlimit_enum { 
# 635
CU_LIMIT_STACK_SIZE, 
# 636
CU_LIMIT_PRINTF_FIFO_SIZE, 
# 637
CU_LIMIT_MALLOC_HEAP_SIZE, 
# 638
CU_LIMIT_DEV_RUNTIME_SYNC_DEPTH, 
# 639
CU_LIMIT_DEV_RUNTIME_PENDING_LAUNCH_COUNT
# 640
} CUlimit; }
# 650
extern "C" { typedef 
# 645
enum CUresourcetype_enum { 
# 646
CU_RESOURCE_TYPE_ARRAY, 
# 647
CU_RESOURCE_TYPE_MIPMAPPED_ARRAY, 
# 648
CU_RESOURCE_TYPE_LINEAR, 
# 649
CU_RESOURCE_TYPE_PITCH2D
# 650
} CUresourcetype; }
# 985 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" { typedef 
# 655 "/usr/local/cuda-5.0/include/cuda.h"
enum cudaError_enum { 
# 661
CUDA_SUCCESS, 
# 667
CUDA_ERROR_INVALID_VALUE, 
# 673
CUDA_ERROR_OUT_OF_MEMORY, 
# 679
CUDA_ERROR_NOT_INITIALIZED, 
# 684
CUDA_ERROR_DEINITIALIZED, 
# 691
CUDA_ERROR_PROFILER_DISABLED, 
# 699
CUDA_ERROR_PROFILER_NOT_INITIALIZED, 
# 706
CUDA_ERROR_PROFILER_ALREADY_STARTED, 
# 713
CUDA_ERROR_PROFILER_ALREADY_STOPPED, 
# 719
CUDA_ERROR_NO_DEVICE = 100, 
# 725
CUDA_ERROR_INVALID_DEVICE, 
# 732
CUDA_ERROR_INVALID_IMAGE = 200, 
# 742 "/usr/local/cuda-5.0/include/cuda.h"
CUDA_ERROR_INVALID_CONTEXT, 
# 751 "/usr/local/cuda-5.0/include/cuda.h"
CUDA_ERROR_CONTEXT_ALREADY_CURRENT, 
# 756
CUDA_ERROR_MAP_FAILED = 205, 
# 761
CUDA_ERROR_UNMAP_FAILED, 
# 767
CUDA_ERROR_ARRAY_IS_MAPPED, 
# 772
CUDA_ERROR_ALREADY_MAPPED, 
# 780
CUDA_ERROR_NO_BINARY_FOR_GPU, 
# 785
CUDA_ERROR_ALREADY_ACQUIRED, 
# 790
CUDA_ERROR_NOT_MAPPED, 
# 796
CUDA_ERROR_NOT_MAPPED_AS_ARRAY, 
# 802
CUDA_ERROR_NOT_MAPPED_AS_POINTER, 
# 808
CUDA_ERROR_ECC_UNCORRECTABLE, 
# 814
CUDA_ERROR_UNSUPPORTED_LIMIT, 
# 821
CUDA_ERROR_CONTEXT_ALREADY_IN_USE, 
# 827
CUDA_ERROR_PEER_ACCESS_UNSUPPORTED, 
# 832
CUDA_ERROR_INVALID_SOURCE = 300, 
# 837
CUDA_ERROR_FILE_NOT_FOUND, 
# 842
CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND, 
# 847
CUDA_ERROR_SHARED_OBJECT_INIT_FAILED, 
# 852
CUDA_ERROR_OPERATING_SYSTEM, 
# 859
CUDA_ERROR_INVALID_HANDLE = 400, 
# 866
CUDA_ERROR_NOT_FOUND = 500, 
# 875 "/usr/local/cuda-5.0/include/cuda.h"
CUDA_ERROR_NOT_READY = 600, 
# 886 "/usr/local/cuda-5.0/include/cuda.h"
CUDA_ERROR_LAUNCH_FAILED = 700, 
# 897 "/usr/local/cuda-5.0/include/cuda.h"
CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES, 
# 908 "/usr/local/cuda-5.0/include/cuda.h"
CUDA_ERROR_LAUNCH_TIMEOUT, 
# 914
CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING, 
# 921
CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED, 
# 928
CUDA_ERROR_PEER_ACCESS_NOT_ENABLED, 
# 934
CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE = 708, 
# 941
CUDA_ERROR_CONTEXT_IS_DESTROYED, 
# 949
CUDA_ERROR_ASSERT, 
# 956
CUDA_ERROR_TOO_MANY_PEERS, 
# 962
CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED, 
# 968
CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED, 
# 973
CUDA_ERROR_NOT_PERMITTED = 800, 
# 979
CUDA_ERROR_NOT_SUPPORTED, 
# 984
CUDA_ERROR_UNKNOWN = 999
# 985
} CUresult; }
# 999 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" { typedef void (*CUstreamCallback)(CUstream , CUresult , void * ); }
# 1061 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" { typedef 
# 1040
struct CUDA_MEMCPY2D_st { 
# 1041
size_t srcXInBytes; 
# 1042
size_t srcY; 
# 1044
CUmemorytype srcMemoryType; 
# 1045
const void *srcHost; 
# 1046
CUdeviceptr srcDevice; 
# 1047
CUarray srcArray; 
# 1048
size_t srcPitch; 
# 1050
size_t dstXInBytes; 
# 1051
size_t dstY; 
# 1053
CUmemorytype dstMemoryType; 
# 1054
void *dstHost; 
# 1055
CUdeviceptr dstDevice; 
# 1056
CUarray dstArray; 
# 1057
size_t dstPitch; 
# 1059
size_t WidthInBytes; 
# 1060
size_t Height; 
# 1061
} CUDA_MEMCPY2D; }
# 1094
extern "C" { typedef 
# 1066
struct CUDA_MEMCPY3D_st { 
# 1067
size_t srcXInBytes; 
# 1068
size_t srcY; 
# 1069
size_t srcZ; 
# 1070
size_t srcLOD; 
# 1071
CUmemorytype srcMemoryType; 
# 1072
const void *srcHost; 
# 1073
CUdeviceptr srcDevice; 
# 1074
CUarray srcArray; 
# 1075
void *reserved0; 
# 1076
size_t srcPitch; 
# 1077
size_t srcHeight; 
# 1079
size_t dstXInBytes; 
# 1080
size_t dstY; 
# 1081
size_t dstZ; 
# 1082
size_t dstLOD; 
# 1083
CUmemorytype dstMemoryType; 
# 1084
void *dstHost; 
# 1085
CUdeviceptr dstDevice; 
# 1086
CUarray dstArray; 
# 1087
void *reserved1; 
# 1088
size_t dstPitch; 
# 1089
size_t dstHeight; 
# 1091
size_t WidthInBytes; 
# 1092
size_t Height; 
# 1093
size_t Depth; 
# 1094
} CUDA_MEMCPY3D; }
# 1127
extern "C" { typedef 
# 1099
struct CUDA_MEMCPY3D_PEER_st { 
# 1100
size_t srcXInBytes; 
# 1101
size_t srcY; 
# 1102
size_t srcZ; 
# 1103
size_t srcLOD; 
# 1104
CUmemorytype srcMemoryType; 
# 1105
const void *srcHost; 
# 1106
CUdeviceptr srcDevice; 
# 1107
CUarray srcArray; 
# 1108
CUcontext srcContext; 
# 1109
size_t srcPitch; 
# 1110
size_t srcHeight; 
# 1112
size_t dstXInBytes; 
# 1113
size_t dstY; 
# 1114
size_t dstZ; 
# 1115
size_t dstLOD; 
# 1116
CUmemorytype dstMemoryType; 
# 1117
void *dstHost; 
# 1118
CUdeviceptr dstDevice; 
# 1119
CUarray dstArray; 
# 1120
CUcontext dstContext; 
# 1121
size_t dstPitch; 
# 1122
size_t dstHeight; 
# 1124
size_t WidthInBytes; 
# 1125
size_t Height; 
# 1126
size_t Depth; 
# 1127
} CUDA_MEMCPY3D_PEER; }
# 1139
extern "C" { typedef 
# 1132
struct CUDA_ARRAY_DESCRIPTOR_st { 
# 1134
size_t Width; 
# 1135
size_t Height; 
# 1137
CUarray_format Format; 
# 1138
unsigned NumChannels; 
# 1139
} CUDA_ARRAY_DESCRIPTOR; }
# 1153
extern "C" { typedef 
# 1144
struct CUDA_ARRAY3D_DESCRIPTOR_st { 
# 1146
size_t Width; 
# 1147
size_t Height; 
# 1148
size_t Depth; 
# 1150
CUarray_format Format; 
# 1151
unsigned NumChannels; 
# 1152
unsigned Flags; 
# 1153
} CUDA_ARRAY3D_DESCRIPTOR; }
# 1193 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" { typedef 
# 1162
struct CUDA_RESOURCE_DESC_st { 
# 1164
CUresourcetype resType; 
# 1166
union { 
# 1167
struct { 
# 1168
CUarray hArray; 
# 1169
} array; 
# 1170
struct { 
# 1171
CUmipmappedArray hMipmappedArray; 
# 1172
} mipmap; 
# 1173
struct { 
# 1174
CUdeviceptr devPtr; 
# 1175
CUarray_format format; 
# 1176
unsigned numChannels; 
# 1177
size_t sizeInBytes; 
# 1178
} linear; 
# 1179
struct { 
# 1180
CUdeviceptr devPtr; 
# 1181
CUarray_format format; 
# 1182
unsigned numChannels; 
# 1183
size_t width; 
# 1184
size_t height; 
# 1185
size_t pitchInBytes; 
# 1186
} pitch2D; 
# 1187
struct { 
# 1188
int reserved[32]; 
# 1189
} reserved; 
# 1190
} res; 
# 1192
unsigned flags; 
# 1193
} CUDA_RESOURCE_DESC; }
# 1208
extern "C" { typedef 
# 1198
struct CUDA_TEXTURE_DESC_st { 
# 1199
CUaddress_mode addressMode[3]; 
# 1200
CUfilter_mode filterMode; 
# 1201
unsigned flags; 
# 1202
unsigned maxAnisotropy; 
# 1203
CUfilter_mode mipmapFilterMode; 
# 1204
float mipmapLevelBias; 
# 1205
float minMipmapLevelClamp; 
# 1206
float maxMipmapLevelClamp; 
# 1207
int reserved[16]; 
# 1208
} CUDA_TEXTURE_DESC; }
# 1250
extern "C" { typedef 
# 1213
enum CUresourceViewFormat_enum { 
# 1215
CU_RES_VIEW_FORMAT_NONE, 
# 1216
CU_RES_VIEW_FORMAT_UINT_1X8, 
# 1217
CU_RES_VIEW_FORMAT_UINT_2X8, 
# 1218
CU_RES_VIEW_FORMAT_UINT_4X8, 
# 1219
CU_RES_VIEW_FORMAT_SINT_1X8, 
# 1220
CU_RES_VIEW_FORMAT_SINT_2X8, 
# 1221
CU_RES_VIEW_FORMAT_SINT_4X8, 
# 1222
CU_RES_VIEW_FORMAT_UINT_1X16, 
# 1223
CU_RES_VIEW_FORMAT_UINT_2X16, 
# 1224
CU_RES_VIEW_FORMAT_UINT_4X16, 
# 1225
CU_RES_VIEW_FORMAT_SINT_1X16, 
# 1226
CU_RES_VIEW_FORMAT_SINT_2X16, 
# 1227
CU_RES_VIEW_FORMAT_SINT_4X16, 
# 1228
CU_RES_VIEW_FORMAT_UINT_1X32, 
# 1229
CU_RES_VIEW_FORMAT_UINT_2X32, 
# 1230
CU_RES_VIEW_FORMAT_UINT_4X32, 
# 1231
CU_RES_VIEW_FORMAT_SINT_1X32, 
# 1232
CU_RES_VIEW_FORMAT_SINT_2X32, 
# 1233
CU_RES_VIEW_FORMAT_SINT_4X32, 
# 1234
CU_RES_VIEW_FORMAT_FLOAT_1X16, 
# 1235
CU_RES_VIEW_FORMAT_FLOAT_2X16, 
# 1236
CU_RES_VIEW_FORMAT_FLOAT_4X16, 
# 1237
CU_RES_VIEW_FORMAT_FLOAT_1X32, 
# 1238
CU_RES_VIEW_FORMAT_FLOAT_2X32, 
# 1239
CU_RES_VIEW_FORMAT_FLOAT_4X32, 
# 1240
CU_RES_VIEW_FORMAT_UNSIGNED_BC1, 
# 1241
CU_RES_VIEW_FORMAT_UNSIGNED_BC2, 
# 1242
CU_RES_VIEW_FORMAT_UNSIGNED_BC3, 
# 1243
CU_RES_VIEW_FORMAT_UNSIGNED_BC4, 
# 1244
CU_RES_VIEW_FORMAT_SIGNED_BC4, 
# 1245
CU_RES_VIEW_FORMAT_UNSIGNED_BC5, 
# 1246
CU_RES_VIEW_FORMAT_SIGNED_BC5, 
# 1247
CU_RES_VIEW_FORMAT_UNSIGNED_BC6H, 
# 1248
CU_RES_VIEW_FORMAT_SIGNED_BC6H, 
# 1249
CU_RES_VIEW_FORMAT_UNSIGNED_BC7
# 1250
} CUresourceViewFormat; }
# 1266
extern "C" { typedef 
# 1255
struct CUDA_RESOURCE_VIEW_DESC_st { 
# 1257
CUresourceViewFormat format; 
# 1258
size_t width; 
# 1259
size_t height; 
# 1260
size_t depth; 
# 1261
unsigned firstMipmapLevel; 
# 1262
unsigned lastMipmapLevel; 
# 1263
unsigned firstLayer; 
# 1264
unsigned lastLayer; 
# 1265
unsigned reserved[16]; 
# 1266
} CUDA_RESOURCE_VIEW_DESC; }
# 1274
extern "C" { typedef 
# 1271
struct CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st { 
# 1272
unsigned long long p2pToken; 
# 1273
unsigned vaSpaceToken; 
# 1274
} CUDA_POINTER_ATTRIBUTE_P2P_TOKENS; }
# 1401 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuInit(unsigned ); 
# 1428 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuDriverGetVersion(int * ); 
# 1465 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuDeviceGet(CUdevice * , int ); 
# 1490 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuDeviceGetCount(int * ); 
# 1518 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuDeviceGetName(char * , int , CUdevice ); 
# 1545 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuDeviceTotalMem_v2(size_t * , CUdevice ); 
# 1718 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuDeviceGetAttribute(int * , CUdevice_attribute , CUdevice ); 
# 1792 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuDeviceGetProperties(CUdevprop * , CUdevice ); 
# 1825 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuDeviceComputeCapability(int * , int * , CUdevice ); 
# 1924 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuCtxCreate_v2(CUcontext * , unsigned , CUdevice ); 
# 1963 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuCtxDestroy_v2(CUcontext ); 
# 1998 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuCtxPushCurrent_v2(CUcontext ); 
# 2031 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuCtxPopCurrent_v2(CUcontext * ); 
# 2057 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuCtxSetCurrent(CUcontext ); 
# 2076 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuCtxGetCurrent(CUcontext * ); 
# 2105 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuCtxGetDevice(CUdevice * ); 
# 2133 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuCtxSynchronize(); 
# 2227 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuCtxSetLimit(CUlimit , size_t ); 
# 2265 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuCtxGetLimit(size_t * , CUlimit ); 
# 2307 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuCtxGetCacheConfig(CUfunc_cache * ); 
# 2356 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuCtxSetCacheConfig(CUfunc_cache ); 
# 2397 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuCtxGetSharedMemConfig(CUsharedconfig * ); 
# 2448 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuCtxSetSharedMemConfig(CUsharedconfig ); 
# 2485 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuCtxGetApiVersion(CUcontext , unsigned * ); 
# 2536 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuCtxAttach(CUcontext * , unsigned ); 
# 2571 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuCtxDetach(CUcontext ); 
# 2620 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuModuleLoad(CUmodule * , const char * ); 
# 2654 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuModuleLoadData(CUmodule * , const void * ); 
# 2733 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuModuleLoadDataEx(CUmodule * , const void * , unsigned , CUjit_option * , void ** ); 
# 2773 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuModuleLoadFatBinary(CUmodule * , const void * ); 
# 2798 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuModuleUnload(CUmodule ); 
# 2828 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuModuleGetFunction(CUfunction * , CUmodule , const char * ); 
# 2862 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuModuleGetGlobal_v2(CUdeviceptr * , size_t * , CUmodule , const char * ); 
# 2896 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuModuleGetTexRef(CUtexref * , CUmodule , const char * ); 
# 2927 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuModuleGetSurfRef(CUsurfref * , CUmodule , const char * ); 
# 2970 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemGetInfo_v2(size_t * , size_t * ); 
# 3003 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemAlloc_v2(CUdeviceptr * , size_t ); 
# 3064 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemAllocPitch_v2(CUdeviceptr * , size_t * , size_t , size_t , unsigned ); 
# 3093 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemFree_v2(CUdeviceptr ); 
# 3126 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemGetAddressRange_v2(CUdeviceptr * , size_t * , CUdeviceptr ); 
# 3172 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemAllocHost_v2(void ** , size_t ); 
# 3202 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemFreeHost(void * ); 
# 3284 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemHostAlloc(void ** , size_t , unsigned ); 
# 3322 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemHostGetDevicePointer_v2(CUdeviceptr * , void * , unsigned ); 
# 3347 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemHostGetFlags(unsigned * , void * ); 
# 3374 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuDeviceGetByPCIBusId(CUdevice * , char * ); 
# 3402 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuDeviceGetPCIBusId(char * , int , CUdevice ); 
# 3444 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuIpcGetEventHandle(CUipcEventHandle * , CUevent ); 
# 3481 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuIpcOpenEventHandle(CUevent * , CUipcEventHandle ); 
# 3518 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuIpcGetMemHandle(CUipcMemHandle * , CUdeviceptr ); 
# 3566 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuIpcOpenMemHandle(CUdeviceptr * , CUipcMemHandle , unsigned ); 
# 3597 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuIpcCloseMemHandle(CUdeviceptr ); 
# 3660 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemHostRegister(void * , size_t , unsigned ); 
# 3684 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemHostUnregister(void * ); 
# 3720 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemcpy(CUdeviceptr , CUdeviceptr , size_t ); 
# 3753 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemcpyPeer(CUdeviceptr , CUcontext , CUdeviceptr , CUcontext , size_t ); 
# 3789 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemcpyHtoD_v2(CUdeviceptr , const void * , size_t ); 
# 3822 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemcpyDtoH_v2(void * , CUdeviceptr , size_t ); 
# 3855 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemcpyDtoD_v2(CUdeviceptr , CUdeviceptr , size_t ); 
# 3889 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemcpyDtoA_v2(CUarray , size_t , CUdeviceptr , size_t ); 
# 3925 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemcpyAtoD_v2(CUdeviceptr , CUarray , size_t , size_t ); 
# 3959 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemcpyHtoA_v2(CUarray , size_t , const void * , size_t ); 
# 3993 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemcpyAtoH_v2(void * , CUarray , size_t , size_t ); 
# 4031 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemcpyAtoA_v2(CUarray , size_t , CUarray , size_t , size_t ); 
# 4191 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemcpy2D_v2(const CUDA_MEMCPY2D * ); 
# 4349 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemcpy2DUnaligned_v2(const CUDA_MEMCPY2D * ); 
# 4516 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemcpy3D_v2(const CUDA_MEMCPY3D * ); 
# 4547 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemcpy3DPeer(const CUDA_MEMCPY3D_PEER * ); 
# 4587 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemcpyAsync(CUdeviceptr , CUdeviceptr , size_t , CUstream ); 
# 4618 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemcpyPeerAsync(CUdeviceptr , CUcontext , CUdeviceptr , CUcontext , size_t , CUstream ); 
# 4660 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemcpyHtoDAsync_v2(CUdeviceptr , const void * , size_t , CUstream ); 
# 4700 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemcpyDtoHAsync_v2(void * , CUdeviceptr , size_t , CUstream ); 
# 4737 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemcpyDtoDAsync_v2(CUdeviceptr , CUdeviceptr , size_t , CUstream ); 
# 4779 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemcpyHtoAAsync_v2(CUarray , size_t , const void * , size_t , CUstream ); 
# 4821 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemcpyAtoHAsync_v2(void * , CUarray , size_t , size_t , CUstream ); 
# 4992 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemcpy2DAsync_v2(const CUDA_MEMCPY2D * , CUstream ); 
# 5167 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemcpy3DAsync_v2(const CUDA_MEMCPY3D * , CUstream ); 
# 5192 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemcpy3DPeerAsync(const CUDA_MEMCPY3D_PEER * , CUstream ); 
# 5230 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemsetD8_v2(CUdeviceptr , unsigned char , size_t ); 
# 5266 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemsetD16_v2(CUdeviceptr , unsigned short , size_t ); 
# 5302 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemsetD32_v2(CUdeviceptr , unsigned , size_t ); 
# 5343 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemsetD2D8_v2(CUdeviceptr , size_t , unsigned char , size_t , size_t ); 
# 5385 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemsetD2D16_v2(CUdeviceptr , size_t , unsigned short , size_t , size_t ); 
# 5427 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemsetD2D32_v2(CUdeviceptr , size_t , unsigned , size_t , size_t ); 
# 5464 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemsetD8Async(CUdeviceptr , unsigned char , size_t , CUstream ); 
# 5501 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemsetD16Async(CUdeviceptr , unsigned short , size_t , CUstream ); 
# 5537 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemsetD32Async(CUdeviceptr , unsigned , size_t , CUstream ); 
# 5579 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemsetD2D8Async(CUdeviceptr , size_t , unsigned char , size_t , size_t , CUstream ); 
# 5622 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemsetD2D16Async(CUdeviceptr , size_t , unsigned short , size_t , size_t , CUstream ); 
# 5665 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMemsetD2D32Async(CUdeviceptr , size_t , unsigned , size_t , size_t , CUstream ); 
# 5768 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuArrayCreate_v2(CUarray * , const CUDA_ARRAY_DESCRIPTOR * ); 
# 5801 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuArrayGetDescriptor_v2(CUDA_ARRAY_DESCRIPTOR * , CUarray ); 
# 5832 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuArrayDestroy(CUarray ); 
# 6012 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuArray3DCreate_v2(CUarray * , const CUDA_ARRAY3D_DESCRIPTOR * ); 
# 6048 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuArray3DGetDescriptor_v2(CUDA_ARRAY3D_DESCRIPTOR * , CUarray ); 
# 6175 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMipmappedArrayCreate(CUmipmappedArray * , const CUDA_ARRAY3D_DESCRIPTOR * , unsigned ); 
# 6201 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMipmappedArrayGetLevel(CUarray * , CUmipmappedArray , unsigned ); 
# 6221 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuMipmappedArrayDestroy(CUmipmappedArray ); 
# 6437 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuPointerGetAttribute(void * , CUpointer_attribute , CUdeviceptr ); 
# 6479 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuStreamCreate(CUstream * , unsigned ); 
# 6522 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuStreamWaitEvent(CUstream , CUevent , unsigned ); 
# 6567 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuStreamAddCallback(CUstream , CUstreamCallback , void * , unsigned ); 
# 6592 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuStreamQuery(CUstream ); 
# 6618 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuStreamSynchronize(CUstream ); 
# 6647 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuStreamDestroy_v2(CUstream ); 
# 6699 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuEventCreate(CUevent * , unsigned ); 
# 6737 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuEventRecord(CUevent , CUstream ); 
# 6768 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuEventQuery(CUevent ); 
# 6802 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuEventSynchronize(CUevent ); 
# 6831 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuEventDestroy_v2(CUevent ); 
# 6875 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuEventElapsedTime(float * , CUevent , CUevent ); 
# 6938 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuFuncGetAttribute(int * , CUfunction_attribute , CUfunction ); 
# 6981 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuFuncSetCacheConfig(CUfunction , CUfunc_cache ); 
# 7033 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuFuncSetSharedMemConfig(CUfunction , CUsharedconfig ); 
# 7150 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuLaunchKernel(CUfunction , unsigned , unsigned , unsigned , unsigned , unsigned , unsigned , unsigned , CUstream , void ** , void ** ); 
# 7208 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuFuncSetBlockShape(CUfunction , int , int , int ); 
# 7242 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuFuncSetSharedSize(CUfunction , unsigned ); 
# 7274 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuParamSetSize(CUfunction , unsigned ); 
# 7307 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuParamSeti(CUfunction , int , unsigned ); 
# 7340 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuParamSetf(CUfunction , int , float ); 
# 7375 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuParamSetv(CUfunction , int , void * , unsigned ); 
# 7412 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuLaunch(CUfunction ); 
# 7451 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuLaunchGrid(CUfunction , int , int ); 
# 7495 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuLaunchGridAsync(CUfunction , int , int , CUstream ); 
# 7520 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuParamSetTexRef(CUfunction , int , CUtexref ); 
# 7559 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexRefSetArray(CUtexref , CUarray , unsigned ); 
# 7586 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexRefSetMipmappedArray(CUtexref , CUmipmappedArray , unsigned ); 
# 7630 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexRefSetAddress_v2(size_t * , CUtexref , CUdeviceptr , size_t ); 
# 7682 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexRefSetAddress2D_v3(CUtexref , const CUDA_ARRAY_DESCRIPTOR * , CUdeviceptr , size_t ); 
# 7711 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexRefSetFormat(CUtexref , CUarray_format , int ); 
# 7751 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexRefSetAddressMode(CUtexref , int , CUaddress_mode ); 
# 7784 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexRefSetFilterMode(CUtexref , CUfilter_mode ); 
# 7817 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexRefSetMipmapFilterMode(CUtexref , CUfilter_mode ); 
# 7843 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexRefSetMipmapLevelBias(CUtexref , float ); 
# 7871 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexRefSetMipmapLevelClamp(CUtexref , float , float ); 
# 7897 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexRefSetMaxAnisotropy(CUtexref , unsigned ); 
# 7932 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexRefSetFlags(CUtexref , unsigned ); 
# 7958 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexRefGetAddress_v2(CUdeviceptr * , CUtexref ); 
# 7984 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexRefGetArray(CUarray * , CUtexref ); 
# 8009 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexRefGetMipmappedArray(CUmipmappedArray * , CUtexref ); 
# 8035 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexRefGetAddressMode(CUaddress_mode * , CUtexref , int ); 
# 8059 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexRefGetFilterMode(CUfilter_mode * , CUtexref ); 
# 8085 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexRefGetFormat(CUarray_format * , int * , CUtexref ); 
# 8109 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexRefGetMipmapFilterMode(CUfilter_mode * , CUtexref ); 
# 8133 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexRefGetMipmapLevelBias(float * , CUtexref ); 
# 8158 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexRefGetMipmapLevelClamp(float * , float * , CUtexref ); 
# 8182 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexRefGetMaxAnisotropy(int * , CUtexref ); 
# 8205 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexRefGetFlags(unsigned * , CUtexref ); 
# 8241 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexRefCreate(CUtexref * ); 
# 8261 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexRefDestroy(CUtexref ); 
# 8297 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuSurfRefSetArray(CUsurfref , CUarray , unsigned ); 
# 8318 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuSurfRefGetArray(CUarray * , CUsurfref ); 
# 8535 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexObjectCreate(CUtexObject * , const CUDA_RESOURCE_DESC * , const CUDA_TEXTURE_DESC * , const CUDA_RESOURCE_VIEW_DESC * ); 
# 8553 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexObjectDestroy(CUtexObject ); 
# 8572 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexObjectGetResourceDesc(CUDA_RESOURCE_DESC * , CUtexObject ); 
# 8591 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexObjectGetTextureDesc(CUDA_TEXTURE_DESC * , CUtexObject ); 
# 8611 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuTexObjectGetResourceViewDesc(CUDA_RESOURCE_VIEW_DESC * , CUtexObject ); 
# 8647 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuSurfObjectCreate(CUsurfObject * , const CUDA_RESOURCE_DESC * ); 
# 8665 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuSurfObjectDestroy(CUsurfObject ); 
# 8684 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuSurfObjectGetResourceDesc(CUDA_RESOURCE_DESC * , CUsurfObject ); 
# 8723 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuDeviceCanAccessPeer(int * , CUdevice , CUdevice ); 
# 8770 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuCtxEnablePeerAccess(CUcontext , unsigned ); 
# 8795 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuCtxDisablePeerAccess(CUcontext ); 
# 8836 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuGraphicsUnregisterResource(CUgraphicsResource ); 
# 8874 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuGraphicsSubResourceGetMappedArray(CUarray * , CUgraphicsResource , unsigned , unsigned ); 
# 8905 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuGraphicsResourceGetMappedMipmappedArray(CUmipmappedArray * , CUgraphicsResource ); 
# 8941 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuGraphicsResourceGetMappedPointer_v2(CUdeviceptr * , size_t * , CUgraphicsResource ); 
# 8982 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuGraphicsResourceSetMapFlags(CUgraphicsResource , unsigned ); 
# 9020 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuGraphicsMapResources(unsigned , CUgraphicsResource * , CUstream ); 
# 9055 "/usr/local/cuda-5.0/include/cuda.h"
extern "C" CUresult cuGraphicsUnmapResources(unsigned , CUgraphicsResource * , CUstream ); 
# 9059
extern "C" CUresult cuGetExportTable(const void ** , const CUuuid * ); 
# 60 "/usr/local/cuda-5.0/include/cuComplex.h"
extern "C" { typedef float2 cuFloatComplex; }
# 62
extern "C" { static inline float cuCrealf(cuFloatComplex x) 
# 63
{ 
# 64
return x.x; 
# 65
} } 
# 67
extern "C" { static inline float cuCimagf(cuFloatComplex x) 
# 68
{ 
# 69
return x.y; 
# 70
} } 
# 72
extern "C" { static inline cuFloatComplex make_cuFloatComplex(float 
# 73
r, float i) 
# 74
{ 
# 75
cuFloatComplex res; 
# 76
(res.x) = r; 
# 77
(res.y) = i; 
# 78
return res; 
# 79
} } 
# 81
extern "C" { static inline cuFloatComplex cuConjf(cuFloatComplex x) 
# 82
{ 
# 83
return make_cuFloatComplex(cuCrealf(x), -cuCimagf(x)); 
# 84
} } 
# 85
extern "C" { static inline cuFloatComplex cuCaddf(cuFloatComplex x, cuFloatComplex 
# 86
y) 
# 87
{ 
# 88
return make_cuFloatComplex(cuCrealf(x) + cuCrealf(y), cuCimagf(x) + cuCimagf(y)); 
# 90
} } 
# 92
extern "C" { static inline cuFloatComplex cuCsubf(cuFloatComplex x, cuFloatComplex 
# 93
y) 
# 94
{ 
# 95
return make_cuFloatComplex(cuCrealf(x) - cuCrealf(y), cuCimagf(x) - cuCimagf(y)); 
# 97
} } 
# 104
extern "C" { static inline cuFloatComplex cuCmulf(cuFloatComplex x, cuFloatComplex 
# 105
y) 
# 106
{ 
# 107
cuFloatComplex prod; 
# 108
prod = make_cuFloatComplex((cuCrealf(x) * cuCrealf(y)) - (cuCimagf(x) * cuCimagf(y)), (cuCrealf(x) * cuCimagf(y)) + (cuCimagf(x) * cuCrealf(y))); 
# 112
return prod; 
# 113
} } 
# 120
extern "C" { static inline cuFloatComplex cuCdivf(cuFloatComplex x, cuFloatComplex 
# 121
y) 
# 122
{ 
# 123
cuFloatComplex quot; 
# 124
float s = (fabsf(cuCrealf(y)) + fabsf(cuCimagf(y))); 
# 125
float oos = ((1.0F) / s); 
# 126
float ars = (cuCrealf(x) * oos); 
# 127
float ais = (cuCimagf(x) * oos); 
# 128
float brs = (cuCrealf(y) * oos); 
# 129
float bis = (cuCimagf(y) * oos); 
# 130
s = ((brs * brs) + (bis * bis)); 
# 131
oos = ((1.0F) / s); 
# 132
quot = make_cuFloatComplex(((ars * brs) + (ais * bis)) * oos, ((ais * brs) - (ars * bis)) * oos); 
# 134
return quot; 
# 135
} } 
# 145 "/usr/local/cuda-5.0/include/cuComplex.h"
extern "C" { static inline float cuCabsf(cuFloatComplex x) 
# 146
{ 
# 147
float a = cuCrealf(x); 
# 148
float b = cuCimagf(x); 
# 149
float v, w, t; 
# 150
a = fabsf(a); 
# 151
b = fabsf(b); 
# 152
if (a > b) { 
# 153
v = a; 
# 154
w = b; 
# 155
} else { 
# 156
v = b; 
# 157
w = a; 
# 158
}  
# 159
t = (w / v); 
# 160
t = ((1.0F) + (t * t)); 
# 161
t = (v * sqrtf(t)); 
# 162
if (((v == (0.0F)) || (v > (3.402823466e+38F))) || (w > (3.402823466e+38F))) { 
# 163
t = (v + w); 
# 164
}  
# 165
return t; 
# 166
} } 
# 169
extern "C" { typedef double2 cuDoubleComplex; }
# 171
extern "C" { static inline double cuCreal(cuDoubleComplex x) 
# 172
{ 
# 173
return x.x; 
# 174
} } 
# 176
extern "C" { static inline double cuCimag(cuDoubleComplex x) 
# 177
{ 
# 178
return x.y; 
# 179
} } 
# 181
extern "C" { static inline cuDoubleComplex make_cuDoubleComplex(double 
# 182
r, double i) 
# 183
{ 
# 184
cuDoubleComplex res; 
# 185
(res.x) = r; 
# 186
(res.y) = i; 
# 187
return res; 
# 188
} } 
# 190
extern "C" { static inline cuDoubleComplex cuConj(cuDoubleComplex x) 
# 191
{ 
# 192
return make_cuDoubleComplex(cuCreal(x), -cuCimag(x)); 
# 193
} } 
# 195
extern "C" { static inline cuDoubleComplex cuCadd(cuDoubleComplex x, cuDoubleComplex 
# 196
y) 
# 197
{ 
# 198
return make_cuDoubleComplex(cuCreal(x) + cuCreal(y), cuCimag(x) + cuCimag(y)); 
# 200
} } 
# 202
extern "C" { static inline cuDoubleComplex cuCsub(cuDoubleComplex x, cuDoubleComplex 
# 203
y) 
# 204
{ 
# 205
return make_cuDoubleComplex(cuCreal(x) - cuCreal(y), cuCimag(x) - cuCimag(y)); 
# 207
} } 
# 214
extern "C" { static inline cuDoubleComplex cuCmul(cuDoubleComplex x, cuDoubleComplex 
# 215
y) 
# 216
{ 
# 217
cuDoubleComplex prod; 
# 218
prod = make_cuDoubleComplex((cuCreal(x) * cuCreal(y)) - (cuCimag(x) * cuCimag(y)), (cuCreal(x) * cuCimag(y)) + (cuCimag(x) * cuCreal(y))); 
# 222
return prod; 
# 223
} } 
# 230
extern "C" { static inline cuDoubleComplex cuCdiv(cuDoubleComplex x, cuDoubleComplex 
# 231
y) 
# 232
{ 
# 233
cuDoubleComplex quot; 
# 234
double s = (fabs(cuCreal(y)) + fabs(cuCimag(y))); 
# 235
double oos = ((1.0) / s); 
# 236
double ars = (cuCreal(x) * oos); 
# 237
double ais = (cuCimag(x) * oos); 
# 238
double brs = (cuCreal(y) * oos); 
# 239
double bis = (cuCimag(y) * oos); 
# 240
s = ((brs * brs) + (bis * bis)); 
# 241
oos = ((1.0) / s); 
# 242
quot = make_cuDoubleComplex(((ars * brs) + (ais * bis)) * oos, ((ais * brs) - (ars * bis)) * oos); 
# 244
return quot; 
# 245
} } 
# 253
extern "C" { static inline double cuCabs(cuDoubleComplex x) 
# 254
{ 
# 255
double a = cuCreal(x); 
# 256
double b = cuCimag(x); 
# 257
double v, w, t; 
# 258
a = fabs(a); 
# 259
b = fabs(b); 
# 260
if (a > b) { 
# 261
v = a; 
# 262
w = b; 
# 263
} else { 
# 264
v = b; 
# 265
w = a; 
# 266
}  
# 267
t = (w / v); 
# 268
t = ((1.0) + (t * t)); 
# 269
t = (v * sqrt(t)); 
# 270
if (((v == (0.0)) || (v > (1.797693134862315708e+308))) || (w > (1.797693134862315708e+308))) 
# 271
{ 
# 272
t = (v + w); 
# 273
}  
# 274
return t; 
# 275
} } 
# 282
typedef cuFloatComplex cuComplex; 
# 283
static inline cuComplex make_cuComplex(float x, float 
# 284
y) 
# 285
{ 
# 286
return make_cuFloatComplex(x, y); 
# 287
} 
# 290
static inline cuDoubleComplex cuComplexFloatToDouble(cuFloatComplex 
# 291
c) 
# 292
{ 
# 293
return make_cuDoubleComplex((double)cuCrealf(c), (double)cuCimagf(c)); 
# 294
} 
# 296
static inline cuFloatComplex cuComplexDoubleToFloat(cuDoubleComplex 
# 297
c) 
# 298
{ 
# 299
return make_cuFloatComplex((float)cuCreal(c), (float)cuCimag(c)); 
# 300
} 
# 303
static inline cuComplex cuCfmaf(cuComplex x, cuComplex y, cuComplex d) 
# 304
{ 
# 305
float real_res; 
# 306
float imag_res; 
# 308
real_res = ((cuCrealf(x) * cuCrealf(y)) + cuCrealf(d)); 
# 309
imag_res = ((cuCrealf(x) * cuCimagf(y)) + cuCimagf(d)); 
# 311
real_res = ((-(cuCimagf(x) * cuCimagf(y))) + real_res); 
# 312
imag_res = ((cuCimagf(x) * cuCrealf(y)) + imag_res); 
# 314
return make_cuComplex(real_res, imag_res); 
# 315
} 
# 317
static inline cuDoubleComplex cuCfma(cuDoubleComplex x, cuDoubleComplex y, cuDoubleComplex d) 
# 318
{ 
# 319
double real_res; 
# 320
double imag_res; 
# 322
real_res = ((cuCreal(x) * cuCreal(y)) + cuCreal(d)); 
# 323
imag_res = ((cuCreal(x) * cuCimag(y)) + cuCimag(d)); 
# 325
real_res = ((-(cuCimag(x) * cuCimag(y))) + real_res); 
# 326
imag_res = ((cuCimag(x) * cuCreal(y)) + imag_res); 
# 328
return make_cuDoubleComplex(real_res, imag_res); 
# 329
} 
# 86 "/usr/local/cuda-5.0/include/cufft.h"
extern "C" { typedef 
# 75
enum cufftResult_t { 
# 76
CUFFT_SUCCESS, 
# 77
CUFFT_INVALID_PLAN, 
# 78
CUFFT_ALLOC_FAILED, 
# 79
CUFFT_INVALID_TYPE, 
# 80
CUFFT_INVALID_VALUE, 
# 81
CUFFT_INTERNAL_ERROR, 
# 82
CUFFT_EXEC_FAILED, 
# 83
CUFFT_SETUP_FAILED, 
# 84
CUFFT_INVALID_SIZE, 
# 85
CUFFT_UNALIGNED_DATA
# 86
} cufftResult; }
# 94
extern "C" { typedef float cufftReal; }
# 95
extern "C" { typedef double cufftDoubleReal; }
# 100
extern "C" { typedef cuComplex cufftComplex; }
# 101
extern "C" { typedef cuDoubleComplex cufftDoubleComplex; }
# 115
extern "C" { typedef 
# 108
enum cufftType_t { 
# 109
CUFFT_R2C = 42, 
# 110
CUFFT_C2R = 44, 
# 111
CUFFT_C2C = 41, 
# 112
CUFFT_D2Z = 106, 
# 113
CUFFT_Z2D = 108, 
# 114
CUFFT_Z2Z = 105
# 115
} cufftType; }
# 144 "/usr/local/cuda-5.0/include/cufft.h"
extern "C" { typedef 
# 139
enum cufftCompatibility_t { 
# 140
CUFFT_COMPATIBILITY_NATIVE, 
# 141
CUFFT_COMPATIBILITY_FFTW_PADDING, 
# 142
CUFFT_COMPATIBILITY_FFTW_ASYMMETRIC, 
# 143
CUFFT_COMPATIBILITY_FFTW_ALL
# 144
} cufftCompatibility; }
# 154 "/usr/local/cuda-5.0/include/cufft.h"
extern "C" { typedef int cufftHandle; }
# 157
extern "C" cufftResult cufftPlan1d(cufftHandle * , int , cufftType , int ); 
# 162
extern "C" cufftResult cufftPlan2d(cufftHandle * , int , int , cufftType ); 
# 166
extern "C" cufftResult cufftPlan3d(cufftHandle * , int , int , int , cufftType ); 
# 170
extern "C" cufftResult cufftPlanMany(cufftHandle * , int , int * , int * , int , int , int * , int , int , cufftType , int ); 
# 178
extern "C" cufftResult cufftDestroy(cufftHandle ); 
# 180
extern "C" cufftResult cufftExecC2C(cufftHandle , cufftComplex * , cufftComplex * , int ); 
# 185
extern "C" cufftResult cufftExecR2C(cufftHandle , cufftReal * , cufftComplex * ); 
# 189
extern "C" cufftResult cufftExecC2R(cufftHandle , cufftComplex * , cufftReal * ); 
# 193
extern "C" cufftResult cufftExecZ2Z(cufftHandle , cufftDoubleComplex * , cufftDoubleComplex * , int ); 
# 198
extern "C" cufftResult cufftExecD2Z(cufftHandle , cufftDoubleReal * , cufftDoubleComplex * ); 
# 202
extern "C" cufftResult cufftExecZ2D(cufftHandle , cufftDoubleComplex * , cufftDoubleReal * ); 
# 206
extern "C" cufftResult cufftSetStream(cufftHandle , cudaStream_t ); 
# 209
extern "C" cufftResult cufftSetCompatibilityMode(cufftHandle , cufftCompatibility ); 
# 212
extern "C" cufftResult cufftGetVersion(int * ); 
# 38 "/home/saifmulla/openmm/OpenMM/openmmapi/include/openmm/OpenMMException.h"
namespace OpenMM { 
# 44
class OpenMMException : public std::exception { 
# 46
public: explicit OpenMMException(const std::string &message) : message(message) { 
# 47
} 
# 48
virtual ~OpenMMException() throw() { 
# 49
} 
# 50
virtual const char *what() const throw() { 
# 51
return (message).c_str(); 
# 52
} 
# 54
private: std::string message; 
# 55
}; 
# 57
}
# 57 "/home/saifmulla/openmm/OpenMM/platforms/cuda/src/kernels/cudatypes.h"
struct SoADeviceObject { 
# 58
virtual void Allocate() = 0; 
# 59
virtual void Deallocate() = 0; 
# 60
virtual void Upload() = 0; 
# 61
virtual void Download() = 0; 
# 62
}; 
# 64
template< class T> 
# 65
struct CUDAStream : public SoADeviceObject { 
# 67
unsigned _length; 
# 68
unsigned _subStreams; 
# 69
unsigned _stride; 
# 70
T **_pSysStream; 
# 71
T **_pDevStream; 
# 72
T *_pSysData; 
# 73
T *_pDevData; 
# 74
std::string _name; 
# 75
CUDAStream(int , int  = (1), std::string  = ("")); 
# 76
CUDAStream(unsigned , unsigned  = (1), std::string  = ("")); 
# 77
CUDAStream(unsigned , int  = (1), std::string  = ("")); 
# 78
CUDAStream(int , unsigned  = (1), std::string  = ("")); 
# 79
virtual ~CUDAStream(); 
# 80
virtual void Allocate(); 
# 81
virtual void Deallocate(); 
# 82
virtual void Upload(); 
# 83
virtual void Download(); 
# 84
void CopyFrom(const CUDAStream & ); 
# 85
void Collapse(unsigned  = (1), unsigned  = (1)); 
# 86
T &operator[](int ); 
# 87
}; 
# 89
float CompareStreams(CUDAStream< float>  & , CUDAStream< float>  & , float , unsigned  = (0)); 
# 91
template< class T> 
# 92
CUDAStream< T> ::CUDAStream(int length, unsigned subStreams, std::string name) : _length((length)), _subStreams(subStreams), _stride(((length + 15) & 4294967280U)), _name(name) 
# 93
{ 
# 94
this->Allocate(); 
# 95
} 
# 97
template< class T> 
# 98
CUDAStream< T> ::CUDAStream(unsigned length, int subStreams, std::string name) : _length(length), _subStreams((subStreams)), _stride(((length + (15)) & 4294967280U)), _name(name) 
# 99
{ 
# 100
this->Allocate(); 
# 101
} 
# 103
template< class T> 
# 104
CUDAStream< T> ::CUDAStream(unsigned length, unsigned subStreams, std::string name) : _length(length), _subStreams(subStreams), _stride(((length + (15)) & 4294967280U)), _name(name) 
# 105
{ 
# 106
this->Allocate(); 
# 107
} 
# 109
template< class T> 
# 110
CUDAStream< T> ::CUDAStream(int length, int subStreams, std::string name) : _length((length)), _subStreams((subStreams)), _stride(((length + 15) & 4294967280U)), _name(name) 
# 111
{ 
# 112
this->Allocate(); 
# 113
} 
# 115
template< class T> 
# 116
CUDAStream< T> ::~CUDAStream() 
# 117
{ 
# 118
this->Deallocate(); 
# 119
} 
# 121
template< class T> void 
# 122
CUDAStream< T> ::Allocate() 
# 123
{ 
# 124
cudaError_t status; 
# 125
(_pSysStream) = (new (T *[_subStreams])); 
# 126
(_pDevStream) = (new (T *[_subStreams])); 
# 127
(_pSysData) = (new (T [(_subStreams) * (_stride)])); 
# 129
status = cudaMalloc((void **)(&(_pDevData)), ((_stride) * (_subStreams)) * sizeof(T)); 
# 130
if (status != (cudaSuccess)) { throw ((OpenMM::OpenMMException)((((((std::basic_string< char, std::char_traits< char> , std::allocator< char> > )(((_name) + (": cudaMalloc in CUDAStream::Allocate failed")).c_str())) + (" "))) + (cudaGetErrorString(status))))); }  ; 
# 132
for (unsigned i = (0); i < (_subStreams); i++) 
# 133
{ 
# 134
((_pSysStream)[i]) = ((_pSysData) + (i * (_stride))); 
# 135
((_pDevStream)[i]) = ((_pDevData) + (i * (_stride))); 
# 136
}  
# 137
} 
# 139
template< class T> void 
# 140
CUDAStream< T> ::Deallocate() 
# 141
{ 
# 142
cudaError_t status; 
# 143
delete [] (_pSysStream); 
# 144
(_pSysStream) = __null; 
# 145
delete [] (_pDevStream); 
# 146
(_pDevStream) = __null; 
# 147
delete [] (_pSysData); 
# 148
(_pSysData) = __null; 
# 149
status = cudaFree(_pDevData); 
# 150
if (status != (cudaSuccess)) { throw ((OpenMM::OpenMMException)((((((std::basic_string< char, std::char_traits< char> , std::allocator< char> > )(((_name) + (": cudaFree in CUDAStream::Deallocate failed")).c_str())) + (" "))) + (cudaGetErrorString(status))))); }  ; 
# 151
} 
# 153
template< class T> void 
# 154
CUDAStream< T> ::Upload() 
# 155
{ 
# 156
cudaError_t status; 
# 157
status = cudaMemcpy(_pDevData, _pSysData, ((_stride) * (_subStreams)) * sizeof(T), cudaMemcpyHostToDevice); 
# 158
if (status != (cudaSuccess)) { throw ((OpenMM::OpenMMException)((((((std::basic_string< char, std::char_traits< char> , std::allocator< char> > )(((_name) + (": cudaMemcpy in CUDAStream::Upload failed")).c_str())) + (" "))) + (cudaGetErrorString(status))))); }  ; 
# 159
} 
# 161
template< class T> void 
# 162
CUDAStream< T> ::Download() 
# 163
{ 
# 164
cudaError_t status; 
# 165
status = cudaMemcpy(_pSysData, _pDevData, ((_stride) * (_subStreams)) * sizeof(T), cudaMemcpyDeviceToHost); 
# 166
if (status != (cudaSuccess)) { throw ((OpenMM::OpenMMException)((((((std::basic_string< char, std::char_traits< char> , std::allocator< char> > )(((_name) + (": cudaMemcpy in CUDAStream::Download failed")).c_str())) + (" "))) + (cudaGetErrorString(status))))); }  ; 
# 167
} 
# 169
template< class T> void 
# 170
CUDAStream< T> ::CopyFrom(const CUDAStream &src) 
# 171
{ 
# 172
cudaError_t status; 
# 173
status = cudaMemcpy(_pDevData, src._pDevData, ((_stride) * (_subStreams)) * sizeof(T), cudaMemcpyDeviceToDevice); 
# 174
if (status != (cudaSuccess)) { throw ((OpenMM::OpenMMException)((((((std::basic_string< char, std::char_traits< char> , std::allocator< char> > )(((_name) + (": cudaMemcpy in CUDAStream::Copy failed")).c_str())) + (" "))) + (cudaGetErrorString(status))))); }  ; 
# 175
} 
# 177
template< class T> void 
# 178
CUDAStream< T> ::Collapse(unsigned newstreams, unsigned interleave) 
# 179
{ 
# 180
T *pTemp = (new (T [(_subStreams) * (_stride)])); 
# 181
unsigned stream = (0); 
# 182
unsigned pos = (0); 
# 183
unsigned newstride = (((_stride) * (_subStreams)) / newstreams); 
# 184
unsigned newlength = (((_length) * (_subStreams)) / newstreams); 
# 187
for (unsigned i = (0); i < (_length); i++) 
# 188
{ 
# 189
for (unsigned j = (0); j < (_subStreams); j++) 
# 190
{ 
# 191
(pTemp[(stream * newstride) + pos]) = (((_pSysStream)[j])[i]); 
# 192
stream++; 
# 193
if (stream == newstreams) 
# 194
{ 
# 195
stream = (0); 
# 196
pos++; 
# 197
}  
# 198
}  
# 199
}  
# 202
for (unsigned i = (0); i < newstreams; i++) 
# 203
{ 
# 204
((_pSysStream)[i]) = ((_pSysData) + (i * newstride)); 
# 205
((_pDevStream)[i]) = ((_pDevData) + (i * newstride)); 
# 206
}  
# 209
for (unsigned i = (0); i < newlength; i++) { 
# 210
for (unsigned j = (0); j < newstreams; j++) { 
# 211
(((_pSysStream)[j])[i]) = (pTemp[(j * newstride) + i]); }  }  
# 213
(_stride) = newstride; 
# 214
(_length) = newlength; 
# 215
(_subStreams) = newstreams; 
# 216
delete [] pTemp; 
# 217
} 
# 219
template< class T> T &
# 220
CUDAStream< T> ::operator[](int index) 
# 221
{ 
# 222
return (_pSysData)[index]; 
# 223
} 
# 225
static const unsigned GRID = (32); 
# 226
static const unsigned GRIDBITS = (5); 
# 227
static const int G8X_BLOCKS_PER_SM = 1; 
# 228
static const int GT2XX_BLOCKS_PER_SM = 1; 
# 229
static const int GF1XX_BLOCKS_PER_SM = 1; 
# 231
static const int G8X_NONBOND_THREADS_PER_BLOCK = 256; 
# 232
static const int GT2XX_NONBOND_THREADS_PER_BLOCK = 320; 
# 233
static const int GF1XX_NONBOND_THREADS_PER_BLOCK = 768; 
# 236
static const int G8X_BORNFORCE2_THREADS_PER_BLOCK = 256; 
# 237
static const int GT2XX_BORNFORCE2_THREADS_PER_BLOCK = 320; 
# 238
static const int GF1XX_BORNFORCE2_THREADS_PER_BLOCK = 768; 
# 241
static const int G8X_SHAKE_THREADS_PER_BLOCK = 128; 
# 242
static const int GT2XX_SHAKE_THREADS_PER_BLOCK = 256; 
# 243
static const int GF1XX_SHAKE_THREADS_PER_BLOCK = 512; 
# 245
static const int G8X_UPDATE_THREADS_PER_BLOCK = 192; 
# 246
static const int GT2XX_UPDATE_THREADS_PER_BLOCK = 384; 
# 247
static const int GF1XX_UPDATE_THREADS_PER_BLOCK = 768; 
# 249
static const int G8X_LOCALFORCES_THREADS_PER_BLOCK = 192; 
# 250
static const int GT2XX_LOCALFORCES_THREADS_PER_BLOCK = 384; 
# 251
static const int GF1XX_LOCALFORCES_THREADS_PER_BLOCK = 768; 
# 253
static const int G8X_THREADS_PER_BLOCK = 256; 
# 254
static const int GT2XX_THREADS_PER_BLOCK = 256; 
# 255
static const int GF1XX_THREADS_PER_BLOCK = 512; 
# 257
static const int G8X_RANDOM_THREADS_PER_BLOCK = 256; 
# 258
static const int GT2XX_RANDOM_THREADS_PER_BLOCK = 384; 
# 259
static const int GF1XX_RANDOM_THREADS_PER_BLOCK = 768; 
# 261
static const int G8X_NONBOND_WORKUNITS_PER_SM = 220; 
# 262
static const int GT2XX_NONBOND_WORKUNITS_PER_SM = 256; 
# 263
static const int GF1XX_NONBOND_WORKUNITS_PER_SM = 768; 
# 265
static const unsigned MAX_STACK_SIZE = (8); 
# 266
static const unsigned MAX_TABULATED_FUNCTIONS = (4); 
# 268
static const float PI = (3.141592741F); 
# 270
static const int PME_ORDER = 5; 
# 272
enum CudaNonbondedMethod { 
# 274
NO_CUTOFF, 
# 275
CUTOFF, 
# 276
PERIODIC, 
# 277
EWALD, 
# 278
PARTICLE_MESH_EWALD
# 279
}; 
# 281
enum ExpressionOp { 
# 282
VARIABLE0, VARIABLE1, VARIABLE2, VARIABLE3, VARIABLE4, VARIABLE5, VARIABLE6, VARIABLE7, VARIABLE8, MULTIPLY, DIVIDE, ADD, SUBTRACT, POWER, MULTIPLY_CONSTANT, POWER_CONSTANT, ADD_CONSTANT, 
# 283
GLOBAL, CONSTANT, CUSTOM, CUSTOM_DERIV, NEGATE, RECIPROCAL, SQRT, EXP, LOG, SQUARE, CUBE, STEP, SIN, COS, SEC, CSC, TAN, COT, ASIN, ACOS, ATAN, SINH, COSH, TANH, ERF, ERFC, 
# 284
MIN, MAX, ABS
# 285
}; 
# 287
template< int SIZE> 
# 288
struct Expression { 
# 289
int op[SIZE]; 
# 290
float arg[SIZE]; 
# 291
int length, stackSize; 
# 292
}; 
# 294
struct cudaGmxSimulation { 
# 296
unsigned atoms; 
# 297
unsigned paddedNumberOfAtoms; 
# 298
unsigned blocks; 
# 299
unsigned blocksPerSM; 
# 300
unsigned nonbond_blocks; 
# 301
unsigned bornForce2_blocks; 
# 302
unsigned interaction_blocks; 
# 303
unsigned threads_per_block; 
# 304
unsigned nonbond_threads_per_block; 
# 305
unsigned bornForce2_threads_per_block; 
# 306
unsigned max_update_threads_per_block; 
# 307
unsigned update_threads_per_block; 
# 308
unsigned bf_reduce_threads_per_block; 
# 309
unsigned bsf_reduce_threads_per_block; 
# 310
unsigned max_shake_threads_per_block; 
# 311
unsigned shake_threads_per_block; 
# 312
unsigned settle_threads_per_block; 
# 313
unsigned ccma_threads_per_block; 
# 314
unsigned max_localForces_threads_per_block; 
# 315
unsigned localForces_threads_per_block; 
# 316
unsigned random_threads_per_block; 
# 317
unsigned interaction_threads_per_block; 
# 318
unsigned custom_exception_threads_per_block; 
# 319
unsigned customExpressionStackSize; 
# 320
unsigned workUnits; 
# 321
unsigned *pWorkUnit; 
# 322
unsigned *pInteractingWorkUnit; 
# 323
unsigned *pInteractionFlag; 
# 324
float2 *pStepSize; 
# 325
float *pLangevinParameters; 
# 326
float errorTol; 
# 327
size_t *pInteractionCount; 
# 328
unsigned nonbond_workBlock; 
# 329
unsigned bornForce2_workBlock; 
# 330
unsigned workUnitsPerSM; 
# 331
unsigned nbWorkUnitsPerBlock; 
# 332
unsigned nbWorkUnitsPerBlockRemainder; 
# 333
unsigned bf2WorkUnitsPerBlock; 
# 334
unsigned bf2WorkUnitsPerBlockRemainder; 
# 337
unsigned stride; 
# 338
unsigned stride2; 
# 339
unsigned stride3; 
# 340
unsigned stride4; 
# 341
unsigned nonbondOutputBuffers; 
# 342
unsigned outputBuffers; 
# 343
unsigned energyOutputBuffers; 
# 344
float bigFloat; 
# 345
float epsfac; 
# 346
CudaNonbondedMethod nonbondedMethod; 
# 347
CudaNonbondedMethod customNonbondedMethod; 
# 348
float nonbondedCutoff; 
# 349
float nonbondedCutoffSqr; 
# 350
float periodicBoxSizeX; 
# 351
float periodicBoxSizeY; 
# 352
float periodicBoxSizeZ; 
# 353
float invPeriodicBoxSizeX; 
# 354
float invPeriodicBoxSizeY; 
# 355
float invPeriodicBoxSizeZ; 
# 356
float recipBoxSizeX; 
# 357
float recipBoxSizeY; 
# 358
float recipBoxSizeZ; 
# 359
float cellVolume; 
# 360
float alphaEwald; 
# 361
float factorEwald; 
# 362
int kmaxX; 
# 363
int kmaxY; 
# 364
int kmaxZ; 
# 365
float reactionFieldK; 
# 366
float reactionFieldC; 
# 367
float probeRadius; 
# 368
float surfaceAreaFactor; 
# 369
float electricConstant; 
# 370
float forceConversionFactor; 
# 371
float preFactor; 
# 372
float dielectricOffset; 
# 373
float alphaOBC; 
# 374
float betaOBC; 
# 375
float gammaOBC; 
# 376
float deltaT; 
# 377
float oneOverDeltaT; 
# 378
float T; 
# 379
float kT; 
# 380
float noiseAmplitude; 
# 381
float tau; 
# 382
float tauDeltaT; 
# 383
float collisionFrequency; 
# 384
float2 *pObcData; 
# 385
int gbviBornRadiusScalingMethod; 
# 386
float gbviQuinticLowerLimitFactor; 
# 387
float gbviQuinticUpperBornRadiusLimit; 
# 388
float4 *pGBVIData; 
# 389
float *pGBVISwitchDerivative; 
# 390
float2 *pAttr; 
# 391
float4 *pCustomParams; 
# 392
unsigned customExceptions; 
# 393
unsigned customParameters; 
# 394
int4 *pCustomBondID; 
# 395
float4 *pCustomBondParams; 
# 396
unsigned customBonds; 
# 397
unsigned customBondParameters; 
# 398
int4 *pCustomAngleID1; 
# 399
int2 *pCustomAngleID2; 
# 400
float4 *pCustomAngleParams; 
# 401
unsigned customAngles; 
# 402
unsigned customAngleParameters; 
# 403
int4 *pCustomTorsionID1; 
# 404
int4 *pCustomTorsionID2; 
# 405
float4 *pCustomTorsionParams; 
# 406
unsigned customTorsions; 
# 407
unsigned customTorsionParameters; 
# 408
int *pCustomExternalID; 
# 409
float4 *pCustomExternalParams; 
# 410
unsigned customExternals; 
# 411
unsigned customExternalParameters; 
# 412
float4 *pTabulatedFunctionCoefficients[MAX_TABULATED_FUNCTIONS]; 
# 413
float4 *pTabulatedFunctionParams; 
# 414
float2 *pEwaldCosSinSum; 
# 415
float *pTabulatedErfc; 
# 416
int tabulatedErfcSize; 
# 417
float tabulatedErfcScale; 
# 418
int3 pmeGridSize; 
# 419
int3 pmeGroupSize; 
# 420
cufftComplex *pPmeGrid; 
# 421
float *pPmeBsplineModuli[3]; 
# 422
float4 *pPmeBsplineTheta; 
# 423
float4 *pPmeBsplineDtheta; 
# 424
int *pPmeAtomRange; 
# 425
int2 *pPmeAtomGridIndex; 
# 426
unsigned bonds; 
# 427
int4 *pBondID; 
# 428
float2 *pBondParameter; 
# 429
unsigned bond_angles; 
# 430
int4 *pBondAngleID1; 
# 431
int2 *pBondAngleID2; 
# 432
float2 *pBondAngleParameter; 
# 433
unsigned dihedrals; 
# 434
int4 *pDihedralID1; 
# 435
int4 *pDihedralID2; 
# 436
float4 *pDihedralParameter; 
# 437
unsigned rb_dihedrals; 
# 438
int4 *pRbDihedralID1; 
# 439
int4 *pRbDihedralID2; 
# 440
float4 *pRbDihedralParameter1; 
# 441
float2 *pRbDihedralParameter2; 
# 442
unsigned LJ14s; 
# 443
int4 *pLJ14ID; 
# 444
float4 *pLJ14Parameter; 
# 445
float inverseTotalMass; 
# 446
unsigned ShakeConstraints; 
# 447
unsigned settleConstraints; 
# 448
unsigned ccmaConstraints; 
# 449
unsigned rigidClusters; 
# 450
unsigned maxRigidClusterSize; 
# 451
unsigned clusterShakeBlockSize; 
# 452
unsigned maxShakeIterations; 
# 453
unsigned degreesOfFreedom; 
# 454
float shakeTolerance; 
# 455
float InvMassJ; 
# 456
int *pNonShakeID; 
# 457
int4 *pShakeID; 
# 458
float4 *pShakeParameter; 
# 459
int4 *pSettleID; 
# 460
float2 *pSettleParameter; 
# 461
unsigned *pExclusion; 
# 462
unsigned *pExclusionIndex; 
# 463
unsigned bond_offset; 
# 464
unsigned bond_angle_offset; 
# 465
unsigned dihedral_offset; 
# 466
unsigned rb_dihedral_offset; 
# 467
unsigned LJ14_offset; 
# 468
int *pAtomIndex; 
# 469
float4 *pGridBoundingBox; 
# 470
float4 *pGridCenter; 
# 471
int2 *pCcmaAtoms; 
# 472
float4 *pCcmaDistance; 
# 473
float *pCcmaDelta1; 
# 474
float *pCcmaDelta2; 
# 475
int *pCcmaAtomConstraints; 
# 476
int *pCcmaNumAtomConstraints; 
# 477
int *ccmaConvergedDeviceMarker; 
# 478
float *pCcmaReducedMass; 
# 479
unsigned *pConstraintMatrixColumn; 
# 480
float *pConstraintMatrixValue; 
# 483
float4 *pPosq; 
# 484
float4 *pPosqP; 
# 485
float4 *pOldPosq; 
# 486
float4 *pVelm4; 
# 487
float4 *pForce4; 
# 488
float *pEnergy; 
# 489
float *pBornForce; 
# 490
float *pBornSum; 
# 491
float *pBornRadii; 
# 492
float *pObcChain; 
# 493
float4 *pLinearMomentum; 
# 496
float4 *pRandom4; 
# 497
float2 *pRandom2; 
# 498
uint4 *pRandomSeed; 
# 499
int *pRandomPosition; 
# 500
unsigned randoms; 
# 501
unsigned totalRandoms; 
# 502
unsigned randomIterations; 
# 503
unsigned randomFrames; 
# 504
}; 
# 506
struct Vectors { 
# 507
float3 v0; 
# 508
float3 v1; 
# 509
float3 v2; 
# 510
}; 
# 30 "/home/saifmulla/openmm/OpenMM/platforms/cuda/src/kernels/cudaCompact.h"
struct compactionPlan { 
# 31
bool valid; 
# 32
unsigned *dgBlockCounts; 
# 33
unsigned nThreadBlocks; 
# 34
bool stageOutput; 
# 35
}; 
# 38
extern "C" void planCompaction(compactionPlan & , bool  = (true)); 
# 41
extern "C" void destroyCompactionPlan(compactionPlan & ); 
# 44
extern "C" int compactStream(const compactionPlan & , unsigned * , const unsigned * , const unsigned * , size_t , size_t * ); 
# 62 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_construct.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 68
template < typename _T1, typename _T2 >
    inline void






    _Construct ( _T1 * __p, const _T2 & __value )
    {


      :: new ( static_cast < void * > ( __p ) ) _T1 ( __value );
    }
# 87
template < typename _Tp >
    inline void
    _Destroy ( _Tp * __pointer )
    { __pointer -> ~ _Tp ( ); }
# 92
template< bool __T7> 
# 93
struct _Destroy_aux { 
# 95
template < typename _ForwardIterator >
        static void
        __destroy ( _ForwardIterator __first, _ForwardIterator __last )
 {
   for (; __first != __last; ++ __first )
     std :: _Destroy ( & * __first );
 }
# 102
}; 
# 105
template<> struct _Destroy_aux< true>  { 
# 107
template < typename _ForwardIterator >
        static void
        __destroy ( _ForwardIterator, _ForwardIterator ) { }
# 110
}; 
# 117
template < typename _ForwardIterator >
    inline void
    _Destroy ( _ForwardIterator __first, _ForwardIterator __last )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
                       _Value_type;
      std :: _Destroy_aux < __has_trivial_destructor ( _Value_type ) > ::
 __destroy ( __first, __last );
    }
# 133
template< class _Tp> class allocator; 
# 135
template < typename _ForwardIterator, typename _Allocator >
    void
    _Destroy ( _ForwardIterator __first, _ForwardIterator __last,
      _Allocator & __alloc )
    {
      for (; __first != __last; ++ __first )
 __alloc . destroy ( & * __first );
    }
# 144
template < typename _ForwardIterator, typename _Tp >
    inline void
    _Destroy ( _ForwardIterator __first, _ForwardIterator __last,
      allocator < _Tp > & )
    {
      _Destroy ( __first, __last );
    }
# 152
}
# 60 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_uninitialized.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 62
template< bool __T8> 
# 63
struct __uninitialized_copy { 
# 65
template < typename _InputIterator, typename _ForwardIterator >
        static _ForwardIterator
        uninitialized_copy ( _InputIterator __first, _InputIterator __last,
      _ForwardIterator __result )
        {
   _ForwardIterator __cur = __result;
   try
     {
       for (; __first != __last; ++ __first, ++ __cur )
  std :: _Construct ( & * __cur, * __first );
       return __cur;
     }
   catch ( ... )
     {
       std :: _Destroy ( __result, __cur );
       throw;
     }
 }
# 83
}; 
# 86
template<> struct __uninitialized_copy< true>  { 
# 88
template < typename _InputIterator, typename _ForwardIterator >
        static _ForwardIterator
        uninitialized_copy ( _InputIterator __first, _InputIterator __last,
      _ForwardIterator __result )
        { return std :: copy ( __first, __last, __result ); }
# 93
}; 
# 104 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_uninitialized.h" 3
template < typename _InputIterator, typename _ForwardIterator >
    inline _ForwardIterator
    uninitialized_copy ( _InputIterator __first, _InputIterator __last,
         _ForwardIterator __result )
    {
      typedef typename iterator_traits < _InputIterator > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType2;

      return std :: __uninitialized_copy < ( __is_pod ( _ValueType1 )
     && __is_pod ( _ValueType2 ) ) > ::
 uninitialized_copy ( __first, __last, __result );
    }
# 120
template< bool __T9> 
# 121
struct __uninitialized_fill { 
# 123
template < typename _ForwardIterator, typename _Tp >
        static void
        uninitialized_fill ( _ForwardIterator __first,
      _ForwardIterator __last, const _Tp & __x )
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++ __cur )
  std :: _Construct ( & * __cur, __x );
     }
   catch ( ... )
     {
       std :: _Destroy ( __first, __cur );
       throw;
     }
 }
# 140
}; 
# 143
template<> struct __uninitialized_fill< true>  { 
# 145
template < typename _ForwardIterator, typename _Tp >
        static void
        uninitialized_fill ( _ForwardIterator __first,
      _ForwardIterator __last, const _Tp & __x )
        { std :: fill ( __first, __last, __x ); }
# 150
}; 
# 161 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Tp >
    inline void
    uninitialized_fill ( _ForwardIterator __first, _ForwardIterator __last,
         const _Tp & __x )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;

      std :: __uninitialized_fill < __is_pod ( _ValueType ) > ::
 uninitialized_fill ( __first, __last, __x );
    }
# 174
template< bool __T10> 
# 175
struct __uninitialized_fill_n { 
# 177
template < typename _ForwardIterator, typename _Size, typename _Tp >
        static void
        uninitialized_fill_n ( _ForwardIterator __first, _Size __n,
        const _Tp & __x )
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; -- __n, ++ __cur )
  std :: _Construct ( & * __cur, __x );
     }
   catch ( ... )
     {
       std :: _Destroy ( __first, __cur );
       throw;
     }
 }
# 194
}; 
# 197
template<> struct __uninitialized_fill_n< true>  { 
# 199
template < typename _ForwardIterator, typename _Size, typename _Tp >
        static void
        uninitialized_fill_n ( _ForwardIterator __first, _Size __n,
        const _Tp & __x )
        { std :: fill_n ( __first, __n, __x ); }
# 204
}; 
# 215 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Size, typename _Tp >
    inline void
    uninitialized_fill_n ( _ForwardIterator __first, _Size __n, const _Tp & __x )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;

      std :: __uninitialized_fill_n < __is_pod ( _ValueType ) > ::
 uninitialized_fill_n ( __first, __n, __x );
    }
# 232
template < typename _InputIterator, typename _ForwardIterator,
    typename _Allocator >
    _ForwardIterator
    __uninitialized_copy_a ( _InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator & __alloc )
    {
      _ForwardIterator __cur = __result;
      try
 {
   for (; __first != __last; ++ __first, ++ __cur )
     __alloc . construct ( & * __cur, * __first );
   return __cur;
 }
      catch ( ... )
 {
   std :: _Destroy ( __result, __cur, __alloc );
   throw;
 }
    }
# 252
template < typename _InputIterator, typename _ForwardIterator, typename _Tp >
    inline _ForwardIterator
    __uninitialized_copy_a ( _InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, allocator < _Tp > & )
    { return std :: uninitialized_copy ( __first, __last, __result ); }
# 258
template < typename _InputIterator, typename _ForwardIterator,
    typename _Allocator >
    inline _ForwardIterator
    __uninitialized_move_a ( _InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator & __alloc )
    {
      return std :: __uninitialized_copy_a ( ( __first ),
      ( __last ),
      __result, __alloc );
    }
# 269
template < typename _ForwardIterator, typename _Tp, typename _Allocator >
    void
    __uninitialized_fill_a ( _ForwardIterator __first, _ForwardIterator __last,
      const _Tp & __x, _Allocator & __alloc )
    {
      _ForwardIterator __cur = __first;
      try
 {
   for (; __cur != __last; ++ __cur )
     __alloc . construct ( & * __cur, __x );
 }
      catch ( ... )
 {
   std :: _Destroy ( __first, __cur, __alloc );
   throw;
 }
    }
# 287
template < typename _ForwardIterator, typename _Tp, typename _Tp2 >
    inline void
    __uninitialized_fill_a ( _ForwardIterator __first, _ForwardIterator __last,
      const _Tp & __x, allocator < _Tp2 > & )
    { std :: uninitialized_fill ( __first, __last, __x ); }
# 293
template < typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Allocator >
    void
    __uninitialized_fill_n_a ( _ForwardIterator __first, _Size __n,
        const _Tp & __x, _Allocator & __alloc )
    {
      _ForwardIterator __cur = __first;
      try
 {
   for (; __n > 0; -- __n, ++ __cur )
     __alloc . construct ( & * __cur, __x );
 }
      catch ( ... )
 {
   std :: _Destroy ( __first, __cur, __alloc );
   throw;
 }
    }
# 312
template < typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Tp2 >
    inline void
    __uninitialized_fill_n_a ( _ForwardIterator __first, _Size __n,
        const _Tp & __x, allocator < _Tp2 > & )
    { std :: uninitialized_fill_n ( __first, __n, __x ); }
# 329 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_uninitialized.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator >
    inline _ForwardIterator
    __uninitialized_copy_move ( _InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator & __alloc )
    {
      _ForwardIterator __mid = std :: __uninitialized_copy_a ( __first1, __last1,
          __result,
          __alloc );
      try
 {
   return std :: __uninitialized_move_a ( __first2, __last2, __mid, __alloc );
 }
      catch ( ... )
 {
   std :: _Destroy ( __result, __mid, __alloc );
   throw;
 }
    }
# 357
template < typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator >
    inline _ForwardIterator
    __uninitialized_move_copy ( _InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator & __alloc )
    {
      _ForwardIterator __mid = std :: __uninitialized_move_a ( __first1, __last1,
          __result,
          __alloc );
      try
 {
   return std :: __uninitialized_copy_a ( __first2, __last2, __mid, __alloc );
 }
      catch ( ... )
 {
   std :: _Destroy ( __result, __mid, __alloc );
   throw;
 }
    }
# 384
template < typename _ForwardIterator, typename _Tp, typename _InputIterator,
    typename _Allocator >
    inline _ForwardIterator
    __uninitialized_fill_move ( _ForwardIterator __result, _ForwardIterator __mid,
         const _Tp & __x, _InputIterator __first,
         _InputIterator __last, _Allocator & __alloc )
    {
      std :: __uninitialized_fill_a ( __result, __mid, __x, __alloc );
      try
 {
   return std :: __uninitialized_move_a ( __first, __last, __mid, __alloc );
 }
      catch ( ... )
 {
   std :: _Destroy ( __result, __mid, __alloc );
   throw;
 }
    }
# 406
template < typename _InputIterator, typename _ForwardIterator, typename _Tp,
    typename _Allocator >
    inline void
    __uninitialized_move_fill ( _InputIterator __first1, _InputIterator __last1,
         _ForwardIterator __first2,
         _ForwardIterator __last2, const _Tp & __x,
         _Allocator & __alloc )
    {
      _ForwardIterator __mid2 = std :: __uninitialized_move_a ( __first1, __last1,
           __first2,
           __alloc );
      try
 {
   std :: __uninitialized_fill_a ( __mid2, __last2, __x, __alloc );
 }
      catch ( ... )
 {
   std :: _Destroy ( __first2, __mid2, __alloc );
   throw;
 }
    }
# 475 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_uninitialized.h" 3
}
# 65 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 68
template < typename _Tp, typename _Alloc >
    struct _Vector_base
    {
      typedef typename _Alloc :: template rebind < _Tp > :: other _Tp_alloc_type;

      struct _Vector_impl
      : public _Tp_alloc_type
      {
 typename _Tp_alloc_type :: pointer _M_start;
 typename _Tp_alloc_type :: pointer _M_finish;
 typename _Tp_alloc_type :: pointer _M_end_of_storage;

 _Vector_impl ( )
 : _Tp_alloc_type ( ), _M_start ( 0 ), _M_finish ( 0 ), _M_end_of_storage ( 0 )
 { }

 _Vector_impl ( _Tp_alloc_type const & __a )
 : _Tp_alloc_type ( __a ), _M_start ( 0 ), _M_finish ( 0 ), _M_end_of_storage ( 0 )
 { }
      };

    public :
      typedef _Alloc allocator_type;

      _Tp_alloc_type &
      _M_get_Tp_allocator ( )
      { return * static_cast < _Tp_alloc_type * > ( & this -> _M_impl ); }

      const _Tp_alloc_type &
      _M_get_Tp_allocator ( ) const
      { return * static_cast < const _Tp_alloc_type * > ( & this -> _M_impl ); }

      allocator_type
      get_allocator ( ) const
      { return allocator_type ( _M_get_Tp_allocator ( ) ); }

      _Vector_base ( )
      : _M_impl ( ) { }

      _Vector_base ( const allocator_type & __a )
      : _M_impl ( __a ) { }

      _Vector_base ( size_t __n, const allocator_type & __a )
      : _M_impl ( __a )
      {
 this -> _M_impl . _M_start = this -> _M_allocate ( __n );
 this -> _M_impl . _M_finish = this -> _M_impl . _M_start;
 this -> _M_impl . _M_end_of_storage = this -> _M_impl . _M_start + __n;
      }

      ~ _Vector_base ( )
      { _M_deallocate ( this -> _M_impl . _M_start, this -> _M_impl . _M_end_of_storage
        - this -> _M_impl . _M_start ); }

    public :
      _Vector_impl _M_impl;

      typename _Tp_alloc_type :: pointer
      _M_allocate ( size_t __n )
      { return __n != 0 ? _M_impl . allocate ( __n ) : 0; }

      void
      _M_deallocate ( typename _Tp_alloc_type :: pointer __p, size_t __n )
      {
 if ( __p )
   _M_impl . deallocate ( __p, __n );
      }
    };
# 169 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h" 3
template < typename _Tp, typename _Alloc = std :: allocator < _Tp > >
    class vector : protected _Vector_base < _Tp, _Alloc >
    {

      typedef typename _Alloc :: value_type _Alloc_value_type;



      typedef _Vector_base < _Tp, _Alloc > _Base;
      typedef typename _Base :: _Tp_alloc_type _Tp_alloc_type;

    public :
      typedef _Tp value_type;
      typedef typename _Tp_alloc_type :: pointer pointer;
      typedef typename _Tp_alloc_type :: const_pointer const_pointer;
      typedef typename _Tp_alloc_type :: reference reference;
      typedef typename _Tp_alloc_type :: const_reference const_reference;
      typedef __gnu_cxx :: __normal_iterator < pointer, vector > iterator;
      typedef __gnu_cxx :: __normal_iterator < const_pointer, vector >
      const_iterator;
      typedef std :: reverse_iterator < const_iterator > const_reverse_iterator;
      typedef std :: reverse_iterator < iterator > reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected :
      using _Base :: _M_allocate;
      using _Base :: _M_deallocate;
      using _Base :: _M_impl;
      using _Base :: _M_get_Tp_allocator;

    public :





      vector ( )
      : _Base ( ) { }





      explicit
      vector ( const allocator_type & __a )
      : _Base ( __a ) { }

      explicit
      vector ( size_type __n, const value_type & __value = value_type ( ),
      const allocator_type & __a = allocator_type ( ) )
      : _Base ( __n, __a )
      { _M_fill_initialize ( __n, __value ); }

      vector ( const vector & __x )
      : _Base ( __x . size ( ), __x . _M_get_Tp_allocator ( ) )
      { this -> _M_impl . _M_finish =
   std :: __uninitialized_copy_a ( __x . begin ( ), __x . end ( ),
          this -> _M_impl . _M_start,
          _M_get_Tp_allocator ( ) );
      }

      template < typename _InputIterator >
        vector ( _InputIterator __first, _InputIterator __last,
        const allocator_type & __a = allocator_type ( ) )
 : _Base ( __a )
        {

   typedef typename std :: __is_integer < _InputIterator > :: __type _Integral;
   _M_initialize_dispatch ( __first, __last, _Integral ( ) );
 }







      ~ vector ( )
      { std :: _Destroy ( this -> _M_impl . _M_start, this -> _M_impl . _M_finish,
        _M_get_Tp_allocator ( ) ); }

      vector &
      operator = ( const vector & __x );

      void
      assign ( size_type __n, const value_type & __val )
      { _M_fill_assign ( __n, __val ); }

      template < typename _InputIterator >
        void
        assign ( _InputIterator __first, _InputIterator __last )
        {

   typedef typename std :: __is_integer < _InputIterator > :: __type _Integral;
   _M_assign_dispatch ( __first, __last, _Integral ( ) );
 }

      using _Base :: get_allocator;







      iterator
      begin ( )
      { return iterator ( this -> _M_impl . _M_start ); }






      const_iterator
      begin ( ) const
      { return const_iterator ( this -> _M_impl . _M_start ); }






      iterator
      end ( )
      { return iterator ( this -> _M_impl . _M_finish ); }






      const_iterator
      end ( ) const
      { return const_iterator ( this -> _M_impl . _M_finish ); }






      reverse_iterator
      rbegin ( )
      { return reverse_iterator ( end ( ) ); }






      const_reverse_iterator
      rbegin ( ) const
      { return const_reverse_iterator ( end ( ) ); }






      reverse_iterator
      rend ( )
      { return reverse_iterator ( begin ( ) ); }






      const_reverse_iterator
      rend ( ) const
      { return const_reverse_iterator ( begin ( ) ); }

      size_type
      size ( ) const
      { return size_type ( this -> _M_impl . _M_finish - this -> _M_impl . _M_start ); }


      size_type
      max_size ( ) const
      { return _M_get_Tp_allocator ( ) . max_size ( ); }

      void
      resize ( size_type __new_size, value_type __x = value_type ( ) )
      {
 if ( __new_size < size ( ) )
   _M_erase_at_end ( this -> _M_impl . _M_start + __new_size );
 else
   insert ( end ( ), __new_size - size ( ), __x );
      }





      size_type
      capacity ( ) const
      { return size_type ( this -> _M_impl . _M_end_of_storage
    - this -> _M_impl . _M_start ); }





      bool
      empty ( ) const
      { return begin ( ) == end ( ); }

      void
      reserve ( size_type __n );

      reference
      operator [ ] ( size_type __n )
      { return * ( this -> _M_impl . _M_start + __n ); }

      const_reference
      operator [ ] ( size_type __n ) const
      { return * ( this -> _M_impl . _M_start + __n ); }

    protected :

      void
      _M_range_check ( size_type __n ) const
      {
 if ( __n >= this -> size ( ) )
   __throw_out_of_range ( ( "vector::_M_range_check" ) );
      }

    public :

      reference
      at ( size_type __n )
      {
 _M_range_check ( __n );
 return ( * this ) [ __n ];
      }

      const_reference
      at ( size_type __n ) const
      {
 _M_range_check ( __n );
 return ( * this ) [ __n ];
      }





      reference
      front ( )
      { return * begin ( ); }





      const_reference
      front ( ) const
      { return * begin ( ); }





      reference
      back ( )
      { return * ( end ( ) - 1 ); }





      const_reference
      back ( ) const
      { return * ( end ( ) - 1 ); }

      pointer
      data ( )
      { return pointer ( this -> _M_impl . _M_start ); }

      const_pointer
      data ( ) const
      { return const_pointer ( this -> _M_impl . _M_start ); }

      void
      push_back ( const value_type & __x )
      {
 if ( this -> _M_impl . _M_finish != this -> _M_impl . _M_end_of_storage )
   {
     this -> _M_impl . construct ( this -> _M_impl . _M_finish, __x );
     ++ this -> _M_impl . _M_finish;
   }
 else
   _M_insert_aux ( end ( ), __x );
      }

      void
      pop_back ( )
      {
 -- this -> _M_impl . _M_finish;
 this -> _M_impl . destroy ( this -> _M_impl . _M_finish );
      }

      iterator
      insert ( iterator __position, const value_type & __x );

      void
      insert ( iterator __position, size_type __n, const value_type & __x )
      { _M_fill_insert ( __position, __n, __x ); }

      template < typename _InputIterator >
        void
        insert ( iterator __position, _InputIterator __first,
        _InputIterator __last )
        {

   typedef typename std :: __is_integer < _InputIterator > :: __type _Integral;
   _M_insert_dispatch ( __position, __first, __last, _Integral ( ) );
 }

      iterator
      erase ( iterator __position );

      iterator
      erase ( iterator __first, iterator __last );

      void



      swap ( vector & __x )

      {
 std :: swap ( this -> _M_impl . _M_start, __x . _M_impl . _M_start );
 std :: swap ( this -> _M_impl . _M_finish, __x . _M_impl . _M_finish );
 std :: swap ( this -> _M_impl . _M_end_of_storage,
    __x . _M_impl . _M_end_of_storage );



 std :: __alloc_swap < _Tp_alloc_type > :: _S_do_it ( _M_get_Tp_allocator ( ),
          __x . _M_get_Tp_allocator ( ) );
      }







      void
      clear ( )
      { _M_erase_at_end ( this -> _M_impl . _M_start ); }

    protected :




      template < typename _ForwardIterator >
        pointer
        _M_allocate_and_copy ( size_type __n,
        _ForwardIterator __first, _ForwardIterator __last )
        {
   pointer __result = this -> _M_allocate ( __n );
   try
     {
       std :: __uninitialized_copy_a ( __first, __last, __result,
       _M_get_Tp_allocator ( ) );
       return __result;
     }
   catch ( ... )
     {
       _M_deallocate ( __result, __n );
       throw;
     }
 }

      template < typename _Integer >
        void
        _M_initialize_dispatch ( _Integer __n, _Integer __value, __true_type )
        {
   this -> _M_impl . _M_start = _M_allocate ( static_cast < size_type > ( __n ) );
   this -> _M_impl . _M_end_of_storage =
     this -> _M_impl . _M_start + static_cast < size_type > ( __n );
   _M_fill_initialize ( static_cast < size_type > ( __n ), __value );
 }


      template < typename _InputIterator >
        void
        _M_initialize_dispatch ( _InputIterator __first, _InputIterator __last,
          __false_type )
        {
   typedef typename std :: iterator_traits < _InputIterator > ::
     iterator_category _IterCategory;
   _M_range_initialize ( __first, __last, _IterCategory ( ) );
 }


      template < typename _InputIterator >
        void
        _M_range_initialize ( _InputIterator __first,
       _InputIterator __last, std :: input_iterator_tag )
        {
   for (; __first != __last; ++ __first )
     push_back ( * __first );
 }


      template < typename _ForwardIterator >
        void
        _M_range_initialize ( _ForwardIterator __first,
       _ForwardIterator __last, std :: forward_iterator_tag )
        {
   const size_type __n = std :: distance ( __first, __last );
   this -> _M_impl . _M_start = this -> _M_allocate ( __n );
   this -> _M_impl . _M_end_of_storage = this -> _M_impl . _M_start + __n;
   this -> _M_impl . _M_finish =
     std :: __uninitialized_copy_a ( __first, __last,
     this -> _M_impl . _M_start,
     _M_get_Tp_allocator ( ) );
 }



      void
      _M_fill_initialize ( size_type __n, const value_type & __value )
      {
 std :: __uninitialized_fill_n_a ( this -> _M_impl . _M_start, __n, __value,
          _M_get_Tp_allocator ( ) );
 this -> _M_impl . _M_finish = this -> _M_impl . _M_end_of_storage;
      }

      template < typename _Integer >
        void
        _M_assign_dispatch ( _Integer __n, _Integer __val, __true_type )
        { _M_fill_assign ( __n, __val ); }


      template < typename _InputIterator >
        void
        _M_assign_dispatch ( _InputIterator __first, _InputIterator __last,
      __false_type )
        {
   typedef typename std :: iterator_traits < _InputIterator > ::
     iterator_category _IterCategory;
   _M_assign_aux ( __first, __last, _IterCategory ( ) );
 }


      template < typename _InputIterator >
        void
        _M_assign_aux ( _InputIterator __first, _InputIterator __last,
        std :: input_iterator_tag );


      template < typename _ForwardIterator >
        void
        _M_assign_aux ( _ForwardIterator __first, _ForwardIterator __last,
        std :: forward_iterator_tag );



      void
      _M_fill_assign ( size_type __n, const value_type & __val );

      template < typename _Integer >
        void
        _M_insert_dispatch ( iterator __pos, _Integer __n, _Integer __val,
      __true_type )
        { _M_fill_insert ( __pos, __n, __val ); }


      template < typename _InputIterator >
        void
        _M_insert_dispatch ( iterator __pos, _InputIterator __first,
      _InputIterator __last, __false_type )
        {
   typedef typename std :: iterator_traits < _InputIterator > ::
     iterator_category _IterCategory;
   _M_range_insert ( __pos, __first, __last, _IterCategory ( ) );
 }


      template < typename _InputIterator >
        void
        _M_range_insert ( iterator __pos, _InputIterator __first,
   _InputIterator __last, std :: input_iterator_tag );


      template < typename _ForwardIterator >
        void
        _M_range_insert ( iterator __pos, _ForwardIterator __first,
   _ForwardIterator __last, std :: forward_iterator_tag );



      void
      _M_fill_insert ( iterator __pos, size_type __n, const value_type & __x );



      void
      _M_insert_aux ( iterator __position, const value_type & __x );







      size_type
      _M_check_len ( size_type __n, const char * __s ) const
      {
 if ( max_size ( ) - size ( ) < __n )
   __throw_length_error ( ( __s ) );

 const size_type __len = size ( ) + std :: max ( size ( ), __n );
 return ( __len < size ( ) || __len > max_size ( ) ) ? max_size ( ) : __len;
      }





      void
      _M_erase_at_end ( pointer __pos )
      {
 std :: _Destroy ( __pos, this -> _M_impl . _M_finish, _M_get_Tp_allocator ( ) );
 this -> _M_impl . _M_finish = __pos;
      }
    };
# 1166 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h" 3
template < typename _Tp, typename _Alloc >
    inline bool
    operator == ( const vector < _Tp, _Alloc > & __x, const vector < _Tp, _Alloc > & __y )
    { return ( __x . size ( ) == __y . size ( )
       && std :: equal ( __x . begin ( ), __x . end ( ), __y . begin ( ) ) ); }
# 1183 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h" 3
template < typename _Tp, typename _Alloc >
    inline bool
    operator < ( const vector < _Tp, _Alloc > & __x, const vector < _Tp, _Alloc > & __y )
    { return std :: lexicographical_compare ( __x . begin ( ), __x . end ( ),
       __y . begin ( ), __y . end ( ) ); }
# 1190
template < typename _Tp, typename _Alloc >
    inline bool
    operator != ( const vector < _Tp, _Alloc > & __x, const vector < _Tp, _Alloc > & __y )
    { return ! ( __x == __y ); }
# 1196
template < typename _Tp, typename _Alloc >
    inline bool
    operator > ( const vector < _Tp, _Alloc > & __x, const vector < _Tp, _Alloc > & __y )
    { return __y < __x; }
# 1202
template < typename _Tp, typename _Alloc >
    inline bool
    operator <= ( const vector < _Tp, _Alloc > & __x, const vector < _Tp, _Alloc > & __y )
    { return ! ( __y < __x ); }
# 1208
template < typename _Tp, typename _Alloc >
    inline bool
    operator >= ( const vector < _Tp, _Alloc > & __x, const vector < _Tp, _Alloc > & __y )
    { return ! ( __x < __y ); }
# 1214
template < typename _Tp, typename _Alloc >
    inline void
    swap ( vector < _Tp, _Alloc > & __x, vector < _Tp, _Alloc > & __y )
    { __x . swap ( __y ); }
# 1231 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h" 3
}
# 62 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_bvector.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 64
typedef unsigned long _Bit_type; 
# 65
enum { _S_word_bit = 64}; 
# 67
struct _Bit_reference { 
# 69
_Bit_type *_M_p; 
# 70
_Bit_type _M_mask; 
# 72
_Bit_reference(_Bit_type *__x, _Bit_type __y) : _M_p(__x), _M_mask(__y) 
# 73
{ } 
# 75
_Bit_reference() : _M_p((0)), _M_mask((0)) { } 
# 77
operator bool() const 
# 78
{ return !(!((*(_M_p)) & (_M_mask))); } 
# 81
_Bit_reference &operator=(bool __x) 
# 82
{ 
# 83
if (__x) { 
# 84
(*(_M_p)) |= (_M_mask); } else { 
# 86
(*(_M_p)) &= (~(_M_mask)); }  
# 87
return *this; 
# 88
} 
# 91
_Bit_reference &operator=(const _Bit_reference &__x) 
# 92
{ return ((*this) = ((bool)__x)); } 
# 95
bool operator==(const _Bit_reference &__x) const 
# 96
{ return ((bool)(*this)) == ((bool)__x); } 
# 99
bool operator<(const _Bit_reference &__x) const 
# 100
{ return (!((bool)(*this))) && ((bool)__x); } 
# 103
void flip() 
# 104
{ (*(_M_p)) ^= (_M_mask); } 
# 105
}; 
# 107
struct _Bit_iterator_base : public iterator< random_access_iterator_tag, bool>  { 
# 110
_Bit_type *_M_p; 
# 111
unsigned _M_offset; 
# 113
_Bit_iterator_base(_Bit_type *__x, unsigned __y) : _M_p(__x), _M_offset(__y) 
# 114
{ } 
# 117
void _M_bump_up() 
# 118
{ 
# 119
if (((_M_offset)++) == (((int)_S_word_bit) - 1)) 
# 120
{ 
# 121
(_M_offset) = (0); 
# 122
++(_M_p); 
# 123
}  
# 124
} 
# 127
void _M_bump_down() 
# 128
{ 
# 129
if (((_M_offset)--) == (0)) 
# 130
{ 
# 131
(_M_offset) = (((int)_S_word_bit) - 1); 
# 132
--(_M_p); 
# 133
}  
# 134
} 
# 137
void _M_incr(ptrdiff_t __i) 
# 138
{ 
# 139
difference_type __n = (__i + (_M_offset)); 
# 140
(_M_p) += (__n / ((int)_S_word_bit)); 
# 141
__n = (__n % ((int)_S_word_bit)); 
# 142
if (__n < (0)) 
# 143
{ 
# 144
__n += ((int)_S_word_bit); 
# 145
--(_M_p); 
# 146
}  
# 147
(_M_offset) = (static_cast< unsigned>(__n)); 
# 148
} 
# 151
bool operator==(const _Bit_iterator_base &__i) const 
# 152
{ return ((_M_p) == (__i._M_p)) && ((_M_offset) == (__i._M_offset)); } 
# 155
bool operator<(const _Bit_iterator_base &__i) const 
# 156
{ 
# 157
return ((_M_p) < (__i._M_p)) || (((_M_p) == (__i._M_p)) && ((_M_offset) < (__i._M_offset))); 
# 159
} 
# 162
bool operator!=(const _Bit_iterator_base &__i) const 
# 163
{ return !((*this) == __i); } 
# 166
bool operator>(const _Bit_iterator_base &__i) const 
# 167
{ return (__i < (*this)); } 
# 170
bool operator<=(const _Bit_iterator_base &__i) const 
# 171
{ return !(__i < (*this)); } 
# 174
bool operator>=(const _Bit_iterator_base &__i) const 
# 175
{ return !((*this) < __i); } 
# 176
}; 
# 179
inline ptrdiff_t operator-(const _Bit_iterator_base &__x, const _Bit_iterator_base &__y) 
# 180
{ 
# 181
return ((((int)_S_word_bit) * ((__x._M_p) - (__y._M_p))) + (__x._M_offset)) - (__y._M_offset); 
# 183
} 
# 185
struct _Bit_iterator : public _Bit_iterator_base { 
# 187
typedef _Bit_reference reference; 
# 188
typedef _Bit_reference *pointer; 
# 189
typedef _Bit_iterator iterator; 
# 191
_Bit_iterator() : _Bit_iterator_base(0, 0) { } 
# 193
_Bit_iterator(_Bit_type *__x, unsigned __y) : _Bit_iterator_base(__x, __y) 
# 194
{ } 
# 197
reference operator*() const 
# 198
{ return reference(_M_p, 1UL << (_M_offset)); } 
# 201
iterator &operator++() 
# 202
{ 
# 203
this->_M_bump_up(); 
# 204
return *this; 
# 205
} 
# 208
iterator operator++(int) 
# 209
{ 
# 210
iterator __tmp = (*this); 
# 211
this->_M_bump_up(); 
# 212
return __tmp; 
# 213
} 
# 216
iterator &operator--() 
# 217
{ 
# 218
this->_M_bump_down(); 
# 219
return *this; 
# 220
} 
# 223
iterator operator--(int) 
# 224
{ 
# 225
iterator __tmp = (*this); 
# 226
this->_M_bump_down(); 
# 227
return __tmp; 
# 228
} 
# 231
iterator &operator+=(difference_type __i) 
# 232
{ 
# 233
this->_M_incr(__i); 
# 234
return *this; 
# 235
} 
# 238
iterator &operator-=(difference_type __i) 
# 239
{ 
# 240
((*this) += (-__i)); 
# 241
return *this; 
# 242
} 
# 245
iterator operator+(difference_type __i) const 
# 246
{ 
# 247
iterator __tmp = (*this); 
# 248
return (__tmp += __i); 
# 249
} 
# 252
iterator operator-(difference_type __i) const 
# 253
{ 
# 254
iterator __tmp = (*this); 
# 255
return (__tmp -= __i); 
# 256
} 
# 259
reference operator[](difference_type __i) const 
# 260
{ return (*(((*this) + __i))); } 
# 261
}; 
# 264
inline _Bit_iterator operator+(ptrdiff_t __n, const _Bit_iterator &__x) 
# 265
{ return (__x + __n); } 
# 267
struct _Bit_const_iterator : public _Bit_iterator_base { 
# 269
typedef bool reference; 
# 270
typedef bool const_reference; 
# 271
typedef const bool *pointer; 
# 272
typedef _Bit_const_iterator const_iterator; 
# 274
_Bit_const_iterator() : _Bit_iterator_base(0, 0) { } 
# 276
_Bit_const_iterator(_Bit_type *__x, unsigned __y) : _Bit_iterator_base(__x, __y) 
# 277
{ } 
# 279
_Bit_const_iterator(const _Bit_iterator &__x) : _Bit_iterator_base(__x._M_p, __x._M_offset) 
# 280
{ } 
# 283
const_reference operator*() const 
# 284
{ return _Bit_reference(_M_p, 1UL << (_M_offset)); } 
# 287
const_iterator &operator++() 
# 288
{ 
# 289
this->_M_bump_up(); 
# 290
return *this; 
# 291
} 
# 294
const_iterator operator++(int) 
# 295
{ 
# 296
const_iterator __tmp = (*this); 
# 297
this->_M_bump_up(); 
# 298
return __tmp; 
# 299
} 
# 302
const_iterator &operator--() 
# 303
{ 
# 304
this->_M_bump_down(); 
# 305
return *this; 
# 306
} 
# 309
const_iterator operator--(int) 
# 310
{ 
# 311
const_iterator __tmp = (*this); 
# 312
this->_M_bump_down(); 
# 313
return __tmp; 
# 314
} 
# 317
const_iterator &operator+=(difference_type __i) 
# 318
{ 
# 319
this->_M_incr(__i); 
# 320
return *this; 
# 321
} 
# 324
const_iterator &operator-=(difference_type __i) 
# 325
{ 
# 326
((*this) += (-__i)); 
# 327
return *this; 
# 328
} 
# 331
const_iterator operator+(difference_type __i) const 
# 332
{ 
# 333
const_iterator __tmp = (*this); 
# 334
return (__tmp += __i); 
# 335
} 
# 338
const_iterator operator-(difference_type __i) const 
# 339
{ 
# 340
const_iterator __tmp = (*this); 
# 341
return (__tmp -= __i); 
# 342
} 
# 345
const_reference operator[](difference_type __i) const 
# 346
{ return (*(((*this) + __i))); } 
# 347
}; 
# 350
inline _Bit_const_iterator operator+(ptrdiff_t __n, const _Bit_const_iterator &__x) 
# 351
{ return (__x + __n); } 
# 354
inline void __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x) 
# 355
{ 
# 356
for (; (__first != __last); (++__first)) { 
# 357
(((*__first)) = __x); }  
# 358
} 
# 361
inline void fill(_Bit_iterator __first, _Bit_iterator __last, const bool &__x) 
# 362
{ 
# 363
if ((__first._M_p) != (__last._M_p)) 
# 364
{ 
# 365
std::fill((__first._M_p) + 1, __last._M_p, (__x ? (~0) : 0)); 
# 366
__fill_bvector(__first, _Bit_iterator((__first._M_p) + 1, 0), __x); 
# 367
__fill_bvector(_Bit_iterator(__last._M_p, 0), __last, __x); 
# 368
} else { 
# 370
__fill_bvector(__first, __last, __x); }  
# 371
} 
# 373
template < typename _Alloc >
    struct _Bvector_base
    {
      typedef typename _Alloc :: template rebind < _Bit_type > :: other
        _Bit_alloc_type;

      struct _Bvector_impl
      : public _Bit_alloc_type
      {
 _Bit_iterator _M_start;
 _Bit_iterator _M_finish;
 _Bit_type * _M_end_of_storage;

 _Bvector_impl ( )
 : _Bit_alloc_type ( ), _M_start ( ), _M_finish ( ), _M_end_of_storage ( 0 )
 { }

 _Bvector_impl ( const _Bit_alloc_type & __a )
 : _Bit_alloc_type ( __a ), _M_start ( ), _M_finish ( ), _M_end_of_storage ( 0 )
 { }
      };

    public :
      typedef _Alloc allocator_type;

      _Bit_alloc_type &
      _M_get_Bit_allocator ( )
      { return * static_cast < _Bit_alloc_type * > ( & this -> _M_impl ); }

      const _Bit_alloc_type &
      _M_get_Bit_allocator ( ) const
      { return * static_cast < const _Bit_alloc_type * > ( & this -> _M_impl ); }

      allocator_type
      get_allocator ( ) const
      { return allocator_type ( _M_get_Bit_allocator ( ) ); }

      _Bvector_base ( )
      : _M_impl ( ) { }

      _Bvector_base ( const allocator_type & __a )
      : _M_impl ( __a ) { }

      ~ _Bvector_base ( )
      { this -> _M_deallocate ( ); }

    protected :
      _Bvector_impl _M_impl;

      _Bit_type *
      _M_allocate ( size_t __n )
      { return _M_impl . allocate ( ( __n + int ( _S_word_bit ) - 1 )
    / int ( _S_word_bit ) ); }

      void
      _M_deallocate ( )
      {
 if ( _M_impl . _M_start . _M_p )
   _M_impl . deallocate ( _M_impl . _M_start . _M_p,
        _M_impl . _M_end_of_storage - _M_impl . _M_start . _M_p );
      }
    };
# 449 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_bvector.h" 3
}
# 454
namespace std __attribute((__visibility__("default"))) { 
# 473 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_bvector.h" 3
template < typename _Alloc >
  class vector < bool, _Alloc > : protected _Bvector_base < _Alloc >
  {
    typedef _Bvector_base < _Alloc > _Base;

  public :
    typedef bool value_type;
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef _Bit_reference reference;
    typedef bool const_reference;
    typedef _Bit_reference * pointer;
    typedef const bool * const_pointer;
    typedef _Bit_iterator iterator;
    typedef _Bit_const_iterator const_iterator;
    typedef std :: reverse_iterator < const_iterator > const_reverse_iterator;
    typedef std :: reverse_iterator < iterator > reverse_iterator;
    typedef _Alloc allocator_type;

    allocator_type get_allocator ( ) const
    { return _Base :: get_allocator ( ); }

  protected :
    using _Base :: _M_allocate;
    using _Base :: _M_deallocate;
    using _Base :: _M_get_Bit_allocator;

  public :
    vector ( )
    : _Base ( ) { }

    explicit
    vector ( const allocator_type & __a )
    : _Base ( __a ) { }

    explicit
    vector ( size_type __n, const bool & __value = bool ( ),
    const allocator_type & __a = allocator_type ( ) )
    : _Base ( __a )
    {
      _M_initialize ( __n );
      std :: fill ( this -> _M_impl . _M_start . _M_p, this -> _M_impl . _M_end_of_storage,
  __value ? ~ 0 : 0 );
    }

    vector ( const vector & __x )
    : _Base ( __x . _M_get_Bit_allocator ( ) )
    {
      _M_initialize ( __x . size ( ) );
      _M_copy_aligned ( __x . begin ( ), __x . end ( ), this -> _M_impl . _M_start );
    }

    template < typename _InputIterator >
      vector ( _InputIterator __first, _InputIterator __last,
      const allocator_type & __a = allocator_type ( ) )
      : _Base ( __a )
      {
 typedef typename std :: __is_integer < _InputIterator > :: __type _Integral;
 _M_initialize_dispatch ( __first, __last, _Integral ( ) );
      }

    ~ vector ( ) { }

    vector &
    operator = ( const vector & __x )
    {
      if ( & __x == this )
 return * this;
      if ( __x . size ( ) > capacity ( ) )
 {
   this -> _M_deallocate ( );
   _M_initialize ( __x . size ( ) );
 }
      this -> _M_impl . _M_finish = _M_copy_aligned ( __x . begin ( ), __x . end ( ),
      begin ( ) );
      return * this;
    }

    void
    assign ( size_type __n, const bool & __x )
    { _M_fill_assign ( __n, __x ); }

    template < typename _InputIterator >
      void
      assign ( _InputIterator __first, _InputIterator __last )
      {
 typedef typename std :: __is_integer < _InputIterator > :: __type _Integral;
 _M_assign_dispatch ( __first, __last, _Integral ( ) );
      }







    iterator
    begin ( )
    { return this -> _M_impl . _M_start; }

    const_iterator
    begin ( ) const
    { return this -> _M_impl . _M_start; }

    iterator
    end ( )
    { return this -> _M_impl . _M_finish; }

    const_iterator
    end ( ) const
    { return this -> _M_impl . _M_finish; }

    reverse_iterator
    rbegin ( )
    { return reverse_iterator ( end ( ) ); }

    const_reverse_iterator
    rbegin ( ) const
    { return const_reverse_iterator ( end ( ) ); }

    reverse_iterator
    rend ( )
    { return reverse_iterator ( begin ( ) ); }

    const_reverse_iterator
    rend ( ) const
    { return const_reverse_iterator ( begin ( ) ); }

    size_type
    size ( ) const
    { return size_type ( end ( ) - begin ( ) ); }

    size_type
    max_size ( ) const
    {
      const size_type __isize =
 __gnu_cxx :: __numeric_traits < difference_type > :: __max
 - int ( _S_word_bit ) + 1;
      const size_type __asize = _M_get_Bit_allocator ( ) . max_size ( );
      return ( __asize <= __isize / int ( _S_word_bit )
       ? __asize * int ( _S_word_bit ) : __isize );
    }

    size_type
    capacity ( ) const
    { return size_type ( const_iterator ( this -> _M_impl . _M_end_of_storage, 0 )
         - begin ( ) ); }

    bool
    empty ( ) const
    { return begin ( ) == end ( ); }

    reference
    operator [ ] ( size_type __n )
    {
      return * iterator ( this -> _M_impl . _M_start . _M_p
         + __n / int ( _S_word_bit ), __n % int ( _S_word_bit ) );
    }

    const_reference
    operator [ ] ( size_type __n ) const
    {
      return * const_iterator ( this -> _M_impl . _M_start . _M_p
        + __n / int ( _S_word_bit ), __n % int ( _S_word_bit ) );
    }

  protected :
    void
    _M_range_check ( size_type __n ) const
    {
      if ( __n >= this -> size ( ) )
        __throw_out_of_range ( ( "vector<bool>::_M_range_check" ) );
    }

  public :
    reference
    at ( size_type __n )
    { _M_range_check ( __n ); return ( * this ) [ __n ]; }

    const_reference
    at ( size_type __n ) const
    { _M_range_check ( __n ); return ( * this ) [ __n ]; }

    void
    reserve ( size_type __n );

    reference
    front ( )
    { return * begin ( ); }

    const_reference
    front ( ) const
    { return * begin ( ); }

    reference
    back ( )
    { return * ( end ( ) - 1 ); }

    const_reference
    back ( ) const
    { return * ( end ( ) - 1 ); }






    void
    data ( ) { }

    void
    push_back ( bool __x )
    {
      if ( this -> _M_impl . _M_finish . _M_p != this -> _M_impl . _M_end_of_storage )
        * this -> _M_impl . _M_finish ++ = __x;
      else
        _M_insert_aux ( end ( ), __x );
    }

    void



    swap ( vector & __x )

    {
      std :: swap ( this -> _M_impl . _M_start, __x . _M_impl . _M_start );
      std :: swap ( this -> _M_impl . _M_finish, __x . _M_impl . _M_finish );
      std :: swap ( this -> _M_impl . _M_end_of_storage,
  __x . _M_impl . _M_end_of_storage );



      std :: __alloc_swap < typename _Base :: _Bit_alloc_type > ::
 _S_do_it ( _M_get_Bit_allocator ( ), __x . _M_get_Bit_allocator ( ) );
    }


    static void
    swap ( reference __x, reference __y )
    {
      bool __tmp = __x;
      __x = __y;
      __y = __tmp;
    }

    iterator
    insert ( iterator __position, const bool & __x = bool ( ) )
    {
      const difference_type __n = __position - begin ( );
      if ( this -> _M_impl . _M_finish . _M_p != this -> _M_impl . _M_end_of_storage
   && __position == end ( ) )
        * this -> _M_impl . _M_finish ++ = __x;
      else
        _M_insert_aux ( __position, __x );
      return begin ( ) + __n;
    }

    template < typename _InputIterator >
      void
      insert ( iterator __position,
      _InputIterator __first, _InputIterator __last )
      {
 typedef typename std :: __is_integer < _InputIterator > :: __type _Integral;
 _M_insert_dispatch ( __position, __first, __last, _Integral ( ) );
      }

    void
    insert ( iterator __position, size_type __n, const bool & __x )
    { _M_fill_insert ( __position, __n, __x ); }






    void
    pop_back ( )
    { -- this -> _M_impl . _M_finish; }

    iterator
    erase ( iterator __position )
    {
      if ( __position + 1 != end ( ) )
        std :: copy ( __position + 1, end ( ), __position );
      -- this -> _M_impl . _M_finish;
      return __position;
    }

    iterator
    erase ( iterator __first, iterator __last )
    {
      _M_erase_at_end ( std :: copy ( __last, end ( ), __first ) );
      return __first;
    }

    void
    resize ( size_type __new_size, bool __x = bool ( ) )
    {
      if ( __new_size < size ( ) )
        _M_erase_at_end ( begin ( ) + difference_type ( __new_size ) );
      else
        insert ( end ( ), __new_size - size ( ), __x );
    }

    void
    flip ( )
    {
      for ( _Bit_type * __p = this -> _M_impl . _M_start . _M_p;
    __p != this -> _M_impl . _M_end_of_storage; ++ __p )
        * __p = ~ * __p;
    }

    void
    clear ( )
    { _M_erase_at_end ( begin ( ) ); }


  protected :

    iterator
    _M_copy_aligned ( const_iterator __first, const_iterator __last,
      iterator __result )
    {
      _Bit_type * __q = std :: copy ( __first . _M_p, __last . _M_p, __result . _M_p );
      return std :: copy ( const_iterator ( __last . _M_p, 0 ), __last,
         iterator ( __q, 0 ) );
    }

    void
    _M_initialize ( size_type __n )
    {
      _Bit_type * __q = this -> _M_allocate ( __n );
      this -> _M_impl . _M_end_of_storage = ( __q
      + ( ( __n + int ( _S_word_bit ) - 1 )
         / int ( _S_word_bit ) ) );
      this -> _M_impl . _M_start = iterator ( __q, 0 );
      this -> _M_impl . _M_finish = this -> _M_impl . _M_start + difference_type ( __n );
    }





    template < typename _Integer >
      void
      _M_initialize_dispatch ( _Integer __n, _Integer __x, __true_type )
      {
 _M_initialize ( static_cast < size_type > ( __n ) );
 std :: fill ( this -> _M_impl . _M_start . _M_p,
    this -> _M_impl . _M_end_of_storage, __x ? ~ 0 : 0 );
      }

    template < typename _InputIterator >
      void
      _M_initialize_dispatch ( _InputIterator __first, _InputIterator __last,
        __false_type )
      { _M_initialize_range ( __first, __last,
       std :: __iterator_category ( __first ) ); }

    template < typename _InputIterator >
      void
      _M_initialize_range ( _InputIterator __first, _InputIterator __last,
     std :: input_iterator_tag )
      {
 for (; __first != __last; ++ __first )
   push_back ( * __first );
      }

    template < typename _ForwardIterator >
      void
      _M_initialize_range ( _ForwardIterator __first, _ForwardIterator __last,
     std :: forward_iterator_tag )
      {
 const size_type __n = std :: distance ( __first, __last );
 _M_initialize ( __n );
 std :: copy ( __first, __last, this -> _M_impl . _M_start );
      }



    template < typename _Integer >
      void
      _M_assign_dispatch ( _Integer __n, _Integer __val, __true_type )
      { _M_fill_assign ( __n, __val ); }

    template < class _InputIterator >
      void
      _M_assign_dispatch ( _InputIterator __first, _InputIterator __last,
    __false_type )
      { _M_assign_aux ( __first, __last, std :: __iterator_category ( __first ) ); }

    void
    _M_fill_assign ( size_t __n, bool __x )
    {
      if ( __n > size ( ) )
 {
   std :: fill ( this -> _M_impl . _M_start . _M_p,
      this -> _M_impl . _M_end_of_storage, __x ? ~ 0 : 0 );
   insert ( end ( ), __n - size ( ), __x );
 }
      else
 {
   _M_erase_at_end ( begin ( ) + __n );
   std :: fill ( this -> _M_impl . _M_start . _M_p,
      this -> _M_impl . _M_end_of_storage, __x ? ~ 0 : 0 );
 }
    }

    template < typename _InputIterator >
      void
      _M_assign_aux ( _InputIterator __first, _InputIterator __last,
      std :: input_iterator_tag )
      {
 iterator __cur = begin ( );
 for (; __first != __last && __cur != end ( ); ++ __cur, ++ __first )
   * __cur = * __first;
 if ( __first == __last )
   _M_erase_at_end ( __cur );
 else
   insert ( end ( ), __first, __last );
      }

    template < typename _ForwardIterator >
      void
      _M_assign_aux ( _ForwardIterator __first, _ForwardIterator __last,
      std :: forward_iterator_tag )
      {
 const size_type __len = std :: distance ( __first, __last );
 if ( __len < size ( ) )
   _M_erase_at_end ( std :: copy ( __first, __last, begin ( ) ) );
 else
   {
     _ForwardIterator __mid = __first;
     std :: advance ( __mid, size ( ) );
     std :: copy ( __first, __mid, begin ( ) );
     insert ( end ( ), __mid, __last );
   }
      }





    template < typename _Integer >
      void
      _M_insert_dispatch ( iterator __pos, _Integer __n, _Integer __x,
    __true_type )
      { _M_fill_insert ( __pos, __n, __x ); }

    template < typename _InputIterator >
      void
      _M_insert_dispatch ( iterator __pos,
    _InputIterator __first, _InputIterator __last,
    __false_type )
      { _M_insert_range ( __pos, __first, __last,
   std :: __iterator_category ( __first ) ); }

    void
    _M_fill_insert ( iterator __position, size_type __n, bool __x );

    template < typename _InputIterator >
      void
      _M_insert_range ( iterator __pos, _InputIterator __first,
        _InputIterator __last, std :: input_iterator_tag )
      {
 for (; __first != __last; ++ __first )
   {
     __pos = insert ( __pos, * __first );
     ++ __pos;
   }
      }

    template < typename _ForwardIterator >
      void
      _M_insert_range ( iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std :: forward_iterator_tag );

    void
    _M_insert_aux ( iterator __position, bool __x );

    size_type
    _M_check_len ( size_type __n, const char * __s ) const
    {
      if ( max_size ( ) - size ( ) < __n )
 __throw_length_error ( ( __s ) );

      const size_type __len = size ( ) + std :: max ( size ( ), __n );
      return ( __len < size ( ) || __len > max_size ( ) ) ? max_size ( ) : __len;
    }

    void
    _M_erase_at_end ( iterator __pos )
    { this -> _M_impl . _M_finish = __pos; }
  };
# 1022 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_bvector.h" 3
}
# 60 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 62
template < typename _Tp, typename _Alloc >
    void
    vector < _Tp, _Alloc > ::
    reserve ( size_type __n )
    {
      if ( __n > this -> max_size ( ) )
 __throw_length_error ( ( "vector::reserve" ) );
      if ( this -> capacity ( ) < __n )
 {
   const size_type __old_size = size ( );
   pointer __tmp = _M_allocate_and_copy ( __n,
   ( this -> _M_impl . _M_start ),
   ( this -> _M_impl . _M_finish ) );
   std :: _Destroy ( this -> _M_impl . _M_start, this -> _M_impl . _M_finish,
   _M_get_Tp_allocator ( ) );
   _M_deallocate ( this -> _M_impl . _M_start,
   this -> _M_impl . _M_end_of_storage
   - this -> _M_impl . _M_start );
   this -> _M_impl . _M_start = __tmp;
   this -> _M_impl . _M_finish = __tmp + __old_size;
   this -> _M_impl . _M_end_of_storage = this -> _M_impl . _M_start + __n;
 }
    }
# 104 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc" 3
template < typename _Tp, typename _Alloc >
    typename vector < _Tp, _Alloc > :: iterator
    vector < _Tp, _Alloc > ::
    insert ( iterator __position, const value_type & __x )
    {
      const size_type __n = __position - begin ( );
      if ( this -> _M_impl . _M_finish != this -> _M_impl . _M_end_of_storage
   && __position == end ( ) )
 {
   this -> _M_impl . construct ( this -> _M_impl . _M_finish, __x );
   ++ this -> _M_impl . _M_finish;
 }
      else
 {

     _M_insert_aux ( __position, __x );
 }
      return iterator ( this -> _M_impl . _M_start + __n );
    }
# 131 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc" 3
template < typename _Tp, typename _Alloc >
    typename vector < _Tp, _Alloc > :: iterator
    vector < _Tp, _Alloc > ::
    erase ( iterator __position )
    {
      if ( __position + 1 != end ( ) )
 std :: copy ( __position + 1, end ( ), __position );
      -- this -> _M_impl . _M_finish;
      this -> _M_impl . destroy ( this -> _M_impl . _M_finish );
      return __position;
    }
# 143
template < typename _Tp, typename _Alloc >
    typename vector < _Tp, _Alloc > :: iterator
    vector < _Tp, _Alloc > ::
    erase ( iterator __first, iterator __last )
    {
      if ( __last != end ( ) )
 std :: copy ( __last, end ( ), __first );
      _M_erase_at_end ( __first . base ( ) + ( end ( ) - __last ) );
      return __first;
    }
# 154
template < typename _Tp, typename _Alloc >
    vector < _Tp, _Alloc > &
    vector < _Tp, _Alloc > ::
    operator = ( const vector < _Tp, _Alloc > & __x )
    {
      if ( & __x != this )
 {
   const size_type __xlen = __x . size ( );
   if ( __xlen > capacity ( ) )
     {
       pointer __tmp = _M_allocate_and_copy ( __xlen, __x . begin ( ),
         __x . end ( ) );
       std :: _Destroy ( this -> _M_impl . _M_start, this -> _M_impl . _M_finish,
       _M_get_Tp_allocator ( ) );
       _M_deallocate ( this -> _M_impl . _M_start,
       this -> _M_impl . _M_end_of_storage
       - this -> _M_impl . _M_start );
       this -> _M_impl . _M_start = __tmp;
       this -> _M_impl . _M_end_of_storage = this -> _M_impl . _M_start + __xlen;
     }
   else if ( size ( ) >= __xlen )
     {
       std :: _Destroy ( std :: copy ( __x . begin ( ), __x . end ( ), begin ( ) ),
       end ( ), _M_get_Tp_allocator ( ) );
     }
   else
     {
       std :: copy ( __x . _M_impl . _M_start, __x . _M_impl . _M_start + size ( ),
   this -> _M_impl . _M_start );
       std :: __uninitialized_copy_a ( __x . _M_impl . _M_start + size ( ),
       __x . _M_impl . _M_finish,
       this -> _M_impl . _M_finish,
       _M_get_Tp_allocator ( ) );
     }
   this -> _M_impl . _M_finish = this -> _M_impl . _M_start + __xlen;
 }
      return * this;
    }
# 193
template < typename _Tp, typename _Alloc >
    void
    vector < _Tp, _Alloc > ::
    _M_fill_assign ( size_t __n, const value_type & __val )
    {
      if ( __n > capacity ( ) )
 {
   vector __tmp ( __n, __val, _M_get_Tp_allocator ( ) );
   __tmp . swap ( * this );
 }
      else if ( __n > size ( ) )
 {
   std :: fill ( begin ( ), end ( ), __val );
   std :: __uninitialized_fill_n_a ( this -> _M_impl . _M_finish,
     __n - size ( ), __val,
     _M_get_Tp_allocator ( ) );
   this -> _M_impl . _M_finish += __n - size ( );
 }
      else
        _M_erase_at_end ( std :: fill_n ( this -> _M_impl . _M_start, __n, __val ) );
    }
# 215
template < typename _Tp, typename _Alloc >
    template < typename _InputIterator >
      void
      vector < _Tp, _Alloc > ::
      _M_assign_aux ( _InputIterator __first, _InputIterator __last,
      std :: input_iterator_tag )
      {
 pointer __cur ( this -> _M_impl . _M_start );
 for (; __first != __last && __cur != this -> _M_impl . _M_finish;
      ++ __cur, ++ __first )
   * __cur = * __first;
 if ( __first == __last )
   _M_erase_at_end ( __cur );
 else
   insert ( end ( ), __first, __last );
      }
# 232
template < typename _Tp, typename _Alloc >
    template < typename _ForwardIterator >
      void
      vector < _Tp, _Alloc > ::
      _M_assign_aux ( _ForwardIterator __first, _ForwardIterator __last,
      std :: forward_iterator_tag )
      {
 const size_type __len = std :: distance ( __first, __last );

 if ( __len > capacity ( ) )
   {
     pointer __tmp ( _M_allocate_and_copy ( __len, __first, __last ) );
     std :: _Destroy ( this -> _M_impl . _M_start, this -> _M_impl . _M_finish,
     _M_get_Tp_allocator ( ) );
     _M_deallocate ( this -> _M_impl . _M_start,
     this -> _M_impl . _M_end_of_storage
     - this -> _M_impl . _M_start );
     this -> _M_impl . _M_start = __tmp;
     this -> _M_impl . _M_finish = this -> _M_impl . _M_start + __len;
     this -> _M_impl . _M_end_of_storage = this -> _M_impl . _M_finish;
   }
 else if ( size ( ) >= __len )
   _M_erase_at_end ( std :: copy ( __first, __last, this -> _M_impl . _M_start ) );
 else
   {
     _ForwardIterator __mid = __first;
     std :: advance ( __mid, size ( ) );
     std :: copy ( __first, __mid, this -> _M_impl . _M_start );
     this -> _M_impl . _M_finish =
       std :: __uninitialized_copy_a ( __mid, __last,
       this -> _M_impl . _M_finish,
       _M_get_Tp_allocator ( ) );
   }
      }
# 293 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc" 3
template < typename _Tp, typename _Alloc >
    void
    vector < _Tp, _Alloc > ::
    _M_insert_aux ( iterator __position, const _Tp & __x )

    {
      if ( this -> _M_impl . _M_finish != this -> _M_impl . _M_end_of_storage )
 {
   this -> _M_impl . construct ( this -> _M_impl . _M_finish,
      ( * ( this -> _M_impl . _M_finish - 1 ) )
             );
   ++ this -> _M_impl . _M_finish;

   _Tp __x_copy = __x;

   std :: copy_backward ( __position . base ( ), this -> _M_impl . _M_finish - 2, this -> _M_impl . _M_finish - 1 )

                                  ;

   * __position = __x_copy;



 }
      else
 {
   const size_type __len =
     _M_check_len ( size_type ( 1 ), "vector::_M_insert_aux" );
   const size_type __elems_before = __position - begin ( );
   pointer __new_start ( this -> _M_allocate ( __len ) );
   pointer __new_finish ( __new_start );
   try
     {




       this -> _M_impl . construct ( __new_start + __elems_before,



                               __x );

       __new_finish = 0;

       __new_finish =
  std :: __uninitialized_move_a ( this -> _M_impl . _M_start,
         __position . base ( ), __new_start,
         _M_get_Tp_allocator ( ) );
       ++ __new_finish;

       __new_finish =
  std :: __uninitialized_move_a ( __position . base ( ),
         this -> _M_impl . _M_finish,
         __new_finish,
         _M_get_Tp_allocator ( ) );
     }
          catch ( ... )
     {
       if ( ! __new_finish )
  this -> _M_impl . destroy ( __new_start + __elems_before );
       else
  std :: _Destroy ( __new_start, __new_finish, _M_get_Tp_allocator ( ) );
       _M_deallocate ( __new_start, __len );
       throw;
     }
   std :: _Destroy ( this -> _M_impl . _M_start, this -> _M_impl . _M_finish,
   _M_get_Tp_allocator ( ) );
   _M_deallocate ( this -> _M_impl . _M_start,
   this -> _M_impl . _M_end_of_storage
   - this -> _M_impl . _M_start );
   this -> _M_impl . _M_start = __new_start;
   this -> _M_impl . _M_finish = __new_finish;
   this -> _M_impl . _M_end_of_storage = __new_start + __len;
 }
    }
# 370
template < typename _Tp, typename _Alloc >
    void
    vector < _Tp, _Alloc > ::
    _M_fill_insert ( iterator __position, size_type __n, const value_type & __x )
    {
      if ( __n != 0 )
 {
   if ( size_type ( this -> _M_impl . _M_end_of_storage
   - this -> _M_impl . _M_finish ) >= __n )
     {
       value_type __x_copy = __x;
       const size_type __elems_after = end ( ) - __position;
       pointer __old_finish ( this -> _M_impl . _M_finish );
       if ( __elems_after > __n )
  {
    std :: __uninitialized_move_a ( this -> _M_impl . _M_finish - __n,
           this -> _M_impl . _M_finish,
           this -> _M_impl . _M_finish,
           _M_get_Tp_allocator ( ) );
    this -> _M_impl . _M_finish += __n;
    std :: copy_backward ( __position . base ( ), __old_finish - __n, __old_finish )
                                        ;
    std :: fill ( __position . base ( ), __position . base ( ) + __n,
       __x_copy );
  }
       else
  {
    std :: __uninitialized_fill_n_a ( this -> _M_impl . _M_finish,
      __n - __elems_after,
      __x_copy,
      _M_get_Tp_allocator ( ) );
    this -> _M_impl . _M_finish += __n - __elems_after;
    std :: __uninitialized_move_a ( __position . base ( ), __old_finish,
           this -> _M_impl . _M_finish,
           _M_get_Tp_allocator ( ) );
    this -> _M_impl . _M_finish += __elems_after;
    std :: fill ( __position . base ( ), __old_finish, __x_copy );
  }
     }
   else
     {
       const size_type __len =
  _M_check_len ( __n, "vector::_M_fill_insert" );
       const size_type __elems_before = __position - begin ( );
       pointer __new_start ( this -> _M_allocate ( __len ) );
       pointer __new_finish ( __new_start );
       try
  {

    std :: __uninitialized_fill_n_a ( __new_start + __elems_before,
      __n, __x,
      _M_get_Tp_allocator ( ) );
    __new_finish = 0;

    __new_finish =
      std :: __uninitialized_move_a ( this -> _M_impl . _M_start,
      __position . base ( ),
      __new_start,
      _M_get_Tp_allocator ( ) );
    __new_finish += __n;

    __new_finish =
      std :: __uninitialized_move_a ( __position . base ( ),
      this -> _M_impl . _M_finish,
      __new_finish,
      _M_get_Tp_allocator ( ) );
  }
       catch ( ... )
  {
    if ( ! __new_finish )
      std :: _Destroy ( __new_start + __elems_before,
      __new_start + __elems_before + __n,
      _M_get_Tp_allocator ( ) );
    else
      std :: _Destroy ( __new_start, __new_finish,
      _M_get_Tp_allocator ( ) );
    _M_deallocate ( __new_start, __len );
    throw;
  }
       std :: _Destroy ( this -> _M_impl . _M_start, this -> _M_impl . _M_finish,
       _M_get_Tp_allocator ( ) );
       _M_deallocate ( this -> _M_impl . _M_start,
       this -> _M_impl . _M_end_of_storage
       - this -> _M_impl . _M_start );
       this -> _M_impl . _M_start = __new_start;
       this -> _M_impl . _M_finish = __new_finish;
       this -> _M_impl . _M_end_of_storage = __new_start + __len;
     }
 }
    }
# 461
template < typename _Tp, typename _Alloc >
    template < typename _InputIterator >
      void
      vector < _Tp, _Alloc > ::
      _M_range_insert ( iterator __pos, _InputIterator __first,
        _InputIterator __last, std :: input_iterator_tag )
      {
 for (; __first != __last; ++ __first )
   {
     __pos = insert ( __pos, * __first );
     ++ __pos;
   }
      }
# 475
template < typename _Tp, typename _Alloc >
    template < typename _ForwardIterator >
      void
      vector < _Tp, _Alloc > ::
      _M_range_insert ( iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std :: forward_iterator_tag )
      {
 if ( __first != __last )
   {
     const size_type __n = std :: distance ( __first, __last );
     if ( size_type ( this -> _M_impl . _M_end_of_storage
     - this -> _M_impl . _M_finish ) >= __n )
       {
  const size_type __elems_after = end ( ) - __position;
  pointer __old_finish ( this -> _M_impl . _M_finish );
  if ( __elems_after > __n )
    {
      std :: __uninitialized_move_a ( this -> _M_impl . _M_finish - __n,
      this -> _M_impl . _M_finish,
      this -> _M_impl . _M_finish,
      _M_get_Tp_allocator ( ) );
      this -> _M_impl . _M_finish += __n;
      std :: copy_backward ( __position . base ( ), __old_finish - __n, __old_finish )
                                          ;
      std :: copy ( __first, __last, __position );
    }
  else
    {
      _ForwardIterator __mid = __first;
      std :: advance ( __mid, __elems_after );
      std :: __uninitialized_copy_a ( __mid, __last,
      this -> _M_impl . _M_finish,
      _M_get_Tp_allocator ( ) );
      this -> _M_impl . _M_finish += __n - __elems_after;
      std :: __uninitialized_move_a ( __position . base ( ),
      __old_finish,
      this -> _M_impl . _M_finish,
      _M_get_Tp_allocator ( ) );
      this -> _M_impl . _M_finish += __elems_after;
      std :: copy ( __first, __mid, __position );
    }
       }
     else
       {
  const size_type __len =
    _M_check_len ( __n, "vector::_M_range_insert" );
  pointer __new_start ( this -> _M_allocate ( __len ) );
  pointer __new_finish ( __new_start );
  try
    {
      __new_finish =
        std :: __uninitialized_move_a ( this -> _M_impl . _M_start,
        __position . base ( ),
        __new_start,
        _M_get_Tp_allocator ( ) );
      __new_finish =
        std :: __uninitialized_copy_a ( __first, __last,
        __new_finish,
        _M_get_Tp_allocator ( ) );
      __new_finish =
        std :: __uninitialized_move_a ( __position . base ( ),
        this -> _M_impl . _M_finish,
        __new_finish,
        _M_get_Tp_allocator ( ) );
    }
  catch ( ... )
    {
      std :: _Destroy ( __new_start, __new_finish,
      _M_get_Tp_allocator ( ) );
      _M_deallocate ( __new_start, __len );
      throw;
    }
  std :: _Destroy ( this -> _M_impl . _M_start, this -> _M_impl . _M_finish,
         _M_get_Tp_allocator ( ) );
  _M_deallocate ( this -> _M_impl . _M_start,
         this -> _M_impl . _M_end_of_storage
         - this -> _M_impl . _M_start );
  this -> _M_impl . _M_start = __new_start;
  this -> _M_impl . _M_finish = __new_finish;
  this -> _M_impl . _M_end_of_storage = __new_start + __len;
       }
   }
      }
# 562
template < typename _Alloc >
    void
    vector < bool, _Alloc > ::
    reserve ( size_type __n )
    {
      if ( __n > this -> max_size ( ) )
 __throw_length_error ( ( "vector::reserve" ) );
      if ( this -> capacity ( ) < __n )
 {
   _Bit_type * __q = this -> _M_allocate ( __n );
   this -> _M_impl . _M_finish = _M_copy_aligned ( begin ( ), end ( ),
          iterator ( __q, 0 ) );
   this -> _M_deallocate ( );
   this -> _M_impl . _M_start = iterator ( __q, 0 );
   this -> _M_impl . _M_end_of_storage = ( __q + ( __n + int ( _S_word_bit ) - 1 )
          / int ( _S_word_bit ) );
 }
    }
# 581
template < typename _Alloc >
    void
    vector < bool, _Alloc > ::
    _M_fill_insert ( iterator __position, size_type __n, bool __x )
    {
      if ( __n == 0 )
 return;
      if ( capacity ( ) - size ( ) >= __n )
 {
   std :: copy_backward ( __position, end ( ),
        this -> _M_impl . _M_finish + difference_type ( __n ) );
   std :: fill ( __position, __position + difference_type ( __n ), __x );
   this -> _M_impl . _M_finish += difference_type ( __n );
 }
      else
 {
   const size_type __len =
     _M_check_len ( __n, "vector<bool>::_M_fill_insert" );
   _Bit_type * __q = this -> _M_allocate ( __len );
   iterator __i = _M_copy_aligned ( begin ( ), __position,
      iterator ( __q, 0 ) );
   std :: fill ( __i, __i + difference_type ( __n ), __x );
   this -> _M_impl . _M_finish = std :: copy ( __position, end ( ),
           __i + difference_type ( __n ) );
   this -> _M_deallocate ( );
   this -> _M_impl . _M_end_of_storage = ( __q + ( ( __len
           + int ( _S_word_bit ) - 1 )
          / int ( _S_word_bit ) ) );
   this -> _M_impl . _M_start = iterator ( __q, 0 );
 }
    }
# 613
template < typename _Alloc >
    template < typename _ForwardIterator >
      void
      vector < bool, _Alloc > ::
      _M_insert_range ( iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std :: forward_iterator_tag )
      {
 if ( __first != __last )
   {
     size_type __n = std :: distance ( __first, __last );
     if ( capacity ( ) - size ( ) >= __n )
       {
  std :: copy_backward ( __position, end ( ),
       this -> _M_impl . _M_finish
       + difference_type ( __n ) );
  std :: copy ( __first, __last, __position );
  this -> _M_impl . _M_finish += difference_type ( __n );
       }
     else
       {
  const size_type __len =
    _M_check_len ( __n, "vector<bool>::_M_insert_range" );
  _Bit_type * __q = this -> _M_allocate ( __len );
  iterator __i = _M_copy_aligned ( begin ( ), __position,
            iterator ( __q, 0 ) );
  __i = std :: copy ( __first, __last, __i );
  this -> _M_impl . _M_finish = std :: copy ( __position, end ( ), __i );
  this -> _M_deallocate ( );
  this -> _M_impl . _M_end_of_storage = ( __q
         + ( ( __len
             + int ( _S_word_bit ) - 1 )
            / int ( _S_word_bit ) ) );
  this -> _M_impl . _M_start = iterator ( __q, 0 );
       }
   }
      }
# 650
template < typename _Alloc >
    void
    vector < bool, _Alloc > ::
    _M_insert_aux ( iterator __position, bool __x )
    {
      if ( this -> _M_impl . _M_finish . _M_p != this -> _M_impl . _M_end_of_storage )
 {
   std :: copy_backward ( __position, this -> _M_impl . _M_finish,
        this -> _M_impl . _M_finish + 1 );
   * __position = __x;
   ++ this -> _M_impl . _M_finish;
 }
      else
 {
   const size_type __len =
     _M_check_len ( size_type ( 1 ), "vector<bool>::_M_insert_aux" );
   _Bit_type * __q = this -> _M_allocate ( __len );
   iterator __i = _M_copy_aligned ( begin ( ), __position,
      iterator ( __q, 0 ) );
   * __i ++ = __x;
   this -> _M_impl . _M_finish = std :: copy ( __position, end ( ), __i );
   this -> _M_deallocate ( );
   this -> _M_impl . _M_end_of_storage = ( __q + ( ( __len
           + int ( _S_word_bit ) - 1 )
          / int ( _S_word_bit ) ) );
   this -> _M_impl . _M_start = iterator ( __q, 0 );
 }
    }
# 679
}
# 35 "/home/saifmulla/openmm/OpenMM/platforms/cuda/src/kernels/gputypes.h"
namespace OpenMM { 
# 36
class CudaForceInfo; 
# 37
}
# 39
struct gpuAtomType { 
# 40
std::string name; 
# 41
char symbol; 
# 42
float r; 
# 43
}; 
# 45
struct gpuMoleculeGroup { 
# 46
std::vector< int>  atoms; 
# 47
std::vector< int>  instances; 
# 48
}; 
# 50
struct gpuTabulatedFunction { 
# 51
gpuTabulatedFunction() : coefficients((__null)) { 
# 52
} 
# 53
std::string name; 
# 54
double min, max; 
# 55
CUDAStream< float4>  *coefficients; 
# 56
}; 
# 58
enum SM_VERSION { 
# 60
SM_10, 
# 61
SM_11, 
# 62
SM_12, 
# 63
SM_20
# 64
}; 
# 69
struct _gpuContext { 
# 73
int natoms; 
# 74
int device; 
# 75
bool useBlockingSync; 
# 76
gpuAtomType *gpAtomTable; 
# 77
int gAtomTypes; 
# 78
unsigned blocksPerSM; 
# 79
unsigned sharedMemoryPerBlock; 
# 80
cudaGmxSimulation sim; 
# 81
unsigned *pOutputBufferCounter; 
# 82
std::vector< OpenMM::CudaForceInfo *>  forces; 
# 83
std::vector< std::vector< int> >  exclusions; 
# 84
unsigned char *pAtomSymbol; 
# 85
std::vector< gpuMoleculeGroup>  moleculeGroups; 
# 86
gpuTabulatedFunction tabulatedFunctions[MAX_TABULATED_FUNCTIONS]; 
# 87
std::vector< int3>  posCellOffsets; 
# 88
int iterations; 
# 89
float epsfac; 
# 90
float solventDielectric; 
# 91
float soluteDielectric; 
# 92
int grid; 
# 93
bool bCalculateCM; 
# 94
bool bRemoveCM; 
# 95
bool bRecalculateBornRadii; 
# 96
bool bOutputBufferPerWarp; 
# 97
bool bIncludeGBSA; 
# 98
bool bIncludeGBVI; 
# 99
bool tabulatedFunctionsChanged; 
# 100
unsigned long seed; 
# 101
SM_VERSION sm_version; 
# 102
compactionPlan compactPlan; 
# 103
cufftHandle fftplan; 
# 104
CUDAStream< float4>  *psPosq4; 
# 105
CUDAStream< float4>  *psPosqP4; 
# 106
CUDAStream< float4>  *psOldPosq4; 
# 107
CUDAStream< float4>  *psVelm4; 
# 108
CUDAStream< float4>  *psForce4; 
# 109
CUDAStream< float>  *psEnergy; 
# 110
CUDAStream< float2>  *psSigEps2; 
# 111
CUDAStream< float4>  *psCustomParams; 
# 112
CUDAStream< int4>  *psCustomBondID; 
# 113
CUDAStream< float4>  *psCustomBondParams; 
# 114
CUDAStream< int4>  *psCustomAngleID1; 
# 115
CUDAStream< int2>  *psCustomAngleID2; 
# 116
CUDAStream< float4>  *psCustomAngleParams; 
# 117
CUDAStream< int4>  *psCustomTorsionID1; 
# 118
CUDAStream< int4>  *psCustomTorsionID2; 
# 119
CUDAStream< float4>  *psCustomTorsionParams; 
# 120
CUDAStream< int>  *psCustomExternalID; 
# 121
CUDAStream< float4>  *psCustomExternalParams; 
# 122
CUDAStream< float4>  *psTabulatedFunctionParams; 
# 123
CUDAStream< float2>  *psEwaldCosSinSum; 
# 124
CUDAStream< float>  *psTabulatedErfc; 
# 125
CUDAStream< float2>  *psPmeGrid; 
# 126
CUDAStream< float>  *psPmeBsplineModuli[3]; 
# 127
CUDAStream< float4>  *psPmeBsplineTheta; 
# 128
CUDAStream< float4>  *psPmeBsplineDtheta; 
# 129
CUDAStream< int>  *psPmeAtomRange; 
# 130
CUDAStream< int2>  *psPmeAtomGridIndex; 
# 131
CUDAStream< float2>  *psObcData; 
# 132
CUDAStream< float4>  *psGBVIData; 
# 133
CUDAStream< float>  *psGBVISwitchDerivative; 
# 134
CUDAStream< float>  *psObcChain; 
# 135
CUDAStream< float>  *psBornForce; 
# 136
CUDAStream< float>  *psBornRadii; 
# 137
CUDAStream< float>  *psBornSum; 
# 138
CUDAStream< int4>  *psBondID; 
# 139
CUDAStream< float2>  *psBondParameter; 
# 140
CUDAStream< int4>  *psBondAngleID1; 
# 141
CUDAStream< int2>  *psBondAngleID2; 
# 142
CUDAStream< float2>  *psBondAngleParameter; 
# 143
CUDAStream< int4>  *psDihedralID1; 
# 144
CUDAStream< int4>  *psDihedralID2; 
# 145
CUDAStream< float4>  *psDihedralParameter; 
# 146
CUDAStream< int4>  *psRbDihedralID1; 
# 147
CUDAStream< int4>  *psRbDihedralID2; 
# 148
CUDAStream< float4>  *psRbDihedralParameter1; 
# 149
CUDAStream< float2>  *psRbDihedralParameter2; 
# 150
CUDAStream< int4>  *psLJ14ID; 
# 151
CUDAStream< float4>  *psLJ14Parameter; 
# 152
CUDAStream< int4>  *psShakeID; 
# 153
CUDAStream< float4>  *psShakeParameter; 
# 154
CUDAStream< int4>  *psSettleID; 
# 155
CUDAStream< float2>  *psSettleParameter; 
# 156
CUDAStream< unsigned>  *psExclusion; 
# 157
CUDAStream< unsigned>  *psExclusionIndex; 
# 158
CUDAStream< unsigned>  *psWorkUnit; 
# 159
CUDAStream< unsigned>  *psInteractingWorkUnit; 
# 160
CUDAStream< unsigned>  *psInteractionFlag; 
# 161
CUDAStream< unsigned long>  *psInteractionCount; 
# 162
CUDAStream< float2>  *psStepSize; 
# 163
CUDAStream< float>  *psLangevinParameters; 
# 164
CUDAStream< float4>  *psRandom4; 
# 165
CUDAStream< float2>  *psRandom2; 
# 166
CUDAStream< uint4>  *psRandomSeed; 
# 167
CUDAStream< int>  *psRandomPosition; 
# 168
CUDAStream< float4>  *psLinearMomentum; 
# 169
CUDAStream< int>  *psAtomIndex; 
# 170
CUDAStream< float4>  *psGridBoundingBox; 
# 171
CUDAStream< float4>  *psGridCenter; 
# 172
CUDAStream< int2>  *psCcmaAtoms; 
# 173
CUDAStream< float4>  *psCcmaDistance; 
# 174
CUDAStream< int>  *psCcmaAtomConstraints; 
# 175
CUDAStream< int>  *psCcmaNumAtomConstraints; 
# 176
CUDAStream< float>  *psCcmaDelta1; 
# 177
CUDAStream< float>  *psCcmaDelta2; 
# 178
int *ccmaConvergedHostMarker; 
# 179
cudaEvent_t ccmaEvent; 
# 180
CUDAStream< float>  *psCcmaReducedMass; 
# 181
CUDAStream< float>  *psRigidClusterMatrix; 
# 182
CUDAStream< unsigned>  *psRigidClusterConstraintIndex; 
# 183
CUDAStream< unsigned>  *psRigidClusterMatrixIndex; 
# 184
CUDAStream< unsigned>  *psConstraintMatrixColumn; 
# 185
CUDAStream< float>  *psConstraintMatrixValue; 
# 186
}; 
# 188
typedef _gpuContext *gpuContext; 
# 193
extern "C" bool gpuIsAvailable(); 
# 196
extern "C" void gpuSetBondParameters(gpuContext , const std::vector< int>  & , const std::vector< int>  & , const std::vector< float>  & , const std::vector< float>  & ); 
# 199
extern "C" void gpuSetBondAngleParameters(gpuContext , const std::vector< int>  & , const std::vector< int>  & , const std::vector< int>  & , const std::vector< float>  & , const std::vector< float>  & ); 
# 203
extern "C" void gpuSetDihedralParameters(gpuContext , const std::vector< int>  & , const std::vector< int>  & , const std::vector< int>  & , const std::vector< int>  & , const std::vector< float>  & , const std::vector< float>  & , const std::vector< int>  & ); 
# 207
extern "C" void gpuSetRbDihedralParameters(gpuContext , const std::vector< int>  & , const std::vector< int>  & , const std::vector< int>  & , const std::vector< int>  & , const std::vector< float>  & , const std::vector< float>  & , const std::vector< float>  & , const std::vector< float>  & , const std::vector< float>  & , const std::vector< float>  & ); 
# 211
extern "C" void gpuSetLJ14Parameters(gpuContext , float , float , const std::vector< int>  & , const std::vector< int>  & , const std::vector< float>  & , const std::vector< float>  & , const std::vector< float>  & , const std::vector< float>  & ); 
# 215
extern "C" void gpuSetCoulombParameters(gpuContext , float , const std::vector< int>  & , const std::vector< float>  & , const std::vector< float>  & , const std::vector< float>  & , const std::vector< char>  & , const std::vector< std::vector< int> >  & , CudaNonbondedMethod ); 
# 219
extern "C" void gpuSetNonbondedCutoff(gpuContext , float , float ); 
# 222
extern "C" void gpuSetTabulatedFunction(gpuContext , int , const std::string & , const std::vector< double>  & , double , double ); 
# 225
extern "C" void gpuSetCustomBondParameters(gpuContext , const std::vector< int>  & , const std::vector< int>  & , const std::vector< std::vector< double> >  & , const std::string & , const std::vector< std::basic_string< char, std::char_traits< char> , std::allocator< char> > >  & , const std::vector< std::basic_string< char, std::char_traits< char> , std::allocator< char> > >  & ); 
# 229
extern "C" void gpuSetCustomAngleParameters(gpuContext , const std::vector< int>  & , const std::vector< int>  & , const std::vector< int>  & , const std::vector< std::vector< double> >  & , const std::string & , const std::vector< std::basic_string< char, std::char_traits< char> , std::allocator< char> > >  & , const std::vector< std::basic_string< char, std::char_traits< char> , std::allocator< char> > >  & ); 
# 233
extern "C" void gpuSetCustomTorsionParameters(gpuContext , const std::vector< int>  & , const std::vector< int>  & , const std::vector< int>  & , const std::vector< int>  & , const std::vector< std::vector< double> >  & , const std::string & , const std::vector< std::basic_string< char, std::char_traits< char> , std::allocator< char> > >  & , const std::vector< std::basic_string< char, std::char_traits< char> , std::allocator< char> > >  & ); 
# 237
extern "C" void gpuSetCustomExternalParameters(gpuContext , const std::vector< int>  & , const std::vector< std::vector< double> >  & , const std::string & , const std::vector< std::basic_string< char, std::char_traits< char> , std::allocator< char> > >  & , const std::vector< std::basic_string< char, std::char_traits< char> , std::allocator< char> > >  & ); 
# 241
extern "C" void gpuSetCustomNonbondedParameters(gpuContext , const std::vector< std::vector< double> >  & , const std::vector< std::vector< int> >  & , CudaNonbondedMethod , float , const std::string & , const std::vector< std::basic_string< char, std::char_traits< char> , std::allocator< char> > >  & , const std::vector< std::basic_string< char, std::char_traits< char> , std::allocator< char> > >  & ); 
# 246
extern "C" void gpuSetEwaldParameters(gpuContext , float , int , int , int ); 
# 249
extern "C" void gpuSetPMEParameters(gpuContext , float , int , int , int ); 
# 252
extern "C" void gpuSetPeriodicBoxSize(gpuContext , float , float , float ); 
# 255
extern "C" void gpuSetObcParameters(gpuContext , float , float , const std::vector< float>  & , const std::vector< float>  & , const std::vector< float>  & ); 
# 258
extern "C" void gpuSetGBVIParameters(gpuContext , float , float , const std::vector< int>  & , const std::vector< float>  & , const std::vector< float>  & , const std::vector< float>  & , int , float , float ); 
# 263
extern "C" void gpuSetConstraintParameters(gpuContext , const std::vector< int>  & , const std::vector< int>  & , const std::vector< float>  & , const std::vector< float>  & , const std::vector< float>  & , float ); 
# 267
extern "C" int gpuAllocateInitialBuffers(gpuContext ); 
# 270
extern "C" void gpuSetPositions(gpuContext , const std::vector< float>  & , const std::vector< float>  & , const std::vector< float>  & ); 
# 273
extern "C" void gpuSetVelocities(gpuContext , const std::vector< float>  & , const std::vector< float>  & , const std::vector< float>  & ); 
# 276
extern "C" void gpuSetMass(gpuContext , const std::vector< float>  & ); 
# 279
extern "C" void gpuInitializeRandoms(gpuContext ); 
# 282
extern "C" void *gpuInit(int , unsigned  = (0), bool  = (false)); 
# 285
extern "C" void gpuSetLangevinIntegrationParameters(gpuContext , float , float , float , float ); 
# 288
extern "C" void gpuSetVerletIntegrationParameters(gpuContext , float , float ); 
# 291
extern "C" void gpuSetBrownianIntegrationParameters(gpuContext , float , float , float ); 
# 294
extern "C" void gpuSetAndersenThermostatParameters(gpuContext , float , float ); 
# 297
extern "C" void gpuShutDown(gpuContext ); 
# 300
extern "C" int gpuBuildOutputBuffers(gpuContext ); 
# 303
extern "C" int gpuBuildThreadBlockWorkList(gpuContext ); 
# 306
extern "C" void gpuBuildExclusionList(gpuContext ); 
# 309
extern "C" int gpuSetConstants(gpuContext ); 
# 312
extern "C" void gpuReorderAtoms(gpuContext ); 
# 315
extern "C" void setExclusions(gpuContext , const std::vector< std::vector< int> >  & ); 
# 30 "/home/saifmulla/openmm/OpenMM/platforms/cuda/src/kernels/cudaKernels.h"
extern void kClearForces(gpuContext ); 
# 31
extern void kClearEnergy(gpuContext ); 
# 32
extern void kClearBornSumAndForces(gpuContext ); 
# 33
extern void kClearObcGbsaBornSum(gpuContext ); 
# 34
extern void kCalculateObcGbsaBornSum(gpuContext ); 
# 35
extern void kReduceObcGbsaBornSum(gpuContext ); 
# 36
extern void kCalculateGBVIBornSum(gpuContext ); 
# 37
extern void kReduceGBVIBornSum(gpuContext ); 
# 38
extern void kClearGBVIBornSum(gpuContext ); 
# 39
extern void kGenerateRandoms(gpuContext ); 
# 42
extern void kCalculateCDLJObcGbsaForces1(gpuContext ); 
# 43
extern void kCalculateCDLJGBVIForces1(gpuContext ); 
# 44
extern void kCalculateCDLJForces(gpuContext ); 
# 45
extern void kCalculateCMAPTorsionForces(gpuContext , CUDAStream< float4>  & , CUDAStream< int2>  & , CUDAStream< int4>  & , CUDAStream< int>  & ); 
# 46
extern void kCalculateCustomBondForces(gpuContext ); 
# 47
extern void kCalculateCustomAngleForces(gpuContext ); 
# 48
extern void kCalculateCustomTorsionForces(gpuContext ); 
# 49
extern void kCalculateCustomExternalForces(gpuContext ); 
# 50
extern void kCalculateCustomNonbondedForces(gpuContext , bool ); 
# 51
extern void kReduceObcGbsaBornForces(gpuContext ); 
# 52
extern void kCalculateObcGbsaForces2(gpuContext ); 
# 53
extern void kCalculateGBVIForces2(gpuContext ); 
# 54
extern void kCalculateLocalForces(gpuContext ); 
# 55
extern void kCalculateAndersenThermostat(gpuContext , CUDAStream< int>  & ); 
# 56
extern void kReduceBornSumAndForces(gpuContext ); 
# 57
extern void kApplyShake(gpuContext ); 
# 58
extern void kApplyCCMA(gpuContext ); 
# 59
extern void kApplySettle(gpuContext ); 
# 60
extern void kLangevinUpdatePart1(gpuContext ); 
# 61
extern void kLangevinUpdatePart2(gpuContext ); 
# 62
extern void kSelectLangevinStepSize(gpuContext , float ); 
# 63
extern void kSetVelocitiesFromPositions(gpuContext ); 
# 64
extern void kVerletUpdatePart1(gpuContext ); 
# 65
extern void kVerletUpdatePart2(gpuContext ); 
# 66
extern void kSelectVerletStepSize(gpuContext , float ); 
# 67
extern void kBrownianUpdatePart1(gpuContext ); 
# 68
extern void kBrownianUpdatePart2(gpuContext ); 
# 69
extern void kScaleAtomCoordinates(gpuContext , float , CUDAStream< int>  & , CUDAStream< int>  & ); 
# 70
extern void kApplyConstraints(gpuContext ); 
# 73
extern void kReduceForces(gpuContext ); 
# 74
extern double kReduceEnergy(gpuContext ); 
# 77
extern void SetCalculateCDLJObcGbsaForces1Sim(gpuContext ); 
# 78
extern void GetCalculateCDLJObcGbsaForces1Sim(gpuContext ); 
# 79
extern void SetCalculateCDLJForcesSim(gpuContext ); 
# 80
extern void GetCalculateCDLJForcesSim(gpuContext ); 
# 81
extern void SetCalculateCustomBondForcesSim(gpuContext ); 
# 82
extern void GetCalculateCustomBondForcesSim(gpuContext ); 
# 83
extern void SetCalculateCustomAngleForcesSim(gpuContext ); 
# 84
extern void GetCalculateCustomAngleForcesSim(gpuContext ); 
# 85
extern void SetCalculateCustomTorsionForcesSim(gpuContext ); 
# 86
extern void GetCalculateCustomTorsionForcesSim(gpuContext ); 
# 87
extern void SetCalculateCustomExternalForcesSim(gpuContext ); 
# 88
extern void GetCalculateCustomExternalForcesSim(gpuContext ); 
# 89
extern void SetCalculateCustomNonbondedForcesSim(gpuContext ); 
# 90
extern void GetCalculateCustomNonbondedForcesSim(gpuContext ); 
# 91
extern void SetCalculateLocalForcesSim(gpuContext ); 
# 92
extern void GetCalculateLocalForcesSim(gpuContext ); 
# 93
extern void SetCalculateObcGbsaBornSumSim(gpuContext ); 
# 94
extern void GetCalculateObcGbsaBornSumSim(gpuContext ); 
# 95
extern void SetCalculateGBVIBornSumSim(gpuContext ); 
# 96
extern void GetCalculateGBVIBornSumSim(gpuContext ); 
# 97
extern void SetCalculateObcGbsaForces2Sim(gpuContext ); 
# 98
extern void GetCalculateObcGbsaForces2Sim(gpuContext ); 
# 99
extern void SetCalculateGBVIForces2Sim(gpuContext ); 
# 100
extern void GetCalculateGBVIForces2Sim(gpuContext ); 
# 101
extern void SetCalculateAndersenThermostatSim(gpuContext ); 
# 102
extern void GetCalculateAndersenThermostatSim(gpuContext ); 
# 103
extern void SetCalculatePMESim(gpuContext ); 
# 104
extern void GetCalculatePMESim(gpuContext ); 
# 105
extern void SetForcesSim(gpuContext ); 
# 106
extern void GetForcesSim(gpuContext ); 
# 107
extern void SetShakeHSim(gpuContext ); 
# 108
extern void GetShakeHSim(gpuContext ); 
# 109
extern void SetLangevinUpdateSim(gpuContext ); 
# 110
extern void GetLangevinUpdateSim(gpuContext ); 
# 111
extern void SetSettleSim(gpuContext ); 
# 112
extern void GetSettleSim(gpuContext ); 
# 113
extern void SetCCMASim(gpuContext ); 
# 114
extern void GetCCMASim(gpuContext ); 
# 115
extern void SetVerletUpdateSim(gpuContext ); 
# 116
extern void GetVerletUpdateSim(gpuContext ); 
# 117
extern void SetBrownianUpdateSim(gpuContext ); 
# 118
extern void GetBrownianUpdateSim(gpuContext ); 
# 119
extern void SetRandomSim(gpuContext ); 
# 120
extern void GetRandomSim(gpuContext ); 
# 121
extern void SetCustomBondForceExpression(const Expression< 256>  & ); 
# 122
extern void SetCustomBondEnergyExpression(const Expression< 256>  & ); 
# 123
extern void SetCustomBondGlobalParams(const std::vector< float>  & ); 
# 124
extern void SetCustomAngleForceExpression(const Expression< 256>  & ); 
# 125
extern void SetCustomAngleEnergyExpression(const Expression< 256>  & ); 
# 126
extern void SetCustomAngleGlobalParams(const std::vector< float>  & ); 
# 127
extern void SetCustomTorsionForceExpression(const Expression< 256>  & ); 
# 128
extern void SetCustomTorsionEnergyExpression(const Expression< 256>  & ); 
# 129
extern void SetCustomTorsionGlobalParams(const std::vector< float>  & ); 
# 130
extern void SetCustomExternalForceExpressions(const Expression< 256>  & , const Expression< 256>  & , const Expression< 256>  & ); 
# 131
extern void SetCustomExternalEnergyExpression(const Expression< 256>  & ); 
# 132
extern void SetCustomExternalGlobalParams(const std::vector< float>  & ); 
# 133
extern void SetCustomNonbondedForceExpression(const Expression< 256>  & ); 
# 134
extern void SetCustomNonbondedEnergyExpression(const Expression< 256>  & ); 
# 135
extern void SetCustomNonbondedGlobalParams(const std::vector< float>  & ); 
# 137
extern void kPrintGBVI(gpuContext , std::string , int , FILE * ); 
# 138
extern void kPrintObc(gpuContext , std::string , int , FILE * ); 
# 44 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//amoebaCudaTypes.h"
enum CudaAmoebaNonbondedMethod { 
# 46
AMOEBA_NO_CUTOFF, 
# 47
AMOEBA_PARTICLE_MESH_EWALD
# 48
}; 
# 50
static const int AMOEBA_PME_ORDER = 5; 
# 51
static const int AMOEBA_MAX_TORSION_TORSION_GRIDS = 12; 
# 53
struct cudaAmoebaGmxSimulation { 
# 57
unsigned amoebaBonds; 
# 58
int4 *pAmoebaBondID; 
# 59
float2 *pAmoebaBondParameter; 
# 60
float amoebaBondCubicParameter; 
# 61
float amoebaBondQuarticicParameter; 
# 62
unsigned amoebaBond_offset; 
# 65
unsigned amoebaAngles; 
# 66
int4 *pAmoebaAngleID1; 
# 67
int2 *pAmoebaAngleID2; 
# 68
float2 *pAmoebaAngleParameter; 
# 69
unsigned amoebaAngle_offset; 
# 71
float amoebaAngleCubicK; 
# 72
float amoebaAngleQuarticK; 
# 73
float amoebaAnglePenticK; 
# 74
float amoebaAngleSexticK; 
# 76
unsigned amoebaInPlaneAngles; 
# 77
int4 *pAmoebaInPlaneAngleID1; 
# 78
int4 *pAmoebaInPlaneAngleID2; 
# 79
float2 *pAmoebaInPlaneAngleParameter; 
# 80
unsigned amoebaInPlaneAngle_offset; 
# 82
float amoebaInPlaneAngleCubicK; 
# 83
float amoebaInPlaneAngleQuarticK; 
# 84
float amoebaInPlaneAnglePenticK; 
# 85
float amoebaInPlaneAngleSexticK; 
# 87
unsigned amoebaTorsions; 
# 88
int4 *pAmoebaTorsionID1; 
# 89
int4 *pAmoebaTorsionID2; 
# 90
float4 *pAmoebaTorsionParameter1; 
# 91
float2 *pAmoebaTorsionParameter2; 
# 92
unsigned amoebaTorsion_offset; 
# 94
unsigned amoebaPiTorsions; 
# 95
int4 *pAmoebaPiTorsionID1; 
# 96
int4 *pAmoebaPiTorsionID2; 
# 97
int4 *pAmoebaPiTorsionID3; 
# 98
float *pAmoebaPiTorsionParameter; 
# 99
unsigned amoebaPiTorsion_offset; 
# 101
unsigned amoebaStretchBends; 
# 102
int4 *pAmoebaStretchBendID1; 
# 103
int2 *pAmoebaStretchBendID2; 
# 104
float4 *pAmoebaStretchBendParameter; 
# 105
unsigned amoebaStretchBend_offset; 
# 107
unsigned amoebaOutOfPlaneBends; 
# 108
int4 *pAmoebaOutOfPlaneBendID1; 
# 109
int4 *pAmoebaOutOfPlaneBendID2; 
# 110
float *pAmoebaOutOfPlaneBendParameter; 
# 111
unsigned amoebaOutOfPlaneBend_offset; 
# 112
float amoebaOutOfPlaneBendCubicK; 
# 113
float amoebaOutOfPlaneBendQuarticK; 
# 114
float amoebaOutOfPlaneBendPenticK; 
# 115
float amoebaOutOfPlaneBendSexticK; 
# 117
unsigned amoebaTorsionTorsions; 
# 118
int4 *pAmoebaTorsionTorsionID1; 
# 119
int4 *pAmoebaTorsionTorsionID2; 
# 120
int4 *pAmoebaTorsionTorsionID3; 
# 121
unsigned amoebaTorsionTorsion_offset; 
# 124
int amoebaTorTorGridOffset[AMOEBA_MAX_TORSION_TORSION_GRIDS]; 
# 125
int amoebaTorTorGridNy[AMOEBA_MAX_TORSION_TORSION_GRIDS]; 
# 126
float amoebaTorTorGridBegin[AMOEBA_MAX_TORSION_TORSION_GRIDS]; 
# 127
float amoebaTorTorGridDelta[AMOEBA_MAX_TORSION_TORSION_GRIDS]; 
# 128
float4 *pAmoebaTorsionTorsionGrids; 
# 130
unsigned amoebaUreyBradleys; 
# 131
int4 *pAmoebaUreyBradleyID; 
# 132
float2 *pAmoebaUreyBradleyParameter; 
# 133
float amoebaUreyBradleyCubicParameter; 
# 134
float amoebaUreyBradleyQuarticicParameter; 
# 135
unsigned amoebaUreyBradley_offset; 
# 137
float sqrtPi; 
# 138
float scalingDistanceCutoff; 
# 139
float2 *pDampingFactorAndThole; 
# 140
int polarizationType; 
# 142
int4 *pMultipoleParticlesIdsAndAxisType; 
# 143
int4 *pMultipoleParticlesTorqueBufferIndices; 
# 144
int maxTorqueBufferIndex; 
# 145
float4 *pTorqueMapForce4; 
# 147
float *pMolecularDipole; 
# 148
float *pMolecularQuadrupole; 
# 150
float *pLabFrameDipole; 
# 151
float *pLabFrameQuadrupole; 
# 153
float *pInducedDipole; 
# 154
float *pInducedDipolePolar; 
# 156
float *pInducedDipoleS; 
# 157
float *pInducedDipolePolarS; 
# 159
float *pTorque; 
# 161
float *pWorkArray_3_1; 
# 162
float *pWorkArray_3_2; 
# 163
float *pWorkArray_1_1; 
# 164
float *pWorkArray_1_2; 
# 166
int vdwUsePBC; 
# 167
float vdwCutoff; 
# 168
float vdwCutoff2; 
# 169
float vdwTaperCutoff; 
# 170
float vdwTaperCutoff2; 
# 171
float vdwTaperDelta; 
# 174
float vdwTaperTable[100 + 1]; 
# 175
float vdw_dTaperTable[100 + 1]; 
# 177
unsigned amoebaVdwNonReductions; 
# 178
int *pAmoebaVdwNonReductionID; 
# 179
unsigned *pVdwWorkUnit; 
# 181
unsigned amoebaVdwReductions; 
# 182
int4 *pAmoebaVdwReductionID; 
# 183
float *pAmoebaVdwReduction; 
# 184
int *pVdwExclusionIndicesIndex; 
# 185
int *pVdwExclusionIndices; 
# 189
float epso; 
# 190
float epsh; 
# 191
float rmino; 
# 192
float rminh; 
# 193
float awater; 
# 194
float shctd; 
# 195
float dispoff; 
# 196
float totalMaxWcaDispersionEnergy; 
# 197
float2 *pWcaDispersionRadiusEpsilon; 
# 200
int *pScaleIndicesIndex; 
# 201
int *pD_ScaleIndices; 
# 202
int2 *pP_ScaleIndices; 
# 203
int2 *pM_ScaleIndices; 
# 205
float electric; 
# 206
float gkc; 
# 208
float dielec; 
# 209
float dwater; 
# 210
float fc; 
# 211
float fd; 
# 212
float fq; 
# 216
float4 *pThetai1; 
# 217
float4 *pThetai2; 
# 218
float4 *pThetai3; 
# 219
int4 *pIgrid; 
# 220
float *pPhi; 
# 221
float *pPhid; 
# 222
float *pPhip; 
# 223
float *pPhidp; 
# 224
}; 
# 67 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 85 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h" 3
enum _Rb_tree_color { _S_red, _S_black}; 
# 87
struct _Rb_tree_node_base { 
# 89
typedef _Rb_tree_node_base *_Base_ptr; 
# 90
typedef const _Rb_tree_node_base *_Const_Base_ptr; 
# 92
_Rb_tree_color _M_color; 
# 93
_Base_ptr _M_parent; 
# 94
_Base_ptr _M_left; 
# 95
_Base_ptr _M_right; 
# 98
static _Base_ptr _S_minimum(_Base_ptr __x) 
# 99
{ 
# 100
while ((__x->_M_left) != (0)) { __x = (__x->_M_left); }  
# 101
return __x; 
# 102
} 
# 105
static _Const_Base_ptr _S_minimum(_Const_Base_ptr __x) 
# 106
{ 
# 107
while ((__x->_M_left) != (0)) { __x = (__x->_M_left); }  
# 108
return __x; 
# 109
} 
# 112
static _Base_ptr _S_maximum(_Base_ptr __x) 
# 113
{ 
# 114
while ((__x->_M_right) != (0)) { __x = (__x->_M_right); }  
# 115
return __x; 
# 116
} 
# 119
static _Const_Base_ptr _S_maximum(_Const_Base_ptr __x) 
# 120
{ 
# 121
while ((__x->_M_right) != (0)) { __x = (__x->_M_right); }  
# 122
return __x; 
# 123
} 
# 124
}; 
# 126
template< class _Val> 
# 127
struct _Rb_tree_node : public _Rb_tree_node_base { 
# 129
typedef _Rb_tree_node *_Link_type; 
# 130
_Val _M_value_field; 
# 138
}; 
# 141
_Rb_tree_node_base *_Rb_tree_increment(_Rb_tree_node_base * ); 
# 144
const _Rb_tree_node_base *_Rb_tree_increment(const _Rb_tree_node_base * ); 
# 147
_Rb_tree_node_base *_Rb_tree_decrement(_Rb_tree_node_base * ); 
# 150
const _Rb_tree_node_base *_Rb_tree_decrement(const _Rb_tree_node_base * ); 
# 152
template < typename _Tp >
    struct _Rb_tree_iterator
    {
      typedef _Tp value_type;
      typedef _Tp & reference;
      typedef _Tp * pointer;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_iterator < _Tp > _Self;
      typedef _Rb_tree_node_base :: _Base_ptr _Base_ptr;
      typedef _Rb_tree_node < _Tp > * _Link_type;

      _Rb_tree_iterator ( )
      : _M_node ( ) { }

      explicit
      _Rb_tree_iterator ( _Link_type __x )
      : _M_node ( __x ) { }

      reference
      operator * ( ) const
      { return static_cast < _Link_type > ( _M_node ) -> _M_value_field; }

      pointer
      operator -> ( ) const
      { return & static_cast < _Link_type > ( _M_node ) -> _M_value_field; }

      _Self &
      operator ++ ( )
      {
 _M_node = _Rb_tree_increment ( _M_node );
 return * this;
      }

      _Self
      operator ++ ( int )
      {
 _Self __tmp = * this;
 _M_node = _Rb_tree_increment ( _M_node );
 return __tmp;
      }

      _Self &
      operator -- ( )
      {
 _M_node = _Rb_tree_decrement ( _M_node );
 return * this;
      }

      _Self
      operator -- ( int )
      {
 _Self __tmp = * this;
 _M_node = _Rb_tree_decrement ( _M_node );
 return __tmp;
      }

      bool
      operator == ( const _Self & __x ) const
      { return _M_node == __x . _M_node; }

      bool
      operator != ( const _Self & __x ) const
      { return _M_node != __x . _M_node; }

      _Base_ptr _M_node;
  };
# 222
template < typename _Tp >
    struct _Rb_tree_const_iterator
    {
      typedef _Tp value_type;
      typedef const _Tp & reference;
      typedef const _Tp * pointer;

      typedef _Rb_tree_iterator < _Tp > iterator;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_const_iterator < _Tp > _Self;
      typedef _Rb_tree_node_base :: _Const_Base_ptr _Base_ptr;
      typedef const _Rb_tree_node < _Tp > * _Link_type;

      _Rb_tree_const_iterator ( )
      : _M_node ( ) { }

      explicit
      _Rb_tree_const_iterator ( _Link_type __x )
      : _M_node ( __x ) { }

      _Rb_tree_const_iterator ( const iterator & __it )
      : _M_node ( __it . _M_node ) { }

      reference
      operator * ( ) const
      { return static_cast < _Link_type > ( _M_node ) -> _M_value_field; }

      pointer
      operator -> ( ) const
      { return & static_cast < _Link_type > ( _M_node ) -> _M_value_field; }

      _Self &
      operator ++ ( )
      {
 _M_node = _Rb_tree_increment ( _M_node );
 return * this;
      }

      _Self
      operator ++ ( int )
      {
 _Self __tmp = * this;
 _M_node = _Rb_tree_increment ( _M_node );
 return __tmp;
      }

      _Self &
      operator -- ( )
      {
 _M_node = _Rb_tree_decrement ( _M_node );
 return * this;
      }

      _Self
      operator -- ( int )
      {
 _Self __tmp = * this;
 _M_node = _Rb_tree_decrement ( _M_node );
 return __tmp;
      }

      bool
      operator == ( const _Self & __x ) const
      { return _M_node == __x . _M_node; }

      bool
      operator != ( const _Self & __x ) const
      { return _M_node != __x . _M_node; }

      _Base_ptr _M_node;
    };
# 297
template < typename _Val >
    inline bool
    operator == ( const _Rb_tree_iterator < _Val > & __x,
               const _Rb_tree_const_iterator < _Val > & __y )
    { return __x . _M_node == __y . _M_node; }
# 303
template < typename _Val >
    inline bool
    operator != ( const _Rb_tree_iterator < _Val > & __x,
               const _Rb_tree_const_iterator < _Val > & __y )
    { return __x . _M_node != __y . _M_node; }
# 310
void _Rb_tree_insert_and_rebalance(const bool , _Rb_tree_node_base * , _Rb_tree_node_base * , _Rb_tree_node_base & ); 
# 316
_Rb_tree_node_base *_Rb_tree_rebalance_for_erase(_Rb_tree_node_base *const , _Rb_tree_node_base & ); 
# 320
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc = allocator < _Val > >
    class _Rb_tree
    {
      typedef typename _Alloc :: template rebind < _Rb_tree_node < _Val > > :: other
              _Node_allocator;

    protected :
      typedef _Rb_tree_node_base * _Base_ptr;
      typedef const _Rb_tree_node_base * _Const_Base_ptr;

    public :
      typedef _Key key_type;
      typedef _Val value_type;
      typedef value_type * pointer;
      typedef const value_type * const_pointer;
      typedef value_type & reference;
      typedef const value_type & const_reference;
      typedef _Rb_tree_node < _Val > * _Link_type;
      typedef const _Rb_tree_node < _Val > * _Const_Link_type;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

      _Node_allocator &
      _M_get_Node_allocator ( )
      { return * static_cast < _Node_allocator * > ( & this -> _M_impl ); }

      const _Node_allocator &
      _M_get_Node_allocator ( ) const
      { return * static_cast < const _Node_allocator * > ( & this -> _M_impl ); }

      allocator_type
      get_allocator ( ) const
      { return allocator_type ( _M_get_Node_allocator ( ) ); }

    protected :
      _Link_type
      _M_get_node ( )
      { return _M_impl . _Node_allocator :: allocate ( 1 ); }

      void
      _M_put_node ( _Link_type __p )
      { _M_impl . _Node_allocator :: deallocate ( __p, 1 ); }


      _Link_type
      _M_create_node ( const value_type & __x )
      {
 _Link_type __tmp = _M_get_node ( );
 try
   { get_allocator ( ) . construct ( & __tmp -> _M_value_field, __x ); }
 catch ( ... )
   {
     _M_put_node ( __tmp );
     throw;
   }
 return __tmp;
      }

      void
      _M_destroy_node ( _Link_type __p )
      {
 get_allocator ( ) . destroy ( & __p -> _M_value_field );
 _M_put_node ( __p );
      }

      _Link_type
      _M_clone_node ( _Const_Link_type __x )
      {
 _Link_type __tmp = _M_create_node ( __x -> _M_value_field );
 __tmp -> _M_color = __x -> _M_color;
 __tmp -> _M_left = 0;
 __tmp -> _M_right = 0;
 return __tmp;
      }

    protected :
      template < typename _Key_compare,
        bool _Is_pod_comparator = __is_pod ( _Key_compare ) >
        struct _Rb_tree_impl : public _Node_allocator
        {
   _Key_compare _M_key_compare;
   _Rb_tree_node_base _M_header;
   size_type _M_node_count;

   _Rb_tree_impl ( )
   : _Node_allocator ( ), _M_key_compare ( ), _M_header ( ),
     _M_node_count ( 0 )
   { _M_initialize ( ); }

   _Rb_tree_impl ( const _Key_compare & __comp, const _Node_allocator & __a )
   : _Node_allocator ( __a ), _M_key_compare ( __comp ), _M_header ( ),
     _M_node_count ( 0 )
   { _M_initialize ( ); }

 private :
   void
   _M_initialize ( )
   {
     this -> _M_header . _M_color = _S_red;
     this -> _M_header . _M_parent = 0;
     this -> _M_header . _M_left = & this -> _M_header;
     this -> _M_header . _M_right = & this -> _M_header;
   }
 };

      _Rb_tree_impl < _Compare > _M_impl;

    protected :
      _Base_ptr &
      _M_root ( )
      { return this -> _M_impl . _M_header . _M_parent; }

      _Const_Base_ptr
      _M_root ( ) const
      { return this -> _M_impl . _M_header . _M_parent; }

      _Base_ptr &
      _M_leftmost ( )
      { return this -> _M_impl . _M_header . _M_left; }

      _Const_Base_ptr
      _M_leftmost ( ) const
      { return this -> _M_impl . _M_header . _M_left; }

      _Base_ptr &
      _M_rightmost ( )
      { return this -> _M_impl . _M_header . _M_right; }

      _Const_Base_ptr
      _M_rightmost ( ) const
      { return this -> _M_impl . _M_header . _M_right; }

      _Link_type
      _M_begin ( )
      { return static_cast < _Link_type > ( this -> _M_impl . _M_header . _M_parent ); }

      _Const_Link_type
      _M_begin ( ) const
      {
 return static_cast < _Const_Link_type >
   ( this -> _M_impl . _M_header . _M_parent );
      }

      _Link_type
      _M_end ( )
      { return static_cast < _Link_type > ( & this -> _M_impl . _M_header ); }

      _Const_Link_type
      _M_end ( ) const
      { return static_cast < _Const_Link_type > ( & this -> _M_impl . _M_header ); }

      static const_reference
      _S_value ( _Const_Link_type __x )
      { return __x -> _M_value_field; }

      static const _Key &
      _S_key ( _Const_Link_type __x )
      { return _KeyOfValue ( ) ( _S_value ( __x ) ); }

      static _Link_type
      _S_left ( _Base_ptr __x )
      { return static_cast < _Link_type > ( __x -> _M_left ); }

      static _Const_Link_type
      _S_left ( _Const_Base_ptr __x )
      { return static_cast < _Const_Link_type > ( __x -> _M_left ); }

      static _Link_type
      _S_right ( _Base_ptr __x )
      { return static_cast < _Link_type > ( __x -> _M_right ); }

      static _Const_Link_type
      _S_right ( _Const_Base_ptr __x )
      { return static_cast < _Const_Link_type > ( __x -> _M_right ); }

      static const_reference
      _S_value ( _Const_Base_ptr __x )
      { return static_cast < _Const_Link_type > ( __x ) -> _M_value_field; }

      static const _Key &
      _S_key ( _Const_Base_ptr __x )
      { return _KeyOfValue ( ) ( _S_value ( __x ) ); }

      static _Base_ptr
      _S_minimum ( _Base_ptr __x )
      { return _Rb_tree_node_base :: _S_minimum ( __x ); }

      static _Const_Base_ptr
      _S_minimum ( _Const_Base_ptr __x )
      { return _Rb_tree_node_base :: _S_minimum ( __x ); }

      static _Base_ptr
      _S_maximum ( _Base_ptr __x )
      { return _Rb_tree_node_base :: _S_maximum ( __x ); }

      static _Const_Base_ptr
      _S_maximum ( _Const_Base_ptr __x )
      { return _Rb_tree_node_base :: _S_maximum ( __x ); }

    public :
      typedef _Rb_tree_iterator < value_type > iterator;
      typedef _Rb_tree_const_iterator < value_type > const_iterator;

      typedef std :: reverse_iterator < iterator > reverse_iterator;
      typedef std :: reverse_iterator < const_iterator > const_reverse_iterator;

    private :
      iterator
      _M_insert_ ( _Const_Base_ptr __x, _Const_Base_ptr __y,
   const value_type & __v );



      iterator
      _M_insert_lower ( _Base_ptr __x, _Base_ptr __y, const value_type & __v );

      iterator
      _M_insert_equal_lower ( const value_type & __x );

      _Link_type
      _M_copy ( _Const_Link_type __x, _Link_type __p );

      void
      _M_erase ( _Link_type __x );

      iterator
      _M_lower_bound ( _Link_type __x, _Link_type __y,
       const _Key & __k );

      const_iterator
      _M_lower_bound ( _Const_Link_type __x, _Const_Link_type __y,
       const _Key & __k ) const;

      iterator
      _M_upper_bound ( _Link_type __x, _Link_type __y,
       const _Key & __k );

      const_iterator
      _M_upper_bound ( _Const_Link_type __x, _Const_Link_type __y,
       const _Key & __k ) const;

    public :

      _Rb_tree ( ) { }

      _Rb_tree ( const _Compare & __comp,
        const allocator_type & __a = allocator_type ( ) )
      : _M_impl ( __comp, __a ) { }

      _Rb_tree ( const _Rb_tree & __x )
      : _M_impl ( __x . _M_impl . _M_key_compare, __x . _M_get_Node_allocator ( ) )
      {
 if ( __x . _M_root ( ) != 0 )
   {
     _M_root ( ) = _M_copy ( __x . _M_begin ( ), _M_end ( ) );
     _M_leftmost ( ) = _S_minimum ( _M_root ( ) );
     _M_rightmost ( ) = _S_maximum ( _M_root ( ) );
     _M_impl . _M_node_count = __x . _M_impl . _M_node_count;
   }
      }





      ~ _Rb_tree ( )
      { _M_erase ( _M_begin ( ) ); }

      _Rb_tree &
      operator = ( const _Rb_tree & __x );


      _Compare
      key_comp ( ) const
      { return _M_impl . _M_key_compare; }

      iterator
      begin ( )
      {
 return iterator ( static_cast < _Link_type >
   ( this -> _M_impl . _M_header . _M_left ) );
      }

      const_iterator
      begin ( ) const
      {
 return const_iterator ( static_cast < _Const_Link_type >
         ( this -> _M_impl . _M_header . _M_left ) );
      }

      iterator
      end ( )
      { return iterator ( static_cast < _Link_type > ( & this -> _M_impl . _M_header ) ); }

      const_iterator
      end ( ) const
      {
 return const_iterator ( static_cast < _Const_Link_type >
         ( & this -> _M_impl . _M_header ) );
      }

      reverse_iterator
      rbegin ( )
      { return reverse_iterator ( end ( ) ); }

      const_reverse_iterator
      rbegin ( ) const
      { return const_reverse_iterator ( end ( ) ); }

      reverse_iterator
      rend ( )
      { return reverse_iterator ( begin ( ) ); }

      const_reverse_iterator
      rend ( ) const
      { return const_reverse_iterator ( begin ( ) ); }

      bool
      empty ( ) const
      { return _M_impl . _M_node_count == 0; }

      size_type
      size ( ) const
      { return _M_impl . _M_node_count; }

      size_type
      max_size ( ) const
      { return _M_get_Node_allocator ( ) . max_size ( ); }

      void



      swap ( _Rb_tree & __t );



      pair < iterator, bool >
      _M_insert_unique ( const value_type & __x );

      iterator
      _M_insert_equal ( const value_type & __x );

      iterator
      _M_insert_unique_ ( const_iterator __position, const value_type & __x );

      iterator
      _M_insert_equal_ ( const_iterator __position, const value_type & __x );

      template < typename _InputIterator >
        void
        _M_insert_unique ( _InputIterator __first, _InputIterator __last );

      template < typename _InputIterator >
        void
        _M_insert_equal ( _InputIterator __first, _InputIterator __last );

      void
      erase ( iterator __position );

      void
      erase ( const_iterator __position );

      size_type
      erase ( const key_type & __x );

      void
      erase ( iterator __first, iterator __last );

      void
      erase ( const_iterator __first, const_iterator __last );

      void
      erase ( const key_type * __first, const key_type * __last );

      void
      clear ( )
      {
        _M_erase ( _M_begin ( ) );
        _M_leftmost ( ) = _M_end ( );
        _M_root ( ) = 0;
        _M_rightmost ( ) = _M_end ( );
        _M_impl . _M_node_count = 0;
      }


      iterator
      find ( const key_type & __k );

      const_iterator
      find ( const key_type & __k ) const;

      size_type
      count ( const key_type & __k ) const;

      iterator
      lower_bound ( const key_type & __k )
      { return _M_lower_bound ( _M_begin ( ), _M_end ( ), __k ); }

      const_iterator
      lower_bound ( const key_type & __k ) const
      { return _M_lower_bound ( _M_begin ( ), _M_end ( ), __k ); }

      iterator
      upper_bound ( const key_type & __k )
      { return _M_upper_bound ( _M_begin ( ), _M_end ( ), __k ); }

      const_iterator
      upper_bound ( const key_type & __k ) const
      { return _M_upper_bound ( _M_begin ( ), _M_end ( ), __k ); }

      pair < iterator, iterator >
      equal_range ( const key_type & __k );

      pair < const_iterator, const_iterator >
      equal_range ( const key_type & __k ) const;


      bool
      __rb_verify ( ) const;
    };
# 770 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h" 3
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    inline bool
    operator == ( const _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > & __x,
        const _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > & __y )
    {
      return __x . size ( ) == __y . size ( )
      && std :: equal ( __x . begin ( ), __x . end ( ), __y . begin ( ) );
    }
# 780
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    inline bool
    operator < ( const _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > & __x,
       const _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > & __y )
    {
      return std :: lexicographical_compare ( __x . begin ( ), __x . end ( ),
       __y . begin ( ), __y . end ( ) );
    }
# 790
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    inline bool
    operator != ( const _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > & __x,
        const _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > & __y )
    { return ! ( __x == __y ); }
# 797
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    inline bool
    operator > ( const _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > & __x,
       const _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > & __y )
    { return __y < __x; }
# 804
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    inline bool
    operator <= ( const _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > & __x,
        const _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > & __y )
    { return ! ( __y < __x ); }
# 811
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    inline bool
    operator >= ( const _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > & __x,
        const _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > & __y )
    { return ! ( __x < __y ); }
# 818
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    inline void
    swap ( _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > & __x,
  _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > & __y )
    { __x . swap ( __y ); }
# 849 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h" 3
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > &
    _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > ::
    operator = ( const _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > & __x )
    {
      if ( this != & __x )
 {

   clear ( );
   _M_impl . _M_key_compare = __x . _M_impl . _M_key_compare;
   if ( __x . _M_root ( ) != 0 )
     {
       _M_root ( ) = _M_copy ( __x . _M_begin ( ), _M_end ( ) );
       _M_leftmost ( ) = _S_minimum ( _M_root ( ) );
       _M_rightmost ( ) = _S_maximum ( _M_root ( ) );
       _M_impl . _M_node_count = __x . _M_impl . _M_node_count;
     }
 }
      return * this;
    }
# 871
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    typename _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > :: iterator
    _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > ::
    _M_insert_ ( _Const_Base_ptr __x, _Const_Base_ptr __p, const _Val & __v )
    {
      bool __insert_left = ( __x != 0 || __p == _M_end ( )
       || _M_impl . _M_key_compare ( _KeyOfValue ( ) ( __v ),
            _S_key ( __p ) ) );

      _Link_type __z = _M_create_node ( __v );

      _Rb_tree_insert_and_rebalance ( __insert_left, __z,
        const_cast < _Base_ptr > ( __p ),
        this -> _M_impl . _M_header );
      ++ _M_impl . _M_node_count;
      return iterator ( __z );
    }
# 890
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    typename _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > :: iterator
    _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > ::
    _M_insert_lower ( _Base_ptr __x, _Base_ptr __p, const _Val & __v )
    {
      bool __insert_left = ( __x != 0 || __p == _M_end ( )
       || ! _M_impl . _M_key_compare ( _S_key ( __p ),
             _KeyOfValue ( ) ( __v ) ) );

      _Link_type __z = _M_create_node ( __v );

      _Rb_tree_insert_and_rebalance ( __insert_left, __z, __p,
        this -> _M_impl . _M_header );
      ++ _M_impl . _M_node_count;
      return iterator ( __z );
    }
# 908
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    typename _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > :: iterator
    _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > ::
    _M_insert_equal_lower ( const _Val & __v )
    {
      _Link_type __x = _M_begin ( );
      _Link_type __y = _M_end ( );
      while ( __x != 0 )
 {
   __y = __x;
   __x = ! _M_impl . _M_key_compare ( _S_key ( __x ), _KeyOfValue ( ) ( __v ) ) ?
         _S_left ( __x ) : _S_right ( __x );
 }
      return _M_insert_lower ( __x, __y, __v );
    }
# 925
template < typename _Key, typename _Val, typename _KoV,
           typename _Compare, typename _Alloc >
    typename _Rb_tree < _Key, _Val, _KoV, _Compare, _Alloc > :: _Link_type
    _Rb_tree < _Key, _Val, _KoV, _Compare, _Alloc > ::
    _M_copy ( _Const_Link_type __x, _Link_type __p )
    {

      _Link_type __top = _M_clone_node ( __x );
      __top -> _M_parent = __p;

      try
 {
   if ( __x -> _M_right )
     __top -> _M_right = _M_copy ( _S_right ( __x ), __top );
   __p = __top;
   __x = _S_left ( __x );

   while ( __x != 0 )
     {
       _Link_type __y = _M_clone_node ( __x );
       __p -> _M_left = __y;
       __y -> _M_parent = __p;
       if ( __x -> _M_right )
  __y -> _M_right = _M_copy ( _S_right ( __x ), __y );
       __p = __y;
       __x = _S_left ( __x );
     }
 }
      catch ( ... )
 {
   _M_erase ( __top );
   throw;
 }
      return __top;
    }
# 961
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    void
    _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > ::
    _M_erase ( _Link_type __x )
    {

      while ( __x != 0 )
 {
   _M_erase ( _S_right ( __x ) );
   _Link_type __y = _S_left ( __x );
   _M_destroy_node ( __x );
   __x = __y;
 }
    }
# 977
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    typename _Rb_tree < _Key, _Val, _KeyOfValue,
        _Compare, _Alloc > :: iterator
    _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > ::
    _M_lower_bound ( _Link_type __x, _Link_type __y,
     const _Key & __k )
    {
      while ( __x != 0 )
 if ( ! _M_impl . _M_key_compare ( _S_key ( __x ), __k ) )
   __y = __x, __x = _S_left ( __x );
 else
   __x = _S_right ( __x );
      return iterator ( __y );
    }
# 993
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    typename _Rb_tree < _Key, _Val, _KeyOfValue,
        _Compare, _Alloc > :: const_iterator
    _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > ::
    _M_lower_bound ( _Const_Link_type __x, _Const_Link_type __y,
     const _Key & __k ) const
    {
      while ( __x != 0 )
 if ( ! _M_impl . _M_key_compare ( _S_key ( __x ), __k ) )
   __y = __x, __x = _S_left ( __x );
 else
   __x = _S_right ( __x );
      return const_iterator ( __y );
    }
# 1009
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    typename _Rb_tree < _Key, _Val, _KeyOfValue,
        _Compare, _Alloc > :: iterator
    _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > ::
    _M_upper_bound ( _Link_type __x, _Link_type __y,
     const _Key & __k )
    {
      while ( __x != 0 )
 if ( _M_impl . _M_key_compare ( __k, _S_key ( __x ) ) )
   __y = __x, __x = _S_left ( __x );
 else
   __x = _S_right ( __x );
      return iterator ( __y );
    }
# 1025
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    typename _Rb_tree < _Key, _Val, _KeyOfValue,
        _Compare, _Alloc > :: const_iterator
    _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > ::
    _M_upper_bound ( _Const_Link_type __x, _Const_Link_type __y,
     const _Key & __k ) const
    {
      while ( __x != 0 )
 if ( _M_impl . _M_key_compare ( __k, _S_key ( __x ) ) )
   __y = __x, __x = _S_left ( __x );
 else
   __x = _S_right ( __x );
      return const_iterator ( __y );
    }
# 1041
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    pair < typename _Rb_tree < _Key, _Val, _KeyOfValue,
      _Compare, _Alloc > :: iterator,
  typename _Rb_tree < _Key, _Val, _KeyOfValue,
      _Compare, _Alloc > :: iterator >
    _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > ::
    equal_range ( const _Key & __k )
    {
      _Link_type __x = _M_begin ( );
      _Link_type __y = _M_end ( );
      while ( __x != 0 )
 {
   if ( _M_impl . _M_key_compare ( _S_key ( __x ), __k ) )
     __x = _S_right ( __x );
   else if ( _M_impl . _M_key_compare ( __k, _S_key ( __x ) ) )
     __y = __x, __x = _S_left ( __x );
   else
     {
       _Link_type __xu ( __x ), __yu ( __y );
       __y = __x, __x = _S_left ( __x );
       __xu = _S_right ( __xu );
       return pair < iterator,
            iterator > ( _M_lower_bound ( __x, __y, __k ),
        _M_upper_bound ( __xu, __yu, __k ) );
     }
 }
      return pair < iterator, iterator > ( iterator ( __y ),
          iterator ( __y ) );
    }
# 1072
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    pair < typename _Rb_tree < _Key, _Val, _KeyOfValue,
      _Compare, _Alloc > :: const_iterator,
  typename _Rb_tree < _Key, _Val, _KeyOfValue,
      _Compare, _Alloc > :: const_iterator >
    _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > ::
    equal_range ( const _Key & __k ) const
    {
      _Const_Link_type __x = _M_begin ( );
      _Const_Link_type __y = _M_end ( );
      while ( __x != 0 )
 {
   if ( _M_impl . _M_key_compare ( _S_key ( __x ), __k ) )
     __x = _S_right ( __x );
   else if ( _M_impl . _M_key_compare ( __k, _S_key ( __x ) ) )
     __y = __x, __x = _S_left ( __x );
   else
     {
       _Const_Link_type __xu ( __x ), __yu ( __y );
       __y = __x, __x = _S_left ( __x );
       __xu = _S_right ( __xu );
       return pair < const_iterator,
            const_iterator > ( _M_lower_bound ( __x, __y, __k ),
       _M_upper_bound ( __xu, __yu, __k ) );
     }
 }
      return pair < const_iterator, const_iterator > ( const_iterator ( __y ),
        const_iterator ( __y ) );
    }
# 1103
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    void
    _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > ::



    swap ( _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > & __t )

    {
      if ( _M_root ( ) == 0 )
 {
   if ( __t . _M_root ( ) != 0 )
     {
       _M_root ( ) = __t . _M_root ( );
       _M_leftmost ( ) = __t . _M_leftmost ( );
       _M_rightmost ( ) = __t . _M_rightmost ( );
       _M_root ( ) -> _M_parent = _M_end ( );

       __t . _M_root ( ) = 0;
       __t . _M_leftmost ( ) = __t . _M_end ( );
       __t . _M_rightmost ( ) = __t . _M_end ( );
     }
 }
      else if ( __t . _M_root ( ) == 0 )
 {
   __t . _M_root ( ) = _M_root ( );
   __t . _M_leftmost ( ) = _M_leftmost ( );
   __t . _M_rightmost ( ) = _M_rightmost ( );
   __t . _M_root ( ) -> _M_parent = __t . _M_end ( );

   _M_root ( ) = 0;
   _M_leftmost ( ) = _M_end ( );
   _M_rightmost ( ) = _M_end ( );
 }
      else
 {
   std :: swap ( _M_root ( ), __t . _M_root ( ) );
   std :: swap ( _M_leftmost ( ), __t . _M_leftmost ( ) );
   std :: swap ( _M_rightmost ( ), __t . _M_rightmost ( ) );

   _M_root ( ) -> _M_parent = _M_end ( );
   __t . _M_root ( ) -> _M_parent = __t . _M_end ( );
 }

      std :: swap ( this -> _M_impl . _M_node_count, __t . _M_impl . _M_node_count );
      std :: swap ( this -> _M_impl . _M_key_compare, __t . _M_impl . _M_key_compare );



      std :: __alloc_swap < _Node_allocator > ::
 _S_do_it ( _M_get_Node_allocator ( ), __t . _M_get_Node_allocator ( ) );
    }
# 1157
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    pair < typename _Rb_tree < _Key, _Val, _KeyOfValue,
      _Compare, _Alloc > :: iterator, bool >
    _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > ::
    _M_insert_unique ( const _Val & __v )
    {
      _Link_type __x = _M_begin ( );
      _Link_type __y = _M_end ( );
      bool __comp = true;
      while ( __x != 0 )
 {
   __y = __x;
   __comp = _M_impl . _M_key_compare ( _KeyOfValue ( ) ( __v ), _S_key ( __x ) );
   __x = __comp ? _S_left ( __x ) : _S_right ( __x );
 }
      iterator __j = iterator ( __y );
      if ( __comp )
 {
   if ( __j == begin ( ) )
     return pair < iterator, bool > ( _M_insert_ ( __x, __y, __v ), true );
   else
     -- __j;
 }
      if ( _M_impl . _M_key_compare ( _S_key ( __j . _M_node ), _KeyOfValue ( ) ( __v ) ) )
 return pair < iterator, bool > ( _M_insert_ ( __x, __y, __v ), true );
      return pair < iterator, bool > ( __j, false );
    }
# 1186
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    typename _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > :: iterator
    _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > ::
    _M_insert_equal ( const _Val & __v )
    {
      _Link_type __x = _M_begin ( );
      _Link_type __y = _M_end ( );
      while ( __x != 0 )
 {
   __y = __x;
   __x = _M_impl . _M_key_compare ( _KeyOfValue ( ) ( __v ), _S_key ( __x ) ) ?
         _S_left ( __x ) : _S_right ( __x );
 }
      return _M_insert_ ( __x, __y, __v );
    }
# 1203
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    typename _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > :: iterator
    _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > ::
    _M_insert_unique_ ( const_iterator __position, const _Val & __v )
    {

      if ( __position . _M_node == _M_end ( ) )
 {
   if ( size ( ) > 0
       && _M_impl . _M_key_compare ( _S_key ( _M_rightmost ( ) ),
     _KeyOfValue ( ) ( __v ) ) )
     return _M_insert_ ( 0, _M_rightmost ( ), __v );
   else
     return _M_insert_unique ( __v ) . first;
 }
      else if ( _M_impl . _M_key_compare ( _KeyOfValue ( ) ( __v ),
          _S_key ( __position . _M_node ) ) )
 {

   const_iterator __before = __position;
   if ( __position . _M_node == _M_leftmost ( ) )
     return _M_insert_ ( _M_leftmost ( ), _M_leftmost ( ), __v );
   else if ( _M_impl . _M_key_compare ( _S_key ( ( -- __before ) . _M_node ),
       _KeyOfValue ( ) ( __v ) ) )
     {
       if ( _S_right ( __before . _M_node ) == 0 )
  return _M_insert_ ( 0, __before . _M_node, __v );
       else
  return _M_insert_ ( __position . _M_node,
      __position . _M_node, __v );
     }
   else
     return _M_insert_unique ( __v ) . first;
 }
      else if ( _M_impl . _M_key_compare ( _S_key ( __position . _M_node ),
          _KeyOfValue ( ) ( __v ) ) )
 {

   const_iterator __after = __position;
   if ( __position . _M_node == _M_rightmost ( ) )
     return _M_insert_ ( 0, _M_rightmost ( ), __v );
   else if ( _M_impl . _M_key_compare ( _KeyOfValue ( ) ( __v ),
       _S_key ( ( ++ __after ) . _M_node ) ) )
     {
       if ( _S_right ( __position . _M_node ) == 0 )
  return _M_insert_ ( 0, __position . _M_node, __v );
       else
  return _M_insert_ ( __after . _M_node, __after . _M_node, __v );
     }
   else
     return _M_insert_unique ( __v ) . first;
 }
      else

 return iterator ( static_cast < _Link_type >
   ( const_cast < _Base_ptr > ( __position . _M_node ) ) );
    }
# 1262
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    typename _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > :: iterator
    _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > ::
    _M_insert_equal_ ( const_iterator __position, const _Val & __v )
    {

      if ( __position . _M_node == _M_end ( ) )
 {
   if ( size ( ) > 0
       && ! _M_impl . _M_key_compare ( _KeyOfValue ( ) ( __v ),
      _S_key ( _M_rightmost ( ) ) ) )
     return _M_insert_ ( 0, _M_rightmost ( ), __v );
   else
     return _M_insert_equal ( __v );
 }
      else if ( ! _M_impl . _M_key_compare ( _S_key ( __position . _M_node ),
           _KeyOfValue ( ) ( __v ) ) )
 {

   const_iterator __before = __position;
   if ( __position . _M_node == _M_leftmost ( ) )
     return _M_insert_ ( _M_leftmost ( ), _M_leftmost ( ), __v );
   else if ( ! _M_impl . _M_key_compare ( _KeyOfValue ( ) ( __v ),
        _S_key ( ( -- __before ) . _M_node ) ) )
     {
       if ( _S_right ( __before . _M_node ) == 0 )
  return _M_insert_ ( 0, __before . _M_node, __v );
       else
  return _M_insert_ ( __position . _M_node,
      __position . _M_node, __v );
     }
   else
     return _M_insert_equal ( __v );
 }
      else
 {

   const_iterator __after = __position;
   if ( __position . _M_node == _M_rightmost ( ) )
     return _M_insert_ ( 0, _M_rightmost ( ), __v );
   else if ( ! _M_impl . _M_key_compare ( _S_key ( ( ++ __after ) . _M_node ),
        _KeyOfValue ( ) ( __v ) ) )
     {
       if ( _S_right ( __position . _M_node ) == 0 )
  return _M_insert_ ( 0, __position . _M_node, __v );
       else
  return _M_insert_ ( __after . _M_node, __after . _M_node, __v );
     }
   else
     return _M_insert_equal_lower ( __v );
 }
    }
# 1316
template < typename _Key, typename _Val, typename _KoV,
           typename _Cmp, typename _Alloc >
    template < class _II >
      void
      _Rb_tree < _Key, _Val, _KoV, _Cmp, _Alloc > ::
      _M_insert_unique ( _II __first, _II __last )
      {
 for (; __first != __last; ++ __first )
   _M_insert_unique_ ( end ( ), * __first );
      }
# 1327
template < typename _Key, typename _Val, typename _KoV,
           typename _Cmp, typename _Alloc >
    template < class _II >
      void
      _Rb_tree < _Key, _Val, _KoV, _Cmp, _Alloc > ::
      _M_insert_equal ( _II __first, _II __last )
      {
 for (; __first != __last; ++ __first )
   _M_insert_equal_ ( end ( ), * __first );
      }
# 1338
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    inline void
    _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > ::
    erase ( iterator __position )
    {
      _Link_type __y =
 static_cast < _Link_type > ( _Rb_tree_rebalance_for_erase
    ( __position . _M_node,
     this -> _M_impl . _M_header ) );
      _M_destroy_node ( __y );
      -- _M_impl . _M_node_count;
    }
# 1352
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    inline void
    _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > ::
    erase ( const_iterator __position )
    {
      _Link_type __y =
 static_cast < _Link_type > ( _Rb_tree_rebalance_for_erase
    ( const_cast < _Base_ptr > ( __position . _M_node ),
     this -> _M_impl . _M_header ) );
      _M_destroy_node ( __y );
      -- _M_impl . _M_node_count;
    }
# 1366
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    typename _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > :: size_type
    _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > ::
    erase ( const _Key & __x )
    {
      pair < iterator, iterator > __p = equal_range ( __x );
      const size_type __old_size = size ( );
      erase ( __p . first, __p . second );
      return __old_size - size ( );
    }
# 1378
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    void
    _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > ::
    erase ( iterator __first, iterator __last )
    {
      if ( __first == begin ( ) && __last == end ( ) )
 clear ( );
      else
 while ( __first != __last )
   erase ( __first ++ );
    }
# 1391
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    void
    _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > ::
    erase ( const_iterator __first, const_iterator __last )
    {
      if ( __first == begin ( ) && __last == end ( ) )
 clear ( );
      else
 while ( __first != __last )
   erase ( __first ++ );
    }
# 1404
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    void
    _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > ::
    erase ( const _Key * __first, const _Key * __last )
    {
      while ( __first != __last )
 erase ( * __first ++ );
    }
# 1414
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    typename _Rb_tree < _Key, _Val, _KeyOfValue,
        _Compare, _Alloc > :: iterator
    _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > ::
    find ( const _Key & __k )
    {
      iterator __j = _M_lower_bound ( _M_begin ( ), _M_end ( ), __k );
      return ( __j == end ( )
       || _M_impl . _M_key_compare ( __k,
     _S_key ( __j . _M_node ) ) ) ? end ( ) : __j;
    }
# 1427
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    typename _Rb_tree < _Key, _Val, _KeyOfValue,
        _Compare, _Alloc > :: const_iterator
    _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > ::
    find ( const _Key & __k ) const
    {
      const_iterator __j = _M_lower_bound ( _M_begin ( ), _M_end ( ), __k );
      return ( __j == end ( )
       || _M_impl . _M_key_compare ( __k,
     _S_key ( __j . _M_node ) ) ) ? end ( ) : __j;
    }
# 1440
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    typename _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > :: size_type
    _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > ::
    count ( const _Key & __k ) const
    {
      pair < const_iterator, const_iterator > __p = equal_range ( __k );
      const size_type __n = std :: distance ( __p . first, __p . second );
      return __n;
    }
# 1452
unsigned _Rb_tree_black_count(const _Rb_tree_node_base * , const _Rb_tree_node_base * ); 
# 1455
template < typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc >
    bool
    _Rb_tree < _Key, _Val, _KeyOfValue, _Compare, _Alloc > :: __rb_verify ( ) const
    {
      if ( _M_impl . _M_node_count == 0 || begin ( ) == end ( ) )
 return _M_impl . _M_node_count == 0 && begin ( ) == end ( )
        && this -> _M_impl . _M_header . _M_left == _M_end ( )
        && this -> _M_impl . _M_header . _M_right == _M_end ( );

      unsigned int __len = _Rb_tree_black_count ( _M_leftmost ( ), _M_root ( ) );
      for ( const_iterator __it = begin ( ); __it != end ( ); ++ __it )
 {
   _Const_Link_type __x = static_cast < _Const_Link_type > ( __it . _M_node );
   _Const_Link_type __L = _S_left ( __x );
   _Const_Link_type __R = _S_right ( __x );

   if ( __x -> _M_color == _S_red )
     if ( ( __L && __L -> _M_color == _S_red )
  || ( __R && __R -> _M_color == _S_red ) )
       return false;

   if ( __L && _M_impl . _M_key_compare ( _S_key ( __x ), _S_key ( __L ) ) )
     return false;
   if ( __R && _M_impl . _M_key_compare ( _S_key ( __R ), _S_key ( __x ) ) )
     return false;

   if ( ! __L && ! __R && _Rb_tree_black_count ( __x, _M_root ( ) ) != __len )
     return false;
 }

      if ( _M_leftmost ( ) != _Rb_tree_node_base :: _S_minimum ( _M_root ( ) ) )
 return false;
      if ( _M_rightmost ( ) != _Rb_tree_node_base :: _S_maximum ( _M_root ( ) ) )
 return false;
      return true;
    }
# 1493
}
# 64 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 84 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h" 3
template < typename _Key, typename _Tp, typename _Compare = std :: less < _Key >,
            typename _Alloc = std :: allocator < std :: pair < const _Key, _Tp > > >
    class map
    {
    public :
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std :: pair < const _Key, _Tp > value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private :

      typedef typename _Alloc :: value_type _Alloc_value_type;





    public :
      class value_compare
      : public std :: binary_function < value_type, value_type, bool >
      {
 friend class map < _Key, _Tp, _Compare, _Alloc >;
      protected :
 _Compare comp;

 value_compare ( _Compare __c )
 : comp ( __c ) { }

      public :
 bool operator ( ) ( const value_type & __x, const value_type & __y ) const
 { return comp ( __x . first, __y . first ); }
      };

    private :

      typedef typename _Alloc :: template rebind < value_type > :: other
        _Pair_alloc_type;

      typedef _Rb_tree < key_type, value_type, _Select1st < value_type >,
         key_compare, _Pair_alloc_type > _Rep_type;


      _Rep_type _M_t;

    public :


      typedef typename _Pair_alloc_type :: pointer pointer;
      typedef typename _Pair_alloc_type :: const_pointer const_pointer;
      typedef typename _Pair_alloc_type :: reference reference;
      typedef typename _Pair_alloc_type :: const_reference const_reference;
      typedef typename _Rep_type :: iterator iterator;
      typedef typename _Rep_type :: const_iterator const_iterator;
      typedef typename _Rep_type :: size_type size_type;
      typedef typename _Rep_type :: difference_type difference_type;
      typedef typename _Rep_type :: reverse_iterator reverse_iterator;
      typedef typename _Rep_type :: const_reverse_iterator const_reverse_iterator;







      map ( )
      : _M_t ( ) { }






      explicit
      map ( const _Compare & __comp,
   const allocator_type & __a = allocator_type ( ) )
      : _M_t ( __comp, __a ) { }

      map ( const map & __x )
      : _M_t ( __x . _M_t ) { }

      template < typename _InputIterator >
        map ( _InputIterator __first, _InputIterator __last )
 : _M_t ( )
        { _M_t . _M_insert_unique ( __first, __last ); }

      template < typename _InputIterator >
        map ( _InputIterator __first, _InputIterator __last,
     const _Compare & __comp,
     const allocator_type & __a = allocator_type ( ) )
 : _M_t ( __comp, __a )
        { _M_t . _M_insert_unique ( __first, __last ); }

      map &
      operator = ( const map & __x )
      {
 _M_t = __x . _M_t;
 return * this;
      }

      allocator_type
      get_allocator ( ) const
      { return _M_t . get_allocator ( ); }







      iterator
      begin ( )
      { return _M_t . begin ( ); }






      const_iterator
      begin ( ) const
      { return _M_t . begin ( ); }






      iterator
      end ( )
      { return _M_t . end ( ); }






      const_iterator
      end ( ) const
      { return _M_t . end ( ); }






      reverse_iterator
      rbegin ( )
      { return _M_t . rbegin ( ); }






      const_reverse_iterator
      rbegin ( ) const
      { return _M_t . rbegin ( ); }






      reverse_iterator
      rend ( )
      { return _M_t . rend ( ); }






      const_reverse_iterator
      rend ( ) const
      { return _M_t . rend ( ); }

      bool
      empty ( ) const
      { return _M_t . empty ( ); }


      size_type
      size ( ) const
      { return _M_t . size ( ); }


      size_type
      max_size ( ) const
      { return _M_t . max_size ( ); }

      mapped_type &
      operator [ ] ( const key_type & __k )
      {



 iterator __i = lower_bound ( __k );

 if ( __i == end ( ) || key_comp ( ) ( __k, ( * __i ) . first ) )
          __i = insert ( __i, value_type ( __k, mapped_type ( ) ) );
 return ( * __i ) . second;
      }

      mapped_type &
      at ( const key_type & __k )
      {
 iterator __i = lower_bound ( __k );
 if ( __i == end ( ) || key_comp ( ) ( __k, ( * __i ) . first ) )
   __throw_out_of_range ( ( "map::at" ) );
 return ( * __i ) . second;
      }

      const mapped_type &
      at ( const key_type & __k ) const
      {
 const_iterator __i = lower_bound ( __k );
 if ( __i == end ( ) || key_comp ( ) ( __k, ( * __i ) . first ) )
   __throw_out_of_range ( ( "map::at" ) );
 return ( * __i ) . second;
      }

      std :: pair < iterator, bool >
      insert ( const value_type & __x )
      { return _M_t . _M_insert_unique ( __x ); }

      iterator
      insert ( iterator __position, const value_type & __x )
      { return _M_t . _M_insert_unique_ ( __position, __x ); }

      template < typename _InputIterator >
        void
        insert ( _InputIterator __first, _InputIterator __last )
        { _M_t . _M_insert_unique ( __first, __last ); }

      void
      erase ( iterator __position )
      { _M_t . erase ( __position ); }

      size_type
      erase ( const key_type & __x )
      { return _M_t . erase ( __x ); }

      void
      erase ( iterator __first, iterator __last )
      { _M_t . erase ( __first, __last ); }

      void



      swap ( map & __x )

      { _M_t . swap ( __x . _M_t ); }







      void
      clear ( )
      { _M_t . clear ( ); }






      key_compare
      key_comp ( ) const
      { return _M_t . key_comp ( ); }





      value_compare
      value_comp ( ) const
      { return value_compare ( _M_t . key_comp ( ) ); }

      iterator
      find ( const key_type & __x )
      { return _M_t . find ( __x ); }

      const_iterator
      find ( const key_type & __x ) const
      { return _M_t . find ( __x ); }

      size_type
      count ( const key_type & __x ) const
      { return _M_t . find ( __x ) == _M_t . end ( ) ? 0 : 1; }

      iterator
      lower_bound ( const key_type & __x )
      { return _M_t . lower_bound ( __x ); }

      const_iterator
      lower_bound ( const key_type & __x ) const
      { return _M_t . lower_bound ( __x ); }







      iterator
      upper_bound ( const key_type & __x )
      { return _M_t . upper_bound ( __x ); }







      const_iterator
      upper_bound ( const key_type & __x ) const
      { return _M_t . upper_bound ( __x ); }

      std :: pair < iterator, iterator >
      equal_range ( const key_type & __x )
      { return _M_t . equal_range ( __x ); }

      std :: pair < const_iterator, const_iterator >
      equal_range ( const key_type & __x ) const
      { return _M_t . equal_range ( __x ); }

      template < typename _K1, typename _T1, typename _C1, typename _A1 >
        friend bool
        operator == ( const map < _K1, _T1, _C1, _A1 > &,
     const map < _K1, _T1, _C1, _A1 > & );

      template < typename _K1, typename _T1, typename _C1, typename _A1 >
        friend bool
        operator < ( const map < _K1, _T1, _C1, _A1 > &,
    const map < _K1, _T1, _C1, _A1 > & );
    };
# 797 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h" 3
template < typename _Key, typename _Tp, typename _Compare, typename _Alloc >
    inline bool
    operator == ( const map < _Key, _Tp, _Compare, _Alloc > & __x,
               const map < _Key, _Tp, _Compare, _Alloc > & __y )
    { return __x . _M_t == __y . _M_t; }
# 814 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h" 3
template < typename _Key, typename _Tp, typename _Compare, typename _Alloc >
    inline bool
    operator < ( const map < _Key, _Tp, _Compare, _Alloc > & __x,
              const map < _Key, _Tp, _Compare, _Alloc > & __y )
    { return __x . _M_t < __y . _M_t; }
# 821
template < typename _Key, typename _Tp, typename _Compare, typename _Alloc >
    inline bool
    operator != ( const map < _Key, _Tp, _Compare, _Alloc > & __x,
               const map < _Key, _Tp, _Compare, _Alloc > & __y )
    { return ! ( __x == __y ); }
# 828
template < typename _Key, typename _Tp, typename _Compare, typename _Alloc >
    inline bool
    operator > ( const map < _Key, _Tp, _Compare, _Alloc > & __x,
              const map < _Key, _Tp, _Compare, _Alloc > & __y )
    { return __y < __x; }
# 835
template < typename _Key, typename _Tp, typename _Compare, typename _Alloc >
    inline bool
    operator <= ( const map < _Key, _Tp, _Compare, _Alloc > & __x,
               const map < _Key, _Tp, _Compare, _Alloc > & __y )
    { return ! ( __y < __x ); }
# 842
template < typename _Key, typename _Tp, typename _Compare, typename _Alloc >
    inline bool
    operator >= ( const map < _Key, _Tp, _Compare, _Alloc > & __x,
               const map < _Key, _Tp, _Compare, _Alloc > & __y )
    { return ! ( __x < __y ); }
# 849
template < typename _Key, typename _Tp, typename _Compare, typename _Alloc >
    inline void
    swap ( map < _Key, _Tp, _Compare, _Alloc > & __x,
  map < _Key, _Tp, _Compare, _Alloc > & __y )
    { __x . swap ( __y ); }
# 869 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h" 3
}
# 63 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_multimap.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 83 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_multimap.h" 3
template < typename _Key, typename _Tp,
     typename _Compare = std :: less < _Key >,
     typename _Alloc = std :: allocator < std :: pair < const _Key, _Tp > > >
    class multimap
    {
    public :
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std :: pair < const _Key, _Tp > value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private :

      typedef typename _Alloc :: value_type _Alloc_value_type;





    public :
      class value_compare
      : public std :: binary_function < value_type, value_type, bool >
      {
 friend class multimap < _Key, _Tp, _Compare, _Alloc >;
      protected :
 _Compare comp;

 value_compare ( _Compare __c )
 : comp ( __c ) { }

      public :
 bool operator ( ) ( const value_type & __x, const value_type & __y ) const
 { return comp ( __x . first, __y . first ); }
      };

    private :

      typedef typename _Alloc :: template rebind < value_type > :: other
        _Pair_alloc_type;

      typedef _Rb_tree < key_type, value_type, _Select1st < value_type >,
         key_compare, _Pair_alloc_type > _Rep_type;

      _Rep_type _M_t;

    public :


      typedef typename _Pair_alloc_type :: pointer pointer;
      typedef typename _Pair_alloc_type :: const_pointer const_pointer;
      typedef typename _Pair_alloc_type :: reference reference;
      typedef typename _Pair_alloc_type :: const_reference const_reference;
      typedef typename _Rep_type :: iterator iterator;
      typedef typename _Rep_type :: const_iterator const_iterator;
      typedef typename _Rep_type :: size_type size_type;
      typedef typename _Rep_type :: difference_type difference_type;
      typedef typename _Rep_type :: reverse_iterator reverse_iterator;
      typedef typename _Rep_type :: const_reverse_iterator const_reverse_iterator;






      multimap ( )
      : _M_t ( ) { }






      explicit
      multimap ( const _Compare & __comp,
        const allocator_type & __a = allocator_type ( ) )
      : _M_t ( __comp, __a ) { }

      multimap ( const multimap & __x )
      : _M_t ( __x . _M_t ) { }

      template < typename _InputIterator >
        multimap ( _InputIterator __first, _InputIterator __last )
 : _M_t ( )
        { _M_t . _M_insert_equal ( __first, __last ); }

      template < typename _InputIterator >
        multimap ( _InputIterator __first, _InputIterator __last,
   const _Compare & __comp,
   const allocator_type & __a = allocator_type ( ) )
        : _M_t ( __comp, __a )
        { _M_t . _M_insert_equal ( __first, __last ); }

      multimap &
      operator = ( const multimap & __x )
      {
 _M_t = __x . _M_t;
 return * this;
      }

      allocator_type
      get_allocator ( ) const
      { return _M_t . get_allocator ( ); }







      iterator
      begin ( )
      { return _M_t . begin ( ); }






      const_iterator
      begin ( ) const
      { return _M_t . begin ( ); }






      iterator
      end ( )
      { return _M_t . end ( ); }






      const_iterator
      end ( ) const
      { return _M_t . end ( ); }






      reverse_iterator
      rbegin ( )
      { return _M_t . rbegin ( ); }






      const_reverse_iterator
      rbegin ( ) const
      { return _M_t . rbegin ( ); }






      reverse_iterator
      rend ( )
      { return _M_t . rend ( ); }






      const_reverse_iterator
      rend ( ) const
      { return _M_t . rend ( ); }

      bool
      empty ( ) const
      { return _M_t . empty ( ); }


      size_type
      size ( ) const
      { return _M_t . size ( ); }


      size_type
      max_size ( ) const
      { return _M_t . max_size ( ); }

      iterator
      insert ( const value_type & __x )
      { return _M_t . _M_insert_equal ( __x ); }

      iterator
      insert ( iterator __position, const value_type & __x )
      { return _M_t . _M_insert_equal_ ( __position, __x ); }

      template < typename _InputIterator >
        void
        insert ( _InputIterator __first, _InputIterator __last )
        { _M_t . _M_insert_equal ( __first, __last ); }

      void
      erase ( iterator __position )
      { _M_t . erase ( __position ); }

      size_type
      erase ( const key_type & __x )
      { return _M_t . erase ( __x ); }

      void
      erase ( iterator __first, iterator __last )
      { _M_t . erase ( __first, __last ); }

      void



      swap ( multimap & __x )

      { _M_t . swap ( __x . _M_t ); }







      void
      clear ( )
      { _M_t . clear ( ); }






      key_compare
      key_comp ( ) const
      { return _M_t . key_comp ( ); }





      value_compare
      value_comp ( ) const
      { return value_compare ( _M_t . key_comp ( ) ); }

      iterator
      find ( const key_type & __x )
      { return _M_t . find ( __x ); }

      const_iterator
      find ( const key_type & __x ) const
      { return _M_t . find ( __x ); }






      size_type
      count ( const key_type & __x ) const
      { return _M_t . count ( __x ); }

      iterator
      lower_bound ( const key_type & __x )
      { return _M_t . lower_bound ( __x ); }

      const_iterator
      lower_bound ( const key_type & __x ) const
      { return _M_t . lower_bound ( __x ); }







      iterator
      upper_bound ( const key_type & __x )
      { return _M_t . upper_bound ( __x ); }







      const_iterator
      upper_bound ( const key_type & __x ) const
      { return _M_t . upper_bound ( __x ); }

      std :: pair < iterator, iterator >
      equal_range ( const key_type & __x )
      { return _M_t . equal_range ( __x ); }

      std :: pair < const_iterator, const_iterator >
      equal_range ( const key_type & __x ) const
      { return _M_t . equal_range ( __x ); }

      template < typename _K1, typename _T1, typename _C1, typename _A1 >
        friend bool
        operator == ( const multimap < _K1, _T1, _C1, _A1 > &,
     const multimap < _K1, _T1, _C1, _A1 > & );

      template < typename _K1, typename _T1, typename _C1, typename _A1 >
        friend bool
        operator < ( const multimap < _K1, _T1, _C1, _A1 > &,
    const multimap < _K1, _T1, _C1, _A1 > & );
  };
# 726 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_multimap.h" 3
template < typename _Key, typename _Tp, typename _Compare, typename _Alloc >
    inline bool
    operator == ( const multimap < _Key, _Tp, _Compare, _Alloc > & __x,
               const multimap < _Key, _Tp, _Compare, _Alloc > & __y )
    { return __x . _M_t == __y . _M_t; }
# 743 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_multimap.h" 3
template < typename _Key, typename _Tp, typename _Compare, typename _Alloc >
    inline bool
    operator < ( const multimap < _Key, _Tp, _Compare, _Alloc > & __x,
              const multimap < _Key, _Tp, _Compare, _Alloc > & __y )
    { return __x . _M_t < __y . _M_t; }
# 750
template < typename _Key, typename _Tp, typename _Compare, typename _Alloc >
    inline bool
    operator != ( const multimap < _Key, _Tp, _Compare, _Alloc > & __x,
               const multimap < _Key, _Tp, _Compare, _Alloc > & __y )
    { return ! ( __x == __y ); }
# 757
template < typename _Key, typename _Tp, typename _Compare, typename _Alloc >
    inline bool
    operator > ( const multimap < _Key, _Tp, _Compare, _Alloc > & __x,
              const multimap < _Key, _Tp, _Compare, _Alloc > & __y )
    { return __y < __x; }
# 764
template < typename _Key, typename _Tp, typename _Compare, typename _Alloc >
    inline bool
    operator <= ( const multimap < _Key, _Tp, _Compare, _Alloc > & __x,
               const multimap < _Key, _Tp, _Compare, _Alloc > & __y )
    { return ! ( __y < __x ); }
# 771
template < typename _Key, typename _Tp, typename _Compare, typename _Alloc >
    inline bool
    operator >= ( const multimap < _Key, _Tp, _Compare, _Alloc > & __x,
               const multimap < _Key, _Tp, _Compare, _Alloc > & __y )
    { return ! ( __x < __y ); }
# 778
template < typename _Key, typename _Tp, typename _Compare, typename _Alloc >
    inline void
    swap ( multimap < _Key, _Tp, _Compare, _Alloc > & __x,
         multimap < _Key, _Tp, _Compare, _Alloc > & __y )
    { __x . swap ( __y ); }
# 798 "/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_multimap.h" 3
}
# 34 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//amoebaGpuTypes.h"
typedef std::map< int, float>  MapIntFloat; 
# 35
typedef std::map< int, float> ::const_iterator MapIntFloatCI; 
# 37
struct _amoebaGpuContext { 
# 39
_gpuContext *gpuContext; 
# 40
cudaAmoebaGmxSimulation amoebaSim; 
# 42
FILE *log; 
# 44
CUDAStream< int4>  *psAmoebaBondID; 
# 45
CUDAStream< float2>  *psAmoebaBondParameter; 
# 47
CUDAStream< int4>  *psAmoebaUreyBradleyID; 
# 48
CUDAStream< float2>  *psAmoebaUreyBradleyParameter; 
# 50
CUDAStream< int4>  *psAmoebaAngleID1; 
# 51
CUDAStream< int2>  *psAmoebaAngleID2; 
# 52
CUDAStream< float2>  *psAmoebaAngleParameter; 
# 54
CUDAStream< int4>  *psAmoebaInPlaneAngleID1; 
# 55
CUDAStream< int4>  *psAmoebaInPlaneAngleID2; 
# 56
CUDAStream< float2>  *psAmoebaInPlaneAngleParameter; 
# 58
CUDAStream< int4>  *psAmoebaTorsionID1; 
# 59
CUDAStream< int4>  *psAmoebaTorsionID2; 
# 60
CUDAStream< float4>  *psAmoebaTorsionParameter1; 
# 61
CUDAStream< float2>  *psAmoebaTorsionParameter2; 
# 63
CUDAStream< int4>  *psAmoebaPiTorsionID1; 
# 64
CUDAStream< int4>  *psAmoebaPiTorsionID2; 
# 65
CUDAStream< int4>  *psAmoebaPiTorsionID3; 
# 66
CUDAStream< float>  *psAmoebaPiTorsionParameter; 
# 68
CUDAStream< int4>  *psAmoebaStretchBendID1; 
# 69
CUDAStream< int2>  *psAmoebaStretchBendID2; 
# 70
CUDAStream< float4>  *psAmoebaStretchBendParameter; 
# 72
CUDAStream< int4>  *psAmoebaOutOfPlaneBendID1; 
# 73
CUDAStream< int4>  *psAmoebaOutOfPlaneBendID2; 
# 74
CUDAStream< float>  *psAmoebaOutOfPlaneBendParameter; 
# 76
CUDAStream< int4>  *psAmoebaTorsionTorsionID1; 
# 77
CUDAStream< int4>  *psAmoebaTorsionTorsionID2; 
# 78
CUDAStream< int4>  *psAmoebaTorsionTorsionID3; 
# 79
CUDAStream< float4>  *psAmoebaTorsionTorsionGrids; 
# 81
unsigned workUnits; 
# 85
CUDAStream< float>  *psWorkArray_3_1; 
# 86
CUDAStream< float>  *psWorkArray_3_2; 
# 87
CUDAStream< float>  *psWorkArray_3_3; 
# 88
CUDAStream< float>  *psWorkArray_3_4; 
# 90
CUDAStream< float>  *psWorkArray_1_1; 
# 91
CUDAStream< float>  *psWorkArray_1_2; 
# 93
CUDAStream< int>  *psScalingIndicesIndex; 
# 94
CUDAStream< int>  *ps_D_ScaleIndices; 
# 95
CUDAStream< int2>  *ps_P_ScaleIndices; 
# 96
CUDAStream< int2>  *ps_M_ScaleIndices; 
# 98
int maxCovalentDegreeSz; 
# 99
float solventDielectric; 
# 103
CUDAStream< int4>  *psMultipoleParticlesIdsAndAxisType; 
# 107
int torqueMapForce4Delete; 
# 108
CUDAStream< int4>  *psMultipoleParticlesTorqueBufferIndices; 
# 109
CUDAStream< float4>  *psTorqueMapForce4; 
# 111
CUDAStream< float>  *psMolecularDipole; 
# 112
CUDAStream< float>  *psMolecularQuadrupole; 
# 116
CUDAStream< float>  *psLabFrameDipole; 
# 117
CUDAStream< float>  *psLabFrameQuadrupole; 
# 121
CUDAStream< float2>  *psDampingFactorAndThole; 
# 125
std::vector< int>  covalentDegree; 
# 126
std::vector< int>  polarizationDegree; 
# 130
CUDAStream< float>  *psE_Field; 
# 131
CUDAStream< float>  *psE_FieldPolar; 
# 133
int multipoleNonbondedMethod; 
# 134
double cutoffDistance; 
# 138
int mutualInducedIterativeMethod; 
# 139
int mutualInducedMaxIterations; 
# 140
int mutualInducedConverged; 
# 141
int mutualInducedDone; 
# 143
int epsilonThreadsPerBlock; 
# 144
float mutualInducedTargetEpsilon; 
# 145
float mutualInducedCurrentEpsilon; 
# 146
CUDAStream< float>  *psInducedDipole; 
# 147
CUDAStream< float>  *psInducedDipolePolar; 
# 148
CUDAStream< float>  *psPolarizability; 
# 149
CUDAStream< float>  *psCurrentEpsilon; 
# 153
unsigned numberOfSorWorkVectors; 
# 154
CUDAStream< float>  *psWorkVector[4]; 
# 158
CUDAStream< float>  *psTorque; 
# 162
CUDAStream< float>  *psGk_Field; 
# 163
CUDAStream< float>  *psInducedDipoleS; 
# 164
CUDAStream< float>  *psInducedDipolePolarS; 
# 165
CUDAStream< float>  *psBorn; 
# 166
CUDAStream< float>  *psBornPolar; 
# 168
int includeObcCavityTerm; 
# 172
CUDAStream< float2>  *psVdwSigmaEpsilon; 
# 174
CUDAStream< int>  *psAmoebaVdwNonReductionID; 
# 175
CUDAStream< int4>  *psAmoebaVdwReductionID; 
# 176
CUDAStream< float>  *psAmoebaVdwReduction; 
# 177
CUDAStream< float4>  *psAmoebaVdwCoordinates; 
# 179
CUDAStream< unsigned>  *psVdwWorkUnit; 
# 180
CUDAStream< int>  *psVdwExclusionIndicesIndex; 
# 181
CUDAStream< int>  *psVdwExclusionIndices; 
# 183
int vdwSigmaCombiningRule; 
# 184
int vdwEpsilonCombiningRule; 
# 185
std::vector< std::vector< int> >  vdwExclusions; 
# 189
CUDAStream< float2>  *psWcaDispersionRadiusEpsilon; 
# 193
CUDAStream< float4>  *psThetai1; 
# 194
CUDAStream< float4>  *psThetai2; 
# 195
CUDAStream< float4>  *psThetai3; 
# 196
CUDAStream< int4>  *psIgrid; 
# 197
CUDAStream< float>  *psPhi; 
# 198
CUDAStream< float>  *psPhid; 
# 199
CUDAStream< float>  *psPhip; 
# 200
CUDAStream< float>  *psPhidp; 
# 201
}; 
# 203
typedef _amoebaGpuContext *amoebaGpuContext; 
# 208
extern "C" amoebaGpuContext amoebaGpuInit(_gpuContext * ); 
# 211
extern "C" void gpuPrintCudaAmoebaGmxSimulation(amoebaGpuContext , FILE * ); 
# 214
extern "C" void amoebaGpuShutDown(amoebaGpuContext ); 
# 217
extern "C" void amoebaGpuBuildOutputBuffers(amoebaGpuContext , int ); 
# 220
extern "C" int amoebaGpuBuildThreadBlockWorkList(amoebaGpuContext ); 
# 223
extern "C" void amoebaGpuBuildScalingList(amoebaGpuContext ); 
# 226
extern "C" void gpuSetAmoebaBondParameters(amoebaGpuContext , const std::vector< int>  & , const std::vector< int>  & , const std::vector< float>  & , const std::vector< float>  & , float , float ); 
# 230
extern "C" void gpuSetAmoebaUreyBradleyParameters(amoebaGpuContext , const std::vector< int>  & , const std::vector< int>  & , const std::vector< float>  & , const std::vector< float>  & , float , float ); 
# 234
extern "C" void gpuSetAmoebaAngleParameters(amoebaGpuContext , const std::vector< int>  & , const std::vector< int>  & , const std::vector< int>  & , const std::vector< float>  & , const std::vector< float>  & , float , float , float , float ); 
# 239
extern "C" void gpuSetAmoebaInPlaneAngleParameters(amoebaGpuContext , const std::vector< int>  & , const std::vector< int>  & , const std::vector< int>  & , const std::vector< int>  & , const std::vector< float>  & , const std::vector< float>  & , float , float , float , float ); 
# 245
extern "C" void gpuSetAmoebaTorsionParameters(amoebaGpuContext , const std::vector< int>  & , const std::vector< int>  & , const std::vector< int>  & , const std::vector< int>  & , const std::vector< std::vector< float> >  & , const std::vector< std::vector< float> >  & , const std::vector< std::vector< float> >  & ); 
# 252
extern "C" void gpuSetAmoebaPiTorsionParameters(amoebaGpuContext , const std::vector< int>  & , const std::vector< int>  & , const std::vector< int>  & , const std::vector< int>  & , const std::vector< int>  & , const std::vector< int>  & , const std::vector< float>  & ); 
# 258
extern "C" void gpuSetAmoebaStretchBendParameters(amoebaGpuContext , const std::vector< int>  & , const std::vector< int>  & , const std::vector< int>  & , const std::vector< float>  & , const std::vector< float>  & , const std::vector< float>  & , const std::vector< float>  & ); 
# 265
extern "C" void gpuSetAmoebaOutOfPlaneBendParameters(amoebaGpuContext , const std::vector< int>  & , const std::vector< int>  & , const std::vector< int>  & , const std::vector< int>  & , const std::vector< float>  & , float , float , float , float ); 
# 270
extern "C" void gpuSetAmoebaTorsionTorsionParameters(amoebaGpuContext , const std::vector< int>  & , const std::vector< int>  & , const std::vector< int>  & , const std::vector< int>  & , const std::vector< int>  & , const std::vector< int>  & , const std::vector< int>  & ); 
# 274
extern "C" void gpuSetAmoebaTorsionTorsionGrids(amoebaGpuContext , const std::vector< std::vector< std::vector< std::vector< float> > > >  & ); 
# 277
extern "C" void gpuSetAmoebaMultipoleParameters(amoebaGpuContext , const std::vector< float>  & , const std::vector< float>  & , const std::vector< float>  & , const std::vector< int>  & , const std::vector< int>  & , const std::vector< int>  & , const std::vector< int>  & , const std::vector< float>  & , float , const std::vector< float>  & , const std::vector< float>  & , const std::vector< std::vector< std::vector< int> > >  & , const std::vector< int>  & , const std::vector< int>  & , const std::vector< int>  & , int , int , int , float , int , int , float , float ); 
# 287
extern "C" void gpuSetAmoebaObcParameters(amoebaGpuContext , float , float , const std::vector< float>  & , const std::vector< float>  & , const std::vector< float>  & , int , float , float ); 
# 292
extern "C" void gpuSetAmoebaGrycukParameters(amoebaGpuContext , float , float , const std::vector< float>  & , const std::vector< float>  & , const std::vector< float>  & , int , float , float ); 
# 297
extern "C" void gpuSetAmoebaVdwParameters(amoebaGpuContext , const std::vector< int>  & , const std::vector< int>  & , const std::vector< float>  & , const std::vector< float>  & , const std::vector< float>  & , const std::string & , const std::string & , const std::vector< std::vector< int> >  & , int , float ); 
# 307
extern "C" void gpuSetAmoebaPMEParameters(amoebaGpuContext , float , int , int , int ); 
# 310
extern "C" void amoebaGpuBuildVdwExclusionList(amoebaGpuContext ); 
# 313
extern "C" void gpuSetAmoebaWcaDispersionParameters(amoebaGpuContext , const std::vector< float>  & , const std::vector< float>  & , const float , const float , const float , const float , const float , const float , const float , const float ); 
# 321
extern "C" void amoebaGpuSetConstants(amoebaGpuContext , int ); 
# 324
extern "C" void gpuSetAmoebaBondOffsets(amoebaGpuContext ); 
# 327
extern "C" void gpuCopyWorkUnit(amoebaGpuContext ); 
# 35 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//amoebaCudaKernels.h"
typedef std::vector< std::basic_string< char, std::char_traits< char> , std::allocator< char> > >  StringVector; 
# 36
typedef std::vector< std::vector< std::basic_string< char, std::char_traits< char> , std::allocator< char> > > >  StringVectorVector; 
# 42
typedef std::vector< std::vector< double> >  VectorOfDoubleVectors; 
# 46
extern void SetCalculateAmoebaLocalForcesSim(amoebaGpuContext ); 
# 47
extern void GetCalculateAmoebaLocalForcesSim(amoebaGpuContext ); 
# 48
extern void kCalculateAmoebaLocalForces(amoebaGpuContext ); 
# 52
extern void SetCalculateAmoebaMultipoleForcesSim(amoebaGpuContext ); 
# 53
extern void GetCalculateAmoebaMultipoleForcesSim(amoebaGpuContext ); 
# 54
extern void kCalculateAmoebaMultipoleForces(amoebaGpuContext , bool ); 
# 58
extern void SetCalculateAmoebaCudaVdw14_7Sim(amoebaGpuContext ); 
# 59
extern void GetCalculateAmoebaCudaVdw14_7Sim(amoebaGpuContext ); 
# 60
extern void kCalculateAmoebaVdw14_7Forces(amoebaGpuContext , int ); 
# 64
extern void SetCalculateAmoebaCudaWcaDispersionSim(amoebaGpuContext ); 
# 65
extern void GetCalculateAmoebaCudaWcaDispersionSim(amoebaGpuContext ); 
# 66
extern void kCalculateAmoebaWcaDispersionForces(amoebaGpuContext ); 
# 70
extern void SetCalculateAmoebaCudaFixedEFieldSim(amoebaGpuContext ); 
# 71
extern void GetCalculateAmoebaCudaFixedEFieldSim(amoebaGpuContext ); 
# 72
extern void cudaComputeAmoebaFixedEField(amoebaGpuContext ); 
# 75
extern void SetCalculateAmoebaCudaPmeFixedEFieldSim(amoebaGpuContext ); 
# 76
extern void GetCalculateAmoebaCudaPmeFixedEFieldSim(amoebaGpuContext ); 
# 77
extern void cudaComputeAmoebaPmeFixedEField(amoebaGpuContext ); 
# 81
extern void SetCalculateAmoebaCudaFixedEAndGKFieldsSim(amoebaGpuContext ); 
# 82
extern void GetCalculateAmoebaCudaFixedEAndGKFieldsSim(amoebaGpuContext ); 
# 83
extern void cudaComputeAmoebaFixedEAndGkFields(amoebaGpuContext ); 
# 87
extern void SetCalculateAmoebaCudaMutualInducedFieldSim(amoebaGpuContext ); 
# 88
extern void GetCalculateAmoebaCudaMutualInducedFieldSim(amoebaGpuContext ); 
# 89
extern void cudaComputeAmoebaMutualInducedField(amoebaGpuContext ); 
# 91
extern void SetCalculateAmoebaCudaPmeMutualInducedFieldSim(amoebaGpuContext ); 
# 92
extern void GetCalculateAmoebaCudaPmeMutualInducedFieldSim(amoebaGpuContext ); 
# 93
extern void cudaComputeAmoebaPmeMutualInducedField(amoebaGpuContext ); 
# 97
extern void SetCalculateAmoebaCudaMutualInducedAndGkFieldsSim(amoebaGpuContext ); 
# 98
extern void GetCalculateAmoebaCudaMutualInducedAndGkFieldsSim(amoebaGpuContext ); 
# 99
extern void cudaComputeAmoebaMutualInducedAndGkField(amoebaGpuContext ); 
# 101
extern void cudaComputeAmoebaLabFrameMoments(amoebaGpuContext ); 
# 102
extern void cudaWriteFloat4AndFloat1ArraysToFile(int , const std::string & , int , int , CUDAStream< float4>  * , int , CUDAStream< float>  * ); 
# 105
extern void SetCalculateAmoebaElectrostaticSim(amoebaGpuContext ); 
# 106
extern void GetCalculateAmoebaElectrostaticSim(amoebaGpuContext ); 
# 107
extern void cudaComputeAmoebaElectrostatic(amoebaGpuContext , int ); 
# 109
extern void SetCalculateAmoebaPmeDirectElectrostaticSim(amoebaGpuContext ); 
# 110
extern void GetCalculateAmoebaPmeDirectElectrostaticSim(amoebaGpuContext ); 
# 111
extern void cudaComputeAmoebaPmeElectrostatic(amoebaGpuContext ); 
# 113
extern void SetCalculateAmoebaCudaMapTorquesSim(amoebaGpuContext ); 
# 114
extern void GetCalculateAmoebaCudaMapTorquesSim(amoebaGpuContext ); 
# 115
extern void cudaComputeAmoebaMapTorqueAndAddToForce(amoebaGpuContext , CUDAStream< float>  * ); 
# 117
extern void SetCalculateAmoebaKirkwoodSim(amoebaGpuContext ); 
# 118
extern void GetCalculateAmoebaKirkwoodSim(amoebaGpuContext ); 
# 120
extern void kCalculateAmoebaKirkwood(amoebaGpuContext ); 
# 122
extern void SetCalculateAmoebaKirkwoodEDiffSim(amoebaGpuContext ); 
# 123
extern void GetCalculateAmoebaKirkwoodEDiffSim(amoebaGpuContext ); 
# 125
extern void kCalculateAmoebaKirkwoodEDiff(amoebaGpuContext ); 
# 130
extern void kCalculateAmoebaGrycukBornRadii(amoebaGpuContext ); 
# 131
extern void kReduceGrycukGbsaBornSum(amoebaGpuContext ); 
# 132
extern void SetCalculateAmoebaGrycukSim(amoebaGpuContext ); 
# 133
extern void GetCalculateAmoebaGrycukSim(amoebaGpuContext ); 
# 134
extern void kCalculateGrycukGbsaForces2(amoebaGpuContext ); 
# 142
extern void SetCalculateAmoebaObcGbsaForces2Sim(amoebaGpuContext ); 
# 143
extern void GetCalculateAmoebaObcGbsaForces2Sim(amoebaGpuContext ); 
# 144
extern void kCalculateAmoebaObcGbsaForces2(amoebaGpuContext ); 
# 146
extern void cudaReduceN2ToN(float * , int , float * , int , int ); 
# 147
extern float cudaGetSum(int , CUDAStream< float>  * ); 
# 148
extern float cudaGetNorm2(int , CUDAStream< float>  * ); 
# 149
extern int checkForNansAndInfinities(int , CUDAStream< float>  * ); 
# 150
extern void cudaWriteFloat1AndFloat1ArraysToFile(int , const std::string & , std::vector< int>  & , int , CUDAStream< float>  * , int , CUDAStream< float>  * ); 
# 152
extern void readFile(std::string , StringVectorVector & ); 
# 154
extern void cudaLoadCudaFloatArray(int , int , CUDAStream< float>  * , VectorOfDoubleVectors & , int * , float ); 
# 155
extern void cudaLoadCudaFloat2Array(int , int , CUDAStream< float2>  * , VectorOfDoubleVectors & , int * , float ); 
# 156
extern void cudaLoadCudaFloat4Array(int , int , CUDAStream< float4>  * , VectorOfDoubleVectors & , int * , float ); 
# 157
extern void cudaWriteVectorOfDoubleVectorsToFile(const std::string & , std::vector< int>  & , VectorOfDoubleVectors & ); 
# 158
extern void initializeCudaFloatArray(int , int , CUDAStream< float>  * , float ); 
# 159
extern void checkForNans(int , int , CUDAStream< float>  * , int * , int , std::string , FILE * ); 
# 161
extern void checkForNansFloat4(int , CUDAStream< float4>  * , int * , int , std::string , FILE * ); 
# 165
extern void kClearFloat(amoebaGpuContext , unsigned , CUDAStream< float>  * ); 
# 166
extern void kClearFloat4(amoebaGpuContext , unsigned , CUDAStream< float4>  * ); 
# 167
extern void kClearFields_1(amoebaGpuContext ); 
# 168
extern void kClearFields_3(amoebaGpuContext , unsigned ); 
# 169
extern void kClearBornSum(gpuContext ); 
# 170
extern unsigned getThreadsPerBlock(amoebaGpuContext , unsigned , unsigned ); 
# 173
extern void trackMutualInducedIterations(amoebaGpuContext , int ); 
# 174
extern void zeroCUDAStreamFloat4(CUDAStream< float4>  * ); 
# 175
extern void reduceAndCopyCUDAStreamFloat4(CUDAStream< float4>  * , CUDAStream< float>  * , float ); 
# 176
extern void reduceAndCopyCUDAStreamFloat(CUDAStream< float>  * , CUDAStream< float>  * , float ); 
# 180
extern void SetCalculateAmoebaPMESim(amoebaGpuContext ); 
# 181
extern void kCalculateAmoebaPMEFixedMultipoles(amoebaGpuContext ); 
# 182
extern void kCalculateAmoebaPMEInducedDipoleField(amoebaGpuContext ); 
# 183
extern void kCalculateAmoebaPMEInducedDipoleForces(amoebaGpuContext ); 
# 185
extern void SetCalculateAmoebaCudaUtilitiesSim(amoebaGpuContext ); 
# 187
double getTimeOfDay(); 
# 30 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//kCalculateAmoebaCudaGrycuk.cu"
static cudaGmxSimulation cSim; 
# 31
static cudaAmoebaGmxSimulation cAmoebaSim; 
# 33
void SetCalculateAmoebaGrycukSim(amoebaGpuContext amoebaGpu) 
# 34
{ 
# 35
cudaError_t status; 
# 36
gpuContext gpu = (amoebaGpu->gpuContext); 
# 37
status = cudaMemcpyToSymbol(cSim, &(gpu->sim), sizeof(cudaGmxSimulation)); 
# 38
if (status != (cudaSuccess)) { throw ((OpenMM::OpenMMException)((((((std::basic_string< char, std::char_traits< char> , std::allocator< char> > )("SetCalculateAmoebaGrycukSim: cudaMemcpyToSymbol: SetSim copy to cSim failed")) + (" "))) + (cudaGetErrorString(status))))); }  ; 
# 39
status = cudaMemcpyToSymbol(cAmoebaSim, &(amoebaGpu->amoebaSim), sizeof(cudaAmoebaGmxSimulation)); 
# 40
if (status != (cudaSuccess)) { throw ((OpenMM::OpenMMException)((((((std::basic_string< char, std::char_traits< char> , std::allocator< char> > )("SetCalculateAmoebaGrycukSim: cudaMemcpyToSymbol: SetSim copy to cAmoebaSim failed")) + (" "))) + (cudaGetErrorString(status))))); }  ; 
# 41
} 
# 43
void GetCalculateAmoebaGrycukSim(amoebaGpuContext amoebaGpu) 
# 44
{ 
# 45
cudaError_t status; 
# 46
gpuContext gpu = (amoebaGpu->gpuContext); 
# 47
status = cudaMemcpyFromSymbol(&(gpu->sim), cSim, sizeof(cudaGmxSimulation)); 
# 48
if (status != (cudaSuccess)) { throw ((OpenMM::OpenMMException)((((((std::basic_string< char, std::char_traits< char> , std::allocator< char> > )("GetCalculateAmoebaGrycukSim: cudaMemcpyFromSymbol: SetSim copy from cSim failed")) + (" "))) + (cudaGetErrorString(status))))); }  ; 
# 49
status = cudaMemcpyFromSymbol(&(amoebaGpu->amoebaSim), cAmoebaSim, sizeof(cudaAmoebaGmxSimulation)); 
# 50
if (status != (cudaSuccess)) { throw ((OpenMM::OpenMMException)((((((std::basic_string< char, std::char_traits< char> , std::allocator< char> > )("GetCalculateAmoebaGrycukSim: cudaMemcpyFromSymbol: SetSim copy from cAmoebaSim failed")) + (" "))) + (cudaGetErrorString(status))))); }  ; 
# 51
} 
# 53
struct GrycukParticle { 
# 55
float x; 
# 56
float y; 
# 57
float z; 
# 59
float radius; 
# 60
float scaledRadius; 
# 62
float bornSum; 
# 63
}; 
# 65
__attribute__((unused)) void loadGrycukShared(GrycukParticle *sA, unsigned atomI) 
# 66
{int volatile ___ = 1;(void)sA;(void)atomI;
# 76
::exit(___);}
#if 0
# 66
{ 
# 69
(sA->x) = (((cSim.pPosq)[atomI]).x); 
# 70
(sA->y) = (((cSim.pPosq)[atomI]).y); 
# 71
(sA->z) = (((cSim.pPosq)[atomI]).z); 
# 73
(sA->radius) = (((cSim.pObcData)[atomI]).x); 
# 74
(sA->scaledRadius) = (((cSim.pObcData)[atomI]).y); 
# 76
} 
#endif
# 78 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//kCalculateAmoebaCudaGrycuk.cu"
__attribute__((unused)) void calculateGrycukBornRadiiPairIxn_kernel(GrycukParticle &atomI, GrycukParticle &atomJ, float *bornSum) {int volatile ___ = 1;(void)atomI;(void)atomJ;(void)bornSum;
# 143
::exit(___);}
#if 0
# 78
{ 
# 86
float xr, yr, zr; 
# 87
float r, r2; 
# 89
float sk, sk2; 
# 90
float lik, uik; 
# 91
float lik3, uik3; 
# 92
float l2, l4, lr, l4r; 
# 93
float u2, u4, ur, u4r; 
# 94
float term; 
# 98
(*bornSum) = (0.0F); 
# 99
if ((atomI.radius) <= (0.0F)) { 
# 100
return; 
# 101
}  
# 103
xr = ((atomJ.x) - (atomI.x)); 
# 104
yr = ((atomJ.y) - (atomI.y)); 
# 105
zr = ((atomJ.z) - (atomI.z)); 
# 107
r2 = (((xr * xr) + (yr * yr)) + (zr * zr)); 
# 108
r = sqrtf(r2); 
# 110
sk = (atomJ.scaledRadius); 
# 111
sk2 = (sk * sk); 
# 113
if (((atomI.radius) + r) < sk) { 
# 114
lik = (atomI.radius); 
# 115
uik = (sk - r); 
# 116
lik3 = ((lik * lik) * lik); 
# 117
uik3 = ((uik * uik) * uik); 
# 118
(*bornSum) -= (((1.0F) / uik3) - ((1.0F) / lik3)); 
# 119
}  
# 121
uik = (r + sk); 
# 122
if (((atomI.radius) + r) < sk) { 
# 123
lik = (sk - r); 
# 124
} else { if (r < ((atomI.radius) + sk)) { 
# 125
lik = (atomI.radius); 
# 126
} else { 
# 127
lik = (r - sk); 
# 128
}  }  
# 130
l2 = (lik * lik); 
# 131
l4 = (l2 * l2); 
# 132
lr = (lik * r); 
# 133
l4r = (l4 * r); 
# 135
u2 = (uik * uik); 
# 136
u4 = (u2 * u2); 
# 137
ur = (uik * r); 
# 138
u4r = (u4 * r); 
# 140
term = ((((((3.0F) * (r2 - sk2)) + ((6.0F) * u2)) - ((8.0F) * ur)) / u4r) - (((((3.0F) * (r2 - sk2)) + ((6.0F) * l2)) - ((8.0F) * lr)) / l4r)); 
# 141
(*bornSum) += (term / (16.0F)); 
# 143
} 
#endif
# 145 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//kCalculateAmoebaCudaGrycuk.cu"
__attribute__((unused)) void zeroGrycukParticleSharedField(GrycukParticle *sA) 
# 146
{int volatile ___ = 1;(void)sA;
# 148
::exit(___);}
#if 0
# 146
{ 
# 147
(sA->bornSum) = (0.0F); 
# 148
} 
#endif
# 152 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//kCalculateAmoebaCudaGrycuk.cu"
void kReduceGrycukGbsaBornSum_kernel() ;
#if 0
# 153
{ 
# 154
unsigned pos = (((blockIdx.x) * (blockDim.x)) + (threadIdx.x)); 
# 156
while (pos < (cSim.atoms)) 
# 157
{ 
# 158
float sum = (0.0F); 
# 159
float *pSt = ((cSim.pBornSum) + pos); 
# 162
for (int i = 0; i < (cSim.nonbondOutputBuffers); i++) 
# 163
{ 
# 164
sum += (*pSt); 
# 165
pSt += (cSim.stride); 
# 166
}  
# 170
float radius = (((cSim.pObcData)[pos]).x); 
# 171
radius = ((1.0F) / ((radius * radius) * radius)); 
# 172
sum = (radius - sum); 
# 173
sum = ((sum <= (0.0F)) ? (1000.0F) : powf(sum, (-(1.0F)) / (3.0F))); 
# 174
((cSim.pBornRadii)[pos]) = sum; 
# 176
pos += ((gridDim.x) * (blockDim.x)); 
# 177
}  
# 178
} 
#endif
# 188 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//kCalculateAmoebaCudaGrycuk.cu"
void kReduceGrycukGbsaBornSum(amoebaGpuContext amoebaGpu) 
# 189
{ 
# 191
(cudaConfigureCall(((amoebaGpu->gpuContext)->sim).blocks, 384)) ? ((void)0) : kReduceGrycukGbsaBornSum_kernel(); 
# 192
{ cudaError_t status = cudaGetLastError(); if (status != (cudaSuccess)) { throw ((OpenMM::OpenMMException)((((((((std::basic_string< char, std::char_traits< char> , std::allocator< char> > )("Error: ")) + (cudaGetErrorString(status)))) + (" launching kernel "))) + ("kReduceGrycukGbsaBornSum")))); }  } ; 
# 194
if (0) { 
# 195
static int callId = 0; 
# 196
gpuContext gpu = (amoebaGpu->gpuContext); 
# 197
std::vector< int>  fileId; 
# 198
fileId.push_back((callId++)); 
# 199
VectorOfDoubleVectors outputVector; 
# 200
cudaLoadCudaFloatArray(gpu->natoms, 1, gpu->psBornRadii, outputVector, (gpu->psAtomIndex)->_pSysData, (1.0F)); 
# 201
cudaWriteVectorOfDoubleVectorsToFile("BornRGry", fileId, outputVector); 
# 202
}  
# 203
} 
# 30 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//amoebaScaleFactors.h"
static float mpoleScale[5]; 
# 31
static float polarScale[5]; 
# 32
static float directScale[5]; 
# 44 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//amoebaScaleFactors.h"
__attribute__((unused)) static void getMaskedDScaleFactor(unsigned gridIndex, int scaleMask, float *dScale) 
# 45
{int volatile ___ = 1;(void)gridIndex;(void)scaleMask;(void)dScale;
# 49
::exit(___);}
#if 0
# 45
{ 
# 46
unsigned mask = (1 << gridIndex); 
# 47
(*dScale) = ((scaleMask & mask) ? (0.0F) : (1.0F)); 
# 49
} 
#endif
# 51 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//amoebaScaleFactors.h"
__attribute__((unused)) static void getMaskedPScaleFactor(unsigned gridIndex, int2 scaleMask, float *pScale) 
# 52
{int volatile ___ = 1;(void)gridIndex;(void)scaleMask;(void)pScale;
# 57
::exit(___);}
#if 0
# 52
{ 
# 53
unsigned mask = (1 << gridIndex); 
# 54
(*pScale) = (((scaleMask.x) & mask) ? (0.5F) : (1.0F)); 
# 55
(*pScale) *= (((scaleMask.y) & mask) ? (0.0F) : (1.0F)); 
# 57
} 
#endif
# 59 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//amoebaScaleFactors.h"
__attribute__((unused)) static void getMaskedMScaleFactor(unsigned gridIndex, int2 scaleMask, float *mScale) 
# 60
{int volatile ___ = 1;(void)gridIndex;(void)scaleMask;(void)mScale;
# 72
::exit(___);}
#if 0
# 60
{ 
# 61
unsigned mask = (1 << gridIndex); 
# 68
(*mScale) = ((((scaleMask.x) & mask) && ((scaleMask.y) & mask)) ? (0.0F) : (1.0F)); 
# 69
(*mScale) *= (((scaleMask.x) & mask) ? (0.8000000119F) : (1.0F)); 
# 70
(*mScale) *= (((scaleMask.y) & mask) ? (0.400000006F) : (1.0F)); 
# 72
} 
#endif
# 76 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//amoebaScaleFactors.h"
__attribute__((unused)) static void decodeCell(unsigned cellId, unsigned *x, unsigned *y, bool *exclusions) 
# 77
{int volatile ___ = 1;(void)cellId;(void)x;(void)y;(void)exclusions;
# 84
::exit(___);}
#if 0
# 77
{ 
# 78
(*x) = cellId; 
# 79
(*y) = ((((*x) >> 2) & (32767)) << GRIDBITS); 
# 81
(*exclusions) = ((*x) & (1)); 
# 82
(*x) = (((*x) >> 17) << GRIDBITS); 
# 84
} 
#endif
# 86 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//amoebaScaleFactors.h"
__attribute__((unused)) static void load3dArrayBufferPerWarp(unsigned offset, float *forceSum, float *outputForce) 
# 87
{int volatile ___ = 1;(void)offset;(void)forceSum;(void)outputForce;
# 102
::exit(___);}
#if 0
# 87
{ 
# 89
float of; 
# 90
of = (outputForce[offset]); 
# 91
of += (forceSum[0]); 
# 92
(outputForce[offset]) = of; 
# 94
of = (outputForce[offset + (1)]); 
# 95
of += (forceSum[1]); 
# 96
(outputForce[offset + (1)]) = of; 
# 98
of = (outputForce[offset + (2)]); 
# 99
of += (forceSum[2]); 
# 100
(outputForce[offset + (2)]) = of; 
# 102
} 
#endif
# 104 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//amoebaScaleFactors.h"
__attribute__((unused)) static void add3dArrayToFloat4(unsigned offset, volatile float *forceSum, float4 *outputForce) 
# 105
{int volatile ___ = 1;(void)offset;(void)forceSum;(void)outputForce;
# 114
::exit(___);}
#if 0
# 105
{ 
# 107
float4 of; 
# 108
of = (outputForce[offset]); 
# 109
(of.x) += (forceSum[0]); 
# 110
(of.y) += (forceSum[1]); 
# 111
(of.z) += (forceSum[2]); 
# 112
(outputForce[offset]) = of; 
# 114
} 
#endif
# 116 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//amoebaScaleFactors.h"
__attribute__((unused)) static void load3dArrayToFloat4(unsigned offset, float *forceSum, float4 *outputForce) 
# 117
{int volatile ___ = 1;(void)offset;(void)forceSum;(void)outputForce;
# 126
::exit(___);}
#if 0
# 117
{ 
# 119
float4 of; 
# 120
(of.x) = (forceSum[0]); 
# 121
(of.y) = (forceSum[1]); 
# 122
(of.z) = (forceSum[2]); 
# 123
(of.w) = (0.0F); 
# 124
(outputForce[offset]) = of; 
# 126
} 
#endif
# 128 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//amoebaScaleFactors.h"
__attribute__((unused)) static void load3dArray(unsigned offset, volatile float *forceSum, float *outputForce) 
# 129
{int volatile ___ = 1;(void)offset;(void)forceSum;(void)outputForce;
# 135
::exit(___);}
#if 0
# 129
{ 
# 131
(outputForce[offset]) = (forceSum[0]); 
# 132
(outputForce[offset + (1)]) = (forceSum[1]); 
# 133
(outputForce[offset + (2)]) = (forceSum[2]); 
# 135
} 
#endif
# 137 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//amoebaScaleFactors.h"
__attribute__((unused)) static void add3dArray(unsigned offset, volatile float *forceSum, float *outputForce) 
# 138
{int volatile ___ = 1;(void)offset;(void)forceSum;(void)outputForce;
# 144
::exit(___);}
#if 0
# 138
{ 
# 140
(outputForce[offset]) += (forceSum[0]); 
# 141
(outputForce[offset + (1)]) += (forceSum[1]); 
# 142
(outputForce[offset + (2)]) += (forceSum[2]); 
# 144
} 
#endif
# 146 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//amoebaScaleFactors.h"
__attribute__((unused)) static void scale3dArray(float scaleFactor, float *force) 
# 147
{int volatile ___ = 1;(void)scaleFactor;(void)force;
# 153
::exit(___);}
#if 0
# 147
{ 
# 149
(force[0]) *= scaleFactor; 
# 150
(force[1]) *= scaleFactor; 
# 151
(force[2]) *= scaleFactor; 
# 153
} 
#endif
# 37 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//kCalculateAmoebaCudaGrycukBornRadii.h"
void kCalculateAmoebaGrycukBornRadiiN2_kernel(unsigned *workUnit) ;
#if 0
# 37
{ 
# 39
__attribute__((unused)) extern GrycukParticle sA[]; 
# 41
unsigned totalWarps = (((gridDim.x) * (blockDim.x)) / GRID); 
# 42
unsigned warp = ((((blockIdx.x) * (blockDim.x)) + (threadIdx.x)) / GRID); 
# 43
unsigned numWorkUnits = ((cSim.pInteractionCount)[0]); 
# 44
unsigned pos = ((warp * numWorkUnits) / totalWarps); 
# 45
unsigned end = (((warp + (1)) * numWorkUnits) / totalWarps); 
# 46
unsigned lasty = 4294967295U; 
# 48
while (pos < end) 
# 49
{ 
# 51
unsigned x; 
# 52
unsigned y; 
# 53
bool bExclusionFlag; 
# 57
decodeCell(workUnit[pos], &x, &y, &bExclusionFlag); 
# 59
unsigned tgx = ((threadIdx.x) & (GRID - (1))); 
# 60
unsigned tbx = ((threadIdx.x) - tgx); 
# 61
unsigned tj = tgx; 
# 63
GrycukParticle *psA = (&((sA)[tbx])); 
# 64
unsigned atomI = (x + tgx); 
# 65
GrycukParticle localParticle; 
# 66
loadGrycukShared(&localParticle, atomI); 
# 68
float bornSum = (0.0F); 
# 70
if (x == y) 
# 71
{ 
# 75
loadGrycukShared(&((sA)[threadIdx.x]), atomI); 
# 77
for (unsigned j = (0); j < GRID; j++) 
# 78
{ 
# 79
float localBornSum; 
# 80
calculateGrycukBornRadiiPairIxn_kernel(localParticle, psA[j], &localBornSum); 
# 81
bornSum += ((((atomI == (y + j)) || (atomI >= (cSim.atoms))) || ((y + j) >= (cSim.atoms))) ? (0.0) : (localBornSum)); 
# 82
}  
# 90
unsigned offset = ((x + tgx) + ((y >> GRIDBITS) * (cSim.stride))); 
# 91
((cSim.pBornSum)[offset]) = bornSum; 
# 94
} else { 
# 96
if (lasty != y) { 
# 97
unsigned atomJ = (y + tgx); 
# 98
loadGrycukShared(&((sA)[threadIdx.x]), atomJ); 
# 99
}  
# 103
zeroGrycukParticleSharedField(&((sA)[threadIdx.x])); 
# 105
for (unsigned j = (0); j < GRID; j++) 
# 106
{ 
# 108
float localBornSum; 
# 109
calculateGrycukBornRadiiPairIxn_kernel(localParticle, psA[tj], &localBornSum); 
# 110
bornSum += (((atomI >= (cSim.atoms)) || ((y + tj) >= (cSim.atoms))) ? (0.0) : (localBornSum)); 
# 112
calculateGrycukBornRadiiPairIxn_kernel(psA[tj], localParticle, &localBornSum); 
# 113
((psA[tj]).bornSum) += (((atomI >= (cSim.atoms)) || ((y + tj) >= (cSim.atoms))) ? (0.0) : (localBornSum)); 
# 115
tj = ((tj + (1)) & (GRID - (1))); 
# 117
}  
# 130 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//kCalculateAmoebaCudaGrycukBornRadii.h"
unsigned offset = ((x + tgx) + ((y >> GRIDBITS) * (cSim.stride))); 
# 131
((cSim.pBornSum)[offset]) = bornSum; 
# 133
offset = ((y + tgx) + ((x >> GRIDBITS) * (cSim.stride))); 
# 134
((cSim.pBornSum)[offset]) = (((sA)[threadIdx.x]).bornSum); 
# 137
lasty = y; 
# 138
}  
# 140
pos++; 
# 141
}  
# 142
} 
#endif
# 37 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//kCalculateAmoebaCudaGrycukBornRadii.h"
void kCalculateAmoebaGrycukBornRadiiN2ByWarp_kernel(unsigned *workUnit) ;
#if 0
# 37
{ 
# 39
__attribute__((unused)) extern GrycukParticle sA[]; 
# 41
unsigned totalWarps = (((gridDim.x) * (blockDim.x)) / GRID); 
# 42
unsigned warp = ((((blockIdx.x) * (blockDim.x)) + (threadIdx.x)) / GRID); 
# 43
unsigned numWorkUnits = ((cSim.pInteractionCount)[0]); 
# 44
unsigned pos = ((warp * numWorkUnits) / totalWarps); 
# 45
unsigned end = (((warp + (1)) * numWorkUnits) / totalWarps); 
# 46
unsigned lasty = 4294967295U; 
# 48
while (pos < end) 
# 49
{ 
# 51
unsigned x; 
# 52
unsigned y; 
# 53
bool bExclusionFlag; 
# 57
decodeCell(workUnit[pos], &x, &y, &bExclusionFlag); 
# 59
unsigned tgx = ((threadIdx.x) & (GRID - (1))); 
# 60
unsigned tbx = ((threadIdx.x) - tgx); 
# 61
unsigned tj = tgx; 
# 63
GrycukParticle *psA = (&((sA)[tbx])); 
# 64
unsigned atomI = (x + tgx); 
# 65
GrycukParticle localParticle; 
# 66
loadGrycukShared(&localParticle, atomI); 
# 68
float bornSum = (0.0F); 
# 70
if (x == y) 
# 71
{ 
# 75
loadGrycukShared(&((sA)[threadIdx.x]), atomI); 
# 77
for (unsigned j = (0); j < GRID; j++) 
# 78
{ 
# 79
float localBornSum; 
# 80
calculateGrycukBornRadiiPairIxn_kernel(localParticle, psA[j], &localBornSum); 
# 81
bornSum += ((((atomI == (y + j)) || (atomI >= (cSim.atoms))) || ((y + j) >= (cSim.atoms))) ? (0.0) : (localBornSum)); 
# 82
}  
# 87
unsigned offset = ((x + tgx) + (warp * (cSim.stride))); 
# 88
((cSim.pBornSum)[offset]) += bornSum; 
# 94
} else { 
# 96
if (lasty != y) { 
# 97
unsigned atomJ = (y + tgx); 
# 98
loadGrycukShared(&((sA)[threadIdx.x]), atomJ); 
# 99
}  
# 103
zeroGrycukParticleSharedField(&((sA)[threadIdx.x])); 
# 105
for (unsigned j = (0); j < GRID; j++) 
# 106
{ 
# 108
float localBornSum; 
# 109
calculateGrycukBornRadiiPairIxn_kernel(localParticle, psA[tj], &localBornSum); 
# 110
bornSum += (((atomI >= (cSim.atoms)) || ((y + tj) >= (cSim.atoms))) ? (0.0) : (localBornSum)); 
# 112
calculateGrycukBornRadiiPairIxn_kernel(psA[tj], localParticle, &localBornSum); 
# 113
((psA[tj]).bornSum) += (((atomI >= (cSim.atoms)) || ((y + tj) >= (cSim.atoms))) ? (0.0) : (localBornSum)); 
# 115
tj = ((tj + (1)) & (GRID - (1))); 
# 117
}  
# 123
unsigned offset = ((x + tgx) + (warp * (cSim.stride))); 
# 124
((cSim.pBornSum)[offset]) += bornSum; 
# 126
offset = ((y + tgx) + (warp * (cSim.stride))); 
# 127
((cSim.pBornSum)[offset]) += (((sA)[threadIdx.x]).bornSum); 
# 137 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//kCalculateAmoebaCudaGrycukBornRadii.h"
lasty = y; 
# 138
}  
# 140
pos++; 
# 141
}  
# 142
} 
#endif
# 224 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//kCalculateAmoebaCudaGrycuk.cu"
void kCalculateAmoebaGrycukBornRadii(amoebaGpuContext amoebaGpu) 
# 225
{ 
# 229
gpuContext gpu = (amoebaGpu->gpuContext); 
# 235
static unsigned threadsPerBlock = (0); 
# 236
if (threadsPerBlock == (0)) { 
# 237
unsigned maxThreads; 
# 238
if ((gpu->sm_version) >= (SM_20)) { 
# 240
maxThreads = (512); } else { 
# 241
if ((gpu->sm_version) >= (SM_12)) { 
# 242
maxThreads = (128); } else { 
# 244
maxThreads = (64); }  }  
# 245
threadsPerBlock = std::min(getThreadsPerBlock(amoebaGpu, sizeof(GrycukParticle), gpu->sharedMemoryPerBlock), maxThreads); 
# 246
}  
# 248
if (gpu->bOutputBufferPerWarp) { 
# 249
(cudaConfigureCall((gpu->sim).nonbond_blocks, threadsPerBlock, sizeof(GrycukParticle) * threadsPerBlock)) ? ((void)0) : kCalculateAmoebaGrycukBornRadiiN2ByWarp_kernel((gpu->psWorkUnit)->_pDevData); 
# 250
} else { 
# 251
(cudaConfigureCall((gpu->sim).nonbond_blocks, threadsPerBlock, sizeof(GrycukParticle) * threadsPerBlock)) ? ((void)0) : kCalculateAmoebaGrycukBornRadiiN2_kernel((gpu->psWorkUnit)->_pDevData); 
# 252
}  
# 253
{ cudaError_t status = cudaGetLastError(); if (status != (cudaSuccess)) { throw ((OpenMM::OpenMMException)((((((((std::basic_string< char, std::char_traits< char> , std::allocator< char> > )("Error: ")) + (cudaGetErrorString(status)))) + (" launching kernel "))) + ("kCalculateAmoebaCudaGrycukN2Forces")))); }  } ; 
# 256
} 
# 260
struct GrycukChainRuleParticle { 
# 262
float x; 
# 263
float y; 
# 264
float z; 
# 266
float radius; 
# 267
float scaledRadius; 
# 269
float bornRadius; 
# 270
float bornForce; 
# 272
float force[3]; 
# 273
}; 
# 275
__attribute__((unused)) void loadGrycukChainRuleParticleShared(GrycukChainRuleParticle *sA, unsigned atomI) 
# 276
{int volatile ___ = 1;(void)sA;(void)atomI;
# 288
::exit(___);}
#if 0
# 276
{ 
# 279
(sA->x) = (((cSim.pPosq)[atomI]).x); 
# 280
(sA->y) = (((cSim.pPosq)[atomI]).y); 
# 281
(sA->z) = (((cSim.pPosq)[atomI]).z); 
# 283
(sA->radius) = (((cSim.pObcData)[atomI]).x); 
# 284
(sA->scaledRadius) = (((cSim.pObcData)[atomI]).y); 
# 285
(sA->bornRadius) = ((cSim.pBornRadii)[atomI]); 
# 286
(sA->bornForce) = ((cSim.pBornForce)[atomI]); 
# 288
} 
#endif
# 290 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//kCalculateAmoebaCudaGrycuk.cu"
__attribute__((unused)) void zeroGrycukChainRuleParticleSharedField(GrycukChainRuleParticle *sA) 
# 291
{int volatile ___ = 1;(void)sA;
# 298
::exit(___);}
#if 0
# 291
{ 
# 294
((sA->force)[0]) = (0.0F); 
# 295
((sA->force)[1]) = (0.0F); 
# 296
((sA->force)[2]) = (0.0F); 
# 298
} 
#endif
# 300 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//kCalculateAmoebaCudaGrycuk.cu"
__attribute__((unused)) void calculateGrycukChainRulePairIxn_kernel(GrycukChainRuleParticle &atomI, GrycukChainRuleParticle &atomJ, float force[3]) {int volatile ___ = 1;(void)atomI;(void)atomJ;(void)force;
# 357
::exit(___);}
#if 0
# 300
{ 
# 302
const float pi = (3.141592741F); 
# 303
float third = ((1.0F) / (3.0F)); 
# 304
float pi43 = (((4.0F) * third) * pi); 
# 306
float lik, uik; 
# 307
float lik4, uik4; 
# 308
float factor = (((-powf(pi, third)) * powf((6.0F), (2.0F) * third)) / (9.0F)); 
# 309
float term = (pi43 / (((atomI.bornRadius) * (atomI.bornRadius)) * (atomI.bornRadius))); 
# 310
term = (factor / powf(term, (4.0F) * third)); 
# 312
float xr = ((atomJ.x) - (atomI.x)); 
# 313
float yr = ((atomJ.y) - (atomI.y)); 
# 314
float zr = ((atomJ.z) - (atomI.z)); 
# 316
float sk = (atomJ.scaledRadius); 
# 317
float sk2 = (sk * sk); 
# 318
float r2 = (((xr * xr) + (yr * yr)) + (zr * zr)); 
# 319
float r = sqrtf(r2); 
# 320
float de = (0.0F); 
# 322
if (((atomI.radius) + r) < sk) { 
# 323
float uik4; 
# 324
uik = (sk - r); 
# 325
uik4 = (uik * uik); 
# 326
uik4 = (uik4 * uik4); 
# 327
de = (((-(4.0F)) * pi) / uik4); 
# 328
}  
# 330
if (((atomI.radius) + r) < sk) { 
# 331
lik = (sk - r); 
# 332
lik4 = (lik * lik); 
# 333
lik4 = (lik4 * lik4); 
# 334
de += ((((0.25F) * pi) * ((sk2 - (((4.0F) * sk) * r)) + ((17.0F) * r2))) / (r2 * lik4)); 
# 335
} else { if (r < ((atomI.radius) + sk)) { 
# 336
lik = (atomI.radius); 
# 337
lik4 = (lik * lik); 
# 338
lik4 = (lik4 * lik4); 
# 339
de += ((((0.25F) * pi) * (((((2.0F) * (atomI.radius)) * (atomI.radius)) - sk2) - r2)) / (r2 * lik4)); 
# 340
} else { 
# 341
lik = (r - sk); 
# 342
lik4 = (lik * lik); 
# 343
lik4 = (lik4 * lik4); 
# 344
de += ((((0.25F) * pi) * ((sk2 - (((4.0F) * sk) * r)) + r2)) / (r2 * lik4)); 
# 345
}  }  
# 346
uik = (r + sk); 
# 347
uik4 = (uik * uik); 
# 348
uik4 = (uik4 * uik4); 
# 350
de -= ((((0.25F) * pi) * ((sk2 + (((4.0F) * sk) * r)) + r2)) / (r2 * uik4)); 
# 351
float dbr = ((term * de) / r); 
# 352
de = (dbr * (atomI.bornForce)); 
# 354
(force[0]) = (xr * de); 
# 355
(force[1]) = (yr * de); 
# 356
(force[2]) = (zr * de); 
# 357
} 
#endif
# 37 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//kCalculateAmoebaCudaGrycukChainRule.h"
void kCalculateAmoebaGrycukChainRuleN2_kernel(unsigned *workUnit) ;
#if 0
# 37
{ 
# 39
__attribute__((unused)) extern GrycukChainRuleParticle sAChainRule[]; 
# 41
unsigned totalWarps = (((gridDim.x) * (blockDim.x)) / GRID); 
# 42
unsigned warp = ((((blockIdx.x) * (blockDim.x)) + (threadIdx.x)) / GRID); 
# 43
unsigned numWorkUnits = ((cSim.pInteractionCount)[0]); 
# 44
unsigned pos = ((warp * numWorkUnits) / totalWarps); 
# 45
unsigned end = (((warp + (1)) * numWorkUnits) / totalWarps); 
# 46
unsigned lasty = 4294967295U; 
# 48
while (pos < end) 
# 49
{ 
# 51
unsigned x; 
# 52
unsigned y; 
# 53
bool bExclusionFlag; 
# 57
decodeCell(workUnit[pos], &x, &y, &bExclusionFlag); 
# 59
unsigned tgx = ((threadIdx.x) & (GRID - (1))); 
# 60
unsigned tbx = ((threadIdx.x) - tgx); 
# 61
unsigned tj = tgx; 
# 63
GrycukChainRuleParticle *psAChainRule = (&((sAChainRule)[tbx])); 
# 64
unsigned atomI = (x + tgx); 
# 65
GrycukChainRuleParticle localParticle; 
# 66
loadGrycukChainRuleParticleShared(&localParticle, atomI); 
# 68
zeroGrycukChainRuleParticleSharedField(&localParticle); 
# 70
if (x == y) { 
# 74
loadGrycukChainRuleParticleShared(&((sAChainRule)[threadIdx.x]), atomI); 
# 75
zeroGrycukChainRuleParticleSharedField(&((sAChainRule)[threadIdx.x])); 
# 77
for (unsigned j = ((tgx + (1)) & (GRID - (1))); j != tgx; j = ((j + (1)) & (GRID - (1)))) 
# 78
{ 
# 79
float localForce[3]; 
# 80
calculateGrycukChainRulePairIxn_kernel(localParticle, psAChainRule[j], localForce); 
# 81
if (((atomI != (y + j)) && (atomI < (cSim.atoms))) && ((y + j) < (cSim.atoms))) { 
# 83
((localParticle.force)[0]) -= ((localForce)[0]); 
# 84
((localParticle.force)[1]) -= ((localForce)[1]); 
# 85
((localParticle.force)[2]) -= ((localForce)[2]); 
# 87
(((psAChainRule[j]).force)[0]) += ((localForce)[0]); 
# 88
(((psAChainRule[j]).force)[1]) += ((localForce)[1]); 
# 89
(((psAChainRule[j]).force)[2]) += ((localForce)[2]); 
# 92
}  
# 93
}  
# 96
float4 of; 
# 100
unsigned offset = ((x + tgx) + ((x >> GRIDBITS) * (cSim.stride))); 
# 102
of = ((cSim.pForce4)[offset]); 
# 103
(of.x) += (((localParticle.force)[0]) + ((((sAChainRule)[threadIdx.x]).force)[0])); 
# 104
(of.y) += (((localParticle.force)[1]) + ((((sAChainRule)[threadIdx.x]).force)[1])); 
# 105
(of.z) += (((localParticle.force)[2]) + ((((sAChainRule)[threadIdx.x]).force)[2])); 
# 106
((cSim.pForce4)[offset]) = of; 
# 108
} else { 
# 110
if (lasty != y) { 
# 111
unsigned atomJ = (y + tgx); 
# 112
loadGrycukChainRuleParticleShared(&((sAChainRule)[threadIdx.x]), atomJ); 
# 113
}  
# 117
zeroGrycukChainRuleParticleSharedField(&((sAChainRule)[threadIdx.x])); 
# 119
for (unsigned j = (0); j < GRID; j++) 
# 120
{ 
# 122
if ((atomI < (cSim.atoms)) && ((y + tj) < (cSim.atoms))) { 
# 123
float localForce[3]; 
# 124
calculateGrycukChainRulePairIxn_kernel(localParticle, psAChainRule[tj], localForce); 
# 126
((localParticle.force)[0]) -= ((localForce)[0]); 
# 127
((localParticle.force)[1]) -= ((localForce)[1]); 
# 128
((localParticle.force)[2]) -= ((localForce)[2]); 
# 130
(((psAChainRule[tj]).force)[0]) += ((localForce)[0]); 
# 131
(((psAChainRule[tj]).force)[1]) += ((localForce)[1]); 
# 132
(((psAChainRule[tj]).force)[2]) += ((localForce)[2]); 
# 134
calculateGrycukChainRulePairIxn_kernel(psAChainRule[tj], localParticle, localForce); 
# 136
((localParticle.force)[0]) += ((localForce)[0]); 
# 137
((localParticle.force)[1]) += ((localForce)[1]); 
# 138
((localParticle.force)[2]) += ((localForce)[2]); 
# 140
(((psAChainRule[tj]).force)[0]) -= ((localForce)[0]); 
# 141
(((psAChainRule[tj]).force)[1]) -= ((localForce)[1]); 
# 142
(((psAChainRule[tj]).force)[2]) -= ((localForce)[2]); 
# 143
}  
# 145
tj = ((tj + (1)) & (GRID - (1))); 
# 147
}  
# 151
float4 of; 
# 156
unsigned offset = ((x + tgx) + ((y >> GRIDBITS) * (cSim.stride))); 
# 158
of = ((cSim.pForce4)[offset]); 
# 159
(of.x) += ((localParticle.force)[0]); 
# 160
(of.y) += ((localParticle.force)[1]); 
# 161
(of.z) += ((localParticle.force)[2]); 
# 162
((cSim.pForce4)[offset]) = of; 
# 167
offset = ((y + tgx) + ((x >> GRIDBITS) * (cSim.stride))); 
# 169
of = ((cSim.pForce4)[offset]); 
# 170
(of.x) += ((((sAChainRule)[threadIdx.x]).force)[0]); 
# 171
(of.y) += ((((sAChainRule)[threadIdx.x]).force)[1]); 
# 172
(of.z) += ((((sAChainRule)[threadIdx.x]).force)[2]); 
# 173
((cSim.pForce4)[offset]) = of; 
# 175
lasty = y; 
# 176
}  
# 178
pos++; 
# 179
}  
# 180
} 
#endif
# 37 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//kCalculateAmoebaCudaGrycukChainRule.h"
void kCalculateAmoebaGrycukChainRuleN2ByWarp_kernel(unsigned *workUnit) ;
#if 0
# 37
{ 
# 39
__attribute__((unused)) extern GrycukChainRuleParticle sAChainRule[]; 
# 41
unsigned totalWarps = (((gridDim.x) * (blockDim.x)) / GRID); 
# 42
unsigned warp = ((((blockIdx.x) * (blockDim.x)) + (threadIdx.x)) / GRID); 
# 43
unsigned numWorkUnits = ((cSim.pInteractionCount)[0]); 
# 44
unsigned pos = ((warp * numWorkUnits) / totalWarps); 
# 45
unsigned end = (((warp + (1)) * numWorkUnits) / totalWarps); 
# 46
unsigned lasty = 4294967295U; 
# 48
while (pos < end) 
# 49
{ 
# 51
unsigned x; 
# 52
unsigned y; 
# 53
bool bExclusionFlag; 
# 57
decodeCell(workUnit[pos], &x, &y, &bExclusionFlag); 
# 59
unsigned tgx = ((threadIdx.x) & (GRID - (1))); 
# 60
unsigned tbx = ((threadIdx.x) - tgx); 
# 61
unsigned tj = tgx; 
# 63
GrycukChainRuleParticle *psAChainRule = (&((sAChainRule)[tbx])); 
# 64
unsigned atomI = (x + tgx); 
# 65
GrycukChainRuleParticle localParticle; 
# 66
loadGrycukChainRuleParticleShared(&localParticle, atomI); 
# 68
zeroGrycukChainRuleParticleSharedField(&localParticle); 
# 70
if (x == y) { 
# 74
loadGrycukChainRuleParticleShared(&((sAChainRule)[threadIdx.x]), atomI); 
# 75
zeroGrycukChainRuleParticleSharedField(&((sAChainRule)[threadIdx.x])); 
# 77
for (unsigned j = ((tgx + (1)) & (GRID - (1))); j != tgx; j = ((j + (1)) & (GRID - (1)))) 
# 78
{ 
# 79
float localForce[3]; 
# 80
calculateGrycukChainRulePairIxn_kernel(localParticle, psAChainRule[j], localForce); 
# 81
if (((atomI != (y + j)) && (atomI < (cSim.atoms))) && ((y + j) < (cSim.atoms))) { 
# 83
((localParticle.force)[0]) -= ((localForce)[0]); 
# 84
((localParticle.force)[1]) -= ((localForce)[1]); 
# 85
((localParticle.force)[2]) -= ((localForce)[2]); 
# 87
(((psAChainRule[j]).force)[0]) += ((localForce)[0]); 
# 88
(((psAChainRule[j]).force)[1]) += ((localForce)[1]); 
# 89
(((psAChainRule[j]).force)[2]) += ((localForce)[2]); 
# 92
}  
# 93
}  
# 96
float4 of; 
# 98
unsigned offset = ((x + tgx) + (warp * (cSim.stride))); 
# 102
of = ((cSim.pForce4)[offset]); 
# 103
(of.x) += (((localParticle.force)[0]) + ((((sAChainRule)[threadIdx.x]).force)[0])); 
# 104
(of.y) += (((localParticle.force)[1]) + ((((sAChainRule)[threadIdx.x]).force)[1])); 
# 105
(of.z) += (((localParticle.force)[2]) + ((((sAChainRule)[threadIdx.x]).force)[2])); 
# 106
((cSim.pForce4)[offset]) = of; 
# 108
} else { 
# 110
if (lasty != y) { 
# 111
unsigned atomJ = (y + tgx); 
# 112
loadGrycukChainRuleParticleShared(&((sAChainRule)[threadIdx.x]), atomJ); 
# 113
}  
# 117
zeroGrycukChainRuleParticleSharedField(&((sAChainRule)[threadIdx.x])); 
# 119
for (unsigned j = (0); j < GRID; j++) 
# 120
{ 
# 122
if ((atomI < (cSim.atoms)) && ((y + tj) < (cSim.atoms))) { 
# 123
float localForce[3]; 
# 124
calculateGrycukChainRulePairIxn_kernel(localParticle, psAChainRule[tj], localForce); 
# 126
((localParticle.force)[0]) -= ((localForce)[0]); 
# 127
((localParticle.force)[1]) -= ((localForce)[1]); 
# 128
((localParticle.force)[2]) -= ((localForce)[2]); 
# 130
(((psAChainRule[tj]).force)[0]) += ((localForce)[0]); 
# 131
(((psAChainRule[tj]).force)[1]) += ((localForce)[1]); 
# 132
(((psAChainRule[tj]).force)[2]) += ((localForce)[2]); 
# 134
calculateGrycukChainRulePairIxn_kernel(psAChainRule[tj], localParticle, localForce); 
# 136
((localParticle.force)[0]) += ((localForce)[0]); 
# 137
((localParticle.force)[1]) += ((localForce)[1]); 
# 138
((localParticle.force)[2]) += ((localForce)[2]); 
# 140
(((psAChainRule[tj]).force)[0]) -= ((localForce)[0]); 
# 141
(((psAChainRule[tj]).force)[1]) -= ((localForce)[1]); 
# 142
(((psAChainRule[tj]).force)[2]) -= ((localForce)[2]); 
# 143
}  
# 145
tj = ((tj + (1)) & (GRID - (1))); 
# 147
}  
# 151
float4 of; 
# 154
unsigned offset = ((x + tgx) + (warp * (cSim.stride))); 
# 158
of = ((cSim.pForce4)[offset]); 
# 159
(of.x) += ((localParticle.force)[0]); 
# 160
(of.y) += ((localParticle.force)[1]); 
# 161
(of.z) += ((localParticle.force)[2]); 
# 162
((cSim.pForce4)[offset]) = of; 
# 165
offset = ((y + tgx) + (warp * (cSim.stride))); 
# 169
of = ((cSim.pForce4)[offset]); 
# 170
(of.x) += ((((sAChainRule)[threadIdx.x]).force)[0]); 
# 171
(of.y) += ((((sAChainRule)[threadIdx.x]).force)[1]); 
# 172
(of.z) += ((((sAChainRule)[threadIdx.x]).force)[2]); 
# 173
((cSim.pForce4)[offset]) = of; 
# 175
lasty = y; 
# 176
}  
# 178
pos++; 
# 179
}  
# 180
} 
#endif
# 379 "/home/saifmulla/openmm/OpenMM/plugins/amoeba/platforms/cuda/src/kernels//kCalculateAmoebaCudaGrycuk.cu"
void kCalculateGrycukGbsaForces2(amoebaGpuContext amoebaGpu) 
# 380
{ 
# 384
gpuContext gpu = (amoebaGpu->gpuContext); 
# 390
static unsigned threadsPerBlock = (0); 
# 391
if (threadsPerBlock == (0)) { 
# 392
unsigned maxThreads; 
# 393
if ((gpu->sm_version) >= (SM_20)) { 
# 395
maxThreads = (512); } else { 
# 396
if ((gpu->sm_version) >= (SM_12)) { 
# 397
maxThreads = (128); } else { 
# 399
maxThreads = (64); }  }  
# 400
threadsPerBlock = std::min(getThreadsPerBlock(amoebaGpu, sizeof(GrycukChainRuleParticle), gpu->sharedMemoryPerBlock), maxThreads); 
# 401
}  
# 403
if (gpu->bOutputBufferPerWarp) { 
# 404
(cudaConfigureCall((gpu->sim).nonbond_blocks, threadsPerBlock, sizeof(GrycukChainRuleParticle) * threadsPerBlock)) ? ((void)0) : kCalculateAmoebaGrycukChainRuleN2ByWarp_kernel((gpu->psWorkUnit)->_pDevData); 
# 405
} else { 
# 406
(cudaConfigureCall((gpu->sim).nonbond_blocks, threadsPerBlock, sizeof(GrycukChainRuleParticle) * threadsPerBlock)) ? ((void)0) : kCalculateAmoebaGrycukChainRuleN2_kernel((gpu->psWorkUnit)->_pDevData); 
# 407
}  
# 408
{ cudaError_t status = cudaGetLastError(); if (status != (cudaSuccess)) { throw ((OpenMM::OpenMMException)((((((((std::basic_string< char, std::char_traits< char> , std::allocator< char> > )("Error: ")) + (cudaGetErrorString(status)))) + (" launching kernel "))) + ("kCalculateAmoebaCudaGrycukN2Forces")))); }  } ; 
# 410
if (0) { 
# 411
static int callId = 0; 
# 412
gpuContext gpu = (amoebaGpu->gpuContext); 
# 413
std::vector< int>  fileId; 
# 414
fileId.push_back((callId++)); 
# 415
VectorOfDoubleVectors outputVector; 
# 418
CUDAStream< float>  *temp = (new CUDAStream< float> ((3) * ((gpu->sim).paddedNumberOfAtoms), 1, "Temp1")); 
# 420
reduceAndCopyCUDAStreamFloat4(gpu->psForce4, temp, (1.0)); 
# 421
cudaLoadCudaFloatArray(gpu->natoms, 3, temp, outputVector, (gpu->psAtomIndex)->_pSysData, (1.0F) / (4.184000015F)); 
# 422
cudaLoadCudaFloatArray(gpu->natoms, 1, gpu->psBornForce, outputVector, (gpu->psAtomIndex)->_pSysData, (1.0F) / (4.184000015F)); 
# 423
cudaLoadCudaFloatArray(gpu->natoms, 1, gpu->psBornRadii, outputVector, (gpu->psAtomIndex)->_pSysData, (1.0F)); 
# 424
cudaWriteVectorOfDoubleVectorsToFile("GryF", fileId, outputVector); 
# 425
delete temp; 
# 427
}  
# 430
} 

# 1 "kCalculateAmoebaCudaGrycuk.compute_20.cudafe1.stub.c"
#define _NV_ANON_NAMESPACE _GLOBAL__N__45_kCalculateAmoebaCudaGrycuk_compute_20_cpp1_ii_e93cfd52
# 1 "kCalculateAmoebaCudaGrycuk.compute_20.cudafe1.stub.c"
#include "kCalculateAmoebaCudaGrycuk.compute_20.cudafe1.stub.c"
# 1 "kCalculateAmoebaCudaGrycuk.compute_20.cudafe1.stub.c"
#undef _NV_ANON_NAMESPACE
